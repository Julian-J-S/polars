Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.time_range", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 89, 115, 130, 131, 232, 250, 264, 617, 725, 1025], "refer": [0, 31, 99, 100, 103, 136, 250, 341, 344, 432, 465, 505, 524, 525, 526, 529, 617, 807, 810, 916, 980, 981, 982, 985, 1025], "input": [0, 65, 91, 99, 100, 103, 131, 132, 143, 154, 182, 196, 203, 217, 227, 230, 250, 257, 264, 356, 376, 426, 441, 457, 495, 552, 553, 554, 555, 558, 561, 562, 563, 564, 570, 576, 577, 585, 587, 588, 591, 599, 602, 603, 617, 628, 631, 641, 648, 674, 682, 687, 693, 697, 715, 725, 838, 894, 895, 897, 1025], "output": [0, 26, 28, 31, 32, 33, 34, 103, 131, 155, 156, 167, 177, 184, 193, 196, 223, 227, 250, 259, 264, 430, 431, 440, 474, 476, 478, 480, 482, 488, 549, 555, 565, 572, 587, 606, 617, 628, 649, 650, 659, 663, 664, 674, 693, 696, 699, 715, 725, 1013, 1025], "seri": [0, 1, 2, 23, 57, 66, 67, 68, 69, 72, 88, 90, 93, 95, 118, 122, 131, 139, 147, 149, 151, 152, 156, 157, 160, 161, 163, 165, 173, 174, 178, 189, 190, 205, 209, 212, 215, 216, 231, 250, 263, 264, 266, 267, 268, 269, 270, 271, 274, 275, 282, 290, 291, 295, 296, 304, 310, 312, 316, 320, 324, 326, 328, 333, 337, 338, 340, 345, 348, 358, 359, 365, 374, 376, 378, 379, 380, 381, 382, 384, 385, 386, 396, 397, 398, 404, 407, 409, 416, 417, 420, 421, 422, 428, 430, 460, 464, 465, 466, 467, 468, 469, 471, 477, 483, 484, 487, 490, 491, 498, 513, 518, 524, 525, 526, 529, 533, 539, 540, 541, 542, 548, 553, 554, 555, 556, 557, 559, 560, 566, 568, 569, 570, 572, 577, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 601, 602, 603, 604, 606, 607, 609, 617, 628, 645, 650, 698, 715, 1017, 1019, 1021, 1024, 1026, 1029, 1030, 1031, 1033], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 128, 248, 249, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 582, 585, 587, 588, 589, 590, 591, 592, 595, 599, 600, 601, 602, 603, 604, 606, 607, 608, 617, 628, 635, 637, 641, 642, 646, 649, 654, 655, 656, 657, 659, 663, 664, 668, 672, 679, 680, 681, 682, 688, 689, 690, 693, 694, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 724, 725, 739, 740, 749, 764, 765, 803, 834, 862, 863, 871, 914, 964, 976, 977, 993, 1002, 1003, 1013, 1025, 1032, 1033], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 71, 72, 110, 111, 112, 113, 114, 115, 117, 122, 171, 183, 250, 362, 422, 606, 617, 628, 714, 718, 1032, 1033], "express": [0, 71, 119, 122, 124, 131, 132, 143, 145, 147, 154, 180, 184, 192, 196, 203, 217, 227, 230, 232, 250, 257, 259, 260, 261, 263, 264, 275, 288, 292, 293, 294, 297, 303, 306, 309, 311, 317, 330, 331, 334, 341, 351, 352, 356, 359, 361, 362, 366, 368, 369, 370, 374, 376, 380, 383, 388, 391, 392, 400, 403, 422, 428, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 443, 445, 447, 449, 453, 454, 456, 457, 459, 460, 461, 462, 468, 482, 483, 484, 486, 488, 493, 495, 499, 500, 505, 506, 507, 508, 514, 515, 535, 536, 539, 545, 546, 548, 551, 552, 553, 554, 557, 558, 559, 561, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 584, 585, 586, 587, 588, 591, 593, 595, 596, 597, 598, 599, 600, 602, 603, 605, 606, 608, 609, 616, 628, 631, 635, 640, 641, 642, 645, 648, 668, 674, 677, 678, 679, 680, 682, 687, 693, 694, 697, 699, 715, 718, 725, 753, 754, 755, 763, 773, 800, 824, 838, 868, 871, 934, 941, 955, 956, 961, 962, 963, 964, 970, 971, 1025], "selector": [0, 603, 628], "extend": [0, 91, 250, 359, 617, 628, 724, 824, 1025], "function": [0, 31, 65, 66, 67, 68, 69, 89, 95, 99, 100, 103, 110, 120, 131, 136, 142, 149, 176, 183, 184, 214, 218, 221, 222, 232, 250, 260, 264, 303, 338, 353, 354, 355, 422, 430, 431, 457, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 543, 553, 554, 555, 568, 569, 570, 577, 578, 580, 587, 588, 591, 595, 603, 617, 628, 659, 663, 667, 690, 699, 715, 725, 763, 804, 818, 819, 820, 821, 834, 890, 914, 922, 936, 937, 943, 948, 1007, 1025, 1033], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 72, 73, 78, 79, 83, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 124, 130, 131, 134, 144, 153, 154, 155, 156, 167, 168, 169, 171, 182, 183, 187, 192, 193, 201, 208, 213, 214, 227, 229, 248, 250, 261, 264, 277, 278, 279, 280, 284, 289, 310, 339, 348, 351, 352, 369, 370, 375, 382, 384, 391, 424, 429, 453, 454, 456, 457, 465, 481, 482, 492, 505, 506, 524, 525, 526, 529, 543, 545, 546, 552, 557, 562, 584, 585, 586, 593, 596, 609, 617, 628, 633, 634, 642, 648, 649, 650, 667, 679, 680, 693, 715, 724, 725, 739, 740, 747, 752, 756, 764, 769, 772, 814, 834, 892, 914, 916, 932, 933, 943, 948, 980, 981, 982, 985, 1005, 1006, 1007, 1008, 1010, 1015, 1024, 1025, 1032], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 78, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 122, 131, 149, 153, 155, 156, 157, 168, 169, 208, 214, 216, 219, 250, 264, 289, 290, 292, 293, 294, 312, 316, 320, 324, 326, 328, 333, 337, 340, 356, 371, 378, 380, 381, 409, 422, 432, 468, 519, 520, 521, 524, 543, 555, 557, 562, 571, 572, 573, 574, 576, 577, 584, 585, 586, 593, 596, 605, 606, 609, 617, 628, 635, 640, 642, 649, 650, 654, 668, 678, 679, 680, 688, 715, 747, 749, 753, 754, 755, 774, 778, 782, 789, 791, 794, 799, 803, 806, 832, 877, 890, 943, 975, 976, 977, 980, 1005, 1006, 1008, 1016, 1025, 1032], "config": [0, 65, 196, 227, 250, 574, 628, 674, 693, 715], "except": [0, 158, 170, 172, 206, 250, 576, 628, 655, 715, 718, 833, 860, 995, 1006, 1015, 1025], "test": [0, 101, 103, 628, 651, 658, 715], "util": [0, 95, 580, 628, 642, 715], "sql": [0, 29, 50, 54, 101, 169, 250, 600, 628], "These": [1, 31, 128, 250, 345, 616, 804, 811], "allow": [1, 30, 31, 56, 78, 89, 110, 112, 113, 114, 115, 122, 124, 130, 167, 170, 171, 192, 193, 194, 213, 214, 219, 229, 250, 264, 334, 341, 344, 430, 467, 482, 524, 525, 526, 617, 654, 655, 659, 663, 679, 680, 688, 694, 715, 718, 725, 800, 807, 810, 918, 933, 935, 980, 981, 982, 1007, 1025, 1033], "you": [1, 13, 31, 35, 55, 65, 72, 88, 90, 91, 92, 94, 99, 100, 101, 103, 104, 108, 110, 117, 128, 131, 140, 144, 155, 156, 167, 180, 192, 193, 210, 213, 218, 232, 250, 264, 292, 293, 294, 330, 331, 337, 341, 344, 362, 376, 403, 422, 430, 432, 467, 472, 473, 474, 475, 476, 478, 479, 480, 509, 512, 524, 526, 557, 568, 578, 593, 596, 609, 617, 635, 638, 649, 650, 651, 655, 658, 678, 680, 715, 718, 724, 725, 753, 754, 755, 796, 797, 803, 807, 810, 838, 871, 918, 965, 968, 980, 982, 1006, 1015, 1025, 1033], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 123, 125, 1032], "custom": [1, 31, 66, 67, 68, 69, 123, 124, 125, 131, 232, 250, 264, 341, 344, 422, 430, 471, 555, 587, 617, 659, 699, 715, 725, 807, 810, 890, 922, 1025, 1033], "dedic": [1, 89, 167, 193, 250], "namespac": [1, 249, 616, 628, 714], "underli": [1, 74, 81, 88, 90, 91, 92, 94, 108, 119, 122, 124, 144, 167, 168, 193, 208, 250, 283, 310, 311, 315, 319, 321, 322, 323, 325, 327, 329, 332, 335, 336, 337, 339, 346, 347, 348, 349, 467, 481, 499, 501, 617, 715, 718, 724, 742, 772, 773, 777, 781, 783, 784, 788, 790, 793, 795, 798, 801, 802, 803, 805, 812, 813, 814, 815, 918, 932, 943, 955, 957, 1001, 1006, 1025], "polar": [1, 250, 616, 617, 622, 628, 715, 718, 1025, 1032], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 93, 119, 120, 214, 250, 617, 622, 628, 715, 1005, 1006, 1025, 1032], "without": [1, 6, 95, 102, 105, 109, 111, 115, 221, 222, 250, 264, 303, 338, 472, 473, 474, 475, 476, 478, 479, 480, 599, 617, 690, 715, 763, 769, 804, 834, 914, 1025], "requir": [1, 30, 31, 35, 65, 93, 117, 118, 136, 192, 214, 250, 280, 353, 354, 355, 424, 487, 524, 525, 526, 546, 596, 617, 680, 715, 740, 819, 820, 821, 892, 942, 980, 981, 982, 1006, 1007, 1010, 1025], "subclass": [1, 250], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 143, 145, 147, 169, 170, 180, 184, 192, 196, 227, 250, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 617, 618, 619, 622, 623, 624, 625, 641, 643, 654, 655, 669, 674, 677, 693, 715, 718, 763, 773, 825, 862, 863, 868, 871, 875, 885, 888, 941, 955, 959, 978, 996, 1025], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 72, 73, 80, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 122, 128, 130, 131, 132, 136, 140, 142, 145, 149, 154, 155, 156, 167, 169, 170, 171, 176, 177, 182, 184, 192, 193, 196, 197, 203, 209, 214, 217, 222, 223, 227, 230, 250, 260, 299, 301, 302, 307, 308, 338, 345, 350, 352, 353, 354, 355, 376, 378, 380, 381, 382, 384, 385, 386, 389, 394, 422, 432, 454, 457, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 489, 492, 494, 495, 507, 509, 512, 513, 524, 526, 537, 553, 554, 557, 558, 561, 563, 564, 565, 570, 572, 588, 591, 599, 602, 603, 608, 610, 611, 613, 616, 617, 618, 619, 622, 623, 624, 625, 628, 631, 638, 643, 648, 649, 650, 651, 654, 655, 658, 659, 663, 664, 668, 671, 674, 675, 679, 680, 682, 687, 690, 693, 694, 697, 715, 718, 722, 724, 761, 762, 804, 811, 817, 818, 819, 820, 821, 831, 838, 842, 845, 846, 848, 849, 850, 851, 858, 862, 890, 916, 920, 922, 928, 945, 948, 963, 965, 968, 969, 980, 982, 994, 1006, 1007, 1015, 1017, 1019, 1021, 1025, 1026, 1029, 1030, 1031, 1033], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 71, 88, 91, 93, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 124, 137, 140, 146, 158, 163, 165, 167, 168, 171, 172, 176, 179, 180, 187, 192, 193, 202, 206, 211, 213, 219, 221, 223, 250, 261, 262, 263, 281, 297, 303, 308, 309, 356, 361, 367, 371, 373, 375, 378, 381, 385, 386, 388, 392, 403, 409, 419, 422, 430, 431, 448, 455, 461, 465, 470, 487, 493, 495, 500, 506, 507, 508, 511, 514, 515, 517, 523, 536, 549, 562, 570, 572, 576, 578, 583, 595, 602, 603, 608, 617, 622, 628, 635, 638, 640, 642, 644, 659, 663, 668, 678, 681, 688, 694, 715, 718, 763, 765, 769, 771, 833, 840, 855, 860, 871, 877, 887, 890, 916, 949, 956, 962, 963, 964, 967, 970, 971, 973, 979, 995, 1025, 1032, 1033], "support": [1, 30, 31, 35, 72, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 111, 119, 124, 128, 130, 167, 168, 169, 193, 202, 203, 210, 214, 250, 417, 457, 493, 495, 518, 562, 617, 622, 654, 681, 682, 715, 718, 885, 949, 974, 1007, 1025, 1032], "target": [1, 30, 31, 70, 250, 505, 524, 525, 526, 572, 961, 980, 981, 982], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 128, 130, 131, 136, 140, 141, 142, 144, 149, 154, 155, 156, 157, 161, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 192, 193, 194, 196, 200, 202, 204, 205, 208, 210, 213, 214, 218, 219, 221, 222, 223, 224, 225, 227, 228, 232, 233, 249, 250, 260, 263, 264, 265, 274, 280, 287, 288, 290, 297, 303, 309, 310, 322, 330, 331, 334, 337, 338, 341, 344, 348, 352, 358, 374, 375, 376, 380, 392, 402, 403, 404, 408, 409, 418, 422, 423, 424, 427, 428, 430, 436, 437, 438, 439, 440, 441, 451, 452, 454, 457, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 486, 487, 488, 493, 494, 495, 505, 510, 511, 516, 517, 523, 524, 526, 527, 532, 544, 546, 547, 548, 549, 553, 554, 556, 557, 563, 566, 568, 570, 572, 577, 578, 580, 588, 591, 596, 599, 603, 606, 617, 628, 629, 632, 635, 638, 640, 642, 648, 649, 650, 652, 654, 655, 659, 663, 664, 668, 671, 674, 677, 678, 679, 680, 681, 688, 690, 693, 694, 695, 696, 699, 700, 714, 715, 718, 724, 725, 734, 740, 746, 749, 763, 769, 771, 772, 773, 784, 796, 797, 800, 803, 804, 807, 810, 814, 818, 823, 830, 831, 834, 839, 844, 845, 847, 852, 854, 856, 857, 859, 870, 871, 872, 876, 877, 886, 891, 892, 896, 898, 899, 900, 901, 903, 904, 906, 907, 909, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 929, 930, 931, 933, 936, 937, 938, 941, 942, 943, 944, 949, 950, 952, 961, 966, 967, 972, 973, 979, 980, 982, 983, 988, 989, 993, 994, 1001, 1003, 1005, 1006, 1007, 1009, 1010, 1012, 1014, 1015, 1025, 1032, 1033], "featur": [1, 35, 39, 56, 70, 250], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 75, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 140, 142, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 180, 182, 183, 184, 192, 193, 194, 202, 203, 204, 205, 206, 208, 213, 214, 218, 219, 221, 222, 223, 224, 232, 233, 249, 250, 257, 260, 262, 263, 264, 265, 275, 288, 297, 303, 309, 311, 321, 334, 338, 341, 345, 353, 354, 355, 358, 371, 374, 376, 389, 395, 403, 406, 417, 421, 422, 427, 430, 432, 436, 439, 441, 457, 465, 467, 469, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 488, 489, 492, 493, 494, 495, 497, 499, 500, 505, 506, 508, 510, 511, 513, 514, 516, 517, 518, 521, 523, 524, 525, 526, 529, 532, 549, 550, 553, 554, 556, 557, 559, 562, 563, 565, 566, 568, 569, 570, 572, 578, 586, 588, 591, 596, 597, 598, 599, 601, 603, 606, 607, 608, 617, 635, 638, 640, 642, 648, 649, 650, 653, 654, 655, 657, 659, 663, 664, 668, 678, 679, 680, 681, 682, 683, 688, 690, 691, 696, 699, 700, 715, 718, 723, 724, 725, 763, 771, 773, 783, 800, 804, 807, 811, 818, 819, 820, 821, 823, 831, 832, 833, 834, 837, 839, 841, 847, 852, 853, 854, 856, 857, 858, 860, 863, 871, 874, 885, 889, 890, 914, 916, 918, 920, 929, 931, 933, 934, 935, 936, 937, 938, 944, 945, 948, 949, 952, 955, 956, 961, 962, 964, 966, 967, 969, 970, 972, 973, 974, 977, 979, 980, 981, 982, 985, 988, 995, 1001, 1006, 1007, 1013, 1014, 1015, 1025, 1032, 1033], "primarili": 1, "intend": [1, 572], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 50, 51, 52, 53, 55, 56, 65, 72, 89, 91, 92, 94, 96, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 126, 131, 138, 140, 145, 146, 149, 154, 155, 156, 163, 165, 167, 168, 170, 174, 176, 179, 180, 183, 184, 192, 193, 194, 196, 203, 204, 205, 211, 212, 213, 214, 218, 219, 221, 222, 223, 224, 227, 230, 232, 250, 258, 264, 265, 275, 283, 284, 288, 290, 303, 307, 308, 337, 341, 344, 348, 350, 353, 354, 355, 361, 362, 375, 376, 389, 403, 422, 430, 432, 435, 457, 465, 467, 469, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 487, 488, 492, 494, 495, 497, 499, 501, 502, 503, 505, 506, 507, 509, 510, 514, 516, 518, 520, 522, 524, 525, 526, 529, 550, 553, 554, 555, 556, 557, 562, 564, 565, 568, 570, 572, 578, 580, 586, 588, 591, 593, 596, 597, 598, 599, 601, 602, 603, 606, 607, 609, 616, 617, 627, 628, 635, 637, 638, 643, 644, 648, 649, 650, 651, 655, 657, 658, 663, 674, 680, 682, 683, 688, 690, 691, 693, 697, 699, 715, 718, 725, 742, 743, 749, 763, 764, 803, 807, 810, 814, 817, 819, 820, 821, 825, 826, 831, 834, 838, 858, 871, 890, 897, 914, 916, 918, 920, 933, 936, 937, 938, 942, 944, 948, 952, 955, 957, 958, 961, 962, 963, 965, 966, 970, 972, 974, 976, 980, 981, 982, 985, 996, 1002, 1004, 1005, 1006, 1007, 1014, 1015, 1025, 1032, 1033], "librari": [1, 74, 81, 430, 617, 1033], "author": 1, "domain": [1, 506, 962], "specif": [1, 26, 30, 31, 88, 90, 92, 94, 99, 101, 102, 111, 121, 122, 167, 250, 341, 344, 471, 524, 525, 526, 529, 617, 715, 718, 807, 810, 922, 980, 981, 982, 985, 1025, 1033], "capabl": [1, 31, 250], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 91, 99, 100, 101, 102, 103, 110, 111, 117, 123, 125, 132, 140, 144, 155, 156, 170, 213, 217, 219, 223, 250, 260, 334, 338, 341, 345, 359, 376, 378, 381, 382, 384, 385, 386, 422, 441, 472, 473, 474, 475, 476, 478, 479, 480, 513, 608, 617, 631, 638, 640, 649, 650, 655, 679, 680, 687, 688, 696, 715, 724, 800, 804, 807, 811, 824, 838, 842, 846, 848, 849, 850, 851, 890, 936, 969, 1025, 1033], "mai": [1, 30, 39, 72, 88, 90, 91, 92, 94, 99, 102, 104, 111, 112, 115, 131, 142, 144, 155, 156, 170, 199, 200, 214, 221, 222, 223, 250, 264, 303, 309, 310, 322, 334, 338, 345, 416, 421, 422, 430, 440, 472, 473, 474, 475, 476, 478, 479, 480, 485, 486, 524, 526, 568, 569, 572, 578, 595, 617, 649, 650, 655, 659, 676, 677, 680, 690, 695, 699, 715, 724, 725, 763, 771, 772, 784, 800, 804, 811, 818, 834, 884, 889, 914, 940, 941, 980, 982, 1025, 1033], "exist": [1, 29, 30, 31, 65, 102, 111, 122, 227, 250, 282, 285, 286, 311, 693, 715, 773], "belong": [1, 155, 250, 649, 715], "core": [1, 214, 250, 1033], "cannot": [1, 89, 99, 100, 103, 104, 117, 126, 131, 194, 232, 250, 283, 432, 482, 501, 520, 534, 617, 678, 715, 725, 742, 933, 957, 976, 1025], "overrid": [1, 31, 88, 90, 91, 92, 93, 94, 99, 119, 120, 124, 126, 250, 432, 617, 715, 897, 1025], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 88, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 124, 125, 128, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 163, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 197, 199, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 259, 264, 282, 284, 285, 286, 306, 312, 334, 337, 338, 341, 344, 345, 356, 358, 362, 364, 368, 374, 376, 383, 398, 399, 406, 407, 409, 417, 420, 422, 431, 432, 440, 442, 443, 445, 457, 459, 461, 468, 470, 472, 473, 474, 475, 476, 478, 479, 480, 486, 487, 494, 495, 533, 534, 536, 539, 551, 552, 553, 555, 556, 560, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 587, 589, 590, 592, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 606, 607, 617, 623, 631, 635, 636, 637, 638, 640, 641, 642, 645, 647, 648, 649, 650, 652, 654, 655, 663, 664, 668, 670, 671, 672, 675, 677, 678, 679, 680, 681, 682, 687, 688, 689, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 747, 764, 765, 774, 800, 803, 804, 807, 810, 811, 823, 826, 867, 868, 877, 890, 897, 906, 907, 914, 919, 936, 937, 989, 991, 1002, 1003, 1004, 1025, 1029, 1032, 1033], "dt": [1, 65, 156, 250, 572, 574, 625, 650, 715, 718, 1031], "attempt": [1, 213, 250, 572], "do": [1, 31, 65, 71, 72, 110, 144, 155, 156, 170, 184, 208, 218, 221, 250, 303, 403, 457, 511, 517, 523, 593, 596, 609, 617, 635, 640, 649, 650, 655, 659, 668, 678, 679, 680, 715, 718, 724, 763, 871, 967, 973, 979, 1006, 1015, 1025], "so": [1, 56, 101, 110, 126, 153, 155, 156, 184, 250, 275, 288, 376, 406, 422, 511, 517, 523, 617, 649, 650, 715, 874, 967, 973, 979], "rais": [1, 14, 18, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 117, 118, 184, 192, 250, 283, 337, 421, 440, 499, 501, 513, 524, 525, 526, 529, 586, 742, 803, 889, 955, 957, 969, 980, 981, 982, 985, 1006, 1015, 1025], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 71, 74, 78, 79, 81, 88, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 122, 124, 131, 133, 134, 142, 145, 147, 149, 155, 156, 167, 168, 170, 180, 184, 190, 192, 208, 213, 221, 227, 232, 250, 259, 260, 264, 283, 289, 292, 293, 294, 298, 299, 300, 301, 302, 303, 311, 337, 341, 348, 359, 361, 362, 368, 388, 400, 403, 406, 421, 422, 430, 431, 441, 462, 471, 472, 473, 474, 475, 476, 478, 479, 480, 499, 501, 506, 524, 525, 526, 529, 539, 545, 553, 554, 557, 559, 562, 570, 572, 575, 580, 584, 585, 586, 588, 591, 593, 595, 596, 599, 602, 603, 606, 608, 609, 617, 628, 633, 634, 635, 640, 642, 645, 649, 650, 655, 659, 668, 678, 693, 694, 699, 715, 718, 725, 742, 747, 752, 753, 754, 755, 756, 759, 760, 761, 762, 763, 773, 803, 807, 814, 818, 824, 847, 868, 871, 874, 889, 922, 923, 924, 925, 926, 927, 929, 930, 931, 936, 937, 955, 957, 962, 980, 981, 982, 985, 1006, 1015, 1025, 1032], "attributeerror": 1, "howev": [1, 91, 142, 213, 250, 572, 818, 1025], "can": [1, 13, 31, 38, 55, 65, 79, 91, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 124, 126, 128, 131, 132, 133, 141, 149, 155, 156, 163, 165, 180, 184, 196, 203, 213, 217, 218, 221, 227, 232, 250, 264, 288, 299, 302, 303, 330, 331, 334, 337, 345, 359, 375, 376, 403, 422, 440, 448, 457, 467, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 487, 488, 489, 492, 495, 508, 511, 517, 523, 524, 526, 549, 557, 558, 562, 572, 578, 580, 606, 608, 616, 617, 627, 631, 635, 640, 649, 650, 674, 682, 687, 693, 695, 715, 718, 725, 763, 796, 797, 800, 803, 804, 811, 824, 838, 871, 890, 902, 914, 918, 936, 937, 938, 942, 945, 948, 964, 967, 973, 979, 980, 982, 1025, 1032], "other": [1, 18, 31, 55, 99, 100, 103, 110, 117, 118, 140, 144, 150, 169, 170, 176, 177, 192, 196, 222, 227, 248, 250, 257, 261, 263, 275, 292, 293, 294, 306, 351, 352, 366, 369, 370, 376, 380, 391, 398, 402, 408, 423, 429, 432, 436, 439, 447, 449, 453, 454, 456, 495, 535, 543, 545, 552, 553, 554, 561, 563, 564, 570, 572, 588, 591, 599, 602, 603, 617, 628, 638, 654, 655, 663, 664, 674, 690, 693, 694, 715, 718, 724, 753, 754, 755, 767, 845, 866, 870, 876, 891, 935, 1008, 1016, 1024, 1025], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 70, 72, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 122, 124, 128, 131, 140, 155, 156, 167, 169, 170, 174, 193, 205, 210, 212, 213, 223, 250, 258, 264, 275, 288, 291, 292, 293, 294, 334, 356, 365, 457, 467, 472, 473, 474, 475, 476, 478, 479, 480, 547, 572, 617, 635, 638, 649, 650, 651, 654, 655, 658, 715, 750, 753, 754, 755, 764, 800, 829, 847, 914, 918, 1001, 1004, 1025, 1032, 1033], "gener": [1, 101, 119, 120, 121, 122, 124, 136, 184, 194, 211, 213, 218, 250, 482, 488, 557, 572, 584, 585, 596, 606, 617, 715, 933, 944, 1002, 1025, 1033], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 629, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 862, 863, 869, 870, 871, 872, 875, 876, 877, 879, 884, 885, 886, 888, 890, 891, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 944, 945, 946, 947, 949, 950, 951, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1032, 1033], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 120, 121, 122, 124, 128, 183, 218, 250, 257, 459, 506, 552, 587, 617, 667, 715, 718, 962, 1033], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 119, 1032], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 71, 133, 134, 137, 144, 158, 160, 161, 172, 173, 174, 175, 176, 178, 181, 182, 184, 186, 187, 189, 190, 194, 199, 201, 202, 204, 205, 206, 211, 218, 220, 223, 224, 225, 228, 229, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 281, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 617, 631, 632, 634, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 715, 724, 725, 747, 756, 827, 835, 896, 897, 908, 911, 912, 917, 936, 937, 938, 950, 1012, 1016, 1025], "_expr": [1, 67], "hello": [1, 18, 51, 54, 511, 517, 523, 553, 877, 967, 973, 979], "return": [1, 9, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 80, 82, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 121, 127, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 149, 153, 154, 155, 156, 158, 160, 166, 167, 168, 169, 171, 172, 179, 180, 182, 183, 184, 192, 193, 194, 206, 207, 213, 214, 217, 218, 219, 223, 227, 229, 232, 235, 239, 244, 250, 260, 262, 266, 267, 268, 269, 270, 271, 274, 275, 282, 284, 285, 286, 287, 295, 296, 304, 309, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 345, 346, 347, 349, 358, 372, 376, 378, 379, 380, 381, 382, 384, 385, 386, 393, 396, 397, 399, 404, 406, 407, 409, 420, 421, 428, 432, 441, 443, 448, 459, 464, 468, 469, 482, 483, 489, 490, 491, 498, 500, 502, 504, 505, 506, 508, 509, 510, 512, 513, 516, 518, 519, 520, 521, 532, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 552, 553, 554, 555, 557, 558, 559, 562, 571, 572, 573, 574, 580, 582, 584, 585, 586, 587, 593, 596, 599, 602, 604, 605, 606, 608, 609, 617, 631, 633, 635, 638, 639, 640, 642, 649, 650, 651, 657, 658, 659, 667, 668, 678, 679, 680, 685, 686, 687, 688, 693, 696, 702, 706, 711, 715, 718, 721, 722, 723, 725, 732, 733, 735, 736, 741, 743, 746, 752, 764, 765, 771, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 811, 812, 813, 815, 818, 823, 831, 833, 834, 840, 842, 843, 845, 846, 848, 849, 850, 851, 855, 857, 860, 864, 865, 867, 872, 874, 875, 877, 888, 889, 896, 897, 902, 914, 920, 921, 933, 934, 935, 937, 945, 954, 955, 956, 958, 960, 961, 962, 964, 965, 966, 968, 969, 972, 974, 975, 976, 977, 988, 995, 997, 1009, 1011, 1012, 1016, 1025, 1032, 1033], "lit": [1, 376, 388, 568, 578, 593, 596, 608, 609, 617, 826, 1025], "alia": [1, 12, 65, 67, 69, 155, 156, 172, 220, 227, 250, 257, 261, 264, 282, 284, 285, 286, 287, 292, 293, 294, 298, 299, 300, 301, 302, 305, 309, 310, 311, 312, 315, 316, 317, 318, 320, 322, 323, 324, 326, 328, 333, 334, 335, 337, 338, 339, 340, 341, 343, 344, 345, 347, 348, 351, 352, 362, 364, 366, 369, 370, 374, 376, 379, 380, 388, 391, 392, 393, 400, 402, 403, 408, 423, 429, 431, 432, 444, 447, 449, 453, 454, 456, 458, 460, 461, 465, 467, 483, 499, 500, 503, 505, 506, 509, 512, 518, 520, 521, 522, 533, 534, 535, 536, 543, 544, 545, 551, 552, 553, 554, 555, 560, 561, 563, 564, 568, 569, 570, 572, 574, 575, 578, 579, 587, 588, 591, 595, 596, 602, 603, 606, 608, 617, 649, 650, 652, 658, 689, 693, 715, 772, 774, 780, 800, 803, 807, 809, 814, 860, 871, 897, 961, 962, 976, 977, 1025], "hi": [1, 617], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 511, 517, 523, 530, 877, 967, 973, 979, 986], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 98, 99, 100, 101, 102, 104, 108, 110, 115, 121, 131, 166, 170, 180, 183, 192, 202, 215, 220, 223, 250, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 286, 287, 291, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 363, 365, 367, 371, 373, 374, 375, 377, 378, 380, 381, 383, 387, 388, 389, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 446, 448, 450, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 510, 511, 513, 516, 517, 519, 520, 521, 523, 524, 527, 528, 530, 531, 533, 534, 536, 537, 540, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 572, 574, 576, 577, 578, 579, 580, 582, 588, 589, 590, 591, 592, 595, 596, 600, 601, 602, 603, 604, 607, 617, 636, 652, 655, 667, 681, 689, 694, 696, 715, 718, 739, 740, 803, 862, 863, 871, 936, 937, 949, 964, 980, 996, 1025, 1032], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 47, 50, 51, 52, 54, 56, 57, 65, 66, 67, 68, 69, 72, 73, 85, 88, 90, 91, 92, 93, 94, 95, 110, 115, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 194, 196, 199, 200, 202, 203, 204, 205, 206, 207, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 617, 631, 633, 635, 637, 638, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 746, 747, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 840, 842, 845, 846, 848, 849, 850, 851, 855, 857, 862, 863, 869, 870, 871, 872, 875, 876, 877, 879, 884, 885, 886, 888, 890, 891, 896, 897, 902, 910, 911, 912, 914, 916, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 936, 937, 940, 944, 945, 946, 947, 949, 950, 951, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1025, 1032], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 103, 110, 115, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 259, 260, 264, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 310, 311, 312, 315, 316, 318, 319, 321, 327, 329, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 389, 391, 392, 393, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 425, 426, 427, 428, 429, 431, 432, 447, 448, 449, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 494, 495, 496, 499, 502, 503, 505, 506, 507, 509, 512, 514, 518, 519, 520, 521, 522, 525, 529, 533, 534, 535, 536, 538, 539, 540, 544, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 575, 576, 577, 578, 579, 582, 584, 585, 586, 587, 588, 589, 590, 591, 593, 595, 596, 599, 601, 602, 603, 604, 606, 607, 608, 609, 617, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 724, 725, 726, 728, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 747, 749, 750, 751, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 774, 777, 778, 780, 781, 783, 785, 786, 787, 789, 791, 792, 793, 795, 799, 801, 803, 804, 805, 807, 809, 810, 811, 813, 814, 818, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 858, 859, 869, 870, 871, 872, 875, 876, 879, 884, 885, 886, 888, 890, 891, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 912, 914, 915, 916, 919, 920, 921, 922, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 944, 946, 947, 948, 949, 950, 952, 958, 959, 961, 962, 963, 965, 968, 970, 974, 978, 981, 985, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1025, 1032, 1033], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 122, 124, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 617, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 747, 749, 750, 751, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 819, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 859, 862, 863, 869, 870, 871, 872, 874, 875, 876, 879, 884, 885, 886, 888, 890, 891, 896, 898, 899, 900, 901, 902, 903, 904, 910, 911, 912, 914, 915, 916, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 961, 963, 964, 970, 976, 977, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1032, 1033], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 110, 115, 116, 117, 118, 121, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 261, 262, 263, 264, 265, 272, 274, 275, 276, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 305, 306, 309, 311, 312, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 336, 337, 338, 339, 340, 341, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 493, 494, 495, 496, 498, 500, 503, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 595, 599, 600, 601, 602, 603, 604, 606, 607, 608, 617, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 721, 724, 725, 727, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 749, 750, 751, 752, 756, 757, 760, 761, 762, 763, 764, 765, 766, 767, 771, 773, 775, 776, 779, 781, 786, 787, 793, 795, 796, 797, 802, 803, 804, 805, 808, 811, 813, 815, 817, 818, 819, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 840, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 859, 869, 870, 871, 872, 875, 876, 877, 879, 884, 885, 886, 888, 890, 891, 893, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 912, 914, 915, 916, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 944, 946, 948, 949, 950, 951, 952, 954, 956, 961, 962, 963, 964, 967, 968, 969, 970, 971, 973, 976, 977, 979, 980, 982, 983, 984, 986, 987, 993, 994, 995, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1025, 1032, 1033], "column_0": [1, 131, 218, 250], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 168, 250, 520, 521, 976, 977], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 66, 67, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 110, 120, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 576, 577, 578, 579, 580, 582, 585, 587, 588, 589, 590, 591, 592, 595, 599, 600, 601, 602, 603, 604, 607, 608, 617, 649, 650, 689, 690, 696, 699, 702, 711, 715, 718, 739, 740, 749, 803, 862, 863, 871, 964, 971, 976, 977, 1003, 1025, 1033], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 71, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 124, 135, 138, 141, 142, 143, 147, 152, 154, 155, 160, 167, 179, 182, 192, 193, 196, 203, 209, 210, 218, 219, 220, 221, 227, 230, 231, 250, 258, 280, 358, 364, 373, 430, 441, 442, 457, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 494, 495, 506, 519, 533, 534, 539, 543, 558, 562, 563, 570, 575, 583, 585, 586, 602, 603, 606, 617, 636, 637, 639, 641, 648, 649, 663, 674, 682, 688, 689, 693, 694, 697, 698, 715, 718, 740, 751, 764, 818, 823, 827, 830, 834, 835, 845, 914, 920, 922, 923, 924, 925, 926, 927, 929, 930, 931, 934, 962, 975, 996, 1005, 1008, 1025, 1033], "with_row_count": [1, 250, 432, 472, 473, 475, 478, 479, 480, 617, 715, 937, 1025], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 72, 77, 88, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 143, 148, 151, 153, 154, 166, 167, 169, 170, 176, 177, 182, 184, 188, 192, 193, 195, 196, 203, 209, 211, 213, 216, 217, 218, 219, 220, 221, 222, 227, 228, 229, 230, 250, 259, 264, 282, 284, 285, 286, 356, 376, 388, 422, 431, 440, 442, 457, 461, 495, 506, 533, 534, 536, 553, 554, 556, 558, 561, 562, 563, 564, 565, 567, 570, 572, 576, 582, 583, 588, 591, 594, 596, 597, 598, 599, 602, 603, 604, 606, 617, 631, 636, 637, 638, 641, 648, 654, 655, 663, 664, 671, 673, 674, 682, 687, 688, 689, 690, 693, 695, 696, 697, 715, 718, 721, 752, 764, 890, 914, 919, 961, 962, 970, 989, 991, 1002, 1003, 1007, 1025, 1032, 1033], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 97, 99, 100, 110, 131, 133, 144, 155, 158, 167, 168, 172, 193, 194, 204, 206, 207, 210, 212, 224, 235, 244, 250, 287, 303, 305, 310, 311, 318, 343, 348, 359, 372, 393, 401, 402, 407, 420, 422, 458, 459, 468, 478, 480, 482, 492, 497, 514, 517, 520, 521, 523, 526, 538, 540, 544, 545, 550, 552, 565, 572, 580, 582, 593, 596, 597, 598, 601, 604, 607, 609, 617, 633, 635, 649, 651, 658, 683, 685, 686, 691, 702, 711, 715, 718, 724, 746, 752, 763, 766, 772, 773, 780, 809, 814, 824, 833, 860, 869, 870, 875, 888, 890, 910, 929, 931, 933, 948, 952, 970, 976, 977, 982, 995, 997, 1004, 1009, 1014, 1025, 1032, 1033], "filter": [1, 66, 102, 110, 111, 115, 140, 163, 164, 165, 232, 250, 503, 522, 551, 578, 617, 638, 642, 652, 699, 715, 718, 936, 1025], "col": [1, 12, 28, 31, 65, 66, 67, 68, 92, 94, 110, 120, 122, 131, 143, 147, 154, 155, 156, 164, 166, 171, 180, 183, 192, 196, 203, 220, 227, 230, 250, 256, 257, 258, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 369, 370, 374, 375, 376, 377, 379, 380, 382, 383, 384, 387, 388, 389, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 432, 433, 434, 435, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 559, 561, 563, 564, 568, 569, 570, 574, 577, 578, 579, 580, 581, 588, 591, 594, 595, 603, 608, 617, 634, 641, 645, 648, 649, 650, 652, 657, 667, 674, 682, 689, 693, 694, 697, 715, 718, 739, 740, 749, 800, 803, 862, 863, 871, 920, 936, 937, 964, 980, 1025, 1033], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 47, 50, 55, 65, 66, 67, 69, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 131, 133, 134, 136, 137, 138, 141, 145, 146, 149, 150, 152, 153, 154, 155, 157, 161, 166, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 193, 194, 195, 196, 200, 202, 203, 204, 205, 211, 212, 213, 214, 215, 218, 221, 223, 224, 227, 228, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 256, 258, 261, 266, 267, 268, 269, 270, 271, 274, 275, 276, 289, 291, 293, 294, 295, 296, 298, 303, 304, 307, 308, 319, 323, 324, 326, 327, 333, 339, 340, 351, 352, 353, 354, 355, 357, 359, 360, 361, 365, 366, 369, 370, 371, 375, 378, 381, 382, 384, 385, 386, 388, 389, 391, 396, 397, 400, 403, 406, 413, 422, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 489, 490, 491, 492, 496, 497, 505, 506, 524, 526, 532, 535, 537, 541, 542, 543, 545, 550, 557, 558, 559, 560, 561, 563, 565, 567, 568, 572, 573, 575, 578, 584, 585, 589, 590, 593, 594, 595, 596, 605, 606, 607, 608, 609, 617, 633, 634, 637, 639, 643, 644, 648, 649, 654, 657, 662, 666, 668, 669, 673, 674, 677, 678, 680, 682, 683, 691, 693, 694, 695, 697, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 718, 726, 727, 728, 729, 730, 731, 732, 734, 736, 747, 750, 752, 757, 758, 763, 764, 765, 767, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 798, 799, 805, 806, 817, 819, 820, 821, 825, 829, 832, 834, 842, 844, 846, 848, 849, 850, 851, 857, 858, 871, 874, 890, 896, 899, 900, 910, 914, 915, 916, 922, 924, 925, 927, 928, 929, 931, 932, 933, 945, 946, 947, 951, 952, 954, 961, 962, 964, 980, 982, 988, 998, 999, 1002, 1007, 1008, 1012, 1014, 1015, 1025, 1033], "drop": [1, 91, 131, 139, 140, 219, 227, 250, 305, 307, 308, 401, 617, 638, 688, 693, 715, 766, 768, 769, 869, 914, 1025], "aaa": [1, 31, 250, 499, 533, 534, 955], "bbb": [1, 31, 250, 533, 534, 718], "ccc": [1, 31, 250, 533, 534], "ddd": [1, 31, 250, 533, 534], "eee": [1, 31, 250, 718], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 38, 56, 65, 66, 72, 75, 77, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 122, 130, 131, 132, 136, 138, 139, 140, 141, 143, 148, 151, 153, 154, 155, 156, 160, 161, 166, 167, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 197, 203, 204, 205, 209, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 230, 250, 260, 262, 264, 274, 311, 315, 319, 321, 322, 323, 325, 327, 329, 332, 335, 336, 339, 341, 344, 346, 347, 349, 356, 358, 362, 364, 376, 388, 398, 404, 418, 421, 422, 432, 438, 440, 442, 457, 461, 466, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 487, 494, 495, 504, 520, 521, 524, 525, 526, 527, 529, 536, 551, 553, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 631, 637, 638, 639, 641, 648, 649, 650, 654, 655, 659, 660, 661, 662, 663, 665, 666, 667, 669, 671, 673, 674, 675, 682, 683, 684, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 715, 718, 722, 723, 764, 775, 776, 777, 781, 783, 784, 788, 790, 793, 795, 798, 801, 802, 805, 807, 808, 810, 812, 813, 815, 823, 866, 872, 886, 889, 914, 920, 942, 960, 976, 977, 980, 981, 982, 983, 985, 993, 1002, 1003, 1025, 1033], "txt": [1, 12, 110], "utf8": [1, 10, 18, 56, 73, 91, 95, 99, 100, 110, 119, 121, 124, 141, 142, 143, 149, 195, 213, 250, 341, 344, 409, 432, 498, 502, 505, 506, 508, 509, 518, 519, 520, 521, 524, 525, 526, 527, 529, 562, 564, 617, 639, 641, 673, 715, 718, 807, 810, 856, 877, 954, 958, 961, 962, 964, 965, 974, 975, 976, 977, 980, 981, 982, 983, 985, 1025], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 697, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 156, 183, 250, 257, 264, 275, 284, 289, 290, 292, 293, 294, 299, 302, 305, 309, 317, 337, 341, 344, 351, 352, 360, 361, 366, 369, 370, 371, 375, 376, 379, 382, 384, 385, 386, 388, 391, 402, 403, 408, 423, 429, 431, 432, 447, 449, 453, 454, 457, 458, 459, 460, 465, 472, 473, 474, 475, 476, 478, 479, 480, 499, 503, 506, 509, 512, 514, 515, 518, 520, 521, 522, 532, 535, 543, 545, 552, 555, 557, 561, 564, 570, 575, 585, 587, 603, 606, 608, 617, 650, 667, 715, 718, 749, 803, 871], "tp": [1, 68], "cast": [1, 67, 68, 73, 88, 149, 155, 156, 183, 214, 227, 250, 263, 290, 301, 302, 310, 341, 344, 432, 456, 459, 467, 507, 508, 532, 537, 543, 564, 617, 649, 650, 667, 693, 715, 718, 749, 761, 762, 772, 807, 810, 918, 963, 964, 994, 1003, 1008, 1025], "int64": [1, 2, 31, 33, 67, 68, 95, 99, 141, 149, 155, 156, 171, 183, 195, 208, 214, 250, 277, 278, 279, 280, 301, 302, 316, 320, 324, 326, 328, 333, 340, 356, 459, 467, 507, 537, 543, 557, 562, 576, 584, 585, 586, 596, 602, 617, 634, 639, 649, 650, 652, 657, 667, 673, 696, 715, 737, 738, 739, 740, 761, 762, 778, 782, 789, 791, 794, 799, 806, 918, 935, 994, 1006, 1007, 1008, 1025], "int8": [1, 68, 149, 250, 301, 302, 537, 593, 596, 609, 617, 761, 762, 766, 897, 921, 994, 1012, 1025], "int16": [1, 68, 301, 302, 537, 617, 718, 761, 762, 897, 994, 1004, 1025], "int32": [1, 68, 88, 91, 95, 121, 122, 155, 156, 168, 250, 289, 322, 349, 543, 596, 617, 649, 650, 715, 718, 784, 815, 896, 1008, 1025], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 68, 72, 73, 88, 90, 91, 92, 93, 94, 95, 103, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 259, 263, 264, 276, 281, 282, 284, 285, 286, 289, 290, 297, 306, 307, 308, 356, 358, 360, 361, 362, 364, 367, 371, 373, 375, 376, 378, 381, 382, 383, 384, 385, 386, 388, 392, 398, 402, 403, 408, 409, 411, 423, 431, 448, 455, 457, 459, 461, 465, 470, 487, 493, 495, 504, 507, 514, 536, 547, 549, 551, 553, 554, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 575, 576, 577, 578, 579, 582, 587, 588, 589, 590, 591, 592, 595, 597, 598, 601, 602, 603, 604, 607, 617, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 724, 749, 765, 767, 817, 818, 826, 838, 845, 856, 870, 871, 876, 891, 919, 935, 960, 963, 970, 993, 1007, 1011, 1025, 1032], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 110, 116, 117, 118, 124, 131, 132, 133, 134, 137, 140, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 176, 177, 179, 180, 182, 183, 184, 185, 189, 193, 198, 203, 206, 207, 208, 209, 210, 211, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 261, 263, 264, 276, 277, 278, 279, 281, 287, 289, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 311, 315, 320, 327, 328, 329, 335, 336, 338, 339, 340, 341, 344, 345, 346, 347, 349, 351, 352, 357, 358, 360, 361, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 385, 386, 388, 391, 392, 393, 400, 401, 402, 403, 404, 407, 408, 416, 417, 420, 423, 426, 429, 431, 432, 447, 449, 453, 454, 456, 457, 459, 460, 461, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 489, 493, 494, 495, 496, 499, 509, 510, 512, 513, 514, 516, 518, 520, 521, 524, 533, 534, 535, 536, 538, 539, 540, 543, 544, 545, 552, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 575, 577, 578, 582, 586, 587, 588, 589, 590, 591, 592, 601, 602, 603, 604, 606, 607, 608, 617, 631, 633, 634, 635, 638, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 724, 727, 734, 737, 738, 739, 746, 750, 751, 753, 763, 765, 767, 781, 782, 788, 790, 793, 794, 795, 796, 797, 798, 802, 804, 805, 806, 807, 810, 811, 812, 813, 825, 826, 833, 834, 837, 838, 840, 845, 848, 849, 850, 851, 855, 869, 870, 871, 872, 875, 876, 884, 885, 888, 891, 897, 903, 910, 911, 912, 914, 916, 920, 925, 927, 928, 929, 930, 931, 933, 935, 945, 949, 950, 955, 965, 966, 968, 969, 972, 974, 976, 977, 980, 993, 995, 996, 997, 1004, 1007, 1008, 1009, 1016, 1025, 1033], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 66, 68, 72, 73, 91, 93, 95, 103, 110, 120, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 153, 154, 155, 158, 160, 161, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 208, 212, 213, 214, 215, 217, 218, 221, 222, 224, 225, 227, 230, 233, 234, 235, 236, 237, 238, 240, 243, 244, 250, 257, 264, 281, 376, 388, 398, 409, 411, 457, 459, 487, 520, 524, 547, 549, 553, 554, 556, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 577, 578, 579, 582, 587, 588, 589, 590, 591, 592, 601, 603, 604, 607, 617, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 648, 649, 654, 657, 663, 666, 668, 671, 672, 673, 674, 678, 681, 682, 687, 690, 693, 694, 697, 700, 701, 702, 703, 704, 705, 707, 710, 711, 715, 718, 765, 838, 856, 976, 980, 1011, 1025], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 57, 65, 66, 68, 69, 72, 88, 91, 92, 93, 94, 95, 97, 100, 116, 122, 131, 133, 134, 137, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 170, 171, 172, 174, 176, 179, 180, 182, 184, 185, 186, 189, 198, 203, 206, 207, 208, 209, 210, 213, 216, 221, 223, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 257, 258, 261, 282, 285, 286, 287, 289, 290, 291, 292, 293, 294, 303, 304, 305, 306, 311, 312, 316, 337, 339, 340, 341, 344, 346, 352, 355, 356, 359, 361, 365, 366, 369, 370, 372, 373, 376, 379, 382, 384, 385, 386, 388, 391, 393, 400, 402, 403, 404, 407, 408, 413, 419, 420, 423, 447, 449, 454, 456, 457, 458, 459, 461, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 489, 495, 500, 508, 509, 512, 513, 532, 535, 536, 538, 540, 544, 545, 555, 556, 559, 560, 561, 563, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 582, 586, 587, 588, 589, 590, 591, 592, 595, 601, 603, 604, 607, 617, 633, 634, 635, 640, 641, 642, 643, 644, 646, 648, 649, 650, 651, 653, 655, 656, 657, 658, 661, 662, 663, 668, 676, 677, 678, 681, 682, 683, 684, 685, 686, 692, 693, 695, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 724, 727, 731, 734, 746, 749, 751, 753, 759, 763, 764, 765, 766, 767, 773, 774, 775, 776, 777, 778, 803, 805, 806, 807, 808, 810, 812, 813, 821, 824, 833, 834, 837, 838, 870, 871, 872, 875, 876, 879, 888, 891, 896, 897, 903, 910, 911, 912, 914, 915, 916, 920, 922, 923, 924, 926, 927, 930, 933, 935, 945, 951, 956, 964, 965, 969, 995, 1009, 1012, 1016, 1025, 1033], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 57, 66, 68, 72, 88, 91, 92, 93, 94, 131, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 220, 221, 222, 223, 224, 225, 227, 228, 235, 243, 244, 250, 257, 261, 264, 281, 289, 301, 302, 306, 311, 334, 336, 339, 350, 352, 360, 361, 367, 372, 373, 375, 393, 394, 395, 402, 404, 408, 423, 454, 456, 462, 464, 465, 466, 469, 472, 473, 474, 475, 476, 478, 479, 480, 483, 495, 500, 504, 509, 512, 513, 535, 538, 540, 552, 553, 555, 568, 569, 570, 575, 578, 587, 603, 617, 635, 636, 637, 638, 639, 640, 641, 642, 645, 646, 649, 650, 651, 653, 654, 656, 658, 659, 663, 666, 668, 671, 673, 674, 676, 677, 678, 681, 682, 685, 686, 689, 690, 692, 693, 695, 696, 702, 710, 711, 715, 718, 724, 751, 757, 761, 762, 767, 800, 813, 834, 862, 863, 870, 872, 876, 891, 903, 916, 920, 925, 927, 929, 931, 935, 956, 960, 965, 969, 994, 1025, 1032, 1033], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 72, 116, 135, 136, 137, 138, 139, 141, 143, 147, 148, 150, 155, 156, 158, 160, 162, 169, 173, 174, 175, 177, 178, 181, 184, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 207, 212, 213, 214, 215, 221, 222, 223, 224, 225, 250, 257, 261, 279, 302, 311, 315, 335, 337, 338, 345, 347, 349, 357, 372, 375, 393, 402, 408, 423, 432, 456, 465, 469, 479, 495, 527, 538, 540, 555, 568, 569, 572, 578, 587, 603, 617, 636, 637, 639, 641, 645, 649, 650, 651, 653, 654, 658, 664, 666, 669, 671, 673, 674, 685, 686, 690, 696, 715, 718, 731, 739, 773, 777, 784, 803, 804, 811, 813, 857, 870, 876, 891, 897, 920, 930, 983, 1025, 1033], "float32": [1, 28, 68, 149, 212, 213, 250, 586, 715, 718, 841, 896, 1025], "lazi": [1, 50, 51, 52, 53, 55, 68, 72, 110, 122, 170, 183, 250, 264, 580, 593, 596, 609, 617, 654, 655, 694, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 1032, 1033], "i16": [1, 68, 487, 617, 718, 897, 1004, 1025, 1033], "i32": [1, 68, 88, 91, 95, 121, 122, 196, 250, 289, 322, 349, 487, 513, 608, 617, 674, 715, 784, 815, 896, 969, 1025, 1033], "f32": [1, 68, 140, 212, 250, 403, 465, 487, 565, 575, 617, 638, 715, 718, 871, 896, 916, 1025], "i64": [1, 2, 15, 19, 47, 50, 52, 66, 67, 68, 69, 72, 88, 90, 91, 92, 93, 94, 95, 110, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 165, 169, 170, 173, 176, 177, 178, 182, 183, 184, 185, 188, 189, 190, 191, 194, 196, 199, 200, 202, 203, 205, 206, 207, 209, 215, 217, 218, 219, 220, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 240, 243, 244, 250, 257, 259, 263, 264, 277, 278, 279, 280, 281, 287, 290, 292, 293, 294, 299, 300, 301, 302, 305, 306, 316, 318, 320, 324, 326, 328, 333, 340, 343, 356, 358, 359, 361, 362, 363, 364, 366, 367, 372, 373, 374, 375, 376, 379, 382, 384, 385, 386, 388, 390, 393, 401, 402, 403, 404, 405, 406, 407, 408, 410, 412, 414, 415, 416, 417, 418, 419, 420, 423, 424, 428, 430, 431, 447, 448, 449, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 482, 484, 485, 487, 488, 489, 493, 494, 495, 514, 515, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 548, 551, 553, 555, 557, 561, 562, 564, 568, 569, 570, 574, 575, 576, 577, 578, 582, 584, 585, 586, 587, 588, 591, 595, 599, 600, 603, 604, 608, 617, 631, 633, 635, 637, 638, 641, 642, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 663, 664, 665, 667, 668, 671, 672, 674, 676, 677, 681, 682, 684, 685, 686, 687, 688, 689, 690, 693, 695, 697, 698, 699, 701, 702, 703, 704, 707, 710, 711, 715, 718, 724, 725, 737, 738, 739, 740, 746, 749, 753, 756, 759, 760, 761, 762, 765, 778, 780, 782, 789, 791, 794, 799, 806, 809, 824, 826, 827, 833, 837, 845, 869, 870, 871, 872, 875, 876, 884, 885, 886, 888, 890, 891, 902, 919, 920, 923, 926, 930, 933, 936, 937, 940, 944, 945, 949, 950, 993, 995, 996, 997, 1003, 1009, 1010, 1013, 1016, 1025, 1032, 1033], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 304, 617, 757, 946, 998, 1025], "mathshortcut": [1, 69], "": [1, 2, 28, 31, 50, 53, 57, 69, 88, 95, 99, 100, 101, 111, 124, 132, 138, 140, 142, 143, 154, 155, 161, 169, 170, 182, 184, 189, 190, 196, 203, 207, 211, 217, 219, 220, 221, 227, 250, 264, 318, 341, 344, 356, 389, 407, 409, 416, 417, 420, 430, 441, 448, 451, 452, 457, 458, 467, 471, 495, 499, 505, 506, 509, 510, 512, 514, 516, 518, 519, 521, 524, 525, 526, 529, 530, 532, 533, 534, 553, 554, 558, 562, 565, 570, 576, 579, 580, 588, 591, 599, 602, 603, 617, 631, 637, 638, 641, 648, 649, 655, 674, 682, 687, 688, 689, 693, 699, 715, 718, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 746, 747, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 773, 780, 796, 797, 804, 807, 810, 811, 818, 820, 821, 824, 825, 826, 827, 829, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 869, 872, 875, 877, 879, 884, 885, 886, 888, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 910, 911, 912, 914, 915, 916, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 944, 945, 946, 947, 949, 950, 952, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1025], "_": [1, 65, 69, 184, 211, 250, 506, 520, 962, 976, 1002, 1025], "squar": [1, 69, 232, 389, 496, 617, 699, 858, 951, 1025], "cube": [1, 69, 460, 617], "s2": [1, 118, 149, 250, 724, 751, 767, 845, 857, 890, 903, 935, 1007, 1016, 1025], "renam": [1, 91, 99, 100, 196, 227, 230, 250, 259, 431, 444, 534, 599, 602, 617, 674, 693, 697, 715, 771, 779, 991, 1003, 1025], "n2": [1, 422], "in_plac": [1, 160, 201, 225, 250, 917, 919, 943, 950, 1025], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 71, 72, 73, 88, 89, 93, 95, 97, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 130, 132, 133, 134, 137, 146, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 196, 203, 209, 213, 214, 217, 218, 219, 220, 221, 223, 227, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 258, 260, 261, 262, 263, 264, 275, 282, 283, 285, 286, 289, 298, 299, 300, 301, 302, 310, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 394, 395, 399, 418, 421, 422, 429, 443, 453, 454, 456, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 487, 488, 492, 494, 495, 499, 501, 503, 507, 508, 513, 519, 520, 522, 524, 525, 526, 529, 533, 534, 539, 546, 549, 552, 553, 554, 555, 557, 558, 559, 565, 566, 572, 578, 584, 585, 593, 596, 602, 606, 608, 609, 617, 631, 633, 634, 635, 640, 642, 644, 648, 649, 650, 654, 655, 657, 659, 663, 668, 674, 678, 679, 680, 682, 687, 688, 689, 693, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 718, 722, 723, 724, 725, 735, 742, 747, 751, 752, 764, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 817, 819, 820, 821, 827, 831, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 858, 862, 863, 886, 889, 903, 911, 912, 914, 918, 928, 935, 948, 950, 955, 957, 959, 963, 964, 969, 975, 976, 978, 980, 981, 982, 985, 1006, 1007, 1015, 1016, 1025, 1032, 1033], "s3": [1, 30, 102, 111, 115, 250, 890, 1025], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 72, 116, 120, 131, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 150, 153, 158, 160, 169, 173, 174, 175, 178, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 207, 212, 213, 214, 215, 221, 222, 224, 225, 227, 250, 261, 263, 276, 297, 299, 302, 303, 307, 308, 311, 375, 392, 401, 402, 403, 408, 423, 449, 456, 460, 461, 469, 470, 487, 493, 495, 510, 516, 524, 536, 540, 552, 556, 560, 565, 566, 567, 569, 570, 575, 577, 582, 587, 588, 589, 590, 591, 592, 601, 603, 604, 607, 617, 636, 637, 638, 639, 641, 645, 651, 654, 658, 659, 668, 671, 673, 674, 685, 686, 690, 693, 696, 715, 718, 763, 784, 834, 857, 869, 870, 871, 876, 891, 910, 914, 920, 922, 925, 927, 929, 931, 966, 972, 980, 1025, 1033], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 72, 131, 136, 137, 149, 156, 158, 162, 193, 196, 206, 221, 222, 225, 227, 243, 250, 257, 261, 263, 276, 297, 299, 302, 304, 307, 308, 311, 315, 335, 346, 347, 375, 380, 388, 392, 401, 415, 418, 456, 464, 469, 471, 477, 479, 489, 493, 506, 527, 540, 555, 563, 568, 569, 617, 650, 651, 653, 658, 674, 685, 690, 693, 710, 715, 765, 777, 788, 790, 798, 804, 805, 811, 812, 845, 857, 869, 886, 920, 922, 928, 930, 932, 945, 962, 983, 1025], "27": [1, 69, 243, 302, 322, 336, 349, 617, 710, 1025, 1033], "16": [1, 31, 43, 59, 67, 155, 156, 227, 250, 299, 302, 375, 449, 460, 513, 555, 568, 574, 575, 578, 617, 649, 650, 678, 693, 715, 718, 804, 811, 910, 946, 969, 998, 1025], "64": [1, 42, 45, 61, 67, 69, 449, 460, 617, 680, 715, 910, 1025], "25": [1, 31, 69, 95, 122, 137, 155, 156, 170, 223, 227, 250, 305, 317, 322, 338, 345, 349, 472, 473, 474, 475, 476, 478, 479, 480, 545, 572, 580, 606, 617, 649, 650, 655, 661, 691, 693, 715, 718, 765, 766, 779, 804, 811, 817, 834, 910, 914, 1025], "125": [1, 31, 69, 250, 257, 617, 910, 1025], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 183, 214, 250, 459, 558, 579, 617, 667, 715, 725, 1006, 1007, 1025], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 70, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 124, 128, 131, 136, 140, 144, 146, 147, 149, 166, 167, 168, 182, 183, 192, 193, 209, 210, 213, 214, 219, 221, 250, 257, 261, 264, 289, 339, 351, 352, 361, 366, 369, 370, 380, 391, 398, 403, 429, 430, 432, 444, 447, 449, 453, 454, 456, 457, 459, 469, 471, 483, 513, 524, 525, 526, 529, 535, 539, 545, 552, 553, 555, 565, 577, 586, 608, 617, 638, 644, 667, 688, 715, 718, 724, 725, 767, 805, 826, 845, 857, 866, 871, 897, 920, 922, 934, 937, 969, 980, 981, 982, 985, 996, 1005, 1006, 1007, 1025, 1032, 1033], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 136, 183, 214, 250, 459, 617, 667, 715, 1007, 1025, 1032], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 991, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1032], "width": [2, 24, 31, 99, 100, 250, 277, 278, 279, 280, 510, 516, 532, 715, 737, 738, 739, 740, 966, 972, 988], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 142, 145, 146, 148, 157, 158, 159, 161, 166, 167, 168, 170, 172, 173, 174, 178, 179, 180, 190, 192, 194, 198, 199, 200, 202, 204, 205, 206, 207, 212, 215, 217, 221, 224, 226, 228, 235, 244, 250, 257, 281, 287, 292, 293, 294, 303, 305, 353, 354, 355, 359, 360, 361, 367, 371, 372, 393, 399, 401, 406, 407, 416, 417, 420, 421, 422, 456, 458, 459, 460, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 493, 497, 505, 507, 510, 513, 514, 516, 518, 520, 521, 527, 532, 538, 539, 540, 544, 550, 552, 557, 565, 566, 571, 573, 574, 580, 582, 584, 585, 590, 592, 593, 596, 597, 598, 601, 602, 603, 604, 605, 607, 609, 617, 631, 633, 642, 643, 644, 651, 655, 658, 668, 676, 677, 680, 681, 683, 685, 686, 687, 691, 692, 695, 702, 711, 715, 732, 733, 746, 747, 751, 752, 753, 754, 755, 763, 766, 818, 819, 820, 821, 824, 825, 826, 832, 833, 834, 857, 859, 860, 867, 868, 869, 874, 875, 884, 885, 888, 889, 890, 899, 903, 904, 906, 907, 908, 909, 910, 913, 916, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 940, 941, 944, 949, 952, 961, 963, 966, 969, 970, 972, 974, 976, 977, 983, 988, 994, 995, 996, 997, 1004, 1009, 1014, 1025, 1032, 1033], "inner": [2, 47, 56, 73, 121, 169, 222, 250, 277, 278, 279, 280, 306, 409, 543, 617, 654, 690, 696, 715, 737, 738, 739, 740, 767, 877, 1008, 1025], "polarsdatatyp": [2, 47, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 131, 141, 250, 264, 289, 356, 430, 432, 507, 555, 557, 562, 576, 586, 587, 593, 596, 609, 617, 639, 715, 718, 725, 747, 897, 963, 1025], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 72, 91, 99, 100, 110, 115, 130, 132, 133, 137, 140, 146, 149, 150, 162, 169, 174, 175, 181, 184, 186, 199, 200, 203, 204, 205, 209, 214, 217, 220, 222, 224, 227, 233, 250, 259, 263, 264, 274, 281, 283, 292, 293, 294, 297, 299, 302, 305, 307, 308, 316, 320, 324, 326, 328, 333, 340, 352, 353, 354, 355, 356, 359, 360, 361, 362, 367, 375, 382, 383, 384, 385, 386, 392, 394, 395, 401, 402, 405, 406, 408, 410, 416, 421, 422, 423, 432, 454, 455, 458, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 487, 489, 494, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 516, 518, 520, 521, 522, 532, 533, 534, 543, 551, 553, 561, 563, 564, 566, 576, 586, 597, 598, 602, 608, 617, 631, 633, 638, 644, 653, 654, 666, 676, 677, 682, 687, 689, 690, 693, 694, 696, 700, 715, 725, 734, 742, 752, 753, 766, 769, 778, 782, 789, 791, 794, 799, 806, 819, 820, 821, 824, 826, 831, 850, 851, 862, 863, 869, 876, 884, 889, 890, 891, 909, 910, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 935, 940, 941, 945, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 966, 968, 969, 972, 974, 976, 977, 978, 1004, 1006, 1007, 1008, 1015, 1025, 1032, 1033], "nest": [2, 47, 56, 95, 142, 250, 628, 818, 1025, 1032, 1033], "fix": [2, 103, 120, 122, 348, 472, 473, 474, 475, 476, 478, 479, 480, 617, 814], "length": [2, 12, 47, 72, 110, 120, 155, 156, 202, 250, 303, 338, 345, 417, 422, 441, 471, 472, 473, 474, 475, 476, 478, 479, 480, 493, 510, 512, 516, 518, 532, 557, 593, 596, 597, 598, 609, 617, 649, 650, 668, 681, 715, 751, 763, 764, 773, 804, 811, 859, 885, 890, 908, 914, 922, 923, 924, 925, 926, 927, 929, 930, 931, 949, 966, 968, 972, 974, 988, 1025], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 174, 176, 177, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 196, 197, 199, 200, 202, 203, 204, 205, 206, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 232, 235, 242, 244, 250, 257, 259, 261, 263, 264, 274, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 292, 293, 294, 298, 299, 300, 301, 302, 303, 305, 306, 310, 311, 312, 318, 334, 337, 338, 339, 341, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 359, 361, 362, 366, 367, 368, 369, 370, 371, 372, 375, 376, 380, 389, 391, 393, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 416, 417, 418, 420, 421, 422, 423, 424, 425, 429, 430, 431, 432, 443, 447, 449, 453, 454, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 534, 535, 536, 538, 539, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 617, 631, 633, 635, 637, 638, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 654, 655, 658, 659, 663, 664, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 699, 702, 709, 711, 715, 718, 721, 724, 725, 734, 740, 741, 742, 743, 744, 745, 746, 747, 749, 752, 753, 754, 755, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 774, 780, 800, 803, 804, 805, 807, 809, 810, 811, 814, 817, 818, 819, 820, 821, 824, 825, 826, 827, 832, 833, 834, 837, 838, 847, 853, 854, 858, 860, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 884, 885, 886, 888, 889, 890, 891, 892, 897, 910, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 941, 944, 948, 949, 950, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 988, 989, 991, 995, 996, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1013, 1014, 1015, 1016, 1025, 1032], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 70, 88, 90, 91, 92, 94, 97, 99, 101, 108, 110, 126, 131, 139, 141, 153, 154, 155, 156, 157, 162, 167, 170, 177, 182, 192, 193, 196, 213, 220, 223, 227, 230, 232, 250, 281, 282, 283, 284, 315, 329, 334, 335, 338, 341, 345, 346, 356, 359, 367, 371, 421, 430, 457, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 488, 489, 492, 498, 501, 502, 507, 509, 510, 511, 516, 517, 523, 524, 532, 562, 576, 580, 597, 598, 599, 602, 608, 610, 611, 613, 617, 618, 619, 623, 624, 625, 649, 650, 651, 653, 655, 658, 659, 664, 668, 674, 680, 689, 693, 697, 699, 715, 725, 741, 742, 743, 752, 777, 795, 800, 801, 804, 807, 811, 812, 824, 832, 837, 889, 916, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 945, 948, 954, 957, 958, 963, 965, 966, 967, 972, 973, 979, 980, 988, 1017, 1019, 1021, 1025, 1026, 1029, 1030, 1031, 1033], "size": [2, 13, 35, 99, 100, 120, 121, 122, 124, 126, 142, 155, 221, 250, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 557, 584, 585, 597, 598, 617, 649, 680, 715, 818, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 1025, 1033], "datatyp": [2, 28, 33, 47, 63, 88, 90, 91, 92, 94, 96, 103, 105, 109, 124, 141, 143, 149, 195, 250, 289, 356, 404, 487, 504, 543, 562, 576, 586, 617, 628, 641, 673, 696, 715, 725, 747, 765, 847, 852, 854, 856, 872, 942, 960, 1008, 1025], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 72, 73, 91, 93, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 137, 140, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 166, 167, 170, 172, 173, 174, 175, 176, 178, 180, 182, 184, 185, 186, 188, 192, 193, 194, 199, 200, 203, 204, 205, 206, 209, 210, 214, 217, 221, 222, 223, 224, 233, 234, 236, 237, 238, 240, 241, 250, 256, 257, 258, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 290, 291, 292, 293, 294, 295, 296, 297, 299, 302, 303, 305, 307, 308, 311, 315, 329, 335, 346, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 397, 400, 401, 405, 406, 407, 410, 412, 413, 414, 416, 419, 420, 424, 426, 428, 429, 430, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 514, 515, 518, 520, 521, 522, 532, 535, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 554, 556, 561, 564, 566, 568, 569, 570, 577, 578, 583, 586, 588, 589, 590, 591, 592, 595, 596, 597, 598, 603, 608, 617, 631, 638, 643, 644, 649, 650, 652, 653, 655, 660, 661, 662, 663, 665, 666, 669, 671, 676, 677, 682, 683, 684, 687, 690, 691, 696, 700, 701, 703, 704, 705, 707, 708, 715, 718, 720, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 742, 743, 744, 745, 749, 750, 753, 754, 755, 757, 758, 763, 764, 765, 766, 768, 769, 773, 777, 795, 801, 812, 818, 819, 820, 821, 824, 825, 826, 829, 831, 832, 833, 834, 835, 837, 838, 840, 842, 843, 845, 846, 848, 849, 850, 851, 855, 860, 862, 863, 864, 865, 868, 869, 873, 874, 875, 878, 880, 881, 882, 884, 888, 892, 897, 898, 899, 901, 902, 904, 906, 907, 908, 909, 910, 913, 914, 915, 916, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 940, 941, 945, 946, 947, 948, 954, 955, 956, 957, 958, 959, 961, 962, 963, 964, 965, 968, 970, 971, 974, 976, 977, 978, 988, 994, 995, 996, 997, 998, 999, 1007, 1008, 1011, 1013, 1015, 1016, 1025, 1033], "within": [2, 47, 117, 118, 155, 156, 170, 223, 250, 465, 495, 617, 649, 650, 655, 715, 1032], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 617, 628, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 721, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 817, 818, 819, 820, 821, 824, 825, 826, 827, 829, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 862, 863, 869, 870, 871, 872, 875, 876, 877, 879, 884, 885, 886, 888, 890, 891, 896, 897, 898, 899, 900, 901, 902, 903, 904, 910, 911, 912, 914, 915, 916, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 937, 938, 940, 944, 945, 946, 947, 949, 950, 952, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 993, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025, 1032], "dtype": [2, 31, 38, 68, 72, 73, 88, 90, 92, 94, 95, 99, 100, 110, 119, 120, 121, 122, 124, 130, 155, 156, 170, 212, 213, 214, 250, 264, 266, 267, 268, 269, 270, 271, 274, 289, 292, 293, 294, 295, 296, 301, 302, 304, 316, 320, 324, 326, 328, 333, 340, 348, 356, 358, 396, 397, 398, 409, 421, 428, 430, 432, 464, 467, 468, 472, 473, 474, 475, 476, 478, 479, 480, 487, 490, 491, 498, 507, 518, 524, 537, 539, 541, 542, 543, 548, 549, 555, 557, 566, 576, 580, 585, 586, 587, 593, 596, 602, 609, 617, 649, 650, 655, 715, 718, 737, 738, 747, 752, 753, 754, 755, 761, 762, 765, 766, 778, 782, 789, 791, 794, 799, 806, 814, 818, 823, 841, 847, 854, 864, 865, 866, 877, 889, 896, 897, 921, 935, 942, 954, 963, 974, 980, 994, 1004, 1006, 1007, 1008, 1012, 1025, 1033], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 72, 89, 99, 100, 103, 119, 128, 140, 154, 162, 167, 180, 186, 192, 193, 219, 227, 242, 250, 257, 260, 261, 341, 344, 351, 352, 359, 366, 369, 370, 375, 391, 429, 447, 449, 453, 454, 456, 460, 463, 465, 472, 473, 474, 475, 476, 478, 479, 480, 527, 535, 545, 547, 552, 565, 572, 594, 596, 606, 610, 611, 613, 617, 618, 619, 622, 623, 624, 625, 628, 638, 653, 669, 688, 693, 709, 715, 725, 807, 810, 824, 837, 915, 916, 927, 983, 1008, 1017, 1019, 1021, 1025, 1026, 1029, 1030, 1031], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 119, 250, 610, 611, 613, 618, 619, 623, 624, 625, 715, 1017, 1019, 1021, 1026, 1029, 1030, 1031], "A": [5, 28, 31, 50, 53, 71, 95, 99, 100, 101, 108, 110, 126, 149, 155, 170, 184, 193, 209, 221, 222, 223, 227, 250, 256, 311, 316, 320, 324, 326, 328, 333, 340, 351, 352, 359, 369, 370, 378, 381, 382, 384, 391, 422, 429, 430, 431, 441, 453, 454, 461, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 499, 500, 505, 506, 508, 514, 515, 532, 536, 563, 572, 575, 579, 606, 617, 649, 655, 671, 690, 693, 715, 718, 773, 778, 782, 789, 791, 794, 799, 806, 824, 922, 923, 924, 926, 929, 930, 931, 955, 956, 961, 962, 964, 970, 971, 988, 1025, 1032], "encod": [5, 64, 99, 100, 110, 211, 250, 282, 283, 285, 286, 368, 501, 617, 742, 957], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 89, 91, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 135, 140, 154, 155, 156, 157, 167, 170, 176, 194, 196, 202, 211, 213, 218, 219, 221, 227, 250, 264, 348, 371, 380, 402, 408, 417, 421, 422, 423, 432, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 492, 493, 511, 517, 518, 523, 524, 525, 526, 529, 557, 559, 572, 584, 585, 593, 596, 597, 598, 602, 606, 608, 609, 617, 628, 638, 640, 648, 649, 650, 654, 655, 659, 663, 674, 679, 680, 681, 688, 693, 696, 699, 715, 724, 725, 814, 832, 845, 870, 876, 885, 889, 890, 891, 897, 922, 923, 924, 925, 926, 927, 929, 930, 931, 933, 937, 944, 948, 949, 967, 973, 974, 979, 980, 981, 982, 985, 1006, 1025, 1033], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 73, 95, 99, 100, 110, 119, 120, 121, 124, 127, 132, 149, 153, 154, 155, 156, 170, 184, 196, 203, 212, 217, 221, 223, 227, 230, 250, 257, 285, 290, 334, 338, 341, 344, 345, 358, 364, 368, 376, 409, 432, 443, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 532, 553, 554, 558, 561, 563, 564, 570, 572, 579, 588, 591, 599, 602, 603, 606, 617, 631, 640, 647, 648, 649, 650, 655, 674, 682, 687, 693, 696, 697, 715, 718, 744, 749, 800, 804, 807, 810, 811, 823, 838, 877, 953, 954, 955, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 1004, 1025, 1033], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 368, 617, 647, 670, 715], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 403, 506, 871, 962], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 71, 72, 73, 88, 89, 93, 95, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 130, 132, 133, 134, 146, 147, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 170, 182, 184, 194, 197, 201, 203, 209, 211, 213, 214, 217, 218, 219, 220, 223, 225, 227, 234, 236, 237, 240, 250, 260, 261, 262, 263, 264, 274, 280, 282, 283, 285, 286, 289, 298, 299, 300, 301, 302, 303, 321, 337, 339, 350, 351, 352, 353, 354, 355, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 394, 395, 399, 403, 418, 421, 424, 429, 430, 436, 437, 438, 439, 443, 453, 454, 456, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 488, 492, 494, 495, 499, 501, 503, 513, 514, 515, 519, 520, 522, 524, 525, 526, 529, 534, 546, 549, 552, 553, 554, 555, 557, 558, 559, 565, 568, 572, 584, 585, 586, 593, 596, 602, 606, 609, 617, 631, 633, 635, 640, 642, 644, 648, 649, 650, 654, 655, 659, 663, 668, 675, 678, 679, 680, 682, 687, 688, 689, 693, 701, 703, 704, 707, 715, 718, 722, 723, 724, 725, 734, 740, 742, 747, 752, 759, 760, 761, 762, 763, 764, 783, 803, 805, 817, 819, 820, 821, 827, 831, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 858, 862, 863, 867, 868, 871, 886, 889, 892, 911, 912, 914, 916, 917, 918, 919, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 935, 937, 938, 943, 948, 950, 955, 957, 959, 969, 970, 971, 975, 976, 978, 980, 981, 982, 985, 1005, 1006, 1007, 1010, 1013, 1015, 1025, 1032], "decim": [6, 28, 31, 250, 481, 527, 617, 932, 983, 1025], "temporari": 6, "remov": [6, 8, 138, 211, 222, 250, 264, 356, 431, 511, 517, 523, 524, 526, 576, 617, 637, 690, 715, 967, 973, 979, 980, 982], "later": [6, 572], "onc": [6, 53, 99, 100, 103, 126, 130, 131, 193, 194, 230, 250, 264, 288, 482, 617, 632, 697, 715, 725, 933, 1025], "stabil": 6, "happen": [6, 617, 914, 1025], "being": [6, 99, 100, 110, 115, 211, 221, 222, 250, 264, 303, 338, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 575, 617, 690, 715, 763, 804, 834, 914, 1025, 1033], "consid": [6, 99, 100, 110, 115, 131, 140, 150, 176, 193, 219, 221, 222, 250, 264, 292, 293, 294, 303, 338, 430, 472, 473, 474, 475, 476, 478, 479, 480, 568, 578, 617, 638, 651, 658, 663, 688, 690, 699, 715, 725, 753, 754, 755, 763, 804, 834, 847, 914, 935, 936, 937, 1025], "break": [6, 115, 221, 222, 250, 264, 303, 338, 472, 473, 474, 475, 476, 478, 479, 480, 617, 690, 715, 763, 804, 834, 914, 1025], "chang": [6, 26, 65, 99, 100, 115, 221, 222, 223, 250, 264, 303, 305, 338, 458, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 617, 690, 715, 763, 804, 834, 910, 914, 943, 1025], "current": [6, 9, 26, 52, 89, 95, 101, 127, 130, 133, 134, 169, 250, 317, 338, 422, 458, 617, 628, 633, 634, 654, 715, 718, 752, 756, 771, 779, 804, 910, 1025, 1032], "alpha": [6, 71, 264, 353, 354, 355, 617, 635, 640, 642, 668, 678, 715, 819, 820, 821, 1025], "state": [6, 8, 71, 81, 127, 568, 628, 635, 640, 642, 668, 678, 715], "cfg": [7, 8, 9, 15, 128], "path": [7, 9, 27, 28, 30, 31, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 250, 445, 484, 508, 617, 670, 679, 680, 696, 715, 938, 964, 1025], "previous": 7, "save": [7, 155, 156, 170, 223, 250, 309, 317, 334, 337, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 628, 649, 650, 655, 715, 779, 800, 803, 804, 811], "share": [7, 56, 142, 250, 818, 1025], "option": [7, 8, 9, 26, 30, 31, 39, 65, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 166, 170, 176, 209, 213, 218, 250, 389, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 518, 572, 586, 602, 608, 617, 628, 654, 655, 663, 715, 718, 854, 858, 922, 923, 924, 925, 926, 927, 929, 930, 931, 948, 974, 1003, 1025], "from": [7, 8, 28, 31, 50, 51, 52, 65, 72, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 137, 138, 142, 144, 153, 155, 156, 167, 168, 170, 171, 176, 184, 188, 192, 194, 196, 211, 218, 219, 221, 223, 250, 298, 304, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 352, 356, 368, 375, 389, 422, 451, 452, 454, 458, 459, 464, 472, 473, 475, 478, 479, 480, 482, 495, 505, 506, 507, 513, 524, 525, 526, 529, 547, 549, 561, 571, 572, 573, 574, 596, 601, 605, 606, 616, 617, 637, 642, 647, 649, 650, 655, 663, 670, 671, 674, 688, 694, 715, 718, 724, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 818, 854, 858, 890, 906, 907, 908, 910, 933, 961, 962, 963, 969, 980, 981, 982, 985, 1013, 1016, 1025, 1032, 1033], "json": [7, 9, 33, 34, 106, 107, 113, 250, 368, 445, 507, 508, 617, 628, 647, 670, 696, 715, 963, 964], "file": [7, 9, 27, 28, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 250, 445, 642, 670, 679, 680, 696, 715, 724, 1025], "produc": [7, 121, 122, 124, 400, 440, 572, 587, 659, 715, 868], "filepath": [7, 9], "same": [7, 18, 30, 31, 54, 56, 65, 71, 72, 73, 104, 110, 120, 128, 131, 138, 154, 203, 219, 227, 230, 232, 250, 256, 263, 358, 436, 439, 457, 471, 472, 473, 474, 475, 476, 478, 479, 480, 495, 534, 562, 572, 617, 637, 648, 659, 682, 688, 693, 697, 715, 720, 724, 725, 773, 823, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1016, 1025], "reset": [8, 128], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 72, 88, 90, 91, 92, 93, 94, 95, 99, 100, 103, 108, 110, 119, 120, 121, 122, 123, 124, 140, 142, 154, 156, 157, 167, 169, 170, 176, 182, 184, 192, 193, 194, 204, 211, 219, 221, 224, 228, 250, 290, 337, 350, 352, 353, 354, 355, 371, 417, 421, 422, 425, 432, 451, 452, 454, 458, 465, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 497, 505, 511, 513, 517, 518, 523, 524, 525, 526, 529, 550, 557, 559, 565, 572, 580, 584, 585, 586, 593, 596, 601, 602, 606, 607, 609, 617, 638, 640, 648, 650, 654, 655, 663, 680, 683, 688, 691, 696, 715, 749, 803, 817, 818, 819, 820, 821, 832, 885, 889, 890, 897, 906, 907, 910, 916, 933, 944, 952, 955, 961, 967, 969, 973, 974, 979, 980, 981, 982, 985, 1014, 1025, 1033], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 88, 89, 90, 92, 94, 95, 99, 101, 102, 108, 110, 111, 120, 122, 124, 126, 128, 130, 131, 136, 145, 155, 156, 166, 167, 169, 170, 180, 183, 192, 193, 210, 213, 218, 222, 223, 227, 250, 264, 301, 302, 307, 308, 330, 331, 334, 338, 345, 376, 382, 384, 403, 421, 472, 473, 474, 475, 476, 477, 478, 479, 480, 492, 499, 505, 506, 509, 511, 512, 514, 517, 523, 524, 537, 545, 568, 572, 578, 593, 595, 596, 608, 609, 617, 627, 635, 642, 643, 649, 650, 651, 655, 658, 671, 678, 690, 693, 715, 725, 761, 762, 796, 797, 800, 811, 871, 889, 928, 936, 937, 943, 948, 955, 961, 962, 965, 967, 968, 970, 973, 979, 980, 994, 1025, 1032], "oper": [8, 31, 56, 72, 78, 79, 88, 90, 91, 92, 93, 94, 99, 108, 131, 144, 149, 154, 161, 171, 177, 180, 182, 183, 187, 208, 213, 214, 218, 221, 229, 230, 250, 257, 258, 261, 298, 299, 300, 301, 302, 303, 351, 352, 366, 369, 370, 388, 391, 402, 408, 422, 423, 429, 444, 447, 449, 453, 454, 456, 460, 467, 535, 545, 552, 553, 554, 563, 564, 575, 617, 628, 642, 648, 651, 654, 658, 663, 664, 697, 715, 724, 759, 760, 761, 762, 763, 870, 876, 891, 918, 1001, 1005, 1006, 1007, 1015, 1025], "environ": [8, 26, 123, 126], "local": [8, 30, 102, 111, 124, 250, 337, 775, 776, 803, 808, 911, 912, 1025], "non": [8, 31, 39, 65, 93, 156, 168, 176, 196, 222, 227, 250, 376, 422, 458, 471, 472, 473, 474, 475, 476, 478, 479, 480, 500, 506, 553, 554, 561, 563, 564, 570, 572, 588, 591, 597, 598, 599, 602, 603, 617, 650, 663, 674, 690, 693, 715, 838, 890, 910, 922, 923, 924, 925, 926, 927, 929, 930, 931, 956, 962, 1006, 1025], "env": [8, 125], "back": [8, 65, 144, 214, 250, 457, 530, 617, 724, 986, 1007, 1025], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 73, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 137, 140, 145, 146, 153, 155, 156, 157, 162, 166, 169, 170, 171, 174, 176, 180, 181, 184, 192, 194, 200, 202, 203, 209, 211, 214, 218, 219, 220, 221, 222, 223, 250, 259, 263, 264, 276, 281, 292, 293, 294, 297, 299, 302, 307, 308, 337, 338, 345, 352, 353, 354, 355, 356, 359, 360, 361, 367, 371, 375, 376, 382, 383, 384, 385, 386, 392, 394, 395, 402, 406, 408, 417, 422, 423, 430, 432, 443, 445, 454, 455, 458, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 486, 487, 488, 489, 493, 494, 498, 499, 502, 503, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 529, 532, 533, 534, 543, 553, 555, 557, 561, 564, 566, 572, 573, 574, 576, 577, 586, 587, 588, 591, 596, 597, 598, 601, 602, 605, 606, 607, 608, 617, 633, 634, 638, 643, 644, 649, 650, 653, 654, 655, 657, 659, 663, 666, 677, 678, 679, 680, 681, 682, 688, 689, 690, 694, 696, 699, 715, 718, 725, 732, 733, 752, 753, 764, 765, 767, 785, 786, 787, 792, 803, 804, 811, 816, 817, 819, 820, 821, 824, 825, 826, 828, 831, 832, 834, 836, 837, 838, 847, 850, 851, 854, 857, 858, 862, 863, 870, 874, 876, 885, 890, 891, 897, 898, 899, 900, 901, 905, 914, 915, 916, 919, 922, 923, 924, 925, 926, 927, 929, 930, 931, 933, 937, 939, 941, 944, 945, 948, 949, 952, 954, 955, 958, 959, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 976, 977, 978, 979, 980, 981, 982, 985, 1000, 1003, 1004, 1007, 1008, 1014, 1015, 1025, 1032], "written": [9, 27, 28, 31, 32, 33, 34, 35, 250, 679, 680, 696, 715], "contain": [9, 31, 65, 70, 90, 93, 95, 102, 111, 117, 121, 132, 140, 155, 168, 180, 184, 217, 250, 264, 285, 286, 380, 432, 500, 503, 505, 506, 508, 521, 522, 617, 631, 638, 649, 668, 687, 715, 718, 897, 903, 956, 959, 961, 962, 964, 977, 978, 1001, 1025], "where": [9, 31, 50, 65, 101, 121, 140, 144, 167, 176, 193, 204, 224, 250, 275, 347, 350, 352, 454, 483, 492, 495, 497, 550, 559, 565, 597, 598, 601, 607, 608, 617, 663, 683, 691, 715, 724, 735, 813, 817, 934, 948, 952, 1014, 1016, 1025, 1032], "ascii": [10, 18, 510, 512, 516, 532, 966, 968, 972, 988], "charact": [10, 12, 18, 24, 28, 99, 100, 110, 250, 334, 504, 506, 509, 510, 511, 516, 517, 519, 520, 523, 532, 668, 715, 718, 800, 960, 962, 965, 966, 967, 972, 973, 975, 976, 979, 988], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 250], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 88, 95, 99, 100, 102, 110, 111, 184, 208, 214, 221, 222, 250, 690, 715, 1007, 1025, 1032], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 71, 89, 93, 95, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 137, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 197, 201, 203, 209, 211, 213, 214, 217, 218, 219, 223, 225, 227, 233, 234, 236, 237, 238, 240, 243, 250, 260, 261, 262, 264, 274, 280, 282, 285, 286, 298, 299, 300, 301, 302, 303, 321, 337, 339, 350, 351, 352, 353, 354, 355, 369, 370, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 391, 394, 395, 399, 403, 418, 421, 424, 429, 430, 443, 453, 454, 456, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 488, 492, 494, 495, 499, 503, 507, 513, 514, 515, 519, 520, 522, 524, 525, 526, 546, 549, 552, 553, 554, 557, 558, 559, 565, 568, 572, 584, 585, 586, 593, 596, 602, 606, 608, 609, 617, 631, 633, 634, 635, 640, 642, 648, 649, 650, 654, 655, 657, 659, 668, 675, 678, 679, 680, 682, 687, 688, 693, 700, 701, 703, 704, 705, 707, 710, 715, 718, 724, 734, 740, 747, 751, 752, 759, 760, 761, 762, 763, 764, 783, 803, 805, 817, 819, 820, 821, 827, 838, 839, 840, 842, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 858, 862, 863, 871, 886, 889, 892, 903, 911, 912, 914, 916, 917, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 935, 938, 943, 948, 950, 955, 959, 963, 969, 970, 971, 975, 976, 978, 980, 981, 982, 1005, 1006, 1007, 1010, 1013, 1015, 1016, 1025, 1032], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 257, 506, 514, 617, 718, 962, 970], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 257, 500, 506, 617, 956, 962, 1003, 1025], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 47, 50, 65, 67, 69, 91, 115, 122, 133, 134, 136, 137, 138, 141, 145, 146, 149, 152, 153, 154, 161, 169, 170, 174, 175, 184, 185, 186, 202, 203, 204, 224, 227, 230, 234, 236, 237, 238, 239, 240, 242, 243, 250, 256, 266, 267, 268, 269, 270, 271, 289, 291, 295, 296, 303, 304, 307, 308, 339, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 365, 366, 369, 370, 375, 382, 384, 385, 386, 388, 389, 391, 413, 425, 426, 427, 429, 433, 434, 435, 446, 449, 451, 452, 453, 454, 458, 460, 463, 464, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 490, 491, 492, 496, 497, 541, 542, 545, 550, 560, 561, 563, 565, 567, 576, 589, 590, 601, 607, 617, 633, 637, 643, 644, 648, 654, 655, 661, 662, 669, 682, 683, 691, 693, 694, 697, 701, 703, 704, 705, 706, 707, 709, 710, 715, 718, 726, 727, 728, 729, 730, 731, 750, 757, 758, 763, 764, 765, 805, 820, 821, 825, 829, 834, 910, 914, 922, 924, 925, 927, 928, 929, 931, 932, 946, 947, 951, 998, 999, 1012, 1025, 1033], "fmt": [11, 374, 579, 617, 652, 715], "floatfmt": 11, "mix": [11, 524, 526, 765, 980, 982, 1025], "control": [11, 31, 55, 72, 120, 250, 640, 715], "how": [11, 30, 31, 56, 65, 72, 73, 91, 94, 101, 140, 169, 221, 222, 250, 290, 305, 375, 400, 401, 457, 468, 477, 507, 608, 617, 638, 654, 690, 715, 749, 766, 868, 869, 928, 963, 1025], "float": [11, 31, 41, 42, 115, 117, 118, 119, 122, 124, 137, 142, 145, 170, 186, 194, 200, 242, 250, 291, 292, 293, 294, 307, 308, 339, 350, 351, 352, 353, 354, 355, 360, 365, 369, 370, 375, 378, 381, 382, 384, 385, 386, 391, 399, 425, 429, 433, 446, 451, 452, 453, 454, 460, 463, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 545, 560, 589, 590, 594, 596, 601, 603, 607, 617, 643, 655, 669, 677, 678, 709, 715, 718, 747, 750, 753, 754, 755, 764, 765, 767, 805, 817, 818, 819, 820, 821, 825, 829, 834, 844, 858, 867, 868, 893, 899, 900, 906, 907, 913, 914, 915, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 936, 937, 948, 952, 994, 1014, 1025, 1033], "point": [11, 31, 41, 42, 122, 124, 145, 155, 171, 250, 291, 307, 308, 339, 360, 365, 382, 384, 481, 482, 572, 617, 643, 649, 659, 671, 715, 750, 805, 825, 829, 844, 932, 933, 1025], "full": [11, 38, 65, 70, 72, 99, 100, 102, 110, 111, 155, 156, 250, 524, 525, 526, 529, 649, 650, 659, 715, 718, 980, 981, 982, 985], "format": [11, 14, 18, 28, 31, 98, 99, 100, 110, 115, 143, 153, 167, 176, 193, 210, 248, 250, 338, 341, 344, 443, 513, 524, 525, 526, 529, 554, 641, 647, 663, 696, 715, 807, 810, 969, 980, 981, 982, 985, 1024], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 82, 88, 90, 92, 94, 97, 99, 100, 101, 103, 110, 113, 120, 122, 123, 125, 126, 132, 133, 142, 143, 145, 146, 158, 167, 168, 171, 172, 179, 180, 194, 199, 200, 204, 206, 217, 221, 224, 233, 235, 244, 250, 275, 281, 287, 297, 303, 305, 319, 322, 327, 329, 339, 346, 347, 349, 353, 354, 355, 359, 361, 367, 372, 382, 384, 392, 393, 401, 407, 416, 420, 422, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 488, 497, 509, 512, 514, 520, 521, 527, 538, 544, 550, 565, 566, 572, 582, 597, 598, 601, 604, 607, 617, 631, 633, 641, 642, 643, 644, 651, 658, 668, 676, 677, 680, 683, 685, 687, 691, 700, 702, 711, 715, 746, 752, 763, 766, 781, 784, 793, 795, 805, 812, 813, 815, 818, 819, 820, 821, 824, 826, 833, 844, 860, 869, 875, 884, 888, 890, 903, 904, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 940, 941, 944, 952, 965, 968, 970, 976, 977, 983, 995, 1009, 1014, 1025, 1033], "plai": [12, 564], "sam": 12, "As": [12, 88, 90, 91, 92, 94, 103, 250, 715], "time": [12, 30, 38, 40, 50, 55, 70, 71, 110, 144, 155, 156, 170, 223, 250, 287, 309, 310, 311, 312, 317, 318, 334, 337, 338, 341, 343, 344, 345, 348, 398, 399, 422, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 529, 543, 544, 563, 564, 572, 574, 580, 606, 617, 635, 649, 650, 655, 668, 715, 718, 724, 746, 771, 772, 773, 774, 779, 780, 800, 803, 804, 807, 809, 810, 811, 814, 866, 868, 980, 982, 985, 1008, 1009, 1025, 1033], "goe": 12, "By": [12, 13, 65, 99, 100, 103, 110, 155, 156, 170, 204, 223, 224, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 497, 513, 550, 565, 586, 601, 607, 617, 649, 650, 655, 683, 691, 715, 800, 804, 811, 952, 969, 1006, 1014, 1025], "begin": [12, 353, 354, 355, 505, 572, 617, 819, 820, 821, 961, 1025], "beauti": 12, "friendship": 12, "len": [12, 31, 120, 122, 168, 250, 298, 469, 510, 516, 532, 617, 764, 914, 920, 966, 972, 988, 1025], "u32": [12, 50, 155, 181, 228, 233, 241, 243, 250, 258, 265, 272, 273, 274, 275, 276, 297, 298, 315, 319, 323, 327, 329, 335, 336, 339, 346, 347, 392, 396, 397, 400, 411, 432, 450, 455, 465, 472, 473, 475, 478, 479, 480, 483, 500, 509, 512, 543, 547, 556, 558, 559, 566, 592, 617, 649, 666, 695, 700, 708, 710, 715, 734, 735, 736, 747, 777, 781, 788, 790, 793, 795, 798, 801, 802, 805, 812, 813, 834, 879, 916, 956, 965, 968, 1008, 1011, 1013, 1025], "37": 12, "beaut": 12, "48": [12, 156, 250, 650, 715], "fmt_str_length": 12, "50": [12, 31, 144, 250, 292, 293, 294, 338, 345, 617, 753, 811, 1025], "print": [12, 15, 17, 18, 23, 100, 116, 141, 153, 154, 168, 171, 212, 229, 250, 374, 443, 574, 617, 652, 715, 845, 922, 1004, 1025, 1033], "overwrit": [13, 29, 30, 88, 90, 91, 92, 94, 99, 100, 110, 130, 250, 642, 715], "chunk": [13, 97, 99, 100, 108, 110, 112, 113, 114, 122, 124, 144, 168, 179, 250, 263, 466, 617, 680, 715, 724, 751, 830, 903, 917, 1001, 1025], "stream": [13, 32, 71, 154, 169, 219, 250, 635, 640, 642, 648, 654, 659, 663, 668, 678, 679, 680, 688, 715], "engin": [13, 29, 101, 126, 131, 154, 169, 219, 232, 250, 648, 654, 659, 663, 688, 699, 715, 725, 1025], "determin": [13, 31, 63, 65, 72, 91, 94, 99, 100, 103, 108, 110, 114, 131, 149, 155, 156, 167, 168, 218, 223, 250, 290, 321, 337, 422, 432, 440, 468, 472, 473, 474, 475, 476, 478, 479, 480, 492, 507, 527, 593, 596, 609, 617, 649, 650, 715, 749, 783, 803, 834, 890, 897, 948, 963, 983, 1025], "schema": [13, 30, 50, 56, 66, 67, 68, 72, 73, 83, 84, 86, 88, 90, 91, 92, 94, 95, 99, 100, 101, 105, 109, 110, 113, 120, 122, 131, 133, 134, 141, 142, 177, 180, 213, 250, 277, 278, 279, 422, 440, 507, 552, 602, 617, 633, 634, 639, 659, 664, 696, 699, 715, 718, 739, 756, 963, 1025], "thread": [13, 28, 97, 99, 100, 101, 126, 250, 264, 403, 482, 488, 617, 871], "pool": [13, 126], "For": [13, 30, 31, 101, 102, 103, 111, 144, 156, 169, 170, 232, 250, 289, 353, 354, 355, 422, 441, 467, 492, 499, 505, 506, 514, 568, 572, 578, 579, 617, 650, 655, 699, 715, 724, 819, 820, 821, 918, 948, 955, 961, 962, 970, 1006, 1025], "some": [13, 26, 30, 31, 91, 99, 100, 110, 140, 250, 638, 715, 845, 1025, 1033], "dataset": [13, 99, 100, 110, 115, 169, 250, 389, 617, 628, 654, 659, 715, 858, 1025], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 38, 55, 56, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 99, 100, 104, 108, 110, 111, 112, 113, 122, 124, 131, 132, 141, 142, 144, 146, 149, 155, 156, 169, 183, 192, 196, 203, 211, 213, 217, 219, 250, 292, 293, 294, 337, 353, 354, 355, 361, 422, 430, 432, 441, 459, 494, 495, 511, 517, 523, 524, 558, 568, 572, 578, 617, 631, 644, 649, 650, 654, 659, 674, 680, 682, 687, 688, 715, 724, 753, 754, 755, 803, 818, 819, 820, 821, 826, 897, 936, 937, 967, 973, 979, 980, 1002, 1025], "have": [13, 26, 31, 38, 65, 73, 89, 99, 100, 101, 103, 122, 124, 144, 156, 167, 187, 193, 210, 250, 288, 303, 353, 354, 355, 441, 465, 524, 526, 572, 617, 650, 663, 678, 695, 715, 718, 724, 763, 819, 820, 821, 831, 914, 916, 980, 982, 1025, 1033], "larg": [13, 65, 155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "element": [13, 23, 121, 124, 132, 166, 184, 192, 204, 217, 224, 250, 264, 266, 267, 268, 269, 270, 271, 287, 295, 296, 298, 299, 300, 301, 302, 303, 357, 371, 380, 400, 402, 403, 404, 408, 423, 426, 427, 457, 458, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 489, 490, 491, 496, 497, 520, 521, 527, 541, 542, 544, 550, 565, 597, 598, 601, 607, 617, 631, 683, 687, 691, 715, 725, 726, 727, 728, 729, 730, 731, 746, 752, 757, 758, 759, 760, 761, 762, 763, 822, 827, 833, 845, 857, 860, 868, 870, 871, 872, 876, 891, 894, 895, 910, 916, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 945, 946, 947, 951, 952, 976, 977, 983, 995, 998, 999, 1004, 1009, 1010, 1014, 1025], "too": [13, 155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "optimist": 13, "lead": [13, 95, 115, 155, 156, 250, 264, 430, 484, 511, 523, 532, 539, 549, 565, 617, 649, 650, 659, 699, 715, 725, 938, 967, 979, 988, 1025], "out": [13, 95, 116, 156, 250, 283, 378, 381, 406, 421, 499, 501, 608, 617, 650, 679, 680, 715, 742, 874, 889, 955, 957], "memori": [13, 72, 88, 89, 92, 93, 94, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 144, 201, 232, 250, 457, 466, 487, 617, 680, 715, 724, 725, 917, 942, 943, 1025], "error": [13, 30, 74, 99, 100, 110, 155, 156, 170, 184, 192, 223, 250, 283, 289, 334, 338, 345, 388, 409, 421, 472, 473, 474, 475, 476, 478, 479, 480, 499, 501, 505, 507, 508, 524, 525, 526, 529, 617, 649, 650, 655, 699, 715, 742, 747, 800, 804, 811, 877, 889, 955, 957, 961, 963, 964, 980, 981, 982, 985, 1025], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 72, 80, 82, 87, 91, 92, 94, 95, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 122, 131, 132, 133, 140, 144, 147, 149, 153, 155, 157, 158, 163, 165, 166, 167, 168, 170, 171, 172, 176, 180, 194, 202, 206, 207, 210, 212, 217, 219, 221, 222, 228, 232, 235, 244, 250, 264, 275, 358, 372, 393, 404, 422, 457, 458, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 495, 504, 507, 538, 558, 568, 569, 578, 582, 585, 588, 591, 595, 597, 598, 604, 608, 617, 631, 633, 635, 638, 642, 645, 646, 649, 651, 655, 656, 658, 659, 663, 680, 681, 685, 686, 687, 688, 690, 695, 699, 702, 711, 715, 724, 823, 833, 857, 872, 910, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 949, 960, 963, 995, 1025, 1033], "per": [13, 28, 31, 120, 122, 132, 153, 180, 181, 203, 217, 239, 241, 242, 250, 264, 288, 403, 406, 421, 495, 558, 617, 631, 682, 687, 706, 708, 709, 715, 871, 874, 889], "everi": [13, 99, 100, 110, 155, 207, 210, 223, 250, 298, 299, 300, 301, 302, 303, 338, 345, 358, 396, 397, 401, 402, 404, 406, 407, 417, 420, 504, 540, 568, 569, 617, 642, 649, 686, 715, 759, 760, 761, 762, 763, 804, 811, 823, 864, 865, 869, 870, 872, 874, 875, 885, 888, 960, 997, 1025], "process": [13, 28, 126, 250, 679, 680, 715], "liter": [14, 18, 30, 50, 103, 122, 123, 124, 125, 153, 167, 173, 174, 178, 179, 182, 192, 193, 196, 205, 209, 222, 227, 250, 260, 262, 282, 311, 351, 352, 359, 366, 369, 370, 376, 388, 391, 429, 447, 449, 453, 454, 460, 499, 514, 515, 535, 545, 553, 554, 557, 559, 561, 563, 564, 570, 571, 572, 573, 584, 585, 586, 588, 591, 593, 596, 599, 602, 603, 605, 606, 609, 617, 644, 674, 690, 693, 715, 718, 722, 723, 741, 773, 824, 838, 936, 937, 955, 970, 971, 1025, 1032], "left": [14, 52, 65, 117, 118, 155, 156, 169, 170, 222, 250, 353, 354, 355, 375, 376, 472, 473, 474, 475, 476, 478, 479, 480, 483, 510, 532, 543, 561, 568, 569, 572, 578, 595, 606, 608, 617, 649, 650, 654, 655, 690, 715, 819, 820, 821, 838, 934, 966, 988, 1008, 1025], "center": [14, 31, 250, 353, 354, 355, 471, 472, 473, 474, 475, 476, 478, 479, 480, 617, 819, 820, 821, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1025], "right": [14, 16, 31, 99, 100, 117, 118, 155, 156, 169, 170, 250, 353, 354, 355, 376, 402, 408, 423, 472, 473, 474, 475, 476, 478, 479, 480, 483, 492, 516, 561, 572, 606, 617, 649, 650, 654, 655, 715, 819, 820, 821, 838, 870, 876, 891, 934, 948, 972, 1025], "cell": 14, "align": [14, 31, 65, 72, 250, 532, 988], "keyerror": [14, 18], "recognis": [14, 18, 119], "column_abc": 14, "column_xyz": 14, "visibl": [15, 142, 250, 818, 1025], "eg": [15, 23, 31, 101, 250, 338, 524, 526, 545, 617, 980, 982], "low": [15, 126], "rang": [15, 31, 101, 137, 142, 155, 168, 250, 304, 315, 329, 335, 336, 338, 345, 346, 375, 557, 563, 571, 572, 573, 584, 585, 605, 606, 617, 649, 715, 764, 765, 777, 795, 801, 802, 804, 811, 812, 818, 910, 914, 1025], "100": [15, 31, 91, 94, 99, 100, 110, 113, 250, 507, 527, 532, 715, 923, 924, 926, 963, 983, 1025, 1033], "98": [15, 161, 250, 287, 494, 527, 539, 544, 617, 983], "99": [15, 31, 145, 146, 161, 164, 250, 258, 287, 359, 361, 494, 539, 544, 617, 643, 644, 715, 817, 824, 1025], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 72, 95, 101, 110, 122, 124, 134, 144, 152, 155, 156, 158, 160, 161, 162, 179, 183, 185, 189, 190, 196, 206, 227, 230, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 263, 272, 273, 274, 276, 292, 297, 299, 302, 305, 307, 308, 309, 311, 317, 330, 331, 337, 338, 345, 348, 371, 372, 375, 380, 388, 392, 393, 401, 407, 416, 417, 420, 426, 458, 459, 493, 532, 538, 552, 561, 568, 572, 575, 578, 580, 582, 586, 587, 604, 606, 617, 635, 649, 650, 651, 653, 658, 667, 668, 674, 680, 684, 685, 693, 697, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 718, 725, 753, 764, 766, 771, 773, 779, 803, 811, 814, 817, 833, 845, 860, 869, 875, 884, 885, 888, 894, 910, 936, 937, 995, 1025, 1033], "95": [15, 258, 617], "96": [15, 258, 617], "97": [15, 161, 250, 258, 617], "move": [16, 250, 353, 354, 355, 472, 473, 475, 479, 617, 819, 820, 821, 923, 924, 926, 930, 1025], "inlin": [16, 250, 499, 505, 506, 514, 955, 961, 962, 970], "parenthes": 16, "below": [17, 31, 102, 111, 140, 250, 361, 375, 572, 608, 617, 638, 715], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 95], "utf8_full_condens": [18, 95], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 500, 505, 508, 956, 961, 964], "rounded_corn": 18, "style": [18, 31, 184, 250], "border": 18, "line": [18, 31, 99, 100, 103, 110, 153, 163, 165, 250, 505, 961], "includ": [18, 26, 28, 30, 31, 70, 102, 111, 122, 132, 137, 142, 155, 217, 218, 221, 250, 339, 376, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 517, 519, 520, 523, 568, 597, 598, 617, 631, 649, 687, 715, 765, 805, 818, 838, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 975, 976, 979, 1015, 1025], "divid": [18, 338, 345, 353, 354, 355, 389, 617, 804, 811, 819, 820, 821, 858, 1025], "dens": [18, 153, 250, 465, 617, 916, 1025], "space": [18, 155, 250, 649, 715], "horizont": [18, 72, 149, 160, 221, 250, 553, 554, 563, 564, 568, 569, 570, 575, 578, 588, 591, 595, 603], "markdown": 18, "compat": [18, 31, 35, 250, 499, 500, 505, 506, 514, 515, 680, 715, 718, 955, 956, 961, 962, 970, 971], "No": [18, 530, 986], "appli": [18, 28, 31, 50, 72, 110, 119, 122, 124, 149, 183, 250, 315, 319, 321, 322, 323, 325, 327, 329, 332, 335, 336, 339, 346, 347, 349, 354, 355, 430, 459, 471, 472, 473, 475, 479, 514, 524, 525, 526, 529, 552, 568, 569, 578, 587, 595, 617, 651, 658, 659, 667, 715, 775, 776, 777, 781, 783, 784, 788, 790, 793, 795, 798, 801, 802, 805, 808, 812, 813, 815, 820, 821, 922, 923, 924, 926, 930, 970, 980, 981, 982, 985, 1025], "round": [18, 31, 67, 95, 250, 291, 365, 541, 617, 750, 829, 1025], "corner": [18, 95], "op": [18, 124, 250, 468, 524, 526, 617, 715, 980, 982, 1025], "one": [18, 29, 31, 55, 65, 80, 88, 90, 91, 92, 93, 94, 123, 124, 125, 128, 146, 147, 153, 154, 155, 156, 167, 176, 184, 192, 193, 197, 213, 216, 231, 250, 258, 361, 388, 422, 427, 471, 494, 506, 539, 572, 603, 608, 617, 644, 645, 648, 649, 650, 663, 675, 694, 698, 715, 724, 826, 854, 890, 895, 922, 962, 989, 1025], "more": [18, 31, 33, 35, 55, 65, 72, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 108, 111, 122, 124, 128, 131, 136, 137, 167, 171, 176, 180, 192, 193, 194, 213, 219, 232, 250, 261, 264, 280, 292, 293, 294, 388, 389, 424, 427, 430, 456, 482, 492, 506, 524, 525, 526, 546, 603, 608, 617, 663, 680, 688, 715, 718, 725, 740, 753, 754, 755, 765, 854, 858, 892, 933, 948, 962, 980, 981, 982, 1010, 1025, 1033], "semigraph": 18, "box": [18, 131, 250], "draw": [18, 23, 24, 121, 482, 488, 617, 1033], "found": [18, 28, 52, 75, 84, 86, 91, 95, 141, 222, 250, 483, 508, 524, 526, 617, 690, 715, 934, 964, 980, 982, 1025, 1032], "unicod": 18, "block": [18, 154, 219, 250, 648, 671, 688, 695, 699, 715, 936, 937, 1025], "http": [18, 31, 89, 101, 130, 136, 250, 505, 961], "en": [18, 31, 250], "wikipedia": 18, "org": [18, 89, 101, 130, 136, 250], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 250], "etc": [19, 30, 31, 99, 102, 104, 108, 111, 112, 114, 250, 557, 718, 936, 937, 1025], "inform": [21, 70, 102, 111, 136, 250, 292, 293, 294, 389, 492, 499, 505, 506, 514, 572, 617, 668, 715, 753, 754, 755, 858, 948, 955, 961, 962, 970, 1025], "separ": [22, 28, 97, 99, 100, 110, 182, 184, 211, 218, 220, 250, 264, 404, 409, 504, 564, 568, 569, 617, 689, 715, 872, 877, 960, 993, 1002, 1025], "between": [22, 72, 119, 120, 122, 124, 136, 186, 242, 250, 289, 306, 376, 402, 408, 409, 423, 458, 463, 476, 482, 488, 498, 565, 567, 594, 597, 598, 617, 669, 709, 715, 747, 767, 838, 870, 876, 877, 891, 910, 915, 927, 954, 1025], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 126, 137, 146, 154, 155, 156, 184, 250, 292, 293, 299, 361, 422, 457, 465, 472, 484, 521, 600, 617, 644, 648, 649, 650, 680, 715, 753, 754, 759, 765, 826, 890, 916, 923, 938, 977, 1025], "both": [23, 28, 56, 155, 156, 169, 170, 177, 192, 250, 263, 376, 472, 473, 474, 475, 476, 478, 479, 480, 572, 606, 617, 627, 649, 650, 654, 655, 664, 715, 838, 847, 1025], "tbl_row": 23, "char": [24, 56, 73, 506, 512, 962, 968], "enabl": [25, 73, 127, 196, 227, 250, 484, 617, 674, 693, 715, 938, 1025], "addit": [25, 30, 31, 91, 102, 111, 120, 138, 143, 154, 182, 196, 197, 203, 220, 227, 230, 250, 257, 317, 356, 359, 457, 495, 499, 505, 506, 514, 553, 554, 558, 561, 562, 563, 564, 570, 576, 588, 591, 599, 602, 603, 617, 637, 641, 648, 674, 675, 682, 689, 693, 697, 715, 771, 779, 824, 955, 961, 962, 970, 1025], "verbos": [25, 128, 506, 962], "debug": [25, 635, 642, 659, 715, 1033], "log": [25, 67, 287, 350, 427, 449, 460, 544, 617, 746, 817, 1009, 1025], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 70, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 122, 167, 182, 188, 192, 193, 195, 209, 210, 250, 432, 617, 671, 673, 715, 897, 1025], "show": [26, 31, 54, 140, 153, 171, 181, 250, 638, 668, 678, 715], "variabl": [26, 47, 52, 123, 126, 176, 211, 250, 663, 715, 1002, 1025, 1032], "restrict": [26, 521, 572, 977], "dictionari": [26, 31, 88, 90, 91, 92, 94, 99, 100, 105, 109, 110, 167, 182, 192, 193, 209, 210, 250, 432, 617, 715, 765, 897, 1025], "those": [26, 31, 99, 250, 465, 505, 617, 718, 916, 961, 1025], "been": [26, 31, 250, 465, 472, 473, 474, 475, 476, 478, 479, 480, 617, 916, 1025], "set_fmt_float": 26, "directli": [26, 52, 122, 124, 128, 250, 353, 354, 355, 596, 617, 715, 819, 820, 821, 1025, 1033], "via": [26, 99, 100, 103, 110, 112, 113, 114, 167, 193, 250, 264, 617], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 98, 99, 103, 104, 105, 108, 109, 250], "bytesio": [27, 28, 31, 32, 35, 98, 99, 100, 103, 104, 108, 250], "compress": [27, 32, 35, 250, 679, 680, 715], "avrocompress": [27, 250], "uncompress": [27, 32, 35, 104, 112, 250, 680, 715], "write": [27, 28, 29, 30, 31, 32, 33, 35, 100, 104, 128, 250, 292, 293, 294, 445, 617, 657, 678, 680, 696, 715, 753, 754, 755, 1025], "apach": [27, 35, 98, 101, 250], "avro": [27, 98, 250, 628], "should": [27, 28, 31, 32, 33, 34, 35, 72, 88, 90, 92, 94, 102, 110, 119, 120, 124, 130, 131, 138, 155, 156, 167, 170, 192, 193, 210, 211, 220, 223, 232, 250, 258, 264, 290, 303, 334, 338, 345, 348, 356, 382, 384, 403, 471, 472, 473, 474, 475, 476, 478, 479, 480, 483, 492, 562, 576, 583, 586, 597, 598, 608, 617, 637, 649, 650, 654, 655, 659, 678, 679, 680, 689, 696, 715, 718, 725, 749, 763, 764, 800, 804, 811, 814, 871, 914, 922, 923, 924, 925, 926, 927, 929, 930, 931, 934, 948, 1025], "snappi": [27, 35, 250, 680, 715], "deflat": [27, 250], "import": [27, 28, 31, 32, 35, 38, 65, 88, 92, 93, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 153, 155, 168, 170, 213, 214, 221, 223, 250, 304, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 572, 574, 606, 617, 628, 649, 655, 659, 715, 757, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 842, 846, 848, 849, 854, 922, 946, 998, 1025, 1033], "pathlib": [27, 28, 32, 35, 110, 250], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 198, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 218, 219, 220, 224, 225, 226, 229, 250, 259, 292, 293, 294, 334, 372, 374, 393, 399, 405, 406, 410, 411, 469, 485, 486, 498, 500, 502, 504, 506, 511, 517, 519, 521, 523, 528, 531, 538, 540, 553, 556, 560, 562, 565, 566, 567, 577, 581, 582, 588, 589, 590, 591, 592, 594, 599, 601, 604, 607, 608, 617, 636, 637, 638, 639, 645, 652, 653, 654, 666, 671, 673, 674, 688, 689, 692, 694, 696, 715, 718, 753, 800, 877, 920, 956, 958, 960, 962, 977, 984, 987, 1025], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 208, 210, 211, 212, 213, 214, 215, 219, 220, 224, 225, 229, 250, 259, 374, 411, 492, 502, 504, 519, 521, 553, 556, 560, 562, 565, 566, 567, 577, 582, 588, 589, 590, 591, 592, 599, 601, 604, 607, 608, 617, 636, 637, 638, 639, 645, 652, 653, 654, 666, 671, 673, 674, 688, 689, 692, 696, 715, 718, 877, 948, 958, 960, 977, 1025], "ham": [27, 28, 30, 32, 35, 135, 136, 138, 139, 140, 141, 147, 148, 150, 157, 158, 160, 169, 173, 174, 175, 178, 181, 186, 188, 190, 192, 194, 195, 196, 199, 200, 202, 204, 205, 206, 211, 212, 213, 214, 215, 219, 224, 225, 250, 562, 636, 637, 638, 639, 645, 654, 666, 671, 673, 674, 688, 694, 715], "d": [27, 28, 30, 32, 35, 56, 73, 91, 115, 137, 153, 155, 157, 158, 161, 169, 206, 208, 221, 225, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 257, 318, 341, 344, 376, 459, 487, 500, 506, 520, 524, 525, 526, 561, 580, 617, 649, 654, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 780, 807, 810, 838, 956, 962, 976, 980, 981, 982, 1025], "e": [27, 28, 30, 32, 35, 56, 73, 89, 99, 100, 103, 104, 108, 112, 114, 137, 153, 155, 156, 158, 170, 206, 208, 213, 221, 223, 250, 257, 264, 334, 338, 345, 350, 356, 376, 425, 432, 472, 473, 474, 475, 476, 478, 479, 480, 487, 492, 576, 608, 617, 649, 650, 655, 657, 671, 715, 718, 800, 804, 811, 817, 838, 935, 948, 1006, 1025], "dirpath": [27, 28, 32, 35, 110, 250], "new_fil": [27, 28, 32, 35, 250], "has_head": [28, 31, 99, 100, 103, 110, 250], "quot": [28, 99, 100, 110, 250], "batch_siz": [28, 99, 100, 113, 250], "1024": [28, 99, 100, 113, 250, 680, 715], "datetime_format": [28, 250], "date_format": [28, 250], "time_format": [28, 250], "float_precis": [28, 31, 250], "null_valu": [28, 99, 100, 110, 250], "textiowrapp": [28, 250], "comma": [28, 250], "csv": [28, 99, 100, 103, 110, 250, 628, 679, 680, 715], "result": [28, 33, 34, 65, 72, 92, 94, 101, 102, 110, 112, 114, 115, 124, 144, 155, 156, 169, 180, 200, 214, 223, 230, 250, 264, 341, 344, 353, 354, 355, 359, 389, 422, 430, 457, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 484, 486, 519, 520, 526, 545, 557, 568, 569, 572, 587, 593, 596, 597, 598, 609, 617, 632, 649, 650, 654, 659, 668, 677, 679, 680, 696, 697, 715, 724, 725, 807, 810, 819, 820, 821, 858, 914, 920, 922, 923, 924, 925, 926, 927, 929, 930, 931, 938, 941, 975, 976, 982, 1006, 1025, 1032, 1033], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 72, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 123, 130, 131, 132, 140, 144, 153, 155, 156, 158, 166, 167, 170, 172, 176, 180, 193, 194, 202, 206, 210, 211, 213, 217, 218, 219, 221, 222, 250, 264, 292, 293, 294, 311, 330, 331, 337, 362, 389, 417, 422, 430, 432, 443, 457, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 488, 492, 493, 507, 509, 511, 512, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 553, 554, 555, 557, 559, 565, 566, 568, 570, 572, 578, 584, 585, 586, 588, 591, 593, 596, 597, 598, 602, 603, 606, 608, 609, 617, 631, 638, 640, 649, 650, 654, 655, 659, 663, 671, 680, 681, 687, 688, 690, 696, 699, 715, 718, 724, 725, 753, 754, 755, 764, 773, 796, 797, 803, 831, 833, 834, 857, 858, 860, 885, 890, 914, 916, 918, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 938, 944, 948, 949, 963, 965, 967, 968, 973, 974, 975, 976, 977, 979, 980, 981, 982, 985, 995, 1001, 1006, 1015, 1025, 1032], "instead": [28, 33, 34, 50, 54, 65, 72, 99, 108, 122, 131, 155, 156, 167, 170, 180, 182, 192, 193, 196, 214, 223, 227, 250, 274, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 509, 511, 517, 523, 557, 559, 572, 584, 585, 588, 591, 593, 596, 602, 606, 609, 617, 643, 649, 650, 655, 674, 693, 696, 715, 718, 734, 764, 800, 804, 811, 914, 936, 937, 965, 967, 973, 979, 1007, 1025, 1032], "whether": [28, 92, 94, 124, 197, 250, 321, 337, 339, 394, 395, 437, 438, 484, 572, 606, 617, 659, 675, 715, 718, 764, 783, 803, 805, 862, 863, 914, 1025, 1032], "header": [28, 31, 35, 95, 99, 100, 103, 110, 141, 184, 218, 250, 680, 715], "field": [28, 57, 84, 86, 91, 213, 220, 250, 422, 432, 506, 507, 520, 521, 534, 568, 569, 587, 602, 617, 689, 715, 890, 976, 977, 991, 993], "symbol": [28, 250], "byte": [28, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 142, 250, 282, 285, 286, 509, 512, 680, 715, 741, 744, 745, 818, 965, 968, 1025], "specifi": [28, 31, 65, 75, 84, 86, 103, 122, 132, 138, 142, 143, 146, 154, 155, 156, 169, 182, 192, 196, 197, 203, 217, 220, 227, 230, 250, 353, 354, 355, 356, 361, 432, 457, 468, 472, 473, 474, 475, 476, 478, 479, 480, 495, 510, 516, 553, 554, 558, 561, 562, 563, 564, 570, 572, 576, 588, 591, 599, 602, 603, 617, 631, 637, 641, 644, 648, 649, 650, 654, 674, 675, 682, 687, 689, 693, 697, 715, 818, 819, 820, 821, 826, 966, 972, 1025], "defin": [28, 31, 38, 119, 120, 122, 131, 155, 156, 180, 183, 232, 250, 264, 376, 421, 459, 472, 473, 474, 475, 476, 478, 479, 480, 555, 572, 586, 602, 606, 617, 649, 650, 667, 699, 715, 718, 725, 838, 889, 1025], "chrono": [28, 250, 341, 344, 524, 525, 526, 529, 807, 810, 980, 981, 982, 985], "rust": [28, 35, 81, 104, 108, 131, 232, 250, 725, 1025], "crate": [28, 250, 499, 500, 505, 506, 514, 515, 524, 525, 526, 529, 718, 955, 956, 961, 962, 970, 971, 980, 981, 982, 985], "fraction": [28, 117, 118, 194, 250, 339, 458, 482, 524, 526, 617, 805, 910, 933, 980, 982, 1025], "second": [28, 121, 155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 572, 573, 574, 605, 606, 608, 617, 649, 650, 655, 715, 800, 804, 811, 980, 982, 1033], "precis": [28, 31, 38, 39, 167, 193, 210, 250, 310, 527, 718, 772, 983], "infer": [28, 88, 90, 91, 92, 93, 94, 99, 100, 103, 110, 113, 131, 250, 469, 507, 524, 525, 526, 527, 529, 596, 617, 715, 920, 963, 980, 981, 982, 983, 985, 1025], "maximum": [28, 99, 100, 110, 120, 121, 122, 124, 173, 250, 396, 433, 451, 465, 588, 617, 660, 715, 753, 785, 864, 898, 906, 911, 916, 1025], "timeunit": [28, 38, 40, 250, 310, 311, 343, 348, 526, 572, 718, 772, 773, 809, 814, 982], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 72, 91, 117, 122, 131, 133, 167, 168, 177, 180, 183, 192, 193, 214, 221, 250, 633, 664, 667, 715, 718, 752, 1025, 1032, 1033], "datetim": [28, 31, 65, 95, 122, 137, 153, 155, 156, 168, 170, 223, 250, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 399, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 543, 572, 574, 580, 586, 606, 617, 649, 650, 655, 715, 718, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 854, 867, 868, 906, 907, 937, 980, 982, 1008, 1025], "place": [28, 132, 139, 160, 161, 184, 189, 199, 200, 203, 217, 225, 250, 274, 409, 416, 485, 486, 494, 617, 631, 676, 677, 682, 687, 715, 734, 877, 884, 917, 919, 940, 941, 950, 1025], "float64": [28, 31, 91, 99, 122, 141, 142, 149, 195, 214, 227, 250, 266, 267, 268, 269, 270, 271, 289, 295, 296, 304, 339, 356, 382, 384, 464, 490, 491, 541, 542, 562, 576, 593, 596, 609, 617, 639, 673, 693, 715, 718, 805, 1007, 1012, 1025], "repres": [28, 48, 63, 88, 90, 92, 93, 94, 204, 224, 250, 382, 384, 497, 550, 553, 562, 565, 572, 576, 586, 597, 598, 601, 606, 607, 617, 683, 691, 715, 937, 952, 1014, 1025], "empti": [28, 79, 91, 99, 100, 103, 110, 133, 134, 155, 164, 176, 250, 586, 599, 633, 634, 649, 663, 715, 718, 752, 756, 841, 1025], "table_nam": [29, 31, 250], "connection_uri": [29, 101, 250], "if_exist": [29, 250], "dbwritemod": [29, 250], "fail": [29, 30, 89, 102, 104, 111, 130, 219, 250, 275, 422, 524, 525, 526, 529, 617, 688, 715, 725, 980, 981, 982, 985, 1025], "dbwriteengin": [29, 250], "sqlalchemi": [29, 250], "databas": [29, 101, 250, 628], "append": [29, 30, 122, 144, 169, 170, 250, 466, 572, 608, 617, 654, 655, 715, 1025], "creat": [29, 31, 88, 92, 94, 111, 120, 121, 122, 123, 124, 125, 133, 134, 155, 156, 181, 184, 223, 227, 250, 311, 338, 345, 422, 466, 472, 473, 475, 478, 479, 480, 518, 549, 563, 571, 572, 573, 574, 605, 606, 617, 633, 634, 640, 649, 650, 693, 715, 752, 756, 764, 769, 773, 804, 811, 908, 914, 917, 974, 1006, 1025, 1032, 1033], "connect": [29, 99, 101, 104, 108, 112, 114, 115, 250, 629], "uri": [29, 30, 101, 102, 111, 250], "postgresql": [29, 101, 250, 457, 617], "usernam": [29, 99, 101, 104, 108, 112, 114, 250], "password": [29, 99, 101, 104, 108, 112, 114, 250], "server": [29, 101, 250], "port": [29, 99, 101, 104, 108, 112, 114, 250], "replac": [29, 30, 99, 100, 110, 145, 146, 190, 218, 227, 250, 311, 337, 432, 515, 617, 643, 693, 715, 773, 803, 897, 936, 937, 971, 1025], "insert": [29, 99, 100, 104, 108, 110, 112, 113, 114, 161, 189, 218, 220, 250, 483, 498, 532, 617, 689, 715, 934, 954, 988, 1025], "mode": [29, 30, 50, 250, 506, 593, 596, 609, 617, 715, 962, 1025, 1032], "new": [29, 30, 31, 110, 128, 131, 140, 160, 161, 180, 181, 188, 189, 207, 220, 221, 227, 250, 259, 311, 358, 375, 431, 514, 515, 520, 521, 533, 534, 540, 617, 628, 638, 671, 686, 689, 693, 699, 715, 721, 769, 773, 823, 908, 919, 970, 971, 976, 977, 989, 991, 997, 1003, 1016, 1025, 1032], "alreadi": [29, 30, 250, 303, 403, 617, 763, 871, 1025], "adbc": [29, 101, 250], "deltalak": [30, 102, 111, 116, 250], "deltat": [30, 250], "ignor": [30, 121, 122, 124, 174, 205, 250, 305, 337, 353, 354, 355, 401, 451, 452, 617, 766, 803, 819, 820, 821, 869, 906, 907, 1025], "overwrite_schema": [30, 250], "storage_opt": [30, 99, 102, 104, 108, 111, 112, 114, 250], "delta_write_opt": [30, 250], "delta": [30, 40, 102, 111, 204, 224, 250, 478, 480, 497, 550, 565, 597, 598, 601, 607, 617, 628, 683, 691, 715, 929, 931, 952, 1014, 1025], "like": [30, 89, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 163, 165, 169, 213, 250, 309, 403, 444, 465, 505, 572, 603, 606, 617, 642, 670, 715, 771, 871, 916, 961, 1025], "categor": [30, 56, 73, 169, 211, 212, 250, 290, 432, 543, 617, 718, 748, 749, 764, 914, 1008, 1025], "protocol": [30, 89, 101, 130, 250], "object": [30, 31, 32, 35, 55, 72, 89, 90, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 122, 124, 130, 154, 155, 156, 171, 213, 214, 250, 572, 586, 606, 628, 649, 650, 670, 715, 718, 748, 770, 861, 953, 1001, 1025], "handl": [30, 72, 95, 99, 100, 110, 115, 250, 305, 401, 532, 617, 766, 869, 988, 1025], "throw": [30, 89, 250, 289, 507, 508, 617, 747, 963, 964, 1025], "add": [30, 31, 100, 131, 144, 155, 227, 228, 250, 461, 536, 574, 578, 608, 617, 649, 654, 693, 694, 695, 715, 724, 1025], "anyth": [30, 192, 250, 506, 962], "updat": [30, 250, 715], "extra": [30, 35, 99, 102, 103, 104, 108, 111, 112, 114, 144, 155, 250, 649, 680, 715, 724, 1025], "storag": [30, 99, 102, 104, 108, 111, 112, 114, 250], "backend": [30, 101, 102, 111, 250], "cloud": [30, 102, 111, 115, 250], "configur": [30, 102, 111, 250], "authent": [30, 102, 111, 250], "see": [30, 31, 38, 101, 102, 103, 111, 117, 118, 122, 124, 136, 169, 183, 250, 292, 293, 294, 361, 375, 389, 430, 492, 499, 505, 506, 514, 572, 595, 617, 718, 753, 754, 755, 858, 948, 955, 961, 962, 970, 1025, 1033], "here": [30, 31, 88, 90, 91, 92, 94, 101, 102, 111, 120, 122, 124, 250, 508, 715, 964], "gc": [30, 102, 111, 250], "azur": [30, 102, 111, 250], "keyword": [30, 53, 102, 108, 111, 136, 183, 192, 196, 227, 230, 250, 459, 599, 602, 617, 667, 674, 693, 697, 715, 1025], "argument": [30, 35, 99, 102, 108, 111, 136, 138, 143, 154, 155, 156, 174, 182, 183, 184, 196, 197, 203, 205, 214, 220, 223, 227, 230, 250, 338, 345, 356, 376, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 511, 517, 523, 553, 554, 558, 561, 562, 563, 564, 570, 572, 576, 588, 591, 596, 599, 602, 603, 606, 617, 637, 641, 648, 649, 650, 667, 674, 675, 682, 689, 693, 697, 715, 804, 811, 838, 967, 973, 979, 1007, 1025], "while": [30, 100, 102, 103, 111, 122, 124, 167, 176, 218, 250, 663, 715], "lake": [30, 102, 111, 250, 628], "instanti": [30, 31, 196, 227, 250, 674, 693, 715], "basic": [30, 31, 250, 1033], "filesystem": [30, 102, 111, 250], "table_path": [30, 102, 111, 250], "doe": [30, 65, 72, 82, 88, 90, 91, 92, 94, 95, 99, 100, 102, 103, 110, 111, 115, 117, 118, 144, 168, 169, 192, 193, 219, 227, 250, 348, 422, 432, 547, 572, 577, 617, 642, 654, 659, 688, 693, 715, 724, 814, 831, 897, 943, 1015, 1025], "match": [30, 31, 38, 72, 82, 88, 90, 91, 92, 94, 117, 118, 146, 170, 192, 250, 438, 477, 499, 500, 503, 505, 506, 507, 508, 514, 515, 522, 524, 525, 526, 562, 617, 644, 655, 715, 718, 847, 854, 928, 955, 956, 959, 961, 962, 963, 964, 970, 971, 978, 980, 981, 982, 1025], "version": [30, 70, 102, 111, 116, 250, 330, 331, 524, 526, 572, 595, 596, 606, 796, 797, 980, 982], "old": [30, 188, 250, 671, 715], "existing_table_path": [30, 250], "store": [30, 99, 108, 144, 167, 193, 250, 724, 1025], "bucket": [30, 102, 111, 250, 338, 345, 804, 811, 834, 1025], "prefix": [30, 128, 250, 259, 286, 431, 522, 532, 536, 617, 718, 745, 978, 988], "aws_region": [30, 111, 250], "the_aws_region": [30, 250], "aws_access_key_id": [30, 102, 111, 250], "the_aws_access_key_id": [30, 102, 111, 250], "aws_secret_access_kei": [30, 102, 111, 250], "the_aws_secret_access_kei": [30, 102, 111, 250], "workbook": [31, 250], "worksheet": [31, 250], "posit": [31, 138, 143, 154, 182, 196, 197, 203, 220, 227, 230, 250, 353, 354, 355, 356, 457, 495, 513, 553, 554, 558, 561, 562, 563, 564, 570, 576, 588, 591, 599, 602, 603, 617, 637, 641, 648, 674, 675, 682, 689, 693, 697, 715, 819, 820, 821, 969, 1025], "tupl": [31, 101, 131, 167, 192, 193, 198, 229, 250, 469, 617, 668, 678, 715, 718, 920, 1025], "a1": [31, 66, 68, 250], "table_styl": [31, 250], "column_format": [31, 250], "dtype_format": [31, 250], "oneormoredatatyp": [31, 120, 250, 854, 1025], "conditional_format": [31, 250], "conditionalformatdict": [31, 250], "column_tot": [31, 250], "columntotalsdefinit": [31, 250], "column_width": [31, 250], "row_tot": [31, 250], "rowtotalsdefinit": [31, 250], "row_height": [31, 250], "sparklin": [31, 250], "sequenc": [31, 57, 65, 71, 88, 90, 91, 92, 94, 97, 99, 100, 110, 120, 121, 122, 132, 137, 143, 144, 169, 170, 176, 180, 183, 184, 203, 211, 217, 219, 220, 221, 222, 223, 250, 380, 422, 430, 459, 495, 534, 555, 558, 568, 569, 578, 580, 587, 595, 617, 631, 641, 654, 655, 667, 682, 687, 688, 689, 690, 715, 724, 765, 767, 890, 937, 991, 1025], "formula": [31, 250, 350, 617, 817, 1025], "autofilt": [31, 250], "autofit": [31, 250], "hidden_column": [31, 250], "hide_gridlin": [31, 250], "sheet_zoom": [31, 250], "excel": [31, 103, 250, 628], "open": [31, 99, 100, 103, 104, 108, 112, 114, 250], "xlsxwriter": [31, 116, 250], "ha": [31, 65, 110, 130, 155, 156, 223, 250, 264, 287, 303, 388, 441, 472, 473, 474, 475, 476, 478, 479, 480, 544, 555, 617, 649, 650, 699, 715, 746, 752, 763, 765, 831, 844, 1009, 1025], "close": [31, 155, 156, 250, 376, 427, 472, 473, 474, 475, 476, 478, 479, 480, 492, 572, 606, 617, 649, 650, 715, 838, 948, 1025], "xlsx": [31, 103, 250], "work": [31, 39, 100, 103, 189, 250, 264, 280, 291, 292, 293, 294, 356, 365, 403, 424, 457, 512, 546, 617, 740, 750, 753, 754, 755, 829, 871, 892, 968, 1010, 1025], "directori": [31, 108, 250], "sheet1": [31, 250], "valid": [31, 38, 50, 104, 108, 124, 128, 142, 169, 250, 303, 499, 500, 505, 506, 508, 514, 515, 572, 617, 654, 715, 718, 763, 818, 831, 955, 956, 961, 962, 964, 970, 971, 1025], "notat": [31, 250], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 120, 122, 123, 125, 155, 156, 250, 291, 339, 365, 366, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 513, 552, 557, 580, 584, 585, 596, 617, 649, 650, 715, 718, 732, 733, 750, 805, 829, 847, 918, 928, 937, 969, 1025, 1032, 1033], "medium": [31, 250], "kei": [31, 65, 70, 72, 155, 167, 169, 170, 177, 182, 184, 188, 191, 193, 250, 602, 649, 654, 655, 664, 671, 672, 715], "follow": [31, 70, 99, 100, 102, 110, 111, 131, 155, 156, 170, 183, 223, 250, 264, 334, 338, 345, 459, 465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 534, 545, 555, 572, 608, 610, 611, 613, 617, 618, 619, 623, 624, 625, 649, 650, 655, 667, 715, 800, 804, 811, 916, 936, 937, 1017, 1019, 1021, 1025, 1026, 1029, 1030, 1031, 1033], "first_column": [31, 250], "last_column": [31, 250], "banded_column": [31, 250], "banded_row": [31, 250], "sheet": [31, 103, 250], "chart": [31, 250, 668, 715], "subsequ": [31, 55, 187, 214, 250, 422, 640, 715], "colnam": [31, 110, 122, 141, 250, 639, 715], "given": [31, 50, 51, 65, 88, 90, 91, 92, 94, 99, 100, 110, 119, 120, 122, 123, 124, 125, 131, 132, 142, 143, 155, 156, 166, 182, 183, 192, 199, 200, 203, 217, 222, 250, 264, 309, 312, 341, 343, 344, 350, 376, 399, 416, 422, 425, 457, 459, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 485, 486, 506, 524, 526, 534, 572, 576, 596, 597, 598, 606, 617, 631, 641, 649, 650, 659, 667, 676, 677, 682, 687, 690, 699, 715, 718, 725, 764, 771, 774, 807, 809, 810, 817, 818, 834, 838, 857, 867, 884, 890, 893, 896, 908, 914, 916, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 934, 940, 941, 962, 980, 982, 1012, 1016, 1025, 1032, 1033], "dd": [31, 250], "mm": [31, 250], "yyyi": [31, 250], "00": [31, 122, 155, 170, 223, 250, 309, 310, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 524, 526, 529, 572, 574, 606, 617, 649, 655, 715, 718, 771, 772, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 980, 982, 985], "overridden": [31, 88, 90, 92, 94, 126, 250, 715], "basi": [31, 122, 250], "param": [31, 88, 90, 91, 92, 94, 99, 100, 110, 121, 122, 124, 192, 250, 715], "It": [31, 131, 177, 183, 232, 250, 264, 288, 440, 572, 617, 659, 664, 699, 715, 936, 937, 1025], "also": [31, 55, 91, 110, 120, 121, 122, 123, 124, 128, 141, 154, 155, 156, 177, 180, 193, 196, 203, 227, 250, 299, 302, 337, 375, 376, 465, 472, 473, 474, 475, 476, 478, 479, 480, 495, 517, 523, 568, 569, 572, 578, 580, 595, 608, 616, 617, 622, 648, 649, 650, 664, 674, 682, 693, 694, 715, 718, 803, 838, 916, 979, 1025], "group": [31, 35, 50, 100, 154, 155, 156, 168, 180, 182, 184, 221, 223, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250, 258, 264, 358, 364, 403, 457, 465, 494, 495, 499, 505, 506, 514, 539, 555, 617, 648, 649, 650, 680, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715, 718, 871, 955, 961, 962, 970], "float_dtyp": [31, 250], "simplifi": [31, 71, 250, 635, 640, 642, 668, 678, 679, 680, 715], "uniform": [31, 250], "condit": [31, 140, 147, 192, 250, 503, 522, 559, 578, 608, 638, 645, 715], "suppli": [31, 88, 90, 91, 92, 94, 192, 250, 459, 617, 715], "typenam": [31, 250], "3_color_scal": [31, 250], "data_bar": [31, 250], "make": [31, 57, 72, 88, 93, 99, 100, 104, 108, 112, 114, 177, 180, 187, 223, 250, 354, 355, 432, 457, 468, 482, 488, 520, 532, 617, 664, 715, 820, 821, 834, 897, 976, 988, 1025, 1033], "icon": [31, 250], "multipl": [31, 53, 71, 72, 99, 100, 110, 112, 113, 114, 120, 124, 132, 138, 142, 144, 147, 154, 155, 160, 168, 182, 184, 196, 197, 203, 217, 227, 230, 250, 421, 437, 441, 448, 449, 457, 469, 472, 473, 474, 475, 476, 478, 479, 480, 495, 553, 554, 558, 562, 568, 569, 570, 578, 587, 588, 591, 595, 603, 608, 617, 631, 637, 645, 648, 649, 674, 675, 682, 687, 693, 697, 699, 715, 724, 818, 889, 902, 920, 1025], "singl": [31, 51, 65, 72, 99, 100, 101, 108, 110, 120, 138, 139, 140, 144, 151, 166, 169, 182, 192, 203, 250, 264, 334, 362, 400, 421, 430, 466, 469, 495, 498, 551, 553, 554, 555, 558, 562, 563, 564, 570, 587, 588, 591, 603, 617, 637, 638, 654, 682, 715, 724, 800, 868, 889, 917, 920, 954, 1001, 1025], "across": [31, 65, 250, 553, 554, 570, 588, 591, 603], "effect": [31, 130, 149, 155, 213, 250, 264, 317, 572, 617, 649, 695, 715, 771, 779], "heatmap": [31, 250], "min": [31, 35, 137, 146, 155, 156, 184, 250, 292, 294, 300, 361, 457, 465, 475, 599, 606, 617, 644, 649, 650, 680, 715, 753, 755, 760, 765, 826, 916, 926, 1025, 1033], "entir": [31, 250], "final": [31, 65, 114, 250, 353, 354, 355, 617, 642, 715, 819, 820, 821, 1025], "made": [31, 250, 606, 1006, 1025], "up": [31, 57, 101, 167, 170, 193, 210, 250, 264, 291, 532, 617, 654, 655, 659, 715, 718, 750, 988, 1025], "abov": [31, 250, 608], "order": [31, 50, 52, 65, 91, 117, 131, 132, 154, 155, 156, 182, 183, 184, 194, 197, 203, 213, 217, 219, 223, 250, 264, 274, 280, 290, 418, 424, 465, 482, 483, 484, 488, 494, 495, 534, 546, 547, 558, 617, 627, 631, 648, 649, 650, 663, 675, 679, 680, 682, 687, 688, 715, 725, 734, 740, 749, 764, 853, 886, 892, 914, 916, 921, 933, 934, 938, 950, 991, 1010, 1011, 1025], "than": [31, 87, 92, 94, 99, 100, 110, 115, 122, 124, 131, 133, 153, 154, 167, 170, 182, 192, 193, 194, 221, 232, 250, 264, 369, 370, 388, 391, 429, 443, 482, 492, 510, 516, 521, 532, 565, 572, 603, 617, 648, 655, 679, 680, 715, 725, 933, 948, 966, 972, 977, 988, 1025, 1033], "total": [31, 142, 250, 818, 1025], "export": [31, 167, 168, 193, 210, 213, 250], "numer": [31, 170, 250, 257, 292, 293, 294, 366, 376, 427, 447, 449, 460, 468, 487, 535, 545, 617, 628, 655, 715, 718, 753, 754, 755, 765, 838, 852, 935, 942, 1025, 1033], "associ": [31, 51, 53, 65, 101, 121, 250], "sum": [31, 50, 65, 142, 149, 154, 155, 156, 166, 184, 230, 250, 264, 301, 302, 350, 362, 422, 472, 475, 479, 551, 553, 568, 570, 578, 595, 617, 635, 640, 642, 648, 649, 650, 666, 668, 678, 697, 715, 718, 761, 762, 817, 818, 923, 924, 926, 929, 930, 931, 1025], "pass": [31, 35, 53, 65, 90, 101, 103, 110, 120, 122, 124, 132, 136, 138, 154, 155, 156, 158, 172, 182, 183, 196, 203, 206, 217, 223, 227, 230, 250, 264, 318, 337, 359, 374, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 511, 517, 523, 553, 554, 558, 562, 570, 572, 580, 588, 591, 602, 603, 617, 631, 637, 648, 649, 650, 652, 659, 667, 674, 678, 682, 687, 693, 697, 699, 715, 725, 780, 803, 824, 833, 860, 967, 973, 979, 995, 1025], "must": [31, 89, 90, 102, 111, 137, 143, 155, 156, 170, 177, 192, 250, 422, 430, 472, 473, 474, 475, 476, 478, 479, 480, 617, 641, 649, 650, 655, 659, 664, 715, 764, 765, 914, 1025], "funcnam": [31, 250], "averag": [31, 250, 353, 354, 355, 465, 617, 819, 820, 821, 916, 1025], "count_num": [31, 250], "count": [31, 50, 99, 100, 104, 108, 110, 112, 113, 114, 137, 155, 156, 170, 180, 181, 184, 218, 222, 223, 228, 232, 241, 250, 265, 298, 334, 392, 400, 450, 455, 472, 473, 474, 475, 476, 478, 479, 480, 500, 547, 549, 556, 592, 617, 649, 650, 655, 666, 690, 695, 699, 708, 715, 765, 800, 834, 868, 904, 909, 956, 1011, 1013, 1025], "std_dev": [31, 250], "var": [31, 125, 250, 480, 617, 715, 1025], "pixel": [31, 250], "unit": [31, 38, 40, 122, 124, 142, 250, 310, 311, 318, 343, 348, 428, 441, 524, 526, 548, 572, 580, 617, 668, 715, 772, 773, 780, 809, 814, 818, 896, 980, 982, 1012, 1025, 1033], "hand": [31, 99, 100, 110, 250, 402, 408, 423, 870, 876, 891], "side": [31, 155, 156, 250, 376, 402, 408, 423, 472, 473, 474, 475, 476, 478, 479, 480, 483, 617, 649, 650, 715, 838, 870, 876, 891, 934, 1025], "call": [31, 54, 100, 122, 124, 128, 131, 154, 155, 156, 171, 249, 250, 264, 299, 302, 588, 591, 617, 629, 648, 649, 650, 714, 715, 718, 725, 1025], "ad": [31, 91, 130, 155, 218, 227, 250, 263, 359, 568, 569, 617, 649, 693, 715, 824, 1025], "end": [31, 99, 100, 108, 110, 155, 250, 282, 285, 286, 309, 334, 338, 339, 356, 376, 417, 499, 503, 506, 518, 522, 557, 562, 572, 576, 584, 585, 606, 608, 617, 649, 651, 658, 668, 715, 718, 744, 771, 800, 804, 838, 885, 959, 962, 974, 978, 1025], "wise": [31, 65, 149, 250, 266, 267, 268, 269, 270, 271, 295, 296, 357, 426, 489, 490, 491, 541, 542, 568, 569, 578, 588, 591, 595, 617, 726, 727, 728, 729, 730, 731, 757, 758, 822, 894, 895, 945, 946, 947, 998, 999, 1025], "particip": [31, 250], "distinct": [31, 124, 182, 250, 280, 424, 465, 574, 617, 740, 892, 916, 1025, 1033], "referenc": [31, 250, 534], "differ": [31, 99, 115, 117, 144, 155, 156, 167, 193, 210, 218, 250, 305, 315, 334, 335, 337, 346, 352, 401, 432, 451, 452, 454, 482, 488, 524, 547, 572, 577, 580, 617, 640, 649, 650, 715, 718, 724, 725, 766, 777, 800, 801, 803, 812, 869, 906, 907, 935, 980, 1025], "row_index": [31, 250], "height": [31, 140, 250], "provid": [31, 53, 99, 100, 101, 102, 110, 111, 122, 124, 166, 250, 264, 283, 284, 422, 430, 501, 502, 505, 507, 508, 580, 602, 617, 628, 679, 680, 715, 725, 742, 743, 834, 857, 957, 958, 961, 963, 964, 1025, 1032, 1033], "intersect": [31, 250, 718], "bodi": [31, 250], "start": [31, 98, 99, 100, 101, 104, 108, 110, 112, 113, 114, 126, 154, 155, 171, 202, 223, 228, 250, 282, 285, 286, 315, 318, 319, 321, 322, 327, 329, 335, 336, 338, 339, 343, 345, 346, 347, 349, 356, 376, 417, 472, 473, 475, 478, 479, 480, 493, 499, 503, 506, 518, 522, 557, 562, 568, 572, 576, 578, 584, 585, 606, 608, 617, 648, 649, 668, 681, 695, 715, 718, 745, 772, 774, 777, 780, 781, 783, 788, 790, 793, 795, 798, 801, 802, 804, 805, 809, 811, 812, 813, 814, 815, 838, 885, 949, 959, 962, 974, 978, 1025, 1033], "zero": [31, 88, 89, 98, 99, 100, 104, 108, 121, 130, 146, 167, 192, 208, 213, 214, 250, 361, 422, 427, 483, 492, 532, 545, 617, 633, 644, 715, 752, 826, 890, 948, 988, 1001, 1006, 1007, 1025], "unless": [31, 65, 90, 214, 250, 517, 523, 596, 715, 979, 1007, 1015, 1025], "marker": [31, 250], "compliant": [31, 250], "case": [31, 65, 88, 90, 91, 92, 94, 114, 126, 131, 144, 155, 156, 167, 250, 309, 430, 431, 440, 441, 499, 506, 514, 617, 649, 650, 715, 718, 724, 771, 955, 962, 970, 1025], "three": [31, 216, 250, 422, 483, 617, 890], "avail": [31, 97, 101, 102, 111, 120, 128, 249, 250, 465, 610, 611, 613, 616, 617, 618, 619, 622, 623, 624, 625, 628, 629, 642, 714, 715, 718, 916, 1017, 1019, 1021, 1025, 1026, 1029, 1030, 1031], "insert_befor": [31, 250], "insert_aft": [31, 250], "respect": [31, 250], "direct": [31, 101, 108, 114, 221, 250], "far": [31, 250], "thei": [31, 91, 110, 117, 128, 171, 250, 471, 617, 718, 922, 1025], "strongli": [31, 126, 131, 192, 232, 250, 264, 617, 725, 1025], "advis": [31, 171, 250, 288, 617], "structur": [31, 79, 83, 85, 144, 183, 213, 250, 459, 617, 667, 715, 724, 1025], "your": [31, 65, 99, 100, 117, 118, 131, 167, 196, 227, 230, 250, 264, 288, 524, 525, 526, 617, 635, 651, 658, 659, 674, 693, 697, 715, 725, 980, 981, 982, 1025, 1033], "wherev": [31, 131, 232, 250, 264, 617, 725, 1025], "possibl": [31, 99, 131, 154, 167, 193, 219, 232, 250, 264, 428, 440, 521, 548, 617, 648, 688, 715, 725, 977, 1025], "simpl": [31, 124, 180, 250], "colx": [31, 55, 250, 718, 1033], "coli": [31, 250, 718, 1033], "after": [31, 55, 72, 91, 98, 99, 100, 104, 108, 110, 112, 113, 114, 144, 220, 249, 250, 356, 432, 457, 465, 532, 617, 689, 715, 724, 897, 916, 988, 1025], "befor": [31, 99, 110, 126, 128, 144, 155, 170, 220, 250, 301, 302, 303, 432, 457, 458, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 532, 537, 597, 598, 617, 649, 652, 655, 689, 715, 724, 761, 762, 763, 897, 910, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 988, 994, 1025], "most": [31, 52, 88, 99, 100, 101, 110, 250, 441, 448, 458, 521, 549, 617, 902, 910, 977, 1013, 1025, 1032], "mandatori": [31, 250], "return_dtyp": [31, 131, 250, 264, 430, 432, 555, 587, 617, 725, 897, 1025], "latter": [31, 144, 250, 724, 1025], "appropri": [31, 213, 250, 465, 617, 916, 1025], "pure": [31, 250], "actual": [31, 91, 103, 122, 124, 250, 288, 617, 943, 1025], "indic": [31, 98, 99, 100, 104, 108, 110, 119, 120, 124, 155, 156, 170, 197, 211, 223, 250, 275, 334, 338, 345, 378, 381, 382, 384, 385, 386, 421, 436, 439, 472, 473, 474, 475, 476, 478, 479, 480, 483, 489, 539, 558, 559, 617, 649, 650, 655, 675, 715, 718, 800, 804, 811, 842, 846, 848, 849, 850, 851, 889, 934, 945, 996, 1002, 1025, 1033], "calcul": [31, 65, 155, 204, 224, 250, 305, 353, 354, 355, 389, 401, 402, 428, 477, 492, 497, 548, 550, 553, 555, 565, 597, 598, 601, 607, 617, 649, 683, 691, 715, 766, 819, 820, 821, 858, 869, 870, 928, 948, 952, 1014, 1025], "individu": [31, 122, 156, 213, 250, 264, 506, 617, 650, 680, 715, 751, 962, 1025], "gridlin": [31, 250], "zoom": [31, 250], "level": [31, 35, 110, 112, 113, 114, 122, 131, 149, 180, 250, 362, 617, 651, 658, 680, 715], "definit": [31, 120, 250, 389, 617, 858, 1025], "take": [31, 122, 128, 149, 155, 177, 183, 184, 207, 213, 250, 334, 495, 540, 572, 575, 577, 617, 649, 664, 686, 715, 800, 997, 1016, 1025], "care": [31, 250, 264, 484, 617, 938, 1025], "rel": [31, 101, 102, 111, 117, 118, 250, 334, 353, 354, 355, 474, 476, 478, 480, 617, 800, 819, 820, 821, 1025], "readthedoc": [31, 250], "io": [31, 250], "working_with_conditional_format": [31, 250], "html": [31, 89, 130, 136, 250], "similarli": [31, 91, 155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "well": [31, 99, 100, 110, 143, 184, 250, 376, 572, 617, 641, 715, 838, 1025], "adjac": [31, 250], "two": [31, 55, 90, 92, 94, 101, 149, 176, 177, 184, 216, 231, 232, 250, 258, 306, 311, 422, 494, 539, 565, 567, 597, 598, 606, 617, 663, 664, 698, 699, 715, 767, 773, 890, 1025], "help": [31, 250, 642, 715], "appear": [31, 91, 117, 250, 547, 617, 1011, 1025], "working_with_sparklin": [31, 250], "inject": [31, 65, 250], "locat": [31, 144, 190, 215, 220, 250, 483, 617, 689, 715, 724, 934, 937, 996, 1025], "syntax": [31, 131, 180, 250, 499, 505, 506, 514, 678, 715, 955, 961, 962, 970, 1025], "ensur": [31, 73, 101, 121, 122, 124, 154, 182, 192, 250, 376, 549, 617, 648, 659, 715, 718, 1006, 1013, 1025], "correctli": [31, 250], "microsoft": [31, 116, 250], "com": [31, 101, 250, 353, 354, 355, 505, 506, 617, 819, 820, 821, 961, 962, 1025], "u": [31, 38, 40, 53, 95, 167, 193, 210, 250, 310, 311, 318, 343, 348, 524, 526, 572, 580, 718, 772, 773, 780, 809, 814, 980, 982], "offic": [31, 250], "f5ed2452": [31, 250], "2337": [31, 250], "4f71": [31, 250], "bed3": [31, 250], "c8ae6d2b276": [31, 250], "random": [31, 120, 122, 124, 157, 194, 250, 371, 465, 482, 488, 617, 832, 916, 933, 944, 1025], "date": [31, 38, 65, 99, 100, 101, 110, 115, 122, 137, 153, 155, 156, 168, 170, 223, 250, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 399, 472, 473, 474, 475, 476, 478, 479, 480, 524, 525, 543, 572, 580, 586, 605, 617, 649, 650, 655, 715, 718, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 854, 867, 868, 906, 907, 937, 980, 981, 1008, 1025], "dtm": [31, 250, 311, 773], "2023": [31, 95, 116, 168, 250, 311, 572, 586, 718, 773], "num": [31, 216, 250, 376, 379, 532, 617, 838, 1025], "500": [31, 167, 222, 250, 642, 690, 715, 788, 790, 798, 805, 923, 924, 926, 1025], "val": [31, 191, 250, 290, 459, 543, 608, 617, 672, 715, 749], "10_000": [31, 250], "20_000": [31, 250], "30_000": [31, 250], "increas": [31, 65, 99, 108, 250, 303, 617, 763, 1025], "b4": [31, 250], "light": [31, 250], "twice": [31, 103, 250], "each": [31, 65, 100, 113, 117, 118, 120, 131, 153, 154, 155, 156, 168, 170, 182, 214, 220, 223, 229, 230, 232, 233, 235, 244, 250, 264, 334, 338, 345, 407, 420, 427, 465, 474, 476, 478, 480, 495, 506, 520, 521, 555, 558, 564, 572, 585, 602, 617, 649, 650, 655, 668, 689, 697, 699, 700, 702, 711, 715, 751, 800, 804, 811, 875, 888, 916, 962, 976, 977, 993, 1025, 1033], "titl": [31, 50, 250], "explicit": [31, 110, 120, 250, 595], "integr": [31, 250, 1033], "multi_fram": [31, 250], "wb": [31, 250], "coordin": [31, 250], "advanc": [31, 250, 422, 890, 1033], "min_color": [31, 250], "76933c": [31, 250], "mid_color": [31, 250], "c4d79b": [31, 250], "max_color": [31, 250], "ebf1d": [31, 250], "data_bar_2010": [31, 250], "bar_color": [31, 250], "9bbb59": [31, 250], "bar_negative_color_sam": [31, 250], "bar_negative_border_color_sam": [31, 250], "000": [31, 250, 1033], "white": [31, 250], "w": [31, 52, 53, 155, 250, 505, 649, 715, 718, 961, 973], "get_worksheet_by_nam": [31, 250], "fmt_titl": [31, 250], "add_format": [31, 250], "font_color": [31, 250], "4f6228": [31, 250], "font_siz": [31, 250], "12": [31, 65, 95, 121, 122, 155, 156, 170, 223, 250, 301, 309, 311, 319, 322, 329, 330, 331, 336, 338, 345, 349, 458, 464, 479, 487, 527, 569, 571, 572, 573, 587, 606, 617, 649, 650, 651, 655, 658, 678, 685, 715, 718, 725, 764, 771, 773, 795, 804, 811, 932, 983, 1025, 1033], "ital": [31, 250], "bold": [31, 250], "customis": [31, 250], "trend": [31, 250], "win_loss": [31, 250], "subtl": [31, 250], "tone": [31, 250], "hidden": [31, 250], "id": [31, 72, 232, 250, 514, 515, 547, 549, 617, 699, 1011, 1025, 1033], "q1": [31, 250], "55": [31, 67, 250], "20": [31, 122, 144, 160, 161, 177, 183, 185, 189, 190, 250, 272, 273, 274, 305, 338, 345, 371, 375, 459, 472, 473, 475, 580, 586, 606, 617, 664, 667, 715, 718, 766, 811, 1025], "35": [31, 116, 250, 305, 617, 766, 1025], "q2": [31, 250], "30": [31, 144, 155, 160, 183, 189, 190, 209, 227, 250, 272, 273, 274, 305, 311, 316, 322, 330, 336, 337, 338, 345, 349, 371, 487, 572, 586, 606, 617, 649, 667, 693, 715, 718, 764, 766, 773, 778, 796, 803, 804, 811, 1025, 1033], "15": [31, 116, 121, 131, 155, 156, 161, 250, 303, 305, 331, 338, 345, 459, 479, 569, 596, 606, 617, 649, 650, 715, 718, 763, 766, 804, 811, 1025], "60": [31, 144, 250, 339, 340, 479, 524, 617, 801, 805, 806, 980], "q3": [31, 250], "40": [31, 144, 183, 250, 338, 345, 371, 527, 617, 667, 715, 784, 811, 983], "80": [31, 250], "q4": [31, 250], "75": [31, 137, 250, 261, 456, 472, 473, 474, 475, 478, 479, 480, 617, 765, 834, 914, 1025, 1033], "account": [31, 95, 101, 250, 334, 353, 354, 355, 617, 800, 819, 820, 821, 1025], "flavour": [31, 250], "integer_dtyp": [31, 196, 250, 674, 715, 718], "0_": [31, 250], "just": [31, 110, 176, 250, 663, 715], "unifi": [31, 250, 718], "multi": [31, 99, 100, 250, 356, 505, 588, 591, 617, 961], "2_color_scal": [31, 250], "95b3d7": [31, 250], "ffffff": [31, 250], "base": [31, 36, 140, 147, 155, 156, 250, 309, 317, 350, 353, 354, 355, 425, 426, 513, 617, 638, 645, 649, 650, 715, 718, 771, 779, 817, 819, 820, 821, 834, 893, 894, 914, 969, 1016, 1025, 1033], "standardis": [31, 250], "z": [31, 52, 72, 95, 120, 122, 142, 163, 165, 169, 176, 193, 250, 257, 261, 290, 371, 398, 456, 468, 506, 524, 526, 596, 617, 654, 663, 681, 715, 718, 749, 826, 962, 980, 982, 1025, 1032], "score": [31, 250], "conjunct": [31, 103, 250], "a123": [31, 250], "b345": [31, 250], "c567": [31, 250], "d789": [31, 250], "e101": [31, 250], "45": [31, 156, 250, 311, 338, 345, 479, 500, 506, 586, 606, 617, 650, 715, 718, 773, 804, 811, 956, 962, 1033], "85": [31, 250, 1033], "font": [31, 250], "consola": [31, 250], "standard": [31, 116, 204, 213, 250, 322, 354, 478, 492, 497, 508, 601, 617, 683, 715, 784, 820, 948, 952, 964, 1025, 1033], "stdev": [31, 250], "ipccompress": [32, 250], "arrow": [32, 74, 88, 101, 104, 112, 208, 250, 679, 715, 1001, 1006, 1025], "ipc": [32, 104, 105, 112, 115, 250, 628], "binari": [32, 250, 282, 284, 285, 286, 554, 741, 743, 744, 745], "feather": [32, 104, 112, 250, 628], "lz4": [32, 35, 250, 679, 680, 715], "zstd": [32, 35, 250, 679, 680, 715], "pretti": [33, 250], "row_ori": [33, 250], "iobas": [33, 34, 106, 107, 250, 445, 670, 696, 715], "serial": [33, 34, 250], "represent": [33, 34, 212, 250, 290, 315, 319, 322, 323, 325, 327, 329, 332, 335, 336, 339, 346, 347, 349, 543, 617, 640, 657, 715, 749, 777, 781, 783, 784, 788, 790, 793, 795, 798, 801, 802, 805, 812, 813, 815, 1004, 1008, 1025], "orient": [33, 66, 68, 92, 94, 250, 715], "slower": [33, 92, 94, 131, 154, 182, 223, 232, 250, 648, 715, 725, 1025], "common": [33, 65, 72, 250, 572, 622], "write_ndjson": [33, 250], "newlin": [34, 107, 113, 250], "delimit": [34, 99, 100, 107, 110, 113, 184, 211, 250, 498, 954, 1002, 1025], "parquetcompress": [35, 250], "compression_level": [35, 250, 680, 715], "statist": [35, 99, 100, 108, 114, 137, 250, 354, 355, 389, 472, 473, 474, 475, 476, 477, 478, 479, 480, 492, 617, 680, 715, 765, 820, 821, 858, 928, 948, 1025], "row_group_s": [35, 250, 680, 715], "use_pyarrow": [35, 99, 104, 108, 250, 680, 715, 1005, 1006, 1025], "pyarrow_opt": [35, 102, 108, 111, 250], "parquet": [35, 108, 109, 114, 250, 628, 680, 715], "gzip": [35, 250, 680, 715], "lzo": [35, 250, 680, 715], "brotli": [35, 250, 680, 715], "choos": [35, 184, 250, 679, 680, 715], "good": [35, 167, 250, 679, 680, 715], "perform": [35, 65, 79, 89, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 155, 156, 170, 187, 232, 250, 264, 288, 457, 524, 525, 526, 617, 649, 650, 655, 679, 680, 695, 715, 725, 980, 981, 982, 1025], "fast": [35, 123, 125, 250, 359, 484, 617, 679, 680, 715, 824, 938, 1025, 1033], "decompress": [35, 250, 679, 680, 715], "backward": [35, 146, 170, 250, 281, 331, 361, 617, 644, 655, 680, 715, 797, 826, 1025], "guarante": [35, 89, 99, 100, 219, 250, 642, 680, 688, 715], "deal": [35, 167, 250, 337, 465, 524, 617, 680, 715, 803, 916, 980, 1025], "older": [35, 250, 680, 715], "reader": [35, 97, 99, 100, 104, 108, 250, 629, 680, 715], "higher": [35, 186, 242, 250, 463, 476, 594, 617, 669, 680, 709, 715, 915, 927, 1025], "mean": [35, 99, 100, 104, 108, 110, 137, 146, 154, 155, 156, 170, 184, 223, 230, 250, 334, 338, 345, 358, 361, 472, 473, 474, 475, 476, 478, 479, 480, 492, 505, 560, 572, 617, 644, 648, 649, 650, 655, 659, 680, 697, 715, 765, 800, 804, 811, 823, 826, 831, 924, 948, 961, 1025], "smaller": [35, 142, 250, 642, 680, 715, 818, 1025], "disk": [35, 104, 250, 678, 679, 680, 715], "11": [35, 116, 122, 156, 250, 307, 308, 322, 330, 331, 334, 338, 345, 375, 458, 465, 479, 493, 532, 552, 562, 603, 617, 635, 650, 651, 658, 668, 680, 685, 715, 718, 725, 800, 804, 811, 922, 1025], "22": [35, 121, 250, 338, 345, 348, 472, 473, 475, 478, 479, 480, 524, 562, 617, 680, 715, 718, 804, 811, 814, 980, 1033], "comput": [35, 71, 72, 76, 142, 154, 170, 214, 219, 230, 242, 250, 256, 266, 267, 268, 269, 270, 271, 277, 278, 279, 295, 296, 298, 299, 300, 301, 302, 306, 350, 357, 389, 402, 408, 412, 413, 414, 423, 425, 426, 427, 448, 457, 458, 462, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 489, 490, 491, 492, 496, 541, 542, 553, 554, 558, 565, 567, 570, 575, 588, 591, 597, 598, 603, 617, 648, 652, 654, 655, 680, 688, 694, 697, 709, 715, 720, 726, 727, 728, 729, 730, 731, 737, 738, 739, 757, 758, 759, 760, 761, 762, 767, 817, 818, 822, 858, 870, 876, 880, 881, 882, 891, 893, 894, 895, 902, 910, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 945, 946, 947, 948, 951, 998, 999, 1007, 1025], "512": [35, 250, 460, 617, 910, 1025], "implement": [35, 89, 130, 131, 232, 250, 264, 617, 699, 725, 936, 937, 1025], "v": [35, 52, 53, 142, 250, 483, 617, 764, 934, 1025], "At": [35, 250], "moment": [35, 136, 250, 389, 492, 617, 858, 948, 1025], "pyarrow": [35, 88, 93, 99, 101, 102, 104, 108, 111, 115, 116, 168, 208, 213, 214, 250, 629, 1001, 1005, 1006, 1007, 1025], "write_t": [35, 250], "calendar": [37, 38, 155, 156, 170, 223, 250, 322, 334, 338, 345, 349, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 784, 800, 804, 811, 815], "time_unit": [38, 40, 95, 310, 311, 318, 343, 348, 524, 526, 572, 580, 718, 772, 773, 780, 809, 814, 980, 982], "time_zon": [38, 95, 312, 337, 526, 572, 718, 771, 774, 779, 803, 982], "timezon": [38, 572, 718], "m": [38, 40, 53, 169, 250, 309, 310, 311, 317, 318, 341, 343, 344, 348, 505, 524, 525, 526, 529, 572, 580, 654, 715, 718, 771, 772, 773, 779, 780, 807, 809, 810, 814, 961, 980, 981, 982, 985], "zone": [38, 309, 312, 337, 524, 526, 572, 771, 774, 803, 980, 982], "zoneinfo": [38, 718], "run": [38, 71, 123, 125, 131, 154, 171, 184, 219, 232, 250, 264, 303, 403, 599, 617, 635, 640, 642, 648, 659, 663, 668, 678, 679, 680, 688, 715, 718, 725, 763, 871, 1025, 1032, 1033], "available_timezon": [38, 718], "check": [38, 99, 100, 110, 117, 118, 150, 155, 156, 164, 166, 169, 250, 260, 262, 282, 285, 286, 376, 380, 399, 499, 503, 522, 617, 649, 650, 654, 659, 715, 722, 723, 741, 744, 745, 839, 841, 844, 845, 847, 852, 853, 854, 856, 857, 867, 935, 955, 959, 978, 1025], "128": [39, 67, 910, 1025], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 467, 499, 617, 918, 955, 1025], "neg": [39, 155, 156, 158, 172, 199, 200, 202, 206, 250, 416, 417, 459, 485, 486, 493, 518, 617, 649, 650, 676, 677, 681, 695, 715, 833, 860, 884, 885, 940, 941, 949, 974, 995, 1025], "scale": [39, 142, 250, 459, 527, 617, 818, 983, 1025], "experiment": [39, 115, 196, 221, 222, 227, 250, 303, 338, 472, 473, 474, 475, 476, 478, 479, 480, 617, 674, 690, 693, 715, 763, 804, 834, 914, 1025], "progress": 39, "expect": [39, 80, 82, 87, 264, 555, 586, 617, 657, 659, 715, 914, 1025], "32": [41, 44, 60, 67, 156, 166, 250, 449, 487, 617, 650, 715, 767, 801, 910, 927, 1025], "sign": [43, 44, 45, 46, 334, 467, 532, 617, 800, 847, 918, 988, 1025], "arrai": [47, 88, 92, 99, 100, 108, 142, 208, 213, 214, 250, 277, 278, 279, 280, 284, 292, 293, 294, 298, 299, 300, 301, 302, 398, 411, 412, 413, 414, 415, 418, 419, 426, 472, 473, 475, 479, 484, 500, 502, 505, 508, 575, 617, 715, 737, 738, 739, 740, 743, 753, 754, 755, 759, 760, 761, 762, 767, 818, 866, 879, 880, 881, 882, 883, 886, 887, 894, 895, 923, 924, 926, 929, 930, 931, 938, 943, 956, 958, 961, 964, 1001, 1006, 1007, 1015, 1025], "integer_list": 47, "float_list": 47, "wrap": [49, 95, 376, 617], "arbitrari": [49, 122, 718], "python": [49, 99, 100, 116, 131, 167, 193, 210, 232, 250, 264, 311, 430, 555, 572, 606, 608, 617, 622, 699, 725, 773, 785, 786, 787, 792, 1005, 1025], "queri": [50, 52, 71, 101, 104, 110, 112, 113, 114, 144, 171, 183, 250, 264, 430, 432, 508, 617, 635, 640, 642, 651, 658, 668, 678, 695, 699, 715, 724, 725, 964, 1025, 1032], "eager": [50, 51, 52, 53, 54, 55, 155, 221, 250, 310, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 557, 559, 572, 580, 584, 585, 593, 596, 602, 606, 609, 616, 617, 649, 715, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815, 1032], "pars": [50, 99, 100, 103, 110, 112, 113, 132, 154, 196, 203, 217, 227, 230, 250, 376, 457, 495, 507, 513, 524, 526, 527, 553, 554, 558, 561, 563, 564, 570, 580, 588, 591, 599, 600, 602, 603, 617, 631, 648, 674, 682, 687, 693, 697, 715, 838, 963, 969, 980, 982, 983, 1025], "against": [50, 403, 715, 871, 1032, 1033], "eagerli": [50, 422], "unset": [50, 121, 337, 422, 803], "init": [50, 128], "eager_execut": [50, 1032], "itself": [50, 120, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 597, 598, 617, 657, 715, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 1025, 1032], "alwai": [50, 99, 121, 131, 232, 250, 440, 524, 572, 608, 659, 715, 725, 980, 1025, 1032, 1033], "impact": [50, 155, 250, 649, 715, 1032], "declar": [50, 88, 90, 91, 92, 94, 250, 715], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1032], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 321, 323, 330, 331, 334, 718, 783, 796, 797, 800], "533316061": 50, "232338648": 50, "1970": [50, 115], "134821952": 50, "register_glob": [51, 53, 55, 1032], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1032], "frame_data": [51, 54], "execut": [51, 52, 54, 72, 171, 250, 288, 403, 617, 632, 659, 668, 715, 871, 1032], "collect": [51, 52, 55, 68, 71, 110, 111, 115, 122, 124, 138, 140, 171, 208, 250, 264, 380, 557, 563, 580, 602, 606, 617, 631, 637, 638, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 674, 676, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 718, 845, 1025, 1032, 1033], "global": [52, 56, 73, 122, 127, 213, 250, 432, 617, 1032], "scope": [52, 55, 128, 627, 718, 1032], "automat": [52, 55, 88, 90, 91, 92, 94, 95, 99, 100, 101, 110, 122, 124, 126, 196, 227, 250, 432, 511, 517, 523, 617, 674, 693, 715, 897, 967, 973, 979, 1025, 1032], "map": [52, 53, 90, 91, 99, 100, 104, 105, 108, 109, 110, 112, 131, 141, 167, 188, 192, 193, 209, 250, 338, 345, 431, 432, 457, 549, 555, 617, 639, 671, 715, 804, 811, 897, 1025, 1032], "recent": [52, 458, 617, 910, 1025, 1032], "df1": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 177, 214, 225, 250, 664, 715], "x": [52, 53, 65, 72, 95, 99, 100, 101, 110, 120, 122, 142, 160, 163, 165, 169, 176, 184, 193, 250, 257, 261, 264, 304, 351, 352, 366, 369, 370, 371, 391, 398, 409, 427, 429, 430, 447, 449, 453, 454, 456, 460, 468, 489, 492, 520, 535, 543, 545, 552, 555, 568, 569, 578, 586, 587, 595, 617, 654, 659, 663, 681, 715, 718, 721, 725, 826, 856, 945, 948, 976, 1008, 1025, 1032], "df2": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 214, 225, 250], "t": [52, 53, 72, 103, 110, 131, 155, 183, 219, 221, 250, 264, 303, 309, 317, 337, 350, 353, 354, 355, 403, 457, 459, 505, 511, 524, 526, 555, 608, 617, 649, 667, 688, 715, 718, 725, 763, 803, 817, 819, 820, 821, 871, 914, 935, 961, 967, 973, 980, 982, 1015, 1025], "join": [52, 56, 65, 71, 72, 73, 170, 222, 250, 375, 457, 617, 635, 640, 642, 655, 668, 678, 690, 694, 715], "named_fram": [53, 1032], "lf1": [53, 55], "o": [53, 104, 112, 287, 303, 504, 544, 617, 746, 763, 960, 979, 1009, 1025], "lf2": [53, 55, 715], "p": [53, 67, 183, 250, 459, 602, 617, 667, 715], "q": [53, 250, 602, 617], "r": [53, 459, 500, 504, 505, 506, 514, 617, 718, 956, 960, 961, 962, 970], "lf3": [53, 715], "lf4": [53, 715], "either": [53, 122, 156, 166, 171, 174, 182, 192, 205, 213, 250, 524, 553, 558, 602, 650, 657, 715, 718, 980], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 608], "hello_world": 54, "baz": [54, 161, 162, 184, 220, 250, 519, 521, 653, 689, 715, 718, 977], "hello_data": 54, "foo_bar": [54, 586], "registr": [55, 628], "lifetim": [55, 128, 627], "context": [55, 56, 126, 180, 233, 250, 258, 264, 288, 297, 362, 403, 440, 494, 495, 549, 555, 566, 577, 580, 596, 599, 606, 616, 617, 627, 628, 694, 700, 715, 871, 1032], "manag": [55, 56, 627, 628, 1032], "often": [55, 128, 155, 156, 250, 400, 468, 617, 649, 650, 715, 868], "want": [55, 91, 131, 144, 180, 250, 264, 292, 293, 294, 362, 430, 432, 472, 473, 474, 475, 476, 478, 479, 480, 568, 578, 593, 596, 609, 617, 635, 651, 658, 715, 718, 724, 725, 753, 754, 755, 1006, 1025], "df0": [55, 177, 250, 664, 715], "exit": [55, 56, 128, 1032], "construct": [55, 88, 90, 91, 92, 93, 94, 250, 368, 432, 593, 596, 609, 617, 647, 670, 715, 1025], "persist": [55, 679, 680, 715], "through": [55, 718, 1025], "tbl0": 55, "remain": [55, 99, 100, 110, 142, 250, 520, 521, 659, 715, 818, 976, 977, 1025], "text": [55, 512, 514, 515, 968, 1033], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 126, 128, 155, 156, 250, 649, 650, 715], "cach": [56, 71, 73, 104, 110, 112, 114, 127, 432, 472, 473, 474, 475, 476, 478, 479, 480, 524, 525, 526, 529, 617, 627, 635, 640, 642, 668, 678, 715, 980, 981, 982, 985], "categori": [56, 73, 211, 250, 290, 617, 749, 764, 834, 914, 1025], "until": [56, 171, 250, 288, 572, 617], "finish": [56, 76, 144, 250, 724, 1025], "invalid": [56, 99, 100, 110, 507, 508, 513, 545, 572, 617, 963, 964, 969], "outermost": 56, "color": [56, 73, 232, 282, 284, 285, 286, 699], "red": [56, 73, 232, 699], "green": [56, 73, 232, 699], "blue": [56, 73, 282, 284, 285, 286], "orang": [56, 73, 135, 233, 234, 236, 237, 238, 240, 242, 243, 250, 700, 701, 703, 704, 705, 707, 709, 710], "uint8": [56, 73, 119, 121, 212, 213, 250, 301, 302, 432, 537, 552, 617, 718, 761, 762, 994, 1025, 1033], "yellow": [56, 73, 282, 284, 285, 286], "black": [56, 73, 131, 250, 282, 284, 285, 286], "succe": [56, 99, 100, 110], "df_join": [56, 73], "cat": [56, 73, 212, 250, 499, 528, 531, 543, 564, 613, 617, 718, 764, 834, 914, 955, 984, 987, 1021, 1025], "u8": [56, 73, 211, 212, 250, 432, 552, 617, 718, 1002, 1025, 1033], "schemadict": [57, 88, 90, 91, 92, 93, 94, 110, 195, 250, 602, 659, 673, 699, 715], "composit": [57, 121, 1033], "struct_seri": [57, 699], "dai": [58, 155, 156, 168, 170, 223, 250, 318, 322, 329, 330, 331, 334, 335, 336, 338, 343, 345, 346, 347, 349, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 573, 574, 617, 649, 650, 655, 715, 796, 797, 800, 801, 804, 811, 813], "unsign": [59, 60, 61, 62, 467, 617, 847, 918, 1025], "could": [63, 76, 140, 155, 250, 289, 568, 578, 617, 638, 649, 715, 747, 1025], "static": [63, 699], "utf": 64, "frametyp": [65, 1032], "joinstrategi": [65, 169, 250, 654, 715], "outer": [65, 72, 169, 250, 654, 715], "descend": [65, 132, 197, 203, 217, 250, 274, 418, 465, 484, 494, 495, 558, 617, 631, 675, 682, 687, 715, 734, 853, 886, 916, 938, 950, 1025], "fill": [65, 72, 133, 145, 146, 200, 221, 250, 281, 299, 302, 360, 361, 367, 375, 472, 473, 475, 479, 486, 510, 516, 532, 579, 593, 596, 609, 617, 643, 644, 677, 694, 715, 825, 826, 908, 923, 924, 926, 929, 930, 931, 941, 966, 972, 988, 1025], "sort": [65, 66, 117, 121, 132, 155, 156, 170, 177, 183, 184, 197, 217, 223, 235, 244, 250, 274, 290, 362, 457, 484, 495, 549, 551, 558, 617, 631, 640, 649, 650, 655, 664, 667, 668, 675, 678, 687, 702, 711, 715, 718, 734, 749, 853, 938, 1010, 1013, 1025, 1033], "origin": [65, 99, 100, 219, 250, 337, 388, 432, 457, 467, 500, 505, 506, 508, 510, 516, 532, 617, 688, 715, 764, 803, 897, 914, 956, 961, 962, 964, 966, 972, 988, 1025], "In": [65, 102, 111, 114, 122, 124, 128, 131, 142, 144, 155, 156, 180, 213, 250, 264, 572, 617, 649, 650, 715, 724, 818, 917, 1025], "duplic": [65, 77, 163, 169, 170, 219, 250, 377, 617, 654, 655, 688, 715, 840, 914, 1025], "behaviour": [65, 72, 499, 505, 506, 514, 545, 617, 955, 961, 962, 970], "strategi": [65, 72, 99, 119, 120, 121, 122, 124, 146, 155, 169, 170, 179, 250, 264, 361, 422, 617, 644, 649, 654, 655, 715, 826, 890, 1025], "suitabl": [65, 72, 120, 131, 250, 264, 483, 617, 725, 934, 1025, 1033], "get": [65, 96, 105, 109, 126, 132, 135, 141, 151, 152, 155, 156, 158, 159, 163, 165, 166, 172, 179, 192, 195, 198, 202, 206, 217, 226, 235, 244, 250, 258, 272, 273, 274, 276, 280, 298, 299, 300, 301, 302, 318, 334, 363, 372, 377, 379, 387, 390, 393, 405, 410, 411, 424, 433, 434, 435, 440, 442, 446, 451, 452, 463, 493, 497, 509, 512, 537, 538, 546, 550, 572, 577, 582, 588, 589, 590, 591, 601, 604, 607, 617, 631, 636, 639, 646, 649, 650, 651, 656, 658, 673, 681, 685, 687, 692, 702, 711, 715, 732, 733, 734, 735, 736, 740, 751, 759, 760, 761, 762, 780, 800, 830, 833, 838, 840, 843, 855, 860, 873, 878, 879, 892, 898, 900, 901, 903, 906, 907, 911, 912, 915, 949, 952, 965, 968, 995, 1001, 1002, 1010, 1014, 1015, 1025], "speedup": [65, 131, 167, 250, 264, 617, 725, 1025], "receiv": [65, 110, 131, 183, 250, 459, 617, 667, 715, 1033], "now": [65, 156, 250, 524, 526, 617, 650, 715, 980, 982], "One": [65, 137, 180, 184, 250, 261, 456, 617, 718, 765, 1025], "whose": [65, 170, 184, 250, 356, 576, 617, 655, 715], "uniqu": [65, 119, 120, 121, 124, 165, 169, 180, 241, 250, 265, 276, 379, 387, 450, 524, 525, 526, 529, 547, 549, 556, 592, 617, 654, 708, 715, 736, 765, 843, 855, 904, 914, 980, 981, 982, 985, 1011, 1013, 1025], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 132, 147, 149, 171, 203, 217, 250, 260, 261, 262, 282, 285, 286, 321, 362, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 394, 395, 399, 456, 495, 507, 551, 552, 558, 559, 602, 617, 631, 634, 645, 657, 682, 687, 715, 718, 722, 723, 735, 741, 783, 827, 838, 839, 840, 842, 843, 845, 846, 848, 849, 850, 851, 855, 862, 863, 867, 911, 912, 936, 955, 1016, 1025], "know": [65, 422, 512, 968, 1006, 1015, 1025], "first": [65, 99, 100, 103, 110, 113, 121, 131, 153, 155, 158, 170, 172, 179, 183, 184, 206, 211, 212, 218, 219, 223, 235, 250, 274, 276, 303, 331, 334, 338, 372, 379, 393, 403, 406, 407, 422, 432, 459, 483, 495, 505, 507, 508, 514, 515, 561, 568, 572, 578, 582, 608, 617, 635, 649, 651, 655, 658, 667, 688, 694, 702, 715, 718, 734, 763, 765, 797, 800, 804, 833, 843, 860, 871, 874, 875, 890, 897, 934, 961, 963, 964, 970, 971, 995, 1004, 1025, 1033], "2022": [65, 137, 153, 155, 156, 170, 223, 250, 311, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 524, 572, 574, 580, 617, 649, 650, 655, 715, 773, 784, 800, 804, 811, 980], "y": [65, 72, 95, 120, 122, 142, 163, 165, 169, 176, 184, 193, 250, 257, 261, 341, 344, 351, 352, 369, 370, 391, 398, 409, 429, 453, 454, 456, 468, 524, 525, 526, 545, 552, 586, 617, 654, 663, 681, 715, 718, 721, 807, 810, 980, 981, 982, 1025], "df3": [65, 250], "set_tbl_format": 65, "09": [65, 122, 156, 250, 311, 322, 330, 331, 527, 650, 715, 777, 983], "01": [65, 122, 137, 153, 155, 156, 223, 250, 309, 310, 311, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 524, 525, 526, 529, 572, 574, 606, 617, 649, 650, 715, 718, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 980, 981, 982, 985], "02": [65, 153, 155, 156, 170, 223, 250, 310, 311, 318, 319, 320, 327, 328, 329, 330, 331, 334, 337, 338, 339, 340, 343, 345, 346, 348, 472, 473, 474, 475, 476, 478, 479, 480, 481, 524, 525, 526, 529, 572, 574, 606, 617, 649, 650, 655, 715, 718, 772, 773, 775, 776, 780, 781, 782, 785, 786, 787, 788, 790, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 890, 980, 981, 982, 985], "03": [65, 95, 155, 156, 223, 250, 310, 311, 312, 316, 318, 320, 328, 329, 330, 331, 337, 338, 339, 340, 341, 343, 344, 345, 346, 348, 472, 473, 475, 478, 479, 480, 525, 529, 572, 617, 649, 650, 715, 772, 773, 774, 777, 778, 780, 781, 782, 785, 786, 787, 788, 790, 792, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 981, 985], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 99, 100, 110, 219, 222, 223, 250, 388, 432, 561, 617, 688, 690, 715, 764, 897, 914, 1025], "easili": [65, 196, 227, 230, 250, 562, 602, 674, 693, 697, 715], "dot": [65, 617, 678, 715, 1025], "product": [65, 136, 250, 301, 306, 555, 617, 761, 767, 1025], "fill_nul": [65, 145, 250, 617, 643, 694, 715, 1025], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 110, 131, 149, 183, 232, 250, 264, 422, 430, 431, 459, 471, 555, 568, 569, 578, 587, 595, 617, 659, 667, 699, 715, 725, 890, 922, 1025], "decor": [66, 67, 68, 69, 122, 124, 131, 250, 264, 617, 627, 628, 725, 1025], "under": [66, 67, 68, 69, 610, 611, 613, 618, 619, 623, 624, 625, 1017, 1019, 1021, 1026, 1029, 1030, 1031], "access": [66, 67, 68, 69, 167, 192, 193, 250, 432, 617, 694, 715, 1033], "by_first_letter_of_column_nam": 66, "f": [66, 100, 137, 153, 168, 208, 218, 221, 250, 257, 264, 422, 487, 504, 524, 526, 555, 563, 587, 617, 890, 960, 980, 982], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 282, 285, 499, 503, 718, 959], "slice": [66, 71, 142, 158, 168, 206, 250, 407, 420, 471, 472, 473, 474, 475, 476, 478, 479, 480, 617, 635, 640, 642, 659, 668, 678, 679, 680, 715, 818, 833, 875, 888, 922, 923, 924, 925, 926, 927, 929, 930, 931, 995, 1025], "to_seri": [66, 151, 250, 524, 559, 596, 980], "xx": [66, 68, 121, 124, 718], "xy": [66, 68], "yy": [66, 68, 121, 124, 718], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 155, 156, 170, 223, 250, 281, 334, 338, 345, 465, 472, 473, 474, 475, 476, 478, 479, 480, 572, 617, 649, 650, 655, 715, 800, 804, 811, 916, 1025], "ceil": [67, 617, 1025], "previou": [67, 128, 458, 534, 617, 910, 1025], "floor": [67, 617, 1025], "nearest": [67, 170, 186, 242, 250, 291, 365, 463, 476, 594, 617, 655, 669, 709, 715, 750, 829, 837, 915, 927, 1025], "24": [67, 116, 131, 142, 155, 156, 170, 223, 250, 301, 303, 320, 334, 338, 345, 449, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 763, 782, 800, 804, 811, 857, 1025], "001": [67, 323, 324, 326, 333, 574, 789, 791, 799], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 122, 311, 315, 316, 329, 330, 334, 346, 524, 571, 572, 573, 580, 586, 718, 771, 773, 777, 778, 796, 800, 980, 1033], "42": [69, 156, 157, 177, 250, 650, 664, 715, 832, 1025], "961": 69, "1764": 69, "4160": 69, "build": [70, 89, 718, 1033], "wa": 70, "compil": [70, 396, 397, 864, 865], "gate": 70, "info": [70, 102, 111, 116, 321, 783], "otherwis": [70, 121, 126, 177, 196, 250, 283, 292, 293, 294, 337, 353, 354, 355, 422, 459, 467, 499, 501, 553, 554, 570, 588, 591, 603, 608, 617, 664, 674, 715, 725, 742, 753, 754, 755, 803, 819, 820, 821, 890, 918, 936, 937, 955, 957, 1025], "depend": [70, 116, 264, 396, 397, 440, 465, 555, 577, 580, 617, 864, 865, 914, 916, 1025, 1033], "host": [70, 99, 104, 108, 112, 114], "git": 70, "lazy_fram": 71, "type_coercion": [71, 635, 640, 642, 668, 678, 679, 680, 715], "predicate_pushdown": [71, 635, 640, 642, 659, 668, 678, 679, 680, 715], "projection_pushdown": [71, 635, 640, 642, 659, 668, 678, 679, 680, 715], "simplify_express": [71, 635, 640, 642, 668, 678, 679, 680, 715], "no_optim": [71, 635, 642, 659, 668, 679, 680, 715], "slice_pushdown": [71, 635, 640, 642, 659, 668, 678, 679, 680, 715], "common_subplan_elimin": [71, 635, 640, 642, 668, 678, 715], "graph": [71, 171, 250, 652, 694, 715], "parallel": [71, 72, 97, 101, 108, 114, 155, 170, 171, 183, 250, 303, 403, 617, 628, 649, 654, 655, 699, 715, 763, 871, 1025], "threadpool": [71, 126], "coercion": [71, 468, 617, 635, 640, 642, 668, 678, 679, 680, 715], "optim": [71, 108, 110, 112, 113, 114, 167, 171, 183, 187, 193, 219, 250, 635, 640, 642, 659, 668, 678, 679, 680, 688, 695, 699, 715], "predic": [71, 110, 112, 113, 114, 115, 147, 166, 192, 250, 362, 551, 578, 617, 635, 640, 642, 645, 659, 668, 671, 678, 679, 680, 695, 715, 827, 936, 937, 1025], "pushdown": [71, 635, 640, 642, 659, 668, 671, 678, 679, 680, 695, 715, 936, 937, 1025], "project": [71, 110, 112, 113, 114, 264, 494, 495, 617, 635, 640, 642, 659, 668, 671, 678, 679, 680, 696, 715], "turn": [71, 99, 100, 110, 530, 549, 617, 635, 640, 642, 659, 668, 679, 680, 715, 986], "off": [71, 99, 100, 110, 549, 617, 635, 640, 642, 659, 668, 679, 680, 715], "Will": [71, 218, 250, 635, 640, 642, 668, 678, 715, 1025], "try": [71, 83, 85, 99, 100, 103, 104, 108, 110, 112, 114, 635, 640, 642, 668, 678, 715], "branch": [71, 635, 640, 642, 668, 678, 715], "subplan": [71, 635, 640, 642, 668, 678, 715], "occur": [71, 400, 448, 465, 617, 635, 640, 642, 668, 678, 715, 868, 902, 916, 1025], "union": [71, 72, 635, 640, 642, 668, 678, 715, 718], "part": [71, 88, 122, 506, 520, 521, 635, 640, 642, 668, 678, 694, 715, 777, 781, 788, 790, 793, 795, 798, 805, 815, 962, 976, 977], "fashion": [71, 169, 250, 635, 640, 642, 668, 678, 715], "item": [72, 100, 192, 194, 250, 358, 399, 406, 409, 482, 521, 617, 823, 867, 874, 877, 933, 977, 1025], "iter": [72, 123, 125, 132, 154, 155, 156, 167, 168, 182, 192, 193, 196, 197, 203, 217, 218, 227, 229, 230, 250, 303, 356, 457, 495, 553, 554, 558, 561, 562, 563, 564, 570, 576, 588, 591, 599, 602, 603, 617, 631, 648, 649, 650, 674, 675, 682, 687, 693, 697, 715, 763, 1025, 1033], "polarstyp": 72, "concatmethod": 72, "vertic": [72, 144, 221, 225, 250, 498, 954], "rechunk": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 144, 250, 617, 724, 751, 903, 1025], "combin": [72, 83, 85, 155, 156, 157, 170, 223, 250, 261, 275, 334, 345, 456, 511, 517, 523, 572, 617, 649, 650, 655, 678, 715, 800, 804, 811, 967, 973, 979], "concaten": [72, 149, 183, 250, 459, 563, 564, 617, 667, 715, 751, 903, 1025], "diagon": [72, 218, 250], "vstack": [72, 144, 250], "vertical_relax": 72, "coerc": [72, 468, 617], "equal": [72, 73, 99, 100, 110, 117, 118, 150, 155, 170, 177, 250, 351, 352, 369, 391, 422, 454, 471, 472, 473, 474, 475, 476, 478, 479, 480, 509, 510, 516, 532, 557, 597, 598, 617, 649, 655, 664, 715, 890, 922, 923, 924, 925, 926, 927, 929, 930, 931, 935, 965, 966, 972, 988, 1025, 1033], "supertyp": [72, 146, 250, 263, 617, 644, 715], "find": [72, 148, 250, 483, 617, 934, 1025], "miss": [72, 99, 100, 110, 145, 250, 281, 353, 354, 355, 367, 375, 382, 384, 617, 643, 715, 819, 820, 821, 1015, 1025], "stack": [72, 160, 225, 250], "don": [72, 131, 219, 221, 250, 264, 303, 403, 457, 555, 617, 688, 715, 718, 725, 763, 871, 914, 935, 1015, 1025], "auto": [72, 88, 90, 91, 92, 94, 108, 114, 218, 250, 715, 1033], "logic": [72, 131, 232, 250, 261, 456, 543, 552, 617, 647, 654, 670, 696, 715, 725, 1008, 1025], "align_fram": 72, "pattern": [72, 99, 100, 110, 112, 113, 114, 167, 250, 438, 499, 500, 505, 506, 514, 515, 699, 718, 936, 937, 955, 956, 961, 962, 970, 971, 1025], "collis": 72, "need": [72, 95, 99, 100, 101, 103, 117, 118, 155, 156, 201, 213, 250, 422, 432, 487, 509, 527, 593, 596, 609, 617, 649, 650, 715, 942, 965, 983, 1025], "sure": [72, 88, 93, 99, 100, 104, 108, 155, 156, 187, 250, 557, 649, 650, 715], "contigu": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 187, 250], "relev": 72, "df_h1": 72, "l1": 72, "l2": 72, "df_h2": 72, "r1": 72, "r2": 72, "r3": 72, "df_d1": 72, "df_d2": 72, "df_a1": 72, "df_a2": 72, "df_a3": 72, "disabl": [73, 127, 167, 250], "encount": [74, 155, 250, 451, 452, 507, 508, 565, 568, 578, 617, 649, 715, 906, 907, 963, 964, 1025], "certain": [78, 102, 111, 161, 223, 250, 562, 635, 668, 679, 680, 715, 1025], "least": [80, 122, 458, 549, 617, 910, 1013, 1025], "unexpect": [81, 250, 264, 430, 617, 725, 1025], "caus": [81, 89, 99, 100, 110, 130, 144, 250, 724, 1025], "panic": 81, "mismatch": 83, "incompat": 85, "pa": [88, 115], "chunkedarrai": [88, 179, 250, 767, 1025], "recordbatch": [88, 168, 250], "schemadefinit": [88, 90, 91, 92, 94, 250, 715], "schema_overrid": [88, 90, 91, 92, 93, 94, 168, 213, 250, 280, 715, 718, 740], "copi": [88, 89, 130, 133, 134, 168, 208, 213, 214, 227, 250, 359, 532, 617, 633, 634, 693, 715, 721, 752, 756, 769, 824, 988, 1001, 1006, 1007, 1025], "closest": 88, "pair": [88, 90, 91, 92, 94, 121, 188, 250, 671, 715, 1033], "sever": [88, 90, 91, 92, 94, 250, 715, 1033], "wai": [88, 90, 91, 92, 94, 138, 154, 168, 183, 203, 230, 250, 457, 459, 495, 505, 562, 617, 637, 648, 667, 682, 697, 699, 715, 961], "equival": [88, 90, 91, 92, 94, 102, 155, 166, 180, 250, 257, 261, 351, 352, 366, 369, 370, 391, 429, 447, 449, 453, 454, 456, 460, 512, 535, 545, 552, 617, 649, 715, 857, 968, 984, 986, 987, 1025], "form": [88, 90, 91, 92, 94, 167, 193, 221, 250, 458, 617, 715, 910, 1025], "them": [88, 90, 91, 92, 94, 110, 144, 155, 156, 170, 177, 223, 250, 376, 409, 451, 452, 457, 563, 617, 649, 650, 655, 664, 715, 718, 724, 877, 906, 907, 1025], "dimens": [88, 90, 92, 94, 250, 469, 617, 715, 920, 1025], "allow_copi": [89, 130], "interchang": [89, 130], "__dataframe__": 89, "convers": [89, 130, 168, 214, 250, 524, 525, 526, 529, 572, 628, 980, 981, 982, 985, 1005, 1006, 1007, 1025], "detail": [89, 101, 117, 118, 130, 250, 715, 1033], "latest": [89, 102, 111, 130, 367, 441, 617], "index": [89, 93, 96, 116, 130, 148, 155, 156, 161, 166, 167, 170, 184, 190, 192, 193, 202, 213, 215, 223, 228, 250, 258, 272, 273, 274, 276, 334, 396, 397, 406, 417, 421, 422, 472, 473, 474, 475, 476, 478, 479, 480, 483, 493, 505, 518, 539, 617, 649, 650, 655, 681, 695, 715, 732, 733, 734, 735, 736, 800, 857, 864, 865, 874, 885, 889, 890, 908, 934, 937, 949, 961, 974, 996, 1025], "runtimeerror": 89, "from_panda": [89, 103], "from_arrow": 89, "effici": [89, 168, 250], "clone": [90, 91, 92, 93, 94, 133, 213, 214, 250, 633, 715, 752, 1005, 1006, 1007, 1015, 1025], "dimension": [90, 92, 94, 213, 250, 715, 1025], "infer_schema_length": [91, 94, 99, 100, 103, 110, 113, 250, 507, 715, 963], "NOT": [91, 117, 118, 439, 1032], "typic": [91, 131, 250, 317, 718, 725, 779, 1025], "clearer": 91, "load": [91, 93, 102, 111, 123, 125, 250, 628, 651, 658, 715, 1033], "_partial_": [91, 250, 715], "omit": [91, 95, 120, 122, 124, 128, 180, 250, 606, 718], "mani": [91, 94, 101, 144, 250, 507, 724, 963, 1025], "scan": [91, 94, 99, 100, 108, 110, 111, 112, 113, 114, 115, 155, 156, 250, 642, 649, 650, 651, 658, 715], "slow": [91, 94, 99, 100, 110, 264, 303, 617, 699, 763, 1025], "partial": 91, "present": [91, 117, 122, 380, 617, 1015, 1025], "np": [92, 147, 213, 250, 539, 617, 715, 842, 846, 848, 849, 922, 996, 1025], "ndarrai": [92, 147, 213, 250, 539, 617, 715, 767, 934, 937, 996, 1006, 1025], "numpi": [92, 116, 136, 213, 214, 250, 451, 452, 617, 715, 842, 846, 848, 849, 906, 907, 922, 1006, 1007, 1015, 1025], "columnar": [92, 94, 167, 193, 250], "interpret": [92, 94, 99, 100, 110, 250, 715], "yield": [92, 94, 99, 100, 110, 142, 144, 218, 250, 457, 617, 715, 724, 818, 1025], "conclus": [92, 94, 250, 715], "nan_to_nul": [93, 250, 715, 1025], "include_index": 93, "pd": [93, 103, 543, 617, 1007, 1008, 1025], "panda": [93, 103, 116, 155, 214, 250, 330, 331, 543, 617, 649, 715, 796, 797, 1007, 1008, 1025], "instal": [93, 99, 100, 101, 104, 108, 116, 136, 213, 214, 250, 678, 715, 1007, 1025], "datetimeindex": [93, 767, 1025], "nan": [93, 117, 118, 122, 130, 145, 214, 250, 307, 308, 351, 352, 360, 369, 370, 375, 382, 384, 385, 386, 391, 429, 433, 446, 451, 452, 453, 454, 545, 565, 617, 643, 715, 727, 731, 768, 825, 848, 849, 906, 907, 922, 1007, 1025, 1033], "convert": [93, 102, 103, 111, 130, 209, 210, 211, 212, 213, 216, 250, 304, 312, 341, 344, 422, 431, 464, 513, 524, 525, 526, 527, 529, 617, 715, 774, 807, 810, 890, 969, 980, 981, 982, 983, 985, 993, 1004, 1005, 1006, 1007, 1015, 1025], "pd_df": 93, "pd_seri": 93, "tbl": [95, 97, 100], "reconstruct": 95, "repr": [95, 122, 124], "trim": 95, "whitespac": [95, 511, 517, 523, 967, 973, 979], "prompt": 95, "extract": [95, 315, 316, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 335, 336, 339, 340, 346, 347, 349, 459, 506, 507, 508, 617, 775, 776, 777, 778, 781, 782, 784, 788, 789, 790, 791, 793, 794, 795, 798, 799, 801, 802, 805, 806, 808, 812, 813, 815, 962, 963, 964], "to_init_repr": [95, 250, 1025], "truncat": [95, 155, 250, 334, 649, 668, 715, 800], "identifi": [95, 176, 182, 219, 250, 663, 688, 715], "compound": [95, 250, 718], "struct": [95, 180, 196, 216, 220, 227, 250, 422, 432, 507, 520, 521, 549, 568, 569, 570, 587, 617, 674, 689, 693, 699, 715, 890, 963, 976, 977], "neither": [95, 103, 194, 250, 422, 890], "source_ac": 95, "source_cha": 95, "ident": [95, 133, 134, 250, 341, 633, 634, 715, 752, 756, 807, 1025], "timestamp": [95, 337, 580, 803], "tor_id": 95, "nnel_id": 95, "\u03bc": [95, 122, 155, 156, 170, 223, 250, 309, 310, 311, 312, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 524, 526, 572, 574, 580, 617, 649, 650, 655, 715, 718, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 980, 982], "asia": [95, 718, 775, 776, 808], "tokyo": [95, 718], "123456780": 95, "9876543210": 95, "56": [95, 541, 606, 617], "59": [95, 121, 311, 327, 339, 573, 605, 606, 773, 793, 805], "663053": 95, "jst": [95, 718], "803065983": 95, "2055938745": 95, "38": [95, 122], "18": [95, 156, 177, 250, 302, 338, 345, 348, 375, 388, 524, 526, 572, 606, 617, 650, 664, 668, 715, 718, 814, 980, 982], "050545": 95, "source_actor_id": 95, "source_channel_id": 95, "sr": [95, 721, 1025], "to_list": [95, 156, 250, 650, 715, 955, 1025], "datatypeclass": 96, "uint32": [96, 116, 142, 250, 274, 315, 319, 323, 325, 327, 329, 332, 335, 336, 339, 346, 347, 396, 397, 411, 468, 500, 509, 512, 539, 543, 617, 718, 735, 747, 777, 781, 788, 790, 793, 795, 798, 801, 802, 805, 812, 813, 818, 847, 864, 865, 879, 935, 956, 1008, 1025], "regular": [96, 167, 192, 193, 223, 250, 356, 499, 500, 505, 506, 514, 515, 562, 576, 588, 591, 603, 617, 718, 955, 956, 961, 962, 970, 971], "uint64": [96, 157, 250, 371, 396, 397, 467, 617, 832, 864, 865, 918, 1025], "bigidx": 96, "read": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 250, 368, 430, 608, 617, 642, 647, 670, 715, 724, 1025], "batch": [97, 100, 113, 659, 715], "over": [97, 99, 100, 102, 110, 122, 131, 144, 167, 168, 192, 193, 218, 229, 232, 250, 264, 303, 361, 375, 430, 431, 465, 471, 472, 473, 474, 475, 476, 478, 479, 480, 555, 568, 569, 578, 587, 595, 617, 699, 718, 724, 725, 763, 922, 923, 924, 926, 930, 1025], "fetch": [97, 110, 171, 250, 633, 635, 651, 658, 715], "ideal": 97, "read_csv_batch": [97, 629], "tpch": [97, 100], "tables_scale_100": [97, 100], "lineitem": [97, 100, 101], "try_parse_d": [97, 99, 100, 110], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 168, 250, 642, 715], "accept": [98, 99, 100, 102, 104, 108, 132, 143, 154, 196, 203, 217, 227, 230, 250, 257, 356, 376, 457, 495, 552, 553, 554, 558, 561, 562, 563, 564, 570, 576, 588, 591, 599, 602, 603, 617, 631, 641, 648, 674, 682, 687, 693, 697, 715, 838, 1025], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 315, 318, 319, 321, 322, 327, 329, 335, 336, 338, 339, 343, 345, 346, 347, 349, 472, 473, 475, 478, 479, 480, 606, 617, 772, 774, 777, 780, 781, 783, 788, 790, 793, 795, 798, 801, 802, 804, 805, 809, 811, 812, 813, 814, 815], "textio": 99, "new_column": [99, 100, 103, 110, 189, 250], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 155, 156, 170, 223, 250, 264, 334, 338, 345, 403, 430, 472, 473, 474, 475, 476, 478, 479, 480, 513, 586, 608, 617, 649, 650, 655, 659, 715, 725, 800, 804, 811, 834, 871, 914, 969, 1025], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 155, 156, 170, 213, 221, 223, 250, 257, 264, 334, 338, 345, 356, 472, 473, 474, 475, 476, 478, 479, 480, 487, 576, 617, 649, 650, 655, 671, 715, 800, 804, 811, 935, 1006, 1025], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 168, 250], "shorter": [99, 100], "comment": [99, 100, 110], "instanc": [99, 100, 110, 122, 124, 128, 144, 149, 250, 289, 441, 472, 473, 474, 475, 476, 478, 479, 480, 568, 578, 617, 659, 695, 715, 724, 747, 1025], "special": [99, 100, 110, 506, 725, 962, 1025], "escap": [99, 100, 110], "dure": [99, 100, 110, 128, 144, 250, 724, 1025], "would": [99, 100, 110, 274, 406, 440, 465, 558, 572, 617, 718, 734, 874, 916, 1006, 1025], "prefer": [99, 100, 102, 110, 125, 131, 144, 167, 192, 193, 232, 250, 264, 471, 617, 715, 724, 725, 922, 1025, 1033], "treat": [99, 100, 110, 499, 514, 515, 955, 970, 971], "10000": [99, 168, 250, 532], "might": [99, 100, 110, 126, 213, 250, 264, 547, 617, 1007, 1025], "issu": [99, 100, 103, 110, 301, 302, 537, 617, 761, 762, 994, 1025], "iso8601": [99, 100, 110], "physic": [99, 100, 170, 250, 290, 543, 617, 632, 654, 655, 715, 749, 1008, 1025], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 153, 170, 250, 263, 265, 289, 457, 510, 516, 556, 617, 655, 715, 747, 966, 972, 1025], "buffer": [99, 100, 142, 167, 250, 818, 1025], "modifi": [99, 100, 110, 126, 128, 160, 167, 225, 250, 275, 337, 348, 499, 505, 506, 514, 617, 803, 814, 919, 955, 961, 962, 970, 984, 986, 987, 1025], "upper": [99, 100, 142, 155, 250, 292, 293, 376, 422, 548, 557, 572, 584, 585, 606, 617, 649, 715, 754, 818, 838, 896, 1012, 1025], "bound": [99, 100, 142, 155, 250, 292, 293, 294, 376, 406, 421, 422, 428, 548, 557, 572, 584, 585, 606, 617, 649, 715, 754, 755, 818, 838, 874, 889, 896, 1012, 1025], "lossi": [99, 100, 110], "decod": [99, 100], "reduc": [99, 100, 108, 110, 112, 113, 114, 237, 238, 240, 243, 487, 578, 617, 680, 704, 705, 707, 710, 715, 899, 913, 942, 994, 1025], "usag": [99, 100, 110, 122, 124, 201, 250, 718, 943, 1025], "expens": [99, 100, 108, 110, 113, 114, 123, 125, 131, 155, 156, 167, 192, 193, 218, 219, 250, 264, 617, 649, 650, 688, 715, 724, 725, 1025, 1033], "aggreg": [99, 100, 108, 149, 155, 156, 173, 174, 175, 178, 180, 184, 185, 186, 204, 205, 221, 224, 230, 231, 234, 236, 250, 258, 362, 373, 430, 457, 471, 472, 473, 474, 475, 476, 478, 479, 480, 549, 553, 554, 568, 569, 570, 578, 583, 588, 591, 595, 603, 617, 649, 650, 659, 660, 661, 662, 665, 666, 669, 683, 684, 691, 697, 698, 701, 703, 715, 835, 922, 923, 924, 926, 929, 930, 931, 1025], "nativ": [99, 104, 108, 120, 131, 167, 193, 210, 232, 250, 264, 617, 622, 725, 1025, 1033], "parser": 99, "even": [99, 459, 617, 914, 1025], "regard": [99, 565], "sens": [99, 104, 108, 112, 114, 177, 223, 250, 457, 617, 664, 715], "particular": [99, 104, 108, 112, 114, 142, 250, 818, 1025], "skip": [99, 100, 103, 108, 110, 114, 221, 250, 725, 1025], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 155, 156, 202, 223, 228, 250, 309, 317, 330, 331, 334, 338, 345, 417, 493, 518, 524, 526, 572, 617, 649, 650, 681, 695, 715, 771, 779, 796, 797, 800, 804, 811, 885, 949, 974, 980, 982, 1025], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 232, 250, 492, 617, 699, 948, 1025], "estim": [99, 100, 142, 250, 265, 354, 355, 389, 556, 617, 715, 818, 820, 821, 858, 1025], "alloc": [99, 100, 142, 187, 250, 818, 1025], "scan_csv": [99, 100, 679, 680, 715], "lazili": [99, 100, 110, 111, 112, 113, 114, 432, 617], "glob": [99, 100, 110, 112, 113, 114], "continu": [99, 108, 492, 617, 764, 914, 948, 1025], "benchmark": [99, 108, 288, 617], "50000": 100, "batchedcsvread": [100, 628], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "df_current_batch": 100, "concat": [100, 751, 903, 1025], "partition_df": 100, "partition_bi": [100, 168, 250], "as_dict": [100, 182, 250], "fh": 100, "write_csv": [100, 110, 250], "els": [100, 608], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "driver": 101, "user": [101, 131, 183, 232, 250, 264, 430, 459, 484, 555, 572, 617, 667, 699, 715, 725, 938, 1025], "snowflak": 101, "warehous": 101, "role": 101, "partit": [101, 102, 108, 111, 115, 168, 182, 250], "transfer": 101, "document": [101, 103, 341, 344, 508, 524, 525, 526, 529, 807, 810, 964, 980, 981, 982, 985], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": [101, 155, 250, 649, 715], "doc": [101, 136, 250], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "limit": [101, 110, 146, 250, 281, 292, 293, 294, 361, 367, 617, 644, 651, 680, 715, 753, 754, 755, 826, 1025], "small": [101, 121, 171, 250, 338, 642, 715, 1033], "still": 101, "develop": [101, 122, 124], "partition_col": 101, "explicitli": [101, 120, 122, 128, 432, 602, 617, 627], "test_tabl": 101, "compani": 101, "testdb": 101, "public": [101, 250, 617, 628, 715, 1025], "myrol": 101, "delta_table_opt": [102, 111], "root": [102, 111, 388, 431, 442, 461, 496, 536, 616, 617, 951, 1025], "absolut": [102, 111, 117, 118, 256, 353, 354, 355, 617, 720, 819, 820, 821, 1025], "sinc": [102, 111, 318, 524, 526, 572, 580, 596, 606, 780, 980, 982], "avoid": [102, 193, 250], "year": [102, 111, 155, 156, 170, 223, 250, 321, 322, 334, 335, 338, 345, 346, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 573, 617, 649, 650, 655, 715, 783, 784, 800, 801, 804, 811, 812], "2021": [102, 111, 137, 153, 155, 223, 250, 524, 586, 649, 715, 718, 775, 776, 784, 808, 854, 980, 1025], "aw": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 131, 250, 422, 1032], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "nor": [103, 194, 250], "skip_empty_lin": 103, "my": [103, 115, 530, 986], "datasheet": 103, "correct": [103, 354, 355, 389, 477, 492, 617, 659, 715, 820, 821, 858, 928, 948, 1025], "look": [103, 282, 422, 741], "whole": [103, 494, 495, 505, 617, 699, 715, 961], "With": [103, 131, 166, 250, 264, 472, 473, 474, 475, 476, 478, 479, 480, 617, 725, 857, 1025], "1000": [103, 142, 212, 250, 323, 324, 532, 789, 1004, 1025, 1033], "spreadsheet": [103, 184, 250], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": 103, "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "improv": [104, 112, 680, 715], "repeat": [104, 112, 466, 468, 593, 609, 617], "page": [104, 108, 112, 114, 250, 617, 628, 680, 715, 1025], "give": [104, 108, 112, 113, 114, 176, 219, 250, 318, 389, 468, 545, 617, 628, 663, 688, 715, 780, 858, 1025], "That": [104, 659, 715], "filenam": 104, "my_fil": 104, "write_ipc": [104, 250], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 167, 193, 210, 250, 524, 526, 980, 982], "stabl": [108, 136, 194, 250, 427, 617, 663, 715], "row_group": [108, 114], "pressur": [108, 113, 114, 487, 617, 680, 715, 942, 1025], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 365, 617, 829, 1025], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114, 167, 192, 250], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 144, 250, 724, 1025], "headerless": 110, "unlik": [110, 155, 250, 649, 715], "fewer": [110, 617, 914, 1025], "my_long_fil": 110, "doesn": [110, 155, 250, 350, 617, 649, 715, 817, 1015, 1025], "thing": [110, 577], "less": [110, 170, 250, 391, 429, 510, 516, 521, 532, 617, 655, 715, 966, 972, 977, 988, 1033], "breezah": 110, "languag": [110, 155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "hard": [110, 659, 715], "mydf": 110, "lambda": [110, 131, 149, 183, 232, 250, 264, 353, 354, 355, 422, 430, 431, 471, 555, 568, 569, 578, 587, 595, 617, 659, 667, 699, 715, 725, 819, 820, 821, 890, 1025], "lower": [110, 155, 186, 242, 250, 292, 294, 376, 428, 431, 463, 467, 476, 557, 572, 584, 585, 594, 606, 617, 642, 649, 669, 709, 715, 755, 838, 896, 915, 918, 927, 1012, 1025], "simpli": [110, 457, 568, 578, 617], "idx": [110, 155, 168, 250, 422, 649, 715, 890, 937, 1025], "uint16": [110, 301, 302, 537, 617, 718, 761, 762, 994, 1025], "u16": [110, 122, 1033], "eu": 111, "central": [111, 389, 492, 617, 858, 948, 1025], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "05": [115, 117, 118, 122, 170, 223, 250, 311, 312, 316, 337, 339, 341, 344, 572, 655, 715, 718, 773, 774, 775, 776, 777, 778, 803, 804, 807, 808, 810, 811, 813], "04": [115, 155, 223, 250, 311, 312, 315, 316, 320, 327, 328, 329, 330, 331, 335, 337, 338, 339, 340, 341, 344, 346, 347, 348, 524, 572, 574, 649, 715, 718, 774, 778, 782, 788, 790, 793, 794, 795, 796, 797, 798, 802, 803, 805, 806, 807, 810, 812, 813, 814, 980], "stdout": [116, 128, 153, 250, 443], "17": [116, 122, 230, 481, 580, 596, 606, 617, 697, 757, 804, 1025, 1033], "platform": 116, "linux": 116, "90": [116, 527, 983], "wsl2": 116, "x86_64": 116, "glibc2": 116, "main": 116, "apr": 116, "14": [116, 122, 131, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 309, 322, 375, 465, 606, 617, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 718, 771, 804], "44": [116, 177, 250, 306, 617, 664, 715], "51": 116, "gcc": 116, "matplotlib": [116, 668, 678, 715], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "08": [117, 118, 122, 156, 250, 311, 338, 524, 572, 574, 606, 650, 715, 718, 804, 811, 980], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 150, 250, 351, 352, 369, 370, 391, 429, 453, 454, 554, 617, 935, 1025], "exactli": [117, 118, 121, 122, 124, 520, 521, 943, 976, 977, 1025], "toler": [117, 118, 170, 250, 655, 715], "inexact": [117, 118], "assert": [117, 118, 120, 122, 124, 156, 250, 628, 650, 715, 718, 831, 1025], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 149, 250, 857, 890, 1007, 1016, 1025], "searchstrategi": [119, 121, 122, 124], "null_prob": [119, 122, 124], "percentag": [119, 122, 124, 458, 617, 910, 1025], "chanc": [119, 122, 124, 1033], "independ": [119, 120, 122, 124], "flag": [119, 484, 499, 505, 506, 514, 617, 640, 659, 715, 938, 955, 961, 962, 970, 1025], "hypothesi": [119, 120, 121, 122, 123, 124, 1033], "sampled_from": [119, 1033], "unique_small_int": 119, "ccy": [119, 1033], "gbp": [119, 1033], "eur": [119, 137, 153, 250, 1033], "jpy": [119, 1033], "min_col": [120, 122], "max_col": [120, 122], "standalon": [120, 122], "mincol": 120, "assign": [120, 155, 250, 422, 457, 465, 520, 521, 617, 649, 715, 764, 890, 897, 914, 916, 976, 977, 1025], "exact": [120, 122, 124, 201, 250, 524, 525, 526, 545, 617, 980, 981, 982], "minimum": [120, 121, 122, 124, 149, 178, 250, 353, 354, 355, 446, 452, 465, 591, 617, 665, 680, 715, 753, 792, 819, 820, 821, 907, 912, 916, 1025, 1033], "especi": 120, "test_unique_xyz": 120, "assert_someth": 120, "punctuat": 120, "test_special_char_colname_init": 120, "inner_dtyp": [121, 124], "select_from": [121, 124], "min_siz": [121, 122, 124, 1033], "max_siz": [121, 122, 124, 1033], "anoth": [121, 154, 250, 303, 310, 421, 436, 439, 617, 648, 694, 715, 763, 772, 889, 935, 1025], "randomli": 121, "innermost": 121, "2x": 121, "lst": 121, "11330": 121, "24030": 121, "116": 121, "zz": [121, 124], "uint8_pair": [121, 1033], "uint": [121, 1033], "zip": [121, 1033], "131": 121, "176": 121, "149": [121, 1033], "max_data_s": [122, 124], "include_col": 122, "allow_infin": [122, 124], "allowed_dtyp": [122, 124, 1033], "excluded_dtyp": [122, 124], "describ": [122, 153, 250, 1025], "desir": [122, 422, 572, 890], "n_chunk": [122, 124, 250, 1025], "randomis": 122, "onto": 122, "pct": 122, "preced": [122, 718], "disallow": [122, 124], "inf": [122, 124, 271, 378, 381, 545, 617, 731, 764, 834, 842, 846, 896, 910, 914, 1012, 1025], "exclud": [122, 124, 299, 302, 376, 562, 617, 838, 854, 1025], "deploi": [122, 124], "characterist": [122, 124], "concret": [122, 124], "test_repr": 122, "isinst": [122, 124, 250], "0x11f561580": 122, "known": [122, 422, 699, 890], "0565": 122, "34715": 122, "5844": 122, "33": [122, 177, 250, 481, 562, 617, 664, 715, 927, 1025], "076854": 122, "3382": 122, "48662": 122, "7540": 122, "29": [122, 155, 156, 170, 223, 250, 309, 330, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 606, 617, 649, 650, 655, 715, 771, 796, 800, 804, 811], "836271": 122, "4063": 122, "06": [122, 223, 250, 311, 322, 336, 337, 349, 606, 718, 803, 804, 813], "39092": 122, "1889": 122, "13": [122, 133, 134, 145, 146, 152, 156, 161, 171, 179, 227, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 471, 527, 563, 568, 578, 606, 607, 617, 633, 634, 643, 644, 650, 657, 693, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 725, 804, 811, 812, 983, 1025], "41": [122, 479, 617, 1033], "874455": 122, "15836": 122, "1755e": 122, "575050513": 122, "profil": [123, 125, 715], "balanc": [123, 125, 1033], "set_environ": 123, "polars_hypothesis_profil": [123, 125], "1500": 123, "constructor": 124, "normal": [124, 155, 250, 350, 389, 492, 617, 649, 715, 817, 858, 948, 1025], "test_repr_is_valid_str": 124, "experi": 124, "create_list_strategi": [124, 1033], "polars_max_thread": 126, "behind": 126, "lock": 126, "reason": 126, "pyspark": 126, "udf": [126, 131, 183, 232, 250, 264, 459, 555, 617, 667, 699, 715, 725, 1025], "similar": [126, 149, 170, 250, 341, 344, 457, 608, 617, 655, 715, 807, 810], "recommend": [126, 167, 183, 250, 572, 718], "initi": [128, 568, 578, 608], "whatev": 128, "were": 128, "enter": 128, "advantag": [128, 183, 250], "initialis": [128, 715, 1032], "set_": 128, "set_verbos": 128, "do_various_th": 128, "restor": 128, "cleaner": 128, "breviti": 128, "vein": 128, "durat": [128, 170, 223, 250, 309, 316, 317, 320, 324, 326, 328, 333, 340, 348, 543, 572, 606, 617, 655, 715, 718, 771, 778, 779, 782, 789, 791, 794, 799, 806, 814, 1008, 1025], "set_ascii_t": 128, "write_ascii_frame_to_stdout": 128, "sy": 128, "nan_as_nul": 130, "_pyarrowdatafram": 130, "nullabl": 130, "extens": [130, 214, 250, 1007, 1025], "propag": [130, 174, 205, 250, 352, 451, 452, 454, 617, 906, 907, 1025], "inference_s": [131, 250], "256": [131, 250, 910, 1025], "almost": [131, 232, 250, 524, 525, 526, 572, 725, 980, 981, 982, 1025], "_significantly_": [131, 232, 250, 725, 1025], "intens": [131, 232, 250, 457, 617, 725, 1025], "becaus": [131, 142, 155, 171, 221, 232, 250, 403, 482, 488, 572, 617, 649, 699, 715, 725, 818, 871, 1025], "forc": [131, 170, 232, 250, 654, 655, 699, 715, 725, 1025], "materi": [131, 232, 250, 668, 699, 715, 718, 725, 1025], "parallelis": [131, 232, 250, 725, 1025], "optimis": [131, 232, 250, 715, 725, 936, 937, 1025], "achiev": [131, 232, 250, 264, 617, 725, 1025], "best": [131, 232, 250, 264, 617, 725, 1025], "tri": [131, 250], "arbitrarili": [131, 250], "rearrang": [131, 250], "transform": [131, 250, 430, 528, 530, 531, 617], "preserv": [131, 213, 214, 250, 489, 617, 945, 1007, 1025], "lru_cach": [131, 250, 264, 617, 725, 1025], "magnitud": [131, 250, 264, 617, 725, 1025], "column_1": [131, 218, 250], "better": [131, 213, 232, 250, 264, 549, 617, 699, 936, 937, 1025], "scalar": [131, 166, 192, 250, 483, 555, 586, 617, 857, 934, 1025], "k": [132, 217, 250, 287, 290, 389, 544, 617, 631, 687, 715, 746, 749, 858, 1009, 1025], "intoexpr": [132, 154, 155, 156, 196, 203, 217, 227, 230, 250, 263, 376, 400, 402, 408, 423, 457, 486, 495, 553, 554, 557, 558, 561, 563, 564, 568, 570, 578, 584, 585, 588, 591, 596, 599, 602, 603, 608, 617, 631, 645, 648, 649, 650, 674, 682, 687, 693, 697, 715, 838, 1025], "nulls_last": [132, 203, 217, 250, 274, 494, 617, 631, 682, 687, 715, 734, 1025], "smallest": [132, 217, 250, 287, 617, 631, 687, 715, 746, 1025], "largest": [132, 155, 156, 170, 217, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 544, 617, 631, 649, 650, 655, 687, 715, 800, 804, 811, 1009, 1025], "top": [132, 217, 250, 631, 687, 715], "last": [132, 158, 170, 172, 184, 203, 206, 217, 219, 244, 250, 274, 303, 315, 330, 335, 346, 406, 420, 494, 521, 538, 572, 604, 617, 631, 655, 682, 685, 687, 688, 711, 715, 718, 734, 763, 777, 796, 801, 812, 833, 860, 874, 888, 977, 995, 1025], "top_k": [132, 250, 287, 617, 631, 715, 746, 1025], "greater": [133, 170, 250, 369, 370, 492, 521, 617, 655, 715, 948, 977, 1025], "cheap": [133, 134, 250, 633, 634, 715, 724, 752, 756, 1025], "deepcopi": [133, 134, 250, 633, 634, 715, 752, 756, 1025], "clear": [134, 250, 634, 715, 756, 1025], "properti": [135, 141, 159, 195, 198, 226, 250, 636, 639, 673, 692, 715, 718, 1033], "appl": [135, 160, 169, 188, 190, 209, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 461, 470, 503, 522, 536, 617, 654, 671, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 959, 978], "banana": [135, 209, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 461, 470, 536, 617, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710], "pairwis": [136, 250], "pearson": [136, 250, 389, 492, 565, 617, 858, 948, 1025], "correl": [136, 250, 565, 597], "coeffici": [136, 250, 492, 617, 948, 1025], "corrcoef": [136, 250], "percentil": [137, 250, 765, 1025], "summari": [137, 250, 765, 1025], "glimps": [137, 158, 250], "usd": [137, 153, 250, 1033], "2020": [137, 153, 156, 250, 312, 316, 317, 320, 323, 324, 326, 328, 333, 337, 340, 341, 344, 524, 525, 526, 650, 715, 718, 774, 778, 779, 782, 789, 791, 794, 799, 803, 806, 807, 810, 980, 981, 982], "null_count": [137, 140, 250, 303, 617, 715, 763, 765, 1025], "266667": [137, 250], "666667": [137, 174, 224, 238, 250, 353, 617, 691, 705, 715], "std": [137, 250, 471, 478, 617, 715, 765, 929, 1025], "101514": [137, 250], "707107": [137, 250, 354, 478, 617, 820, 1025], "57735": [137, 250], "median": [137, 184, 250, 361, 474, 617, 694, 715, 765, 925, 1025], "more_column": [138, 143, 197, 220, 250, 356, 576, 617, 637, 641, 675, 689, 715], "Or": [138, 154, 155, 156, 170, 203, 223, 230, 250, 457, 495, 562, 608, 617, 637, 648, 649, 650, 655, 682, 697, 715], "subset": [140, 180, 219, 250, 638, 688, 715], "snippet": [140, 250, 638, 715], "is_nul": [140, 250, 617, 638, 715, 1025], "sizeunit": [142, 250, 818, 1025], "heap": [142, 250, 818, 1025], "its": [142, 250, 311, 338, 345, 495, 617, 773, 804, 811, 818, 1025], "bitmap": [142, 250, 818, 1025], "therefor": [142, 250, 608, 818, 1025], "structarrai": [142, 250, 818, 1025], "constant": [142, 156, 250, 309, 359, 617, 650, 715, 771, 818, 824, 1025], "unchang": [142, 250, 543, 617, 659, 699, 715, 818, 1008, 1025], "capac": [142, 201, 250, 818, 943, 1025], "ffi": [142, 250, 818, 1025], "kb": [142, 250, 818, 1025], "mb": [142, 250, 818, 1025], "gb": [142, 250, 818, 1025], "tb": [142, 250, 818, 1025], "revers": [142, 250, 298, 299, 300, 301, 302, 431, 461, 536, 617, 715, 759, 760, 761, 762, 1025], "1_000_000": [142, 250, 818, 1025], "25888898": [142, 250], "689577102661133": [142, 250], "long": [143, 176, 221, 250, 641, 663, 715], "letter": [143, 235, 244, 250, 356, 506, 576, 617, 641, 702, 711, 715, 718, 962], "thu": [144, 250, 565, 724, 1025], "faster": [144, 213, 221, 250, 264, 471, 512, 547, 617, 679, 680, 715, 724, 725, 922, 968, 1025], "onlin": [144, 250, 724, 1025], "rerun": [144, 250, 724, 1025], "evalu": [145, 147, 170, 250, 261, 275, 303, 374, 376, 380, 394, 395, 422, 432, 456, 553, 554, 557, 559, 572, 575, 584, 585, 593, 596, 602, 606, 608, 609, 617, 645, 652, 654, 655, 715, 735, 763, 862, 863, 1016, 1025], "fill_valu": [145, 200, 221, 250, 486, 617, 677, 715, 941, 1025], "Not": [145, 250, 382, 384, 432, 617, 643, 715], "To": [145, 250, 307, 308, 334, 361, 499, 505, 506, 514, 530, 603, 617, 643, 715, 800, 955, 961, 962, 970, 986], "fillnullstrategi": [146, 250, 361, 617, 644, 715, 826, 1025], "matches_supertyp": [146, 250, 644, 715], "forward": [146, 170, 250, 330, 361, 367, 617, 644, 655, 715, 796, 826, 1025], "consecut": [146, 250, 281, 361, 367, 498, 617, 644, 715, 826, 954, 1025], "fill_nan": [146, 250, 617, 715, 1025], "OR": [147, 250, 554, 645, 715, 718], "reduct": [149, 250], "supercast": [149, 250], "parent": [149, 250], "rule": [149, 250], "arithmet": [149, 250], "zip_with": [149, 250, 1025], "foo11": [149, 250], "bar22": [149, 250], "null_equ": [150, 250, 935, 1025], "retriev": [151, 250, 396, 397, 533, 864, 865, 989], "return_as_str": [153, 250, 443], "preview": [153, 250], "wide": [153, 176, 221, 250, 663, 715], "nice": [153, 250], "few": [153, 250], "rather": [153, 170, 250, 443, 532, 655, 715, 988], "head": [153, 172, 206, 250, 263, 393, 617, 658, 715, 860, 995, 1025], "tail": [153, 158, 250, 263, 492, 617, 715, 833, 948, 1025], "more_bi": [154, 182, 203, 250, 495, 617, 648, 682, 715], "maintain_ord": [154, 182, 184, 219, 223, 231, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 250, 258, 264, 280, 424, 539, 546, 566, 617, 635, 640, 642, 648, 668, 678, 679, 680, 688, 698, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 715, 740, 764, 892, 914, 1010, 1025], "consist": [154, 182, 250, 524, 648, 715, 980], "agg": [154, 155, 156, 250, 258, 264, 362, 364, 494, 495, 539, 551, 566, 617, 635, 640, 642, 648, 649, 650, 668, 678, 715, 718], "index_column": [155, 156, 250, 649, 650, 715], "timedelta": [155, 156, 223, 250, 315, 318, 319, 322, 327, 329, 334, 335, 336, 338, 339, 343, 345, 346, 347, 349, 472, 473, 474, 475, 476, 478, 479, 480, 572, 606, 617, 649, 650, 715, 785, 787, 792, 800, 804, 811, 906, 907, 1025], "period": [155, 156, 199, 200, 250, 338, 345, 353, 354, 355, 416, 458, 485, 486, 572, 606, 617, 649, 650, 676, 677, 715, 804, 811, 819, 820, 821, 884, 910, 940, 941, 1025], "include_boundari": [155, 250, 649, 715], "closedinterv": [155, 156, 250, 376, 472, 473, 474, 475, 476, 478, 479, 480, 572, 606, 617, 649, 650, 715, 838, 1025], "start_bi": [155, 250, 649, 715], "startbi": [155, 250, 649, 715], "window": [155, 156, 250, 303, 338, 345, 353, 354, 355, 457, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 563, 572, 597, 598, 606, 617, 649, 650, 715, 763, 804, 811, 819, 820, 821, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 1025], "check_sort": [155, 156, 250, 649, 650, 715], "dynamicgroupbi": [155, 250], "groupbi": [155, 156, 180, 250, 258, 264, 303, 362, 364, 403, 457, 494, 495, 539, 551, 555, 566, 617, 635, 640, 642, 649, 650, 668, 678, 715, 718, 763, 871, 1025], "member": [155, 250, 649, 715, 845, 1025], "seen": [155, 250, 281, 367, 617, 649, 715], "roll": [155, 156, 250, 330, 331, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 563, 597, 598, 617, 649, 650, 715, 796, 797, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 1025], "slot": [155, 250, 303, 305, 401, 617, 649, 715, 763, 766, 869, 1025], "interv": [155, 156, 223, 250, 321, 338, 339, 345, 376, 472, 473, 474, 475, 476, 478, 479, 480, 572, 606, 617, 649, 650, 715, 764, 777, 780, 781, 783, 788, 790, 793, 795, 798, 801, 802, 804, 805, 809, 811, 812, 813, 815, 838, 914, 1025], "1n": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "nanosecond": [155, 156, 170, 223, 250, 334, 338, 339, 345, 472, 473, 474, 475, 476, 478, 479, 480, 574, 617, 649, 650, 655, 715, 800, 804, 805, 811], "1u": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "microsecond": [155, 156, 170, 223, 250, 334, 338, 339, 345, 472, 473, 474, 475, 476, 478, 479, 480, 573, 574, 605, 617, 649, 650, 655, 668, 715, 800, 804, 811], "1m": [155, 156, 170, 223, 250, 323, 324, 326, 333, 334, 338, 340, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 789, 791, 799, 800, 804, 806, 811], "millisecond": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 574, 617, 649, 650, 655, 715, 800, 804, 811], "minut": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 572, 573, 574, 605, 606, 617, 649, 650, 655, 715, 800, 804, 811], "1h": [155, 156, 170, 223, 250, 317, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 606, 617, 649, 650, 655, 715, 779, 781, 800, 804, 811], "hour": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 572, 573, 574, 605, 606, 617, 649, 650, 655, 715, 800, 804, 811], "1d": [155, 156, 170, 223, 250, 310, 320, 328, 334, 338, 345, 348, 472, 473, 474, 475, 476, 478, 479, 480, 572, 586, 617, 649, 650, 655, 715, 772, 780, 782, 785, 786, 787, 792, 794, 800, 804, 809, 811, 813, 814], "1w": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "week": [155, 156, 170, 223, 250, 334, 338, 345, 347, 472, 473, 474, 475, 476, 478, 479, 480, 574, 617, 649, 650, 655, 715, 800, 804, 811, 813], "1mo": [155, 156, 170, 223, 250, 312, 316, 330, 331, 334, 337, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 572, 617, 649, 650, 655, 715, 774, 778, 795, 796, 797, 800, 801, 802, 803, 804, 811, 812], "month": [155, 156, 170, 223, 250, 315, 330, 331, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 573, 617, 649, 650, 655, 715, 777, 796, 797, 800, 804, 811], "1q": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "quarter": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "1y": [155, 156, 170, 223, 250, 321, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 572, 617, 649, 650, 655, 715, 783, 800, 804, 811, 815], "1i": [155, 156, 170, 223, 250, 334, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800], "3d12h4m25": [155, 156, 170, 223, 250, 338, 345, 572, 649, 650, 655, 715, 804, 811], "suffix": [155, 156, 169, 170, 196, 223, 227, 230, 250, 259, 285, 334, 338, 345, 382, 384, 385, 386, 431, 457, 461, 470, 472, 473, 474, 475, 476, 478, 479, 480, 503, 617, 649, 650, 654, 655, 674, 693, 694, 697, 715, 718, 744, 800, 804, 811, 959], "_satur": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 572, 617, 649, 650, 655, 715, 800, 804, 811], "satur": [155, 156, 170, 223, 250, 334, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 800, 804, 811], "28": [155, 156, 170, 209, 223, 250, 257, 334, 337, 338, 345, 348, 472, 473, 474, 475, 476, 478, 479, 480, 572, 617, 649, 650, 655, 715, 800, 803, 804, 811, 814, 1033], "correspond": [155, 156, 170, 213, 223, 250, 322, 334, 338, 345, 465, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 784, 800, 804, 811, 916, 1025], "due": [155, 156, 170, 223, 250, 289, 317, 334, 337, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 617, 649, 650, 655, 715, 747, 779, 800, 803, 804, 811, 1025], "daylight": [155, 156, 170, 223, 250, 309, 317, 334, 337, 338, 345, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 650, 655, 715, 779, 800, 803, 804, 811], "10i": [155, 156, 250, 649, 650, 715], "ascend": [155, 156, 250, 649, 650, 715], "dynam": [155, 250, 422, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 715, 890], "matter": [155, 156, 167, 193, 210, 250, 649, 650, 715], "_lower_bound": [155, 250, 649, 715], "_upper_bound": [155, 250, 649, 715], "harder": [155, 250, 649, 715], "tempor": [155, 156, 167, 193, 210, 250, 376, 472, 473, 474, 475, 476, 478, 479, 480, 572, 606, 617, 628, 649, 650, 715, 718, 838, 854, 1025], "inclus": [155, 156, 250, 376, 472, 473, 474, 475, 476, 478, 479, 480, 519, 520, 557, 584, 585, 617, 649, 650, 715, 838, 975, 976, 1025], "datapoint": [155, 250, 649, 715], "mondai": [155, 250, 345, 347, 649, 715, 811, 813], "tuesdai": [155, 250, 649, 715], "wednesdai": [155, 250, 649, 715], "thursdai": [155, 250, 649, 715], "fridai": [155, 250, 649, 715], "saturdai": [155, 250, 649, 715], "sundai": [155, 250, 347, 649, 715, 813], "weekli": [155, 250, 345, 649, 715, 811], "sorted": [155, 156, 250, 649, 650, 715], "metadata": [155, 156, 250, 649, 650, 715], "verifi": [155, 156, 250, 649, 650, 715], "incorrectli": [155, 156, 250, 422, 649, 650, 715], "incorrect": [155, 156, 250, 348, 484, 617, 649, 650, 699, 715, 814, 938, 1025], "re": [155, 213, 250, 330, 331, 649, 715, 796, 797, 1032], "come": [155, 250, 330, 331, 389, 617, 629, 649, 714, 715, 796, 797, 858, 1025], "set_index": [155, 250, 649, 715], "resampl": [155, 250, 649, 715], "reset_index": [155, 250, 649, 715], "though": [155, 250, 649, 715], "evenli": [155, 250, 649, 715], "upsampl": [155, 250, 649, 715], "date_rang": [155, 223, 250, 310, 312, 315, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 343, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 617, 649, 715, 771, 772, 774, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 811, 812, 813, 814, 815], "30m": [155, 250, 338, 345, 649, 715, 804, 811], "time_min": [155, 250, 649, 715], "time_max": [155, 250, 649, 715], "23": [155, 156, 250, 311, 319, 338, 472, 473, 475, 478, 479, 480, 573, 605, 606, 617, 649, 650, 715, 773, 781, 1033], "boundari": [155, 250, 292, 293, 294, 617, 649, 715, 753, 754, 755, 834, 1025], "time_count": [155, 250, 649, 715], "_lower_boundari": [155, 250, 649, 715], "_upper_boundari": [155, 250, 649, 715], "lower_bound": [155, 250, 292, 294, 376, 617, 649, 715, 753, 755, 838, 1012, 1025], "upper_bound": [155, 250, 292, 293, 376, 422, 617, 649, 715, 753, 754, 838, 896, 1025], "time_agg_list": [155, 250, 649, 715], "arang": [155, 221, 250, 649, 715], "2i": [155, 250, 649, 715], "3i": [155, 250, 649, 715], "a_agg_list": [155, 250, 649, 715], "rollinggroupbi": [156, 250], "dynamic_groupbi": [156, 250, 650, 715], "groupby_dynam": [156, 250, 650, 715], "t_0": [156, 250, 472, 473, 474, 475, 476, 478, 479, 480, 617, 650, 715], "t_1": [156, 250, 472, 473, 474, 475, 476, 478, 479, 480, 617, 650, 715], "t_n": [156, 250, 472, 473, 474, 475, 476, 478, 479, 480, 617, 650, 715], "19": [156, 170, 250, 338, 473, 475, 527, 606, 617, 650, 655, 715, 804, 811, 983], "43": [156, 250, 302, 479, 617, 650, 715], "strptime": [156, 250, 337, 650, 715, 803], "set_sort": [156, 170, 223, 250, 617, 650, 655, 715, 1025], "2d": [156, 213, 250, 586, 650, 715, 771, 777], "sum_a": [156, 250, 650, 715], "min_a": [156, 250, 650, 715], "max_a": [156, 250, 650, 715], "seed": [157, 194, 250, 371, 465, 482, 488, 617, 832, 916, 933, 944, 1025], "seed_1": [157, 250, 371, 617, 832, 1025], "seed_2": [157, 250, 371, 617, 832, 1025], "seed_3": [157, 250, 371, 617, 832, 1025], "hash": [157, 250, 617, 1025], "u64": [157, 250, 371, 467, 617, 668, 715, 832, 1025], "10783150408545073287": [157, 250], "1438741209321515184": [157, 250], "10047419486152048166": [157, 250], "2047317070637311557": [157, 250], "ab": [158, 172, 206, 227, 250, 533, 534, 617, 693, 715, 833, 860, 995, 1025], "grown": [160, 250], "intermedi": [162, 250, 653, 715, 837, 1025, 1033], "linear": [162, 186, 242, 250, 375, 398, 435, 463, 476, 563, 564, 594, 617, 653, 669, 709, 715, 837, 866, 915, 927, 1025], "mask": [163, 165, 250, 282, 283, 285, 286, 377, 379, 387, 399, 499, 501, 617, 741, 742, 827, 838, 840, 843, 855, 867, 911, 912, 936, 955, 957, 1016, 1025], "visual": [163, 165, 250], "buffer_s": [167, 250], "intern": [167, 250], "veri": [167, 218, 250, 264, 617, 634, 699, 715, 756, 1025], "fit": [167, 201, 221, 250, 487, 596, 617, 942, 943, 1025], "signific": [167, 250, 264, 617], "4x": [167, 250], "materialis": [167, 168, 192, 193, 250], "rows_by_kei": [167, 193, 250], "iter_row": [168, 192, 193, 250], "17_500": [168, 250], "klmnoopqrstuvwxyz": [168, 250], "__name__": [168, 250], "7500": [168, 250], "15_000": [168, 250], "record_batch": [168, 250], "to_arrow": [168, 250, 1025], "to_batch": [168, 250], "date32": [168, 250], "large_str": [168, 208, 214, 250], "15000": [168, 250], "2500": [168, 250], "left_on": [169, 170, 250, 654, 655, 715], "right_on": [169, 170, 250, 654, 655, 715], "_right": [169, 170, 250, 654, 655, 715], "joinvalid": [169, 250, 654, 715], "semi": [169, 250, 654, 715], "anti": [169, 250, 654, 699, 715, 936, 937, 1025], "cross": [169, 250, 654, 715], "many_to_mani": [169, 250, 654, 715], "one_to_on": [169, 250, 654, 715], "one_to_mani": [169, 250, 654, 715], "many_to_on": [169, 250, 654, 715], "join_asof": [169, 250, 654, 715], "stringcach": [169, 250, 628], "other_df": [169, 250], "by_left": [170, 250, 655, 715], "by_right": [170, 250, 655, 715], "asofjoinstrategi": [170, 250, 655, 715], "allow_parallel": [170, 250, 654, 655, 715], "force_parallel": [170, 250, 654, 655, 715], "asof": [170, 250, 655, 715], "asof_join": [170, 250], "search": [170, 250, 655, 715], "distanc": [170, 250, 655, 715, 834, 1025], "plan": [170, 171, 250, 632, 640, 647, 654, 655, 670, 678, 696, 715], "gdp": [170, 250, 655, 715], "2016": [170, 250, 655, 715], "2017": [170, 250, 655, 715], "2018": [170, 250, 337, 655, 715, 803], "2019": [170, 250, 655, 715], "record": [170, 213, 250, 655, 715], "jan": [170, 250, 655, 715], "1st": [170, 250, 572, 655, 715], "4164": [170, 250, 655, 715], "4411": [170, 250, 655, 715], "4566": [170, 250, 655, 715], "4696": [170, 250, 655, 715], "popul": [170, 250, 655, 715], "12th": [170, 250, 655, 715], "82": [170, 250, 655, 715], "66": [170, 250, 479, 552, 617, 655, 715, 927, 1025], "83": [170, 250, 655, 715], "52": [170, 227, 250, 481, 617, 655, 693, 715], "request": [171, 250], "describe_plan": [171, 250], "unoptim": [171, 250], "describe_optimized_plan": [171, 250], "show_graph": [171, 250, 715], "un": [171, 250], "graphviz": [171, 250, 678, 715], "axi": [173, 174, 176, 178, 205, 250, 663, 715], "null_strategi": [174, 205, 250], "nullstrategi": [174, 205, 250], "spam": [174, 250, 506, 962], "id_var": [176, 250, 663, 715], "value_var": [176, 250, 663, 715], "variable_nam": [176, 250, 663, 715], "value_nam": [176, 250, 663, 715], "unpivot": [176, 250, 663, 715], "leav": [176, 250, 422, 663, 715], "massag": [176, 250, 663, 715], "measur": [176, 250, 663, 715], "merg": [177, 250, 664, 715], "caller": [177, 250, 422, 659, 664, 699, 715], "respons": [177, 250, 664, 715], "steve": [177, 250, 664, 715], "elis": [177, 250, 664, 715], "bob": [177, 250, 664, 715], "ag": [177, 250, 664, 715], "anna": [177, 250, 664, 715], "megan": [177, 250, 664, 715], "thoma": [177, 250, 664, 715], "21": [177, 205, 250, 472, 473, 475, 478, 479, 480, 580, 617, 664, 715, 718], "what": [180, 250, 1006, 1015, 1025], "pack": [180, 250], "expr_unique_subset": [180, 250], "df_nuniqu": [180, 250], "df_agg_nuniqu": [180, 250], "offer": [183, 250, 459, 617, 667, 715], "fulli": [183, 194, 250], "cast_str_to_int": [183, 250, 667, 715], "col_nam": [183, 250, 431, 617, 667, 715], "tdf": [183, 250, 667, 715], "aggregate_funct": [184, 250], "pivotagg": [184, 250], "nodefault": [184, 250], "_nodefault": [184, 250], "no_default": [184, 250], "sort_column": [184, 250], "predefin": [184, 250], "predict": [184, 187, 223, 250, 482, 488, 617], "transpos": [184, 250], "discoveri": [184, 250], "col1": [184, 221, 250, 715, 1033], "col2": [184, 221, 250, 715, 1033], "col3": [184, 250, 1033], "tanh": [184, 250, 617, 1025], "998347": [184, 250], "964028": [184, 250], "999954": [184, 250], "interpol": [186, 242, 250, 361, 435, 463, 476, 594, 617, 669, 709, 715, 915, 927, 1025], "rollinginterpolationmethod": [186, 242, 250, 463, 476, 594, 617, 669, 709, 715, 915, 927, 1025], "midpoint": [186, 242, 250, 463, 476, 594, 617, 669, 709, 715, 915, 927, 1025], "by_pred": [192, 250], "accord": [192, 250, 432, 572, 617, 784], "never": [192, 250, 572], "mutual": [192, 250], "exclus": [192, 250, 552, 557, 584, 585, 617], "addition": [192, 250], "clariti": [192, 250], "toomanyrowsreturnederror": [192, 250, 628], "norowsreturnederror": [192, 250, 628], "inherit": [192, 250], "rowserror": [192, 250, 628], "with_replac": [194, 250, 482, 617, 933, 1025], "shuffl": [194, 232, 250, 482, 617, 699, 933, 1025], "modul": [194, 250, 482, 488, 616, 617, 718, 933, 944, 1025], "named_expr": [196, 227, 250, 599, 602, 674, 693, 715], "threshold": [196, 250, 674, 715], "set_auto_structifi": [196, 227, 250, 674, 693, 715], "auto_structifi": [196, 227, 250, 674, 693, 715], "is_odd": [196, 250, 674, 715], "_is_odd": [196, 250, 674, 715], "shift_and_fil": [199, 250, 617, 715, 1025], "shift": [200, 250, 305, 401, 458, 486, 563, 617, 677, 715, 766, 869, 910, 941, 1025], "shrink": [201, 250, 487, 617, 942, 943, 1025], "hold": [201, 250], "ddof": [204, 224, 250, 478, 480, 497, 550, 565, 597, 598, 601, 607, 617, 683, 691, 715, 929, 931, 952, 1014, 1025], "deviat": [204, 250, 354, 478, 497, 601, 617, 683, 715, 820, 952, 1025], "degre": [204, 224, 250, 464, 478, 480, 497, 550, 565, 597, 598, 601, 607, 617, 683, 691, 715, 929, 931, 952, 1014, 1025], "freedom": [204, 224, 250, 478, 480, 497, 550, 565, 597, 598, 601, 607, 617, 683, 691, 715, 929, 931, 952, 1014, 1025], "divisor": [204, 224, 250, 478, 480, 497, 550, 565, 597, 598, 601, 607, 617, 683, 691, 715, 929, 931, 952, 1014, 1025], "816497": [204, 250], "16a": [205, 250], "27b": [205, 250], "38c": [205, 250], "nth": [207, 250, 521, 540, 617, 686, 715, 977, 997, 1025], "mostli": [208, 250, 362, 617], "categoricaltyp": [208, 250], "as_seri": [209, 250], "fruit": [209, 250, 461, 470, 503, 522, 536, 617, 959, 978], "car": [209, 250, 461, 470, 536, 617], "beetl": [209, 250, 461, 470, 536, 617], "audi": [209, 250, 461, 470, 536, 617], "300": [209, 250, 923, 924, 926, 1025], "drop_first": [211, 250], "dummi": [211, 250, 1002, 1025], "foo_1": [211, 250], "foo_2": [211, 250], "bar_3": [211, 250], "bar_4": [211, 250], "ham_a": [211, 250], "ham_b": [211, 250], "instantiat": [212, 250, 1004, 1025], "from_repr": [212, 250, 1004, 1025], "df_from_str_repr": [212, 250], "eval": [212, 250, 575, 1004, 1025], "indexord": [213, 250], "fortran": [213, 250], "downstream": [213, 250, 484, 617, 938, 1025], "applic": [213, 250, 472, 473, 474, 475, 476, 478, 479, 480, 617], "prevent": [213, 250, 301, 302, 388, 537, 617, 715, 761, 762, 994, 1025], "reshap": [213, 250, 404, 617, 872, 1025], "ll": [213, 250], "u1": [213, 250], "f4": [213, 250], "view": [213, 250, 1006, 1025], "recarrai": [213, 250], "rec": [213, 250], "use_pyarrow_extension_arrai": [214, 250, 1007, 1025], "trigger": [214, 250, 1007, 1025], "sent": [214, 250, 1006, 1007, 1025], "pandas_df1": [214, 250], "pandas_df2": [214, 250], "pandas_df2_pa": [214, 250], "na": [214, 250, 1007, 1025], "get_column": [215, 250, 603], "four": [216, 250], "five": [216, 250, 1033], "bottom_k": [217, 250, 544, 617, 687, 715, 1009, 1025], "include_head": [218, 250], "header_nam": [218, 250], "column_nam": [218, 250], "perhap": [218, 250], "column_2": [218, 250], "name_gener": [218, 250], "base_nam": [218, 250], "my_column_": [218, 250], "my_column_0": [218, 250], "my_column_1": [218, 250], "my_column_2": [218, 250], "uniquekeepstrategi": [219, 250, 688, 715], "kept": [219, 250, 688, 715], "decompos": [220, 250, 689, 715], "t_a": [220, 250, 689, 715], "t_b": [220, 250, 689, 715], "t_c": [220, 250, 689, 715], "t_d": [220, 250, 689, 715], "womp": [220, 250, 689, 715], "t_": [220, 250, 689, 715], "t_struct": [220, 250, 689, 715], "step": [221, 250, 557, 584, 585], "unstackdirect": [221, 250], "much": [221, 250, 303, 421, 617, 763, 889, 1025], "pivot": [221, 250], "phase": [221, 250], "subject": [221, 250], "ascii_uppercas": [221, 250], "h": [221, 250, 257, 341, 344, 487, 524, 526, 529, 617, 980, 982, 985], "col1_0": [221, 250], "col1_1": [221, 250], "col1_2": [221, 250], "col2_0": [221, 250], "col2_1": [221, 250], "col2_2": [221, 250], "syntact": [222, 250, 576, 577, 581, 593, 594, 599, 609, 690, 715, 951, 1025], "sugar": [222, 250, 576, 577, 581, 593, 594, 599, 609, 690, 715, 951, 1025], "coalesc": [222, 250, 524, 690, 715, 980], "400": [222, 250, 690, 715, 923, 924, 926, 1025], "600": [222, 250, 690, 715, 718], "700": [222, 250, 690, 715], "new_df": [222, 250, 690, 715], "time_column": [223, 250], "frequenc": [223, 250], "forward_fil": [223, 250, 299, 302, 617], "varianc": [224, 250, 355, 389, 480, 550, 607, 617, 691, 715, 821, 858, 931, 1014, 1025], "grow": [225, 250], "is_not": [227, 250, 617, 693, 715], "not_c": [227, 250, 693, 715], "diff": [227, 250, 316, 320, 324, 326, 328, 333, 340, 402, 617, 693, 715, 778, 782, 789, 791, 794, 799, 806, 870, 1025], "_diff": [227, 250, 693, 715], "row_nr": [228, 250, 432, 472, 473, 475, 478, 479, 480, 617, 695, 715, 937, 1025], "named_agg": [230, 697], "_sum": [230, 697], "_mean_squar": [230, 697], "b_sum": [230, 697], "c_mean_squar": [230, 697], "sub": [232, 277, 278, 279, 617, 737, 738, 739], "triangl": [232, 699], "group_df": [232, 699], "int_rang": [232, 699], "deem": [233, 297, 566, 617, 700], "nr": [235, 244, 702, 711], "maxim": [237, 272, 617, 704, 732, 1025], "833333": [238, 705], "minim": [240, 273, 397, 487, 495, 617, 707, 733, 865, 901, 942, 1025], "overview": [250, 617, 628, 715, 1025, 1033], "frameinittyp": [250, 715], "variou": [250, 617, 715, 718, 1025], "entri": [250, 715, 1032], "behavior": [250, 264, 421, 555, 617, 889], "mydatafram": 250, "notic": [250, 715, 1025], "df4": 250, "df5": 250, "df6": 250, "corr": 250, "drop_in_plac": 250, "drop_nul": [250, 307, 617, 715, 1025], "estimated_s": [250, 1025], "explod": [250, 364, 457, 469, 617, 715, 920, 1025], "find_idx_by_nam": 250, "fold": [250, 441, 561, 568, 569, 595], "frame_equ": [250, 338, 345], "groupby_rol": [250, 472, 473, 474, 475, 476, 478, 479, 480, 617, 649, 715], "hash_row": 250, "hstack": 250, "insert_at_idx": 250, "is_dupl": [250, 617, 1025], "is_empti": [250, 1025], "is_uniqu": [250, 617, 1025], "iter_slic": 250, "melt": [250, 715], "merge_sort": [250, 715], "n_uniqu": [250, 617, 1025], "pipe": [250, 617, 715], "quantil": [250, 476, 617, 715, 914, 927, 1025], "replace_at_idx": 250, "selectortyp": [250, 718], "include_kei": 250, "high": 250, "cost": 250, "reoconstruct": 250, "defaultdict": 250, "assum": [250, 617, 659, 699, 715], "shrink_to_fit": [250, 1025], "take_everi": [250, 617, 715, 1025], "to_dict": 250, "to_dummi": [250, 1025], "to_numpi": [250, 430, 617, 1025], "to_panda": [250, 1025], "to_struct": [250, 506], "unnest": [250, 506, 520, 521, 534, 715, 890, 976, 977], "unstack": 250, "write_avro": 250, "write_databas": 250, "write_delta": 250, "write_excel": 250, "write_json": [250, 670, 715], "write_parquet": 250, "cumprod": [257, 617, 1025], "ghi": [257, 506, 617, 718, 962], "94": [258, 617], "map_alia": [259, 461, 536, 617], "confus": [260, 382, 384, 617], "tt": [260, 617], "tf": [260, 262, 617], "ff": [260, 262, 617], "upcast": [263, 617], "skip_nul": [264, 617, 725, 1025], "pass_nam": [264, 617], "applystrategi": [264, 617], "thread_loc": [264, 617], "unknown": [264, 432, 505, 586, 617, 961], "stage": [264, 617], "speed": [264, 617, 680, 715], "code": [264, 282, 284, 285, 286, 484, 617, 657, 715, 938, 1025], "amount": [264, 617], "releas": [264, 617, 1033], "gil": [264, 617], "bug": [264, 430, 617, 659, 699, 715, 725, 1025], "discourag": [264, 617], "loop": [264, 617], "a_times_2": [264, 617], "approx": [265, 556, 617, 715], "hyperloglog": [265, 556, 617, 715], "algorithm": [265, 556, 617, 715], "cardin": [265, 556, 617, 715], "invers": [266, 267, 268, 269, 270, 271, 617, 726, 727, 728, 729, 730, 731, 1025], "cosin": [266, 267, 295, 296, 430, 617, 726, 727, 757, 758, 1025], "570796": [266, 268, 617, 726, 728, 1025], "hyperbol": [267, 269, 271, 296, 491, 542, 617, 727, 729, 731, 758, 947, 999, 1025], "sine": [268, 269, 430, 490, 491, 617, 728, 729, 946, 947, 1025], "881374": [269, 617, 729, 1025], "tangent": [270, 271, 541, 542, 617, 730, 731, 998, 999, 1025], "785398": [270, 617, 730, 1025], "arg_wher": [275, 617], "maintain": [280, 424, 483, 546, 617, 679, 680, 715, 740, 892, 934, 1010, 1025], "substr": [282, 285, 286, 499, 503, 514, 515, 519, 520, 521, 522, 718, 741, 744, 745, 955, 959, 970, 971, 975, 976, 977, 978], "ends_with": [282, 286, 499, 522, 718, 978], "x00": [282, 284, 285, 286], "xff": [282, 284, 285, 286], "hex": [282, 283, 284, 285, 286, 501, 502, 513, 742, 743, 957, 958, 969], "code_encoded_hex": [282, 284, 285, 286], "contains_ff": [282, 285, 286], "starts_with_ff": [282, 285, 286], "ends_with_ff": [282, 285, 286], "000000": [282, 284, 285, 286], "ffff00": [282, 284, 285, 286], "0000ff": [282, 284, 285, 286], "transferencod": [283, 284, 501, 502, 742, 743, 957, 958], "strict": [283, 289, 499, 501, 513, 524, 525, 526, 529, 617, 742, 747, 935, 955, 957, 969, 980, 981, 982, 985, 1025], "base64": [283, 284, 501, 502, 742, 743, 957, 958], "anywher": [285, 286, 524, 525, 526, 980, 981, 982], "complex": [287, 303, 544, 617, 746, 763, 1009, 1025], "frac": [287, 353, 354, 355, 492, 544, 617, 746, 819, 820, 821, 948, 1009, 1025], "hurt": [288, 617], "lot": [288, 617], "content": [288, 488, 549, 617, 944, 1025], "problem": [288, 617], "overflow": [289, 301, 302, 513, 537, 617, 747, 761, 762, 969, 994, 1025], "categoricalord": [290, 749], "lexic": [290, 718, 749], "foo_clip": [292, 293, 294, 617], "clip": [293, 294, 617, 754, 755, 1025], "543081": [296, 617, 758, 1025], "cumul": [298, 299, 300, 301, 302, 568, 569, 570, 617, 759, 760, 761, 762, 1025], "a_revers": [298, 299, 300, 301, 302, 431, 470, 536, 617], "value_cummax": [299, 617], "value_cummax_all_fil": [299, 617], "value_cumsum": [302, 617], "value_cumsum_all_fil": [302, 617], "min_period": [303, 353, 354, 355, 471, 472, 473, 474, 475, 476, 478, 479, 480, 597, 598, 617, 763, 819, 820, 821, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1025], "slide": [303, 617, 763, 1025], "realli": [303, 617, 763, 1025], "visit": [303, 617, 763, 1025], "radian": [304, 617], "pi": [304, 617, 757, 946, 998, 1025], "720": [304, 464, 617], "540": [304, 464, 617], "360": [304, 464, 617], "180": [304, 322, 336, 349, 464, 617], "null_behavior": [305, 401, 617, 766, 869, 1025], "nullbehavior": [305, 401, 617, 766, 869, 1025], "th": [305, 401, 402, 492, 617, 766, 869, 870, 948, 1025], "discret": [305, 350, 401, 402, 617, 764, 766, 817, 834, 869, 870, 914, 1025], "drop_nan": [308, 617, 1025], "utc": [309, 312, 317, 337, 524, 526, 718, 771, 774, 779, 803, 980, 982], "usual": [309, 771], "vari": [309, 572, 771, 1033], "rare": [309, 771], "countri": [309, 771], "switch": [309, 771], "samoa": [309, 771], "apia": [309, 771], "did": [309, 506, 771, 962], "2011": [309, 771], "dst_offset": [309, 771], "2012": [309, 771], "replace_time_zon": [309, 317, 775, 776, 808], "pacif": [309, 771], "11h": [309, 771], "13h": [309, 771], "lose": [310, 772], "2001": [310, 315, 318, 319, 321, 322, 327, 329, 334, 335, 336, 338, 339, 343, 345, 346, 347, 348, 349, 472, 473, 475, 478, 479, 480, 524, 617, 772, 777, 780, 781, 783, 785, 786, 787, 788, 790, 792, 793, 795, 798, 800, 801, 802, 804, 805, 809, 811, 812, 813, 814, 815, 980], "time_unit_m": [310, 772], "time_unit_n": [310, 772], "naiv": [311, 524, 526, 773, 980, 982], "compon": [311, 339, 524, 526, 574, 773, 805, 980, 982], "resolv": 311, "tm": [311, 718], "456000": [311, 773], "101000": 311, "456": [311, 718, 773, 1003, 1025], "07": [311, 315, 335, 337, 338, 345, 347, 524, 572, 580, 606, 718, 773, 777, 803, 813, 980], "101": [311, 513, 969, 1033], "d1": 311, "d2": 311, "d3": 311, "europ": [312, 317, 337, 774, 779, 803], "london": [312, 317, 337, 774, 779, 803], "gmt": [312, 317, 337, 774, 779, 803], "bst": [312, 317, 337, 774, 779, 803], "weekdai": [315, 335], "day_of_month": [315, 335, 347], "ordinal_dai": [315, 347], "day_of_year": [315, 335, 347], "days_diff": 316, "base_utc_offset": [317, 779], "26": [317, 779], "0m": [317, 779], "epochtimeunit": [318, 580, 780], "unix": [318, 580, 780], "epoch_n": [318, 780], "epoch_": [318, 780], "978307200000000": [318, 343, 780, 809], "978307200": [318, 780], "978393600000000": [318, 343, 780, 809], "978393600": [318, 780], "978480000000000": [318, 343, 780, 809], "978480000": [318, 780], "hours_diff": 320, "leap": [321, 334, 572, 783, 800], "2002": [321, 322, 334, 336, 349, 783, 800, 815], "iso": [322, 346, 347, 784, 812, 813], "2006": [322, 334, 800], "2004": [322, 334, 800], "2005": [322, 334, 800], "1_001": [323, 324, 326, 333], "002": [323, 324, 326, 333, 574, 789, 791, 799], "003": [323, 324, 326, 333], "3000": 323, "997": [323, 324, 326, 333], "997000": 323, "998": [323, 324, 326, 333], "998000": 323, "999": [323, 324, 326, 333, 718, 1033], "999000": [323, 718], "microseconds_diff": 324, "milliseconds_diff": 326, "minutes_diff": 328, "1440": [328, 794], "think": [330, 331, 796, 797], "vectoris": [330, 331, 796, 797], "tseri": [330, 331, 796, 797], "monthend": [330, 796], "rollforward": [330, 796], "monthbegin": [331, 797], "rollback": [331, 797], "nanoseconds_diff": 333, "1000000": [333, 532, 799], "minu": [334, 800], "dictat": [334, 800], "date_plus_1i": [334, 800], "1y2mo": [334, 800], "date_min": 334, "1998": [334, 800], "1999": [334, 718, 800], "2003": [334, 580, 800], "ordin": [335, 465, 617, 801, 916, 1025], "366": [335, 801], "use_earliest": [337, 803], "convert_time_zon": [337, 803], "ambigu": [337, 803], "sai": [337, 803], "earliest": [337, 803], "london_timezon": [337, 803], "amsterdam": [337, 803], "london_to_amsterdam": [337, 803], "cet": [337, 803], "cest": [337, 803], "dst": [337, 803], "ts_local": [337, 803], "brussel": [337, 803], "half": [338, 353, 354, 355, 617, 804, 819, 820, 821, 1025], "225": [338, 345], "to_fram": [338, 345, 524, 936, 937, 976, 977, 980, 1025], "10m": [338, 345, 804, 811], "milli": [339, 805], "micro": [339, 805], "456789": 339, "654321": 339, "111110": 339, "765431": 339, "sec": [339, 1033], "11111": 339, "seconds_diff": 340, "to_str": [341, 807], "datetime_str": [341, 344], "timestamp_n": [343, 809], "timestamp_m": 343, "978307200000": 343, "978393600000": 343, "978480000000": 343, "strftime": [344, 810], "53": [346, 812], "time_unit_u": [348, 814], "32971": [348, 814], "32974": [348, 814], "32976": [348, 814], "718281828459045": [350, 425, 617, 817, 893, 1025], "pk": [350, 617, 817, 1025], "probabl": [350, 617, 817, 1025], "459148": [350, 617], "754888": [350, 617], "eq": [352, 617, 1025], "span": [353, 354, 355, 617, 819, 820, 821, 1025], "half_lif": [353, 354, 355, 617, 819, 820, 821, 1025], "adjust": [353, 354, 355, 492, 617, 819, 820, 821, 948, 1025], "ignore_nul": [353, 354, 355, 617, 819, 820, 821, 1015, 1025], "exponenti": [353, 354, 355, 357, 460, 617, 819, 820, 821, 822, 1025], "weight": [353, 354, 355, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 617, 819, 820, 821, 922, 923, 924, 925, 926, 927, 929, 930, 931, 948, 1025], "decai": [353, 354, 355, 617, 819, 820, 821, 1025], "term": [353, 354, 355, 509, 512, 617, 819, 820, 821, 965, 968, 1025], "mass": [353, 354, 355, 617, 819, 820, 821, 1025], "gamma": [353, 354, 355, 617, 819, 820, 821, 1025], "foral": [353, 354, 355, 617, 819, 820, 821, 1025], "geq": [353, 354, 355, 617, 819, 820, 821, 1025], "theta": [353, 354, 355, 617, 819, 820, 821, 1025], "life": [353, 354, 355, 617, 819, 820, 821, 1025], "exp": [353, 354, 355, 617, 819, 820, 821, 1025], "ln": [353, 354, 355, 617, 819, 820, 821, 1025], "smooth": [353, 354, 355, 617, 819, 820, 821, 1025], "factor": [353, 354, 355, 543, 617, 819, 820, 821, 1008, 1025], "leq": [353, 354, 355, 617, 819, 820, 821, 1025], "imbal": [353, 354, 355, 617, 819, 820, 821, 1025], "ew": [353, 354, 355, 617, 819, 820, 821, 1025], "w_i": [353, 354, 355, 617, 819, 820, 821, 1025], "recurs": [353, 354, 355, 617, 819, 820, 821, 1025], "y_0": [353, 354, 355, 617, 819, 820, 821, 1025], "x_0": [353, 354, 355, 617, 819, 820, 821, 1025], "y_t": [353, 354, 355, 617, 819, 820, 821, 1025], "y_": [353, 354, 355, 617, 819, 820, 821, 1025], "x_t": [353, 354, 355, 617, 819, 820, 821, 1025], "observ": [353, 354, 355, 617, 819, 820, 821, 1025], "x_2": [353, 354, 355, 617, 819, 820, 821, 1025], "428571": [353, 617], "bia": [354, 355, 389, 477, 492, 617, 820, 821, 858, 928, 948, 1025], "unbias": [354, 355, 617, 820, 821, 1025], "963624": [354, 617, 820, 1025], "928571": [355, 617, 821, 1025], "wildcard": [356, 562, 568, 569, 578, 595, 617], "regex": [356, 438, 499, 500, 503, 505, 506, 514, 515, 522, 576, 603, 617, 718, 955, 956, 959, 961, 962, 970, 971, 978], "aa": [356, 499, 576, 617, 955], "ba": [356, 576, 617, 718], "cc": [356, 576, 617], "718282": [357, 617], "389056": [357, 617], "54": [357, 617, 1033], "59815": [357, 617], "expand": [358, 437, 438, 468, 617, 823, 1025], "pythonliter": [359, 588, 591, 617, 824, 898, 901, 1025], "extrem": [359, 617, 824, 1025], "group_col": [362, 551, 617], "g1": [362, 551, 617], "g2": [362, 551, 617], "lt": [362, 551, 617, 1025], "gte": [362, 551, 617], "exprlistnamespac": [364, 617], "divis": [366, 545, 617], "truediv": [366, 617], "9774092659964970114": [371, 617], "13614470193936745724": [371, 617], "1101441246220388612": [371, 617], "11638928888656214026": [371, 617], "13382926553367784577": [371, 617], "cumsum": [374, 535, 617, 652, 715, 857, 1025], "interpolationmethod": [375, 617, 837, 1025], "regrid": [375, 617], "grid": [375, 617], "df_original_grid": [375, 617], "grid_point": [375, 617], "df_new_grid": [375, 617], "conflat": [376, 617], "finit": [378, 545, 565, 617, 842, 1025], "primit": [380, 617, 1006, 1025], "optional_memb": [380, 617, 845, 1025], "infinit": [381, 545, 617, 846, 1025], "_isnan": [382, 617], "b_isnan": [382, 617], "negat": [383, 617], "_is_not_nan": [384, 617], "b_is_not_nan": [384, 617], "_not_nul": [385, 617], "a_not_nul": [385, 617], "b_not_nul": [385, 617], "_isnul": [386, 617], "a_isnul": [386, 617], "b_isnul": [386, 617], "undo": [388, 444, 617], "duplicateerror": [388, 617, 628], "occurr": [388, 617, 834, 1025], "333333": [388, 617, 910, 931, 1025], "fisher": [389, 492, 617, 858, 948, 1025], "fourth": [389, 617, 858, 1025], "subtract": [389, 535, 617, 858, 1025], "distribut": [389, 492, 617, 858, 948, 1025], "elimin": [389, 617, 858, 1025], "bias": [389, 492, 617, 858, 948, 1025], "scipi": [389, 492, 617, 858, 948, 1025], "stat": [389, 492, 617, 858, 948, 1025], "153061": [389, 617], "sublist": [396, 397, 399, 401, 402, 405, 406, 407, 409, 410, 417, 420, 421, 422, 845, 864, 865, 867, 869, 870, 873, 874, 875, 877, 878, 885, 888, 889, 890, 1025], "membership": [399, 867], "listcol": 400, "number_of_two": 400, "blindli": [403, 871], "worth": [403, 871], "enough": [403, 492, 617, 871, 948, 1025], "concat_list": [403, 575, 871], "rank": [403, 565, 575, 617, 871, 1025], "exprnamespac": 404, "flat": [404, 469, 617, 872, 920, 1025], "taken": [417, 518, 539, 617, 885, 974], "null_on_oob": [421, 889], "cheaper": [421, 889], "n_field_strategi": [422, 890], "tostructstrategi": [422, 890], "first_non_nul": [422, 890], "max_width": [422, 890], "field_0": [422, 890], "field_1": [422, 890], "field_n": [422, 890], "pre": [422, 593, 596, 609], "n0": 422, "n1": 422, "logarithm": [425, 426, 427, 617, 893, 894, 895, 1025], "584963": [425, 617], "30103": [426, 617], "60206": [426, 617], "natur": [427, 617, 895, 1025], "plu": [427, 617, 895, 1025], "693147": [427, 617], "098612": [427, 617], "386294": [427, 617], "lowest": [428, 617], "9223372036854775808": [428, 617], "agg_list": [430, 617], "elementwis": [430, 471, 472, 473, 475, 479, 617, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1025], "third": [430, 606, 617], "parti": [430, 617], "book": [430, 617], "map_dict": [430, 617, 1025], "argmax": [430, 617], "_revers": [431, 470, 536, 617], "rsplit": [431, 617], "b_revers": [431, 470, 536, 617], "remap": [432, 617, 897, 1025], "lookup": [432, 617, 897, 1025], "country_code_dict": [432, 617], "ca": [432, 617], "canada": [432, 617], "de": [432, 617], "germani": [432, 617], "fr": [432, 617], "franc": [432, 617], "country_cod": [432, 617], "rest": [432, 617], "exprmetanamespac": [436, 439], "computeerror": [440, 513, 628, 969], "tree": 443, "keep_nam": [444, 617], "modulu": [447, 617], "xlog2": [449, 460, 617], "poison": [451, 452, 617, 906, 907, 1025], "nanmax": [451, 452, 617, 906, 907, 1025], "wherea": [451, 452, 572, 617, 651, 658, 715, 906, 907, 1025], "inequ": [453, 617], "ne": [454, 617, 1025], "more_expr": [457, 553, 554, 558, 561, 563, 564, 570, 588, 591, 603, 617], "mapping_strategi": [457, 617], "windowmappingstrategi": [457, 617], "group_to_row": [457, 617], "outcom": [457, 617], "group_dtyp": [457, 617], "warn": [457, 617], "flatten": [457, 617], "_max": [457, 617], "c_max": [457, 617], "_min": [457, 617], "c_min": [457, 617], "percent": [458, 617, 910, 1025], "090909": [458, 617], "extract_numb": [459, 617], "digit": [459, 481, 506, 532, 617, 932, 956, 962, 988, 1025, 1033], "scale_negative_even": [459, 617], "expon": [460, 617, 1025], "reverse_": [461, 617], "reverse_a": [461, 617], "reverse_fruit": [461, 617], "reverse_b": [461, 617], "reverse_car": [461, 617], "566371": [464, 617], "424778": [464, 617], "283185": [464, 617], "141593": [464, 617, 726, 1025], "rankmethod": [465, 617, 916, 1025], "ti": [465, 617, 916, 1025], "competit": [465, 617, 916, 1025], "highest": [465, 548, 565, 617, 715, 916, 1025], "immedi": [465, 557, 559, 572, 584, 585, 593, 596, 602, 606, 609, 617, 916, 1025], "64bit": [467, 617, 918, 1025], "safe": [467, 524, 526, 617, 918, 980, 982, 1006, 1025], "fruits_revers": [470, 536, 617], "cars_revers": [470, 536, 617], "window_s": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 597, 598, 617, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 1025], "rolling_min": [471, 617, 922, 1025], "rolling_max": [471, 617, 922, 1025], "rolling_mean": [471, 617, 922, 1025], "rolling_sum": [471, 617, 922, 1025], "multipli": [471, 472, 473, 475, 478, 479, 480, 617, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1025], "label": [471, 472, 473, 474, 475, 476, 478, 479, 480, 617, 668, 715, 764, 914, 922, 923, 924, 925, 926, 927, 929, 930, 931, 1025], "358899": [471, 617], "041452": [471, 617], "567764": [471, 617], "travers": [472, 473, 475, 479, 617, 923, 924, 926, 929, 930, 931, 1025], "vector": [472, 473, 475, 479, 617, 923, 924, 926, 929, 930, 931, 1025], "endpoint": [472, 473, 474, 475, 476, 478, 479, 480, 617], "5h": [472, 473, 474, 475, 476, 478, 479, 480, 617], "df_tempor": [472, 473, 475, 478, 479, 480, 617], "closur": [472, 473, 478, 479, 480, 617], "rolling_row_max": [472, 617], "2h": [472, 473, 475, 478, 479, 480, 617], "rolling_row_mean": [473, 617], "contribut": [474, 476, 478, 480, 617], "rolling_row_min": [475, 617], "625": [476, 617], "skew": [477, 617, 928, 1025], "381802": [477, 617, 928, 1025], "47033": [477, 617, 928, 1025], "38180177416060584": [477, 617, 928, 1025], "47033046033698594": [477, 617, 928, 1025], "433013": [478, 617, 683, 715], "rolling_row_std": [478, 617], "rolling_row_sum": [479, 617], "39": [479, 580, 617], "63": [479, 617], "69": [479, 617], "1875": [480, 617, 691, 715], "rolling_row_var": [480, 617], "fixed_se": [482, 488, 617], "increment": [482, 488, 617], "schedul": [482, 488, 617], "searchsortedsid": [483, 617, 934, 1025], "leftmost": [483, 617, 934, 1025], "rightmost": [483, 617, 934, 1025], "six": [483, 617], "extrema": [487, 617, 942, 1025], "112": [487, 617, 1033], "129": [487, 617], "i8": [487, 593, 596, 609, 617, 766, 921, 1012, 1025], "8589934592": [487, 617], "1073741824": [487, 617], "175201": [491, 617, 947, 1025], "about": [492, 499, 505, 506, 514, 617, 948, 955, 961, 962, 970, 1025, 1033], "unimod": [492, 617, 948, 1025], "skewtest": [492, 617, 948, 1025], "speak": [492, 617, 948, 1025], "g_1": [492, 617, 948, 1025], "m_3": [492, 617, 948, 1025], "m_2": [492, 617, 948, 1025], "m_i": [492, 617, 948, 1025], "sum_": [492, 617, 948, 1025], "texttt": [492, 617, 948, 1025], "k_3": [492, 617, 948, 1025], "k_2": [492, 617, 948, 1025], "sqrt": [492, 617, 948, 1025], "343622": [492, 617], "value1": [495, 617], "value2": [495, 617], "attain": [495, 617], "414214": [496, 617, 951, 1025], "sensit": [499, 506, 514, 955, 962, 970], "ilmsuxu": [499, 505, 506, 514, 955, 961, 962, 970], "default_match": 499, "insensitive_match": 499, "section": [499, 505, 506, 514, 955, 961, 962, 970], "crab": [499, 955], "dog": [499, 528, 531, 564, 955, 984, 987], "rab": [499, 955], "success": [500, 506, 956, 962], "overlap": [500, 506, 956, 962], "captur": [500, 505, 506, 956, 961, 962], "123": [500, 506, 515, 718, 956, 962, 971, 1003, 1025], "bla": [500, 506, 956, 962], "asd": [500, 506, 956, 962], "678": [500, 506, 956, 962], "910t": [500, 506, 956, 962], "count_digit": 500, "666f6f": [502, 958], "626172": [502, 958], "mango": [503, 522, 959, 978], "go": [503, 959], "has_suffix": 503, "group_index": [505, 961], "nthose": [505, 961], "nodd": [505, 961], "nthe": [505, 961], "url": [505, 961], "vote": [505, 961], "ballon_dor": [505, 961], "404": [505, 961], "ref": [505, 961], "candid": [505, 961], "messi": [505, 961], "ronaldo": [505, 961], "email": [506, 962], "real": [506, 962], "some_account": [506, 962], "somewher": [506, 962], "net": [506, 962], "jkl": [506, 962], "uvw": [506, 962], "co": [506, 617, 962, 1025], "uk": [506, 962], "address": 506, "xi": [506, 962], "insensit": [506, 514, 718, 955, 962, 970], "quantifi": [506, 962], "email_part": [506, 962], "extracted_nr": 506, "910": [506, 962], "json_path_match": [507, 963], "jsonpath": [507, 508, 963, 964], "json_path": [508, 964], "regardless": [508, 964], "json_val": [508, 964], "n_char": [509, 965], "caf\u00e9": [509, 512, 965, 968], "345": [509, 512, 965, 968], "\u6771\u4eac": [509, 512, 965, 968], "nchar": [509, 512], "fill_char": [510, 516, 966, 972], "justifi": [510, 516, 966, 972], "pad": [510, 516, 532, 966, 972, 988], "cow": [510, 516, 966, 972], "monkei": [510, 516, 966, 972], "hippopotamu": [510, 516, 966, 972], "strip": [511, 517, 967, 973], "tworld": [511, 967, 979], "wod": [511, 967], "rld": [511, 523, 967], "radix": [513, 969], "parseerror": [513, 969], "becom": [513, 969], "silent": [513, 969], "bin": [513, 552, 611, 617, 764, 834, 914, 969, 1019, 1025], "110": [513, 969], "010": [513, 969], "fa1e": [513, 969], "ff00": [513, 969], "cafe": [513, 969], "64030": [513, 969], "65280": [513, 969], "51966": [513, 969], "replace_al": [514, 970], "citi": 514, "philadelphia": 514, "season": 514, "spring": 514, "summer": 514, "autumn": 514, "winter": 514, "weather": [514, 970], "raini": [514, 970], "sunni": [514, 970], "cloudi": 514, "snowi": 514, "foggi": [514, 970], "123abc": [514, 970], "abc456": [514, 970], "abcabc": [515, 971], "123a123": [515, 971], "bc": [515, 603, 971], "trail": [517, 523, 973, 979], "oldw": 517, "he": 517, "subslic": [518, 974], "pear": [518, 974], "papaya": [518, 974], "dragonfruit": [518, 974], "s_slice": 518, "ear": [518, 974], "aya": [518, 974], "uit": [518, 974], "ya": [518, 974], "onf": [518, 974], "a_1": [520, 976, 1002, 1025], "d_4": [520, 976], "rename_field": [520, 521, 976, 977], "first_part": [520, 521, 976, 977], "second_part": [520, 521, 976, 977], "remaind": [521, 977], "app": [522, 978], "has_prefix": 522, "nworld": 523, "ow": 523, "hell": [523, 979], "polarstemporaltyp": [524, 980], "introduc": [524, 525, 526, 980, 981, 982], "penalti": [524, 525, 526, 980, 981, 982], "clean": [524, 525, 526, 980, 981, 982], "beforehand": [524, 525, 526, 980, 981, 982], "certainli": [524, 525, 526, 980, 981, 982], "deprec": [524, 526, 572, 596, 606, 980, 982], "3f": [524, 526, 980, 982], "00z": [524, 526, 980, 982], "sun": [524, 980], "jul": [524, 980], "34": [524, 980], "inference_length": [527, 983], "3420": [527, 983], "120134": [527, 983], "3212": [527, 983], "143": [527, 983, 1033], "lowercas": [528, 984], "variant": [528, 530, 531], "titlecas": [530, 986], "sing": [530, 986], "welcom": [530, 986], "THERE": [530, 986], "NO": [530, 718, 986], "There": [530, 986], "uppercas": [531, 987], "100000": 532, "0010": 532, "0001": 532, "00000": 532, "00001": 532, "cd": [533, 534], "struct_col": [533, 534], "www": 534, "xxx": 534, "yyi": 534, "zzz": 534, "obvious": 534, "structfieldnotfounderror": [534, 628], "761594": [542, 617, 999, 1025], "replic": [543, 617, 1008, 1025], "vals_phys": [543, 617], "floordiv": [545, 617], "ieee": [545, 617], "754": [545, 617], "mathemat": [545, 575, 617], "undefin": [545, 617], "On": [545, 617], "operand": [545, 617], "infin": [545, 617], "value_count": [547, 617, 1025], "9223372036854775807": [548, 617], "multithread": [549, 617], "binary_str": [552, 617], "zfill": [552, 617], "250": [552, 617, 924, 1025, 1033], "bin_x": [552, 617], "bin_i": [552, 617], "xor_xi": [552, 617], "bin_xor_xi": [552, 617], "00001010": [552, 617], "00000001": [552, 617], "00001011": [552, 617], "00001000": [552, 617], "00000010": [552, 617], "11111010": [552, 617], "00000011": [552, 617], "249": [552, 617], "11111001": [552, 617], "01000010": [552, 617], "00000100": [552, 617], "70": [552, 617], "01000110": [552, 617], "bitwis": [553, 554], "AND": [553, 718], "returns_scalar": 555, "product_a": 555, "49": 555, "Be": 557, "arg_tru": [559, 617, 1025], "more_nam": 562, "hamburg": 562, "lag": 563, "mimic": 563, "a_lag_": 563, "a_rol": 563, "swim": 564, "walk": 564, "full_sent": 564, "correlationmethod": 565, "propagate_nan": 565, "spearman": 565, "larger": [565, 679, 680, 715], "544705": 565, "covari": [567, 598], "acc": [568, 569, 578, 595], "include_init": 568, "accumul": [568, 569, 578, 595], "fn": [568, 569, 578, 595], "new_valu": [568, 569, 578, 595], "cumreduc": 568, "further": [572, 1007, 1025], "granular": 572, "finer": 572, "permut": 572, "februari": 572, "febrari": 572, "28th": 572, "march": 572, "31st": 572, "approach": 572, "prior": 572, "began": 572, "januari": 572, "1mo_satur": 572, "month_end": 572, "routin": 572, "1985": 572, "america": 572, "new_york": 572, "est": 572, "999999": [573, 605, 606], "tbl_width_char": 574, "120": 574, "add_week": 574, "add_dai": 574, "add_second": 574, "add_milli": 574, "add_hour": 574, "a_b_doubl": 575, "f_string": 579, "placehold": 579, "hello_": 579, "_world": 579, "foo_": 579, "_bar_": 579, "foo_a_bar_1": 579, "foo_b_bar_2": 579, "foo_c_bar_3": 579, "epoch": 580, "timestep": 580, "1666683077": 580, "1666683099": 580, "12345": [580, 750, 829, 932, 1025], "12346": 580, "agg_group": [581, 617], "polarsintegertyp": 585, "allow_object": 586, "valueexcept": 586, "test_func": 587, "polarsexprtyp": [593, 596, 609], "605551": 601, "605551275463989": 601, "my_struct": 602, "1h30m25": 606, "lf": [606, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 695, 696, 715, 1032, 1033], "6h": 606, "5h59m": 606, "1h29m": 606, "58": 606, "57": [606, 932, 1025, 1033], "chain": 608, "isn": 608, "thens": 608, "elif": 608, "pick": 608, "arr": [610, 1006, 1017, 1025], "sometim": 616, "and_": 617, "approx_uniqu": [617, 715], "arcco": [617, 1025], "arccosh": [617, 1025], "arcsin": [617, 1025], "arcsinh": [617, 1025], "arctan": [617, 1025], "arctanh": [617, 1025], "arg_max": [617, 1025], "arg_min": [617, 1025], "arg_sort": [617, 1025], "arg_uniqu": [617, 1025], "backward_fil": 617, "clip_max": [617, 1025], "clip_min": [617, 1025], "cosh": [617, 1025], "cumcount": 617, "cummax": [617, 1025], "cummin": [617, 1025], "cumulative_ev": [617, 1025], "cut": [617, 1025], "left_clos": [617, 764, 914, 1025], "prob": [617, 914, 1025], "entropi": [617, 1025], "eq_miss": [617, 1025], "ewm_mean": [617, 1025], "ewm_std": [617, 1025], "ewm_var": [617, 1025], "extend_const": [617, 1025], "from_json": [617, 670, 715], "ge": [617, 1025], "gt": [617, 1025], "implod": [617, 1025], "inspect": [617, 715], "is_between": [617, 1025], "is_finit": [617, 1025], "is_first": [617, 1025], "is_in": [617, 1025], "is_infinit": [617, 1025], "is_nan": [617, 1025], "is_not_nan": [617, 1025], "is_not_nul": [617, 1025], "kurtosi": [617, 1025], "le": [617, 1025], "log10": [617, 1025], "log1p": [617, 1025], "mod": 617, "mul": 617, "nan_max": [617, 1025], "nan_min": [617, 1025], "ne_miss": [617, 1025], "or_": 617, "pct_chang": [617, 1025], "pow": [617, 1025], "qcut": [617, 1025], "allow_dupl": [617, 914, 1025], "lo": 617, "reinterpret": [617, 1025], "repeat_bi": 617, "rolling_appli": [617, 1025], "rolling_median": [617, 1025], "rolling_quantil": [617, 1025], "rolling_skew": [617, 1025], "rolling_std": [617, 1025], "rolling_var": [617, 1025], "search_sort": [617, 1025], "shrink_dtyp": [617, 1025], "sin": [617, 1025], "sinh": [617, 1025], "sort_bi": 617, "tan": [617, 1025], "to_phys": [617, 1025], "unique_count": [617, 1025], "xor": 617, "expos": 628, "miscellan": 628, "arrowerror": 628, "columnnotfounderror": 628, "invalidoperationerror": 628, "nodataerror": 628, "polarspanicerror": 628, "schemaerror": 628, "schemafieldnotfounderror": 628, "shapeerror": 628, "parametr": 628, "build_info": 628, "get_index_typ": 628, "show_vers": 628, "threadpool_s": 628, "sqlcontext": [628, 1032], "hit": [632, 715], "node": [632, 652, 659, 663, 668, 671, 715], "huge": [635, 715], "saver": [635, 715], "purpos": [642, 715], "influenc": [642, 659, 715], "read_json": [647, 696, 715], "lazygroupbi": [648, 649, 650, 715], "other_lf": [654, 715], "validate_output_schema": [659, 715], "streamabl": [659, 663, 715], "past": [659, 715], "paramount": [659, 715], "elig": [659, 715], "invari": [659, 715], "upheld": [659, 715], "prune": [659, 715], "show_plot": [668, 715], "truncate_nod": [668, 715], "figsiz": [668, 678, 715], "gantt": [668, 715], "plot": [668, 678, 715], "groupby_partit": [668, 715], "470": [668, 715], "475": [668, 715], "1964": [668, 715], "swap": [671, 715], "output_path": [678, 715], "raw_output": [678, 715], "figur": [678, 715], "ram": [679, 680, 715], "slightli": [679, 680, 715], "my_larger_than_ram_fil": [679, 680, 715], "data_pagesize_limit": [680, 715], "290994": [683, 715], "118034": [683, 715], "extern": [694, 715], "lf_other": [694, 715], "afoo": [694, 715], "cfoo": [694, 715], "train_lf": [694, 715], "feature_0": [694, 715], "feature_1": [694, 715], "test_lf": [694, 715], "_train": [694, 715], "feature_0_train": [694, 715], "dataframescan": [696, 715], "output_schema": [696, 715], "opaqu": 699, "idiomat": 699, "my_column": 699, "lf5": 715, "lf6": 715, "explain": 715, "sink_ipc": 715, "sink_parquet": 715, "with_context": 715, "intuit": 718, "relat": 718, "broadcast": 718, "emploi": 718, "complement": 718, "plenti": 718, "cde": 718, "fgg": 718, "jjk": 718, "lmn": 718, "opp": 718, "qqr": 718, "by_dtyp": 718, "as_expr": 718, "dispatch": 718, "2024": 718, "1_234_500": 718, "5_000_555": 718, "1234500": 718, "5000555": 718, "2010": 718, "4_500_000": 718, "4500000": 718, "3265500": 718, "by_nam": 718, "zap": 718, "tstamp_tokyo": 718, "987654": 718, "123465": 718, "tstamp_utc": 718, "2025": 718, "666000": 718, "tstamp": 718, "600000": 718, "123000": 718, "666": 718, "is_selector": 718, "obj": 718, "selector_column_nam": 718, "colz": [718, 1033], "include_categor": 718, "set_ord": 718, "2345": 718, "3456": 718, "new_aliased_sr": [721, 1025], "append_chunk": [724, 1025], "super": [724, 1025], "292432": [727, 1025], "549306": [731, 1025], "catnamespac": 748, "56789": [750, 829, 932, 1025], "901234": [750, 829, 932, 1025], "1232e": [757, 1025], "break_point_label": [764, 914, 1025], "break_point": [764, 834, 914, 1025], "category_label": [764, 914, 1025], "breakpoint": [764, 914, 1025], "quick": [765, 1025, 1033], "series_num": [765, 1025], "581139": [765, 1025], "series_str": [765, 1025], "datetimenamespac": 770, "ser": [771, 775, 776, 779, 808], "kathmandu": [775, 776, 808], "0545": [775, 776, 808], "500m": [788, 790, 798, 805], "500000": 788, "2m": 793, "500000000": 798, "date_minus_1y_2mon": 800, "165": [804, 811], "series_equ": [804, 811, 1025], "timestamp_u": 809, "978307200000000000": 809, "978393600000000000": 809, "978480000000000000": 809, "005": [817, 1025], "06293300616044681": [817, 1025], "65": [817, 1025], "8568409950394724": [817, 1025], "4000000": [818, 1025], "814697265625": [818, 1025], "bitmask": [831, 1025], "swiftli": [831, 1025], "10734580197236529959": [832, 1025], "3022416320763508302": [832, 1025], "13756996518000038261": [832, 1025], "bin_count": [834, 1025], "a_count": [834, 1025], "fall": [838, 1025], "listnamespac": 861, "field_2": 890, "n00": 890, "n01": 890, "n02": 890, "2147483648": [896, 1025], "iso3166": [897, 1025], "tur": [897, 986, 1025], "jpn": [897, 1025], "nld": [897, 1025], "country_lookup": [897, 1025], "japan": [897, 1025], "t\u00fcrkiy": [897, 1025], "netherland": [897, 1025], "unrecognis": [897, 1025], "unspecifi": [897, 1025], "country_nam": [897, 1025], "166667": [910, 1025], "142857": [910, 1025], "peak": [911, 912, 1025], "nanstd": [922, 1025], "858612": [922, 1025], "200": [923, 924, 926, 1025], "150": [924, 1025], "350": [924, 1025], "450": [924, 1025], "dev": [929, 1025], "527525": [929, 1025], "frequent": [936, 937, 1025], "mutat": [937, 1025], "2246e": [946, 998, 1025], "stringnamespac": 953, "orld": 973, "6331e16": [998, 1025], "lib": [1001, 1025], "int64arrai": [1001, 1025], "a_2": [1002, 1025], "a_3": [1002, 1025], "s_from_str_repr": [1004, 1025], "zero_copy_onli": [1006, 1025], "writabl": [1006, 1025], "complet": [1006, 1025], "presenc": [1006, 1025], "immut": [1006, 1025], "127": [1012, 1025], "seriesview": [1015, 1025], "arraylik": 1025, "dtype_if_empti": 1025, "position": 1025, "scenario": 1025, "chunk_length": 1025, "get_chunk": 1025, "has_valid": 1025, "hist": 1025, "is_boolean": 1025, "is_float": 1025, "is_integ": 1025, "is_numer": [1025, 1033], "is_sort": 1025, "is_tempor": 1025, "is_utf8": 1025, "new_from_index": 1025, "peak_max": 1025, "peak_min": 1025, "power": 1025, "set_at_idx": 1025, "two_a": 1032, "__enter__": 1032, "__exit__": 1032, "exc_typ": 1032, "baseexcept": 1032, "exc_val": 1032, "exc_tb": 1032, "tracebacktyp": 1032, "guid": 1033, "easi": 1033, "approxim": 1033, "own": 1033, "machin": 1033, "xdist": 1033, "significantli": 1033, "hardwar": 1033, "setup": 1033, "numeric_dtyp": 1033, "null_probabililti": 1033, "test_numer": 1033, "col0": 1033, "col4": 1033, "29096": 1033, "485": 1033, "2147483647": 1033, "8257e14": 1033, "7508": 1033, "37338": 1033, "7264": 1033, "321": 1033, "16996": 1033, "121": 1033, "361": 1033, "63204": 1033, "1443e235": 1033, "conform": 1033, "ascii_lett": 1033, "id_char": 1033, "alphabet": 1033, "price": 1033, "min_valu": 1033, "max_valu": 1033, "test_price_calcul": 1033, "a101": 1033, "8nin": 1033, "qhoo": 1033, "714": 1033, "544": 1033, "i0e0": 1033, "0000": 1033, "test_miscellan": 1033, "235": 1033, "87": 1033, "186": 1033, "174": 1033, "179": 1033, "213": 1033, "221": 1033, "86": 1033, "255": 1033}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1032, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [553, 4, 1, "", "all"], [554, 4, 1, "", "any"], [555, 4, 1, "", "apply"], [556, 4, 1, "", "approx_unique"], [557, 4, 1, "", "arange"], [558, 4, 1, "", "arg_sort_by"], [559, 4, 1, "", "arg_where"], [560, 4, 1, "", "avg"], [70, 4, 1, "", "build_info"], [561, 4, 1, "", "coalesce"], [562, 4, 1, "", "col"], [71, 4, 1, "", "collect_all"], [72, 4, 1, "", "concat"], [563, 4, 1, "", "concat_list"], [564, 4, 1, "", "concat_str"], [565, 4, 1, "", "corr"], [566, 4, 1, "", "count"], [567, 4, 1, "", "cov"], [568, 4, 1, "", "cumfold"], [569, 4, 1, "", "cumreduce"], [570, 4, 1, "", "cumsum"], [571, 4, 1, "", "date"], [572, 4, 1, "", "date_range"], [573, 4, 1, "", "datetime"], [574, 4, 1, "", "duration"], [575, 4, 1, "", "element"], [73, 4, 1, "", "enable_string_cache"], [576, 4, 1, "", "exclude"], [577, 4, 1, "", "first"], [578, 4, 1, "", "fold"], [579, 4, 1, "", "format"], [88, 4, 1, "", "from_arrow"], [89, 4, 1, "", "from_dataframe"], [90, 4, 1, "", "from_dict"], [91, 4, 1, "", "from_dicts"], [580, 4, 1, "", "from_epoch"], [92, 4, 1, "", "from_numpy"], [93, 4, 1, "", "from_pandas"], [94, 4, 1, "", "from_records"], [95, 4, 1, "", "from_repr"], [96, 4, 1, "", "get_index_type"], [581, 4, 1, "", "groups"], [582, 4, 1, "", "head"], [583, 4, 1, "", "implode"], [584, 4, 1, "", "int_range"], [585, 4, 1, "", "int_ranges"], [586, 4, 1, "", "lit"], [587, 4, 1, "", "map"], [588, 4, 1, "", "max"], [589, 4, 1, "", "mean"], [590, 4, 1, "", "median"], [591, 4, 1, "", "min"], [592, 4, 1, "", "n_unique"], [593, 4, 1, "", "ones"], [594, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [595, 4, 1, "", "reduce"], [596, 4, 1, "", "repeat"], [597, 4, 1, "", "rolling_corr"], [598, 4, 1, "", "rolling_cov"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [599, 4, 1, "", "select"], [718, 6, 0, "-", "selectors"], [116, 4, 1, "", "show_versions"], [600, 4, 1, "", "sql_expr"], [601, 4, 1, "", "std"], [602, 4, 1, "", "struct"], [603, 4, 1, "", "sum"], [604, 4, 1, "", "tail"], [126, 4, 1, "", "threadpool_size"], [605, 4, 1, "", "time"], [606, 4, 1, "", "time_range"], [127, 4, 1, "", "using_string_cache"], [607, 4, 1, "", "var"], [608, 4, 1, "", "when"], [609, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[130, 1, 1, "", "__dataframe__"], [131, 1, 1, "", "apply"], [132, 1, 1, "", "bottom_k"], [133, 1, 1, "", "clear"], [134, 1, 1, "", "clone"], [135, 2, 1, "", "columns"], [136, 1, 1, "", "corr"], [137, 1, 1, "", "describe"], [138, 1, 1, "", "drop"], [139, 1, 1, "", "drop_in_place"], [140, 1, 1, "", "drop_nulls"], [141, 2, 1, "", "dtypes"], [142, 1, 1, "", "estimated_size"], [143, 1, 1, "", "explode"], [144, 1, 1, "", "extend"], [145, 1, 1, "", "fill_nan"], [146, 1, 1, "", "fill_null"], [147, 1, 1, "", "filter"], [148, 1, 1, "", "find_idx_by_name"], [149, 1, 1, "", "fold"], [150, 1, 1, "", "frame_equal"], [151, 1, 1, "", "get_column"], [152, 1, 1, "", "get_columns"], [153, 1, 1, "", "glimpse"], [154, 1, 1, "", "groupby"], [155, 1, 1, "", "groupby_dynamic"], [156, 1, 1, "", "groupby_rolling"], [157, 1, 1, "", "hash_rows"], [158, 1, 1, "", "head"], [159, 2, 1, "", "height"], [160, 1, 1, "", "hstack"], [161, 1, 1, "", "insert_at_idx"], [162, 1, 1, "", "interpolate"], [163, 1, 1, "", "is_duplicated"], [164, 1, 1, "", "is_empty"], [165, 1, 1, "", "is_unique"], [166, 1, 1, "", "item"], [167, 1, 1, "", "iter_rows"], [168, 1, 1, "", "iter_slices"], [169, 1, 1, "", "join"], [170, 1, 1, "", "join_asof"], [171, 1, 1, "", "lazy"], [172, 1, 1, "", "limit"], [173, 1, 1, "", "max"], [174, 1, 1, "", "mean"], [175, 1, 1, "", "median"], [176, 1, 1, "", "melt"], [177, 1, 1, "", "merge_sorted"], [178, 1, 1, "", "min"], [179, 1, 1, "", "n_chunks"], [180, 1, 1, "", "n_unique"], [181, 1, 1, "", "null_count"], [182, 1, 1, "", "partition_by"], [183, 1, 1, "", "pipe"], [184, 1, 1, "", "pivot"], [185, 1, 1, "", "product"], [186, 1, 1, "", "quantile"], [187, 1, 1, "", "rechunk"], [188, 1, 1, "", "rename"], [189, 1, 1, "", "replace"], [190, 1, 1, "", "replace_at_idx"], [191, 1, 1, "", "reverse"], [192, 1, 1, "", "row"], [193, 1, 1, "", "rows"], [194, 1, 1, "", "sample"], [195, 2, 1, "", "schema"], [196, 1, 1, "", "select"], [197, 1, 1, "", "set_sorted"], [198, 2, 1, "", "shape"], [199, 1, 1, "", "shift"], [200, 1, 1, "", "shift_and_fill"], [201, 1, 1, "", "shrink_to_fit"], [202, 1, 1, "", "slice"], [203, 1, 1, "", "sort"], [204, 1, 1, "", "std"], [205, 1, 1, "", "sum"], [206, 1, 1, "", "tail"], [207, 1, 1, "", "take_every"], [208, 1, 1, "", "to_arrow"], [209, 1, 1, "", "to_dict"], [210, 1, 1, "", "to_dicts"], [211, 1, 1, "", "to_dummies"], [212, 1, 1, "", "to_init_repr"], [213, 1, 1, "", "to_numpy"], [214, 1, 1, "", "to_pandas"], [215, 1, 1, "", "to_series"], [216, 1, 1, "", "to_struct"], [217, 1, 1, "", "top_k"], [218, 1, 1, "", "transpose"], [219, 1, 1, "", "unique"], [220, 1, 1, "", "unnest"], [221, 1, 1, "", "unstack"], [222, 1, 1, "", "update"], [223, 1, 1, "", "upsample"], [224, 1, 1, "", "var"], [225, 1, 1, "", "vstack"], [226, 2, 1, "", "width"], [227, 1, 1, "", "with_columns"], [228, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[256, 1, 1, "", "abs"], [257, 1, 1, "", "add"], [258, 1, 1, "", "agg_groups"], [259, 1, 1, "", "alias"], [260, 1, 1, "", "all"], [261, 1, 1, "", "and_"], [262, 1, 1, "", "any"], [263, 1, 1, "", "append"], [264, 1, 1, "", "apply"], [265, 1, 1, "", "approx_unique"], [266, 1, 1, "", "arccos"], [267, 1, 1, "", "arccosh"], [268, 1, 1, "", "arcsin"], [269, 1, 1, "", "arcsinh"], [270, 1, 1, "", "arctan"], [271, 1, 1, "", "arctanh"], [272, 1, 1, "", "arg_max"], [273, 1, 1, "", "arg_min"], [274, 1, 1, "", "arg_sort"], [275, 1, 1, "", "arg_true"], [276, 1, 1, "", "arg_unique"], [281, 1, 1, "", "backward_fill"], [287, 1, 1, "", "bottom_k"], [288, 1, 1, "", "cache"], [289, 1, 1, "", "cast"], [291, 1, 1, "", "ceil"], [292, 1, 1, "", "clip"], [293, 1, 1, "", "clip_max"], [294, 1, 1, "", "clip_min"], [295, 1, 1, "", "cos"], [296, 1, 1, "", "cosh"], [297, 1, 1, "", "count"], [298, 1, 1, "", "cumcount"], [299, 1, 1, "", "cummax"], [300, 1, 1, "", "cummin"], [301, 1, 1, "", "cumprod"], [302, 1, 1, "", "cumsum"], [303, 1, 1, "", "cumulative_eval"], [304, 1, 1, "", "degrees"], [305, 1, 1, "", "diff"], [306, 1, 1, "", "dot"], [307, 1, 1, "", "drop_nans"], [308, 1, 1, "", "drop_nulls"], [350, 1, 1, "", "entropy"], [351, 1, 1, "", "eq"], [352, 1, 1, "", "eq_missing"], [353, 1, 1, "", "ewm_mean"], [354, 1, 1, "", "ewm_std"], [355, 1, 1, "", "ewm_var"], [356, 1, 1, "", "exclude"], [357, 1, 1, "", "exp"], [358, 1, 1, "", "explode"], [359, 1, 1, "", "extend_constant"], [360, 1, 1, "", "fill_nan"], [361, 1, 1, "", "fill_null"], [362, 1, 1, "", "filter"], [363, 1, 1, "", "first"], [364, 1, 1, "", "flatten"], [365, 1, 1, "", "floor"], [366, 1, 1, "", "floordiv"], [367, 1, 1, "", "forward_fill"], [368, 1, 1, "", "from_json"], [369, 1, 1, "", "ge"], [370, 1, 1, "", "gt"], [371, 1, 1, "", "hash"], [372, 1, 1, "", "head"], [373, 1, 1, "", "implode"], [374, 1, 1, "", "inspect"], [375, 1, 1, "", "interpolate"], [376, 1, 1, "", "is_between"], [377, 1, 1, "", "is_duplicated"], [378, 1, 1, "", "is_finite"], [379, 1, 1, "", "is_first"], [380, 1, 1, "", "is_in"], [381, 1, 1, "", "is_infinite"], [382, 1, 1, "", "is_nan"], [383, 1, 1, "", "is_not"], [384, 1, 1, "", "is_not_nan"], [385, 1, 1, "", "is_not_null"], [386, 1, 1, "", "is_null"], [387, 1, 1, "", "is_unique"], [388, 1, 1, "", "keep_name"], [389, 1, 1, "", "kurtosis"], [390, 1, 1, "", "last"], [391, 1, 1, "", "le"], [392, 1, 1, "", "len"], [393, 1, 1, "", "limit"], [425, 1, 1, "", "log"], [426, 1, 1, "", "log10"], [427, 1, 1, "", "log1p"], [428, 1, 1, "", "lower_bound"], [429, 1, 1, "", "lt"], [430, 1, 1, "", "map"], [431, 1, 1, "", "map_alias"], [432, 1, 1, "", "map_dict"], [433, 1, 1, "", "max"], [434, 1, 1, "", "mean"], [435, 1, 1, "", "median"], [446, 1, 1, "", "min"], [447, 1, 1, "", "mod"], [448, 1, 1, "", "mode"], [449, 1, 1, "", "mul"], [450, 1, 1, "", "n_unique"], [451, 1, 1, "", "nan_max"], [452, 1, 1, "", "nan_min"], [453, 1, 1, "", "ne"], [454, 1, 1, "", "ne_missing"], [455, 1, 1, "", "null_count"], [456, 1, 1, "", "or_"], [457, 1, 1, "", "over"], [458, 1, 1, "", "pct_change"], [459, 1, 1, "", "pipe"], [460, 1, 1, "", "pow"], [461, 1, 1, "", "prefix"], [462, 1, 1, "", "product"], [463, 1, 1, "", "quantile"], [464, 1, 1, "", "radians"], [465, 1, 1, "", "rank"], [466, 1, 1, "", "rechunk"], [467, 1, 1, "", "reinterpret"], [468, 1, 1, "", "repeat_by"], [469, 1, 1, "", "reshape"], [470, 1, 1, "", "reverse"], [471, 1, 1, "", "rolling_apply"], [472, 1, 1, "", "rolling_max"], [473, 1, 1, "", "rolling_mean"], [474, 1, 1, "", "rolling_median"], [475, 1, 1, "", "rolling_min"], [476, 1, 1, "", "rolling_quantile"], [477, 1, 1, "", "rolling_skew"], [478, 1, 1, "", "rolling_std"], [479, 1, 1, "", "rolling_sum"], [480, 1, 1, "", "rolling_var"], [481, 1, 1, "", "round"], [482, 1, 1, "", "sample"], [483, 1, 1, "", "search_sorted"], [484, 1, 1, "", "set_sorted"], [485, 1, 1, "", "shift"], [486, 1, 1, "", "shift_and_fill"], [487, 1, 1, "", "shrink_dtype"], [488, 1, 1, "", "shuffle"], [489, 1, 1, "", "sign"], [490, 1, 1, "", "sin"], [491, 1, 1, "", "sinh"], [492, 1, 1, "", "skew"], [493, 1, 1, "", "slice"], [494, 1, 1, "", "sort"], [495, 1, 1, "", "sort_by"], [496, 1, 1, "", "sqrt"], [497, 1, 1, "", "std"], [535, 1, 1, "", "sub"], [536, 1, 1, "", "suffix"], [537, 1, 1, "", "sum"], [538, 1, 1, "", "tail"], [539, 1, 1, "", "take"], [540, 1, 1, "", "take_every"], [541, 1, 1, "", "tan"], [542, 1, 1, "", "tanh"], [543, 1, 1, "", "to_physical"], [544, 1, 1, "", "top_k"], [545, 1, 1, "", "truediv"], [546, 1, 1, "", "unique"], [547, 1, 1, "", "unique_counts"], [548, 1, 1, "", "upper_bound"], [549, 1, 1, "", "value_counts"], [550, 1, 1, "", "var"], [551, 1, 1, "", "where"], [552, 1, 1, "", "xor"]], "polars.Expr.arr": [[277, 1, 1, "", "max"], [278, 1, 1, "", "min"], [279, 1, 1, "", "sum"], [280, 1, 1, "", "unique"]], "polars.Expr.bin": [[282, 1, 1, "", "contains"], [283, 1, 1, "", "decode"], [284, 1, 1, "", "encode"], [285, 1, 1, "", "ends_with"], [286, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[290, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[309, 1, 1, "", "base_utc_offset"], [310, 1, 1, "", "cast_time_unit"], [311, 1, 1, "", "combine"], [312, 1, 1, "", "convert_time_zone"], [313, 1, 1, "", "date"], [314, 1, 1, "", "datetime"], [315, 1, 1, "", "day"], [316, 1, 1, "", "days"], [317, 1, 1, "", "dst_offset"], [318, 1, 1, "", "epoch"], [319, 1, 1, "", "hour"], [320, 1, 1, "", "hours"], [321, 1, 1, "", "is_leap_year"], [322, 1, 1, "", "iso_year"], [323, 1, 1, "", "microsecond"], [324, 1, 1, "", "microseconds"], [325, 1, 1, "", "millisecond"], [326, 1, 1, "", "milliseconds"], [327, 1, 1, "", "minute"], [328, 1, 1, "", "minutes"], [329, 1, 1, "", "month"], [330, 1, 1, "", "month_end"], [331, 1, 1, "", "month_start"], [332, 1, 1, "", "nanosecond"], [333, 1, 1, "", "nanoseconds"], [334, 1, 1, "", "offset_by"], [335, 1, 1, "", "ordinal_day"], [336, 1, 1, "", "quarter"], [337, 1, 1, "", "replace_time_zone"], [338, 1, 1, "", "round"], [339, 1, 1, "", "second"], [340, 1, 1, "", "seconds"], [341, 1, 1, "", "strftime"], [342, 1, 1, "", "time"], [343, 1, 1, "", "timestamp"], [344, 1, 1, "", "to_string"], [345, 1, 1, "", "truncate"], [346, 1, 1, "", "week"], [347, 1, 1, "", "weekday"], [348, 1, 1, "", "with_time_unit"], [349, 1, 1, "", "year"]], "polars.Expr.list": [[394, 1, 1, "", "all"], [395, 1, 1, "", "any"], [396, 1, 1, "", "arg_max"], [397, 1, 1, "", "arg_min"], [398, 1, 1, "", "concat"], [399, 1, 1, "", "contains"], [400, 1, 1, "", "count_match"], [401, 1, 1, "", "diff"], [402, 1, 1, "", "difference"], [403, 1, 1, "", "eval"], [404, 1, 1, "", "explode"], [405, 1, 1, "", "first"], [406, 1, 1, "", "get"], [407, 1, 1, "", "head"], [408, 1, 1, "", "intersection"], [409, 1, 1, "", "join"], [410, 1, 1, "", "last"], [411, 1, 1, "", "lengths"], [412, 1, 1, "", "max"], [413, 1, 1, "", "mean"], [414, 1, 1, "", "min"], [415, 1, 1, "", "reverse"], [416, 1, 1, "", "shift"], [417, 1, 1, "", "slice"], [418, 1, 1, "", "sort"], [419, 1, 1, "", "sum"], [420, 1, 1, "", "tail"], [421, 1, 1, "", "take"], [422, 1, 1, "", "to_struct"], [423, 1, 1, "", "union"], [424, 1, 1, "", "unique"]], "polars.Expr.meta": [[436, 1, 1, "", "eq"], [437, 1, 1, "", "has_multiple_outputs"], [438, 1, 1, "", "is_regex_projection"], [439, 1, 1, "", "ne"], [440, 1, 1, "", "output_name"], [441, 1, 1, "", "pop"], [442, 1, 1, "", "root_names"], [443, 1, 1, "", "tree_format"], [444, 1, 1, "", "undo_aliases"], [445, 1, 1, "", "write_json"]], "polars.Expr.str": [[498, 1, 1, "", "concat"], [499, 1, 1, "", "contains"], [500, 1, 1, "", "count_match"], [501, 1, 1, "", "decode"], [502, 1, 1, "", "encode"], [503, 1, 1, "", "ends_with"], [504, 1, 1, "", "explode"], [505, 1, 1, "", "extract"], [506, 1, 1, "", "extract_all"], [507, 1, 1, "", "json_extract"], [508, 1, 1, "", "json_path_match"], [509, 1, 1, "", "lengths"], [510, 1, 1, "", "ljust"], [511, 1, 1, "", "lstrip"], [512, 1, 1, "", "n_chars"], [513, 1, 1, "", "parse_int"], [514, 1, 1, "", "replace"], [515, 1, 1, "", "replace_all"], [516, 1, 1, "", "rjust"], [517, 1, 1, "", "rstrip"], [518, 1, 1, "", "slice"], [519, 1, 1, "", "split"], [520, 1, 1, "", "split_exact"], [521, 1, 1, "", "splitn"], [522, 1, 1, "", "starts_with"], [523, 1, 1, "", "strip"], [524, 1, 1, "", "strptime"], [525, 1, 1, "", "to_date"], [526, 1, 1, "", "to_datetime"], [527, 1, 1, "", "to_decimal"], [528, 1, 1, "", "to_lowercase"], [529, 1, 1, "", "to_time"], [530, 1, 1, "", "to_titlecase"], [531, 1, 1, "", "to_uppercase"], [532, 1, 1, "", "zfill"]], "polars.Expr.struct": [[533, 1, 1, "", "field"], [534, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[631, 1, 1, "", "bottom_k"], [632, 1, 1, "", "cache"], [633, 1, 1, "", "clear"], [634, 1, 1, "", "clone"], [635, 1, 1, "", "collect"], [636, 2, 1, "", "columns"], [637, 1, 1, "", "drop"], [638, 1, 1, "", "drop_nulls"], [639, 2, 1, "", "dtypes"], [640, 1, 1, "", "explain"], [641, 1, 1, "", "explode"], [642, 1, 1, "", "fetch"], [643, 1, 1, "", "fill_nan"], [644, 1, 1, "", "fill_null"], [645, 1, 1, "", "filter"], [646, 1, 1, "", "first"], [647, 1, 1, "", "from_json"], [648, 1, 1, "", "groupby"], [649, 1, 1, "", "groupby_dynamic"], [650, 1, 1, "", "groupby_rolling"], [651, 1, 1, "", "head"], [652, 1, 1, "", "inspect"], [653, 1, 1, "", "interpolate"], [654, 1, 1, "", "join"], [655, 1, 1, "", "join_asof"], [656, 1, 1, "", "last"], [657, 1, 1, "", "lazy"], [658, 1, 1, "", "limit"], [659, 1, 1, "", "map"], [660, 1, 1, "", "max"], [661, 1, 1, "", "mean"], [662, 1, 1, "", "median"], [663, 1, 1, "", "melt"], [664, 1, 1, "", "merge_sorted"], [665, 1, 1, "", "min"], [666, 1, 1, "", "null_count"], [667, 1, 1, "", "pipe"], [668, 1, 1, "", "profile"], [669, 1, 1, "", "quantile"], [670, 1, 1, "", "read_json"], [671, 1, 1, "", "rename"], [672, 1, 1, "", "reverse"], [673, 2, 1, "", "schema"], [674, 1, 1, "", "select"], [675, 1, 1, "", "set_sorted"], [676, 1, 1, "", "shift"], [677, 1, 1, "", "shift_and_fill"], [678, 1, 1, "", "show_graph"], [679, 1, 1, "", "sink_ipc"], [680, 1, 1, "", "sink_parquet"], [681, 1, 1, "", "slice"], [682, 1, 1, "", "sort"], [683, 1, 1, "", "std"], [684, 1, 1, "", "sum"], [685, 1, 1, "", "tail"], [686, 1, 1, "", "take_every"], [687, 1, 1, "", "top_k"], [688, 1, 1, "", "unique"], [689, 1, 1, "", "unnest"], [690, 1, 1, "", "update"], [691, 1, 1, "", "var"], [692, 2, 1, "", "width"], [693, 1, 1, "", "with_columns"], [694, 1, 1, "", "with_context"], [695, 1, 1, "", "with_row_count"], [696, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1032, 1, 1, "", "__enter__"], [1032, 1, 1, "", "__exit__"], [1032, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[720, 1, 1, "", "abs"], [721, 1, 1, "", "alias"], [722, 1, 1, "", "all"], [723, 1, 1, "", "any"], [724, 1, 1, "", "append"], [725, 1, 1, "", "apply"], [726, 1, 1, "", "arccos"], [727, 1, 1, "", "arccosh"], [728, 1, 1, "", "arcsin"], [729, 1, 1, "", "arcsinh"], [730, 1, 1, "", "arctan"], [731, 1, 1, "", "arctanh"], [732, 1, 1, "", "arg_max"], [733, 1, 1, "", "arg_min"], [734, 1, 1, "", "arg_sort"], [735, 1, 1, "", "arg_true"], [736, 1, 1, "", "arg_unique"], [746, 1, 1, "", "bottom_k"], [747, 1, 1, "", "cast"], [748, 3, 1, "", "cat"], [750, 1, 1, "", "ceil"], [751, 1, 1, "", "chunk_lengths"], [752, 1, 1, "", "clear"], [753, 1, 1, "", "clip"], [754, 1, 1, "", "clip_max"], [755, 1, 1, "", "clip_min"], [756, 1, 1, "", "clone"], [757, 1, 1, "", "cos"], [758, 1, 1, "", "cosh"], [759, 1, 1, "", "cummax"], [760, 1, 1, "", "cummin"], [761, 1, 1, "", "cumprod"], [762, 1, 1, "", "cumsum"], [763, 1, 1, "", "cumulative_eval"], [764, 1, 1, "", "cut"], [765, 1, 1, "", "describe"], [766, 1, 1, "", "diff"], [767, 1, 1, "", "dot"], [768, 1, 1, "", "drop_nans"], [769, 1, 1, "", "drop_nulls"], [770, 3, 1, "", "dt"], [816, 3, 1, "", "dtype"], [817, 1, 1, "", "entropy"], [818, 1, 1, "", "estimated_size"], [819, 1, 1, "", "ewm_mean"], [820, 1, 1, "", "ewm_std"], [821, 1, 1, "", "ewm_var"], [822, 1, 1, "", "exp"], [823, 1, 1, "", "explode"], [824, 1, 1, "", "extend_constant"], [825, 1, 1, "", "fill_nan"], [826, 1, 1, "", "fill_null"], [827, 1, 1, "", "filter"], [828, 3, 1, "", "flags"], [829, 1, 1, "", "floor"], [830, 1, 1, "", "get_chunks"], [831, 1, 1, "", "has_validity"], [832, 1, 1, "", "hash"], [833, 1, 1, "", "head"], [834, 1, 1, "", "hist"], [835, 1, 1, "", "implode"], [836, 3, 1, "", "inner_dtype"], [837, 1, 1, "", "interpolate"], [838, 1, 1, "", "is_between"], [839, 1, 1, "", "is_boolean"], [840, 1, 1, "", "is_duplicated"], [841, 1, 1, "", "is_empty"], [842, 1, 1, "", "is_finite"], [843, 1, 1, "", "is_first"], [844, 1, 1, "", "is_float"], [845, 1, 1, "", "is_in"], [846, 1, 1, "", "is_infinite"], [847, 1, 1, "", "is_integer"], [848, 1, 1, "", "is_nan"], [849, 1, 1, "", "is_not_nan"], [850, 1, 1, "", "is_not_null"], [851, 1, 1, "", "is_null"], [852, 1, 1, "", "is_numeric"], [853, 1, 1, "", "is_sorted"], [854, 1, 1, "", "is_temporal"], [855, 1, 1, "", "is_unique"], [856, 1, 1, "", "is_utf8"], [857, 1, 1, "", "item"], [858, 1, 1, "", "kurtosis"], [859, 1, 1, "", "len"], [860, 1, 1, "", "limit"], [861, 3, 1, "", "list"], [893, 1, 1, "", "log"], [894, 1, 1, "", "log10"], [895, 1, 1, "", "log1p"], [896, 1, 1, "", "lower_bound"], [897, 1, 1, "", "map_dict"], [898, 1, 1, "", "max"], [899, 1, 1, "", "mean"], [900, 1, 1, "", "median"], [901, 1, 1, "", "min"], [902, 1, 1, "", "mode"], [903, 1, 1, "", "n_chunks"], [904, 1, 1, "", "n_unique"], [905, 3, 1, "", "name"], [906, 1, 1, "", "nan_max"], [907, 1, 1, "", "nan_min"], [908, 1, 1, "", "new_from_index"], [909, 1, 1, "", "null_count"], [910, 1, 1, "", "pct_change"], [911, 1, 1, "", "peak_max"], [912, 1, 1, "", "peak_min"], [913, 1, 1, "", "product"], [914, 1, 1, "", "qcut"], [915, 1, 1, "", "quantile"], [916, 1, 1, "", "rank"], [917, 1, 1, "", "rechunk"], [918, 1, 1, "", "reinterpret"], [919, 1, 1, "", "rename"], [920, 1, 1, "", "reshape"], [921, 1, 1, "", "reverse"], [922, 1, 1, "", "rolling_apply"], [923, 1, 1, "", "rolling_max"], [924, 1, 1, "", "rolling_mean"], [925, 1, 1, "", "rolling_median"], [926, 1, 1, "", "rolling_min"], [927, 1, 1, "", "rolling_quantile"], [928, 1, 1, "", "rolling_skew"], [929, 1, 1, "", "rolling_std"], [930, 1, 1, "", "rolling_sum"], [931, 1, 1, "", "rolling_var"], [932, 1, 1, "", "round"], [933, 1, 1, "", "sample"], [934, 1, 1, "", "search_sorted"], [935, 1, 1, "", "series_equal"], [936, 1, 1, "", "set"], [937, 1, 1, "", "set_at_idx"], [938, 1, 1, "", "set_sorted"], [939, 3, 1, "", "shape"], [940, 1, 1, "", "shift"], [941, 1, 1, "", "shift_and_fill"], [942, 1, 1, "", "shrink_dtype"], [943, 1, 1, "", "shrink_to_fit"], [944, 1, 1, "", "shuffle"], [945, 1, 1, "", "sign"], [946, 1, 1, "", "sin"], [947, 1, 1, "", "sinh"], [948, 1, 1, "", "skew"], [949, 1, 1, "", "slice"], [950, 1, 1, "", "sort"], [951, 1, 1, "", "sqrt"], [952, 1, 1, "", "std"], [953, 3, 1, "", "str"], [994, 1, 1, "", "sum"], [995, 1, 1, "", "tail"], [996, 1, 1, "", "take"], [997, 1, 1, "", "take_every"], [998, 1, 1, "", "tan"], [999, 1, 1, "", "tanh"], [1000, 3, 1, "", "time_unit"], [1001, 1, 1, "", "to_arrow"], [1002, 1, 1, "", "to_dummies"], [1003, 1, 1, "", "to_frame"], [1004, 1, 1, "", "to_init_repr"], [1005, 1, 1, "", "to_list"], [1006, 1, 1, "", "to_numpy"], [1007, 1, 1, "", "to_pandas"], [1008, 1, 1, "", "to_physical"], [1009, 1, 1, "", "top_k"], [1010, 1, 1, "", "unique"], [1011, 1, 1, "", "unique_counts"], [1012, 1, 1, "", "upper_bound"], [1013, 1, 1, "", "value_counts"], [1014, 1, 1, "", "var"], [1015, 1, 1, "", "view"], [1016, 1, 1, "", "zip_with"]], "polars.Series.arr": [[737, 1, 1, "", "max"], [738, 1, 1, "", "min"], [739, 1, 1, "", "sum"], [740, 1, 1, "", "unique"]], "polars.Series.bin": [[741, 1, 1, "", "contains"], [742, 1, 1, "", "decode"], [743, 1, 1, "", "encode"], [744, 1, 1, "", "ends_with"], [745, 1, 1, "", "starts_with"]], "polars.Series.cat": [[749, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[771, 1, 1, "", "base_utc_offset"], [772, 1, 1, "", "cast_time_unit"], [773, 1, 1, "", "combine"], [774, 1, 1, "", "convert_time_zone"], [775, 1, 1, "", "date"], [776, 1, 1, "", "datetime"], [777, 1, 1, "", "day"], [778, 1, 1, "", "days"], [779, 1, 1, "", "dst_offset"], [780, 1, 1, "", "epoch"], [781, 1, 1, "", "hour"], [782, 1, 1, "", "hours"], [783, 1, 1, "", "is_leap_year"], [784, 1, 1, "", "iso_year"], [785, 1, 1, "", "max"], [786, 1, 1, "", "mean"], [787, 1, 1, "", "median"], [788, 1, 1, "", "microsecond"], [789, 1, 1, "", "microseconds"], [790, 1, 1, "", "millisecond"], [791, 1, 1, "", "milliseconds"], [792, 1, 1, "", "min"], [793, 1, 1, "", "minute"], [794, 1, 1, "", "minutes"], [795, 1, 1, "", "month"], [796, 1, 1, "", "month_end"], [797, 1, 1, "", "month_start"], [798, 1, 1, "", "nanosecond"], [799, 1, 1, "", "nanoseconds"], [800, 1, 1, "", "offset_by"], [801, 1, 1, "", "ordinal_day"], [802, 1, 1, "", "quarter"], [803, 1, 1, "", "replace_time_zone"], [804, 1, 1, "", "round"], [805, 1, 1, "", "second"], [806, 1, 1, "", "seconds"], [807, 1, 1, "", "strftime"], [808, 1, 1, "", "time"], [809, 1, 1, "", "timestamp"], [810, 1, 1, "", "to_string"], [811, 1, 1, "", "truncate"], [812, 1, 1, "", "week"], [813, 1, 1, "", "weekday"], [814, 1, 1, "", "with_time_unit"], [815, 1, 1, "", "year"]], "polars.Series.list": [[862, 1, 1, "", "all"], [863, 1, 1, "", "any"], [864, 1, 1, "", "arg_max"], [865, 1, 1, "", "arg_min"], [866, 1, 1, "", "concat"], [867, 1, 1, "", "contains"], [868, 1, 1, "", "count_match"], [869, 1, 1, "", "diff"], [870, 1, 1, "", "difference"], [871, 1, 1, "", "eval"], [872, 1, 1, "", "explode"], [873, 1, 1, "", "first"], [874, 1, 1, "", "get"], [875, 1, 1, "", "head"], [876, 1, 1, "", "intersection"], [877, 1, 1, "", "join"], [878, 1, 1, "", "last"], [879, 1, 1, "", "lengths"], [880, 1, 1, "", "max"], [881, 1, 1, "", "mean"], [882, 1, 1, "", "min"], [883, 1, 1, "", "reverse"], [884, 1, 1, "", "shift"], [885, 1, 1, "", "slice"], [886, 1, 1, "", "sort"], [887, 1, 1, "", "sum"], [888, 1, 1, "", "tail"], [889, 1, 1, "", "take"], [890, 1, 1, "", "to_struct"], [891, 1, 1, "", "union"], [892, 1, 1, "", "unique"]], "polars.Series.str": [[954, 1, 1, "", "concat"], [955, 1, 1, "", "contains"], [956, 1, 1, "", "count_match"], [957, 1, 1, "", "decode"], [958, 1, 1, "", "encode"], [959, 1, 1, "", "ends_with"], [960, 1, 1, "", "explode"], [961, 1, 1, "", "extract"], [962, 1, 1, "", "extract_all"], [963, 1, 1, "", "json_extract"], [964, 1, 1, "", "json_path_match"], [965, 1, 1, "", "lengths"], [966, 1, 1, "", "ljust"], [967, 1, 1, "", "lstrip"], [968, 1, 1, "", "n_chars"], [969, 1, 1, "", "parse_int"], [970, 1, 1, "", "replace"], [971, 1, 1, "", "replace_all"], [972, 1, 1, "", "rjust"], [973, 1, 1, "", "rstrip"], [974, 1, 1, "", "slice"], [975, 1, 1, "", "split"], [976, 1, 1, "", "split_exact"], [977, 1, 1, "", "splitn"], [978, 1, 1, "", "starts_with"], [979, 1, 1, "", "strip"], [980, 1, 1, "", "strptime"], [981, 1, 1, "", "to_date"], [982, 1, 1, "", "to_datetime"], [983, 1, 1, "", "to_decimal"], [984, 1, 1, "", "to_lowercase"], [985, 1, 1, "", "to_time"], [986, 1, 1, "", "to_titlecase"], [987, 1, 1, "", "to_uppercase"], [988, 1, 1, "", "zfill"]], "polars.Series.struct": [[989, 1, 1, "", "field"], [990, 3, 1, "", "fields"], [991, 1, 1, "", "rename_fields"], [992, 3, 1, "", "schema"], [993, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[229, 1, 1, "", "__iter__"], [230, 1, 1, "", "agg"], [231, 1, 1, "", "all"], [232, 1, 1, "", "apply"], [233, 1, 1, "", "count"], [234, 1, 1, "", "first"], [235, 1, 1, "", "head"], [236, 1, 1, "", "last"], [237, 1, 1, "", "max"], [238, 1, 1, "", "mean"], [239, 1, 1, "", "median"], [240, 1, 1, "", "min"], [241, 1, 1, "", "n_unique"], [242, 1, 1, "", "quantile"], [243, 1, 1, "", "sum"], [244, 1, 1, "", "tail"]], "polars.exceptions": [[74, 5, 1, "", "ArrowError"], [75, 5, 1, "", "ColumnNotFoundError"], [76, 5, 1, "", "ComputeError"], [77, 5, 1, "", "DuplicateError"], [78, 5, 1, "", "InvalidOperationError"], [79, 5, 1, "", "NoDataError"], [80, 5, 1, "", "NoRowsReturnedError"], [81, 5, 1, "", "PolarsPanicError"], [82, 5, 1, "", "RowsError"], [83, 5, 1, "", "SchemaError"], [84, 5, 1, "", "SchemaFieldNotFoundError"], [85, 5, 1, "", "ShapeError"], [86, 5, 1, "", "StructFieldNotFoundError"], [87, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[97, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[697, 1, 1, "", "agg"], [698, 1, 1, "", "all"], [699, 1, 1, "", "apply"], [700, 1, 1, "", "count"], [701, 1, 1, "", "first"], [702, 1, 1, "", "head"], [703, 1, 1, "", "last"], [704, 1, 1, "", "max"], [705, 1, 1, "", "mean"], [706, 1, 1, "", "median"], [707, 1, 1, "", "min"], [708, 1, 1, "", "n_unique"], [709, 1, 1, "", "quantile"], [710, 1, 1, "", "sum"], [711, 1, 1, "", "tail"]], "polars.selectors": [[718, 4, 1, "", "all"], [718, 4, 1, "", "by_dtype"], [718, 4, 1, "", "by_name"], [718, 4, 1, "", "contains"], [718, 4, 1, "", "datetime"], [718, 4, 1, "", "ends_with"], [718, 4, 1, "", "first"], [718, 4, 1, "", "float"], [718, 4, 1, "", "integer"], [718, 4, 1, "", "is_selector"], [718, 4, 1, "", "last"], [718, 4, 1, "", "matches"], [718, 4, 1, "", "numeric"], [718, 4, 1, "", "selector_column_names"], [718, 4, 1, "", "starts_with"], [718, 4, 1, "", "string"], [718, 4, 1, "", "temporal"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "create_list_strategy"], [122, 4, 1, "", "dataframes"], [123, 4, 1, "", "load_profile"], [124, 4, 1, "", "series"], [125, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 144], "api": [1, 66, 67, 68, 69, 628], "provid": 1, "new": 1, "function": [1, 128, 616, 627, 718], "avail": 1, "registr": 1, "exampl": [1, 718, 1033], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1033], "arrai": [2, 610, 1017], "binari": [3, 611, 622, 1019], "boolean": [4, 612, 1020], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 128], "activate_decim": 6, "load": [7, 128], "restore_default": 8, "save": [9, 128], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 128], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 250], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 445, 696], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 313, 571, 775], "datetim": [38, 314, 573, 776], "decim": 39, "durat": [40, 574], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 618, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 1026], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 627], "struct": [57, 533, 534, 602, 624, 989, 990, 991, 992, 993, 1030], "time": [58, 342, 605, 808], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "build_info": 70, "collect_al": 71, "concat": [72, 398, 498, 866, 954], "enable_string_cach": 73, "except": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 254], "arrowerror": 74, "columnnotfounderror": 75, "computeerror": 76, "duplicateerror": 77, "invalidoperationerror": 78, "nodataerror": 79, "norowsreturnederror": 80, "polarspanicerror": 81, "rowserror": 82, "schemaerror": 83, "schemafieldnotfounderror": 84, "shapeerror": 85, "structfieldnotfounderror": 86, "toomanyrowsreturnederror": 87, "from_arrow": 88, "from_datafram": 89, "from_dict": [90, 91], "from_numpi": 92, "from_panda": 93, "from_record": 94, "from_repr": 95, "get_index_typ": 96, "io": 97, "csv": [97, 629], "batched_read": 97, "batchedcsvread": [97, 629], "next_batch": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 670], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 123, 124, 125, 1033], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122, 123, 124, 125, 1033], "column": [119, 120, 135, 614, 636], "create_list_strategi": 121, "load_profil": 123, "seri": [124, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1025], "set_profil": 125, "threadpool_s": 126, "using_string_cach": 127, "option": 128, "current": 128, "us": 128, "context": 128, "manag": 128, "decor": 128, "aggreg": [129, 255, 630, 719], "__dataframe__": 130, "appli": [131, 232, 264, 555, 699, 725], "bottom_k": [132, 287, 631, 746], "clear": [133, 633, 752], "clone": [134, 634, 756], "corr": [136, 565], "describ": [137, 765], "drop": [138, 637], "drop_in_plac": 139, "drop_nul": [140, 308, 638, 769], "dtype": [141, 639, 816], "estimated_s": [142, 818], "explod": [143, 358, 404, 504, 641, 823, 872, 960], "fill_nan": [145, 360, 643, 825], "fill_nul": [146, 361, 644, 826], "filter": [147, 362, 645, 827], "find_idx_by_nam": 148, "fold": [149, 578], "frame_equ": 150, "get_column": [151, 152], "glimps": 153, "groupbi": [154, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 249, 648, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 714], "groupby_dynam": [155, 649], "groupby_rol": [156, 650], "hash_row": 157, "head": [158, 235, 372, 407, 582, 651, 702, 833, 875], "height": 159, "hstack": 160, "insert_at_idx": 161, "interpol": [162, 375, 653, 837], "is_dupl": [163, 377, 840], "is_empti": [164, 841], "is_uniqu": [165, 387, 855], "item": [166, 857], "iter_row": 167, "iter_slic": 168, "join": [169, 409, 654, 877], "join_asof": [170, 655], "lazi": [171, 657], "limit": [172, 393, 658, 860], "max": [173, 237, 277, 412, 433, 588, 660, 704, 737, 785, 880, 898], "mean": [174, 238, 413, 434, 589, 661, 705, 786, 881, 899], "median": [175, 239, 435, 590, 662, 706, 787, 900], "melt": [176, 663], "merge_sort": [177, 664], "min": [178, 240, 278, 414, 446, 591, 665, 707, 738, 792, 882, 901], "n_chunk": [179, 903], "n_uniqu": [180, 241, 450, 592, 708, 904], "null_count": [181, 455, 666, 909], "partition_bi": 182, "pipe": [183, 459, 667], "pivot": 184, "product": [185, 462, 913], "quantil": [186, 242, 463, 594, 669, 709, 915], "rechunk": [187, 466, 917], "renam": [188, 671, 919], "replac": [189, 514, 970], "replace_at_idx": 190, "revers": [191, 415, 470, 672, 883, 921], "row": [192, 193], "sampl": [194, 482, 933], "schema": [195, 673, 992], "select": [196, 252, 599, 621, 674, 717, 1028], "set_sort": [197, 484, 675, 938], "shape": [198, 939], "shift": [199, 416, 485, 676, 884, 940], "shift_and_fil": [200, 486, 677, 941], "shrink_to_fit": [201, 943], "slice": [202, 417, 493, 518, 681, 885, 949, 974], "sort": [203, 418, 494, 682, 886, 950], "std": [204, 497, 601, 683, 952], "sum": [205, 243, 279, 419, 537, 603, 684, 710, 739, 887, 994], "tail": [206, 244, 420, 538, 604, 685, 711, 888, 995], "take_everi": [207, 540, 686, 997], "to_arrow": [208, 1001], "to_dict": [209, 210], "to_dummi": [211, 1002], "to_init_repr": [212, 1004], "to_numpi": [213, 1006], "to_panda": [214, 1007], "to_seri": 215, "to_struct": [216, 422, 890], "top_k": [217, 544, 687, 1009], "transpos": 218, "uniqu": [219, 280, 424, 546, 688, 740, 892, 1010], "unnest": [220, 689, 993], "unstack": 221, "updat": [222, 690], "upsampl": 223, "var": [224, 550, 607, 691, 1014], "vstack": 225, "width": [226, 692], "with_column": [227, 693], "with_row_count": [228, 695], "__iter__": 229, "agg": [230, 697], "all": [231, 260, 394, 553, 698, 722, 862], "count": [233, 297, 566, 700], "first": [234, 363, 405, 577, 646, 701, 873], "last": [236, 390, 410, 656, 703, 878], "attribut": [245, 712, 1018], "comput": [246, 615, 1022], "descript": [247, 713, 1023], "export": [248, 1024], "miscellan": [251, 620, 627, 716, 1027], "manipul": [252, 621, 717, 1028], "data": 253, "type": 253, "numer": [253, 622], "tempor": [253, 625, 1031], "nest": 253, "other": 253, "expr": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "ab": [256, 720], "add": 257, "agg_group": 258, "alia": [259, 721], "and_": 261, "ani": [262, 395, 554, 723, 863], "append": [263, 724], "approx_uniqu": [265, 556], "arcco": [266, 726], "arccosh": [267, 727], "arcsin": [268, 728], "arcsinh": [269, 729], "arctan": [270, 730], "arctanh": [271, 731], "arg_max": [272, 396, 732, 864], "arg_min": [273, 397, 733, 865], "arg_sort": [274, 734], "arg_tru": [275, 735], "arg_uniqu": [276, 736], "arr": [277, 278, 279, 280, 737, 738, 739, 740], "backward_fil": 281, "bin": [282, 283, 284, 285, 286, 741, 742, 743, 744, 745], "contain": [282, 399, 499, 741, 867, 955], "decod": [283, 501, 742, 957], "encod": [284, 502, 743, 958], "ends_with": [285, 503, 744, 959], "starts_with": [286, 522, 745, 978], "cach": [288, 632], "cast": [289, 747], "cat": [290, 748, 749], "set_ord": [290, 749], "ceil": [291, 750], "clip": [292, 753], "clip_max": [293, 754], "clip_min": [294, 755], "co": [295, 757], "cosh": [296, 758], "cumcount": 298, "cummax": [299, 759], "cummin": [300, 760], "cumprod": [301, 761], "cumsum": [302, 570, 762], "cumulative_ev": [303, 763], "degre": 304, "diff": [305, 401, 766, 869], "dot": [306, 767], "drop_nan": [307, 768], "dt": [309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815], "base_utc_offset": [309, 771], "cast_time_unit": [310, 772], "combin": [311, 773], "convert_time_zon": [312, 774], "dai": [315, 316, 777, 778], "dst_offset": [317, 779], "epoch": [318, 780], "hour": [319, 320, 781, 782], "is_leap_year": [321, 783], "iso_year": [322, 784], "microsecond": [323, 324, 788, 789], "millisecond": [325, 326, 790, 791], "minut": [327, 328, 793, 794], "month": [329, 795], "month_end": [330, 796], "month_start": [331, 797], "nanosecond": [332, 333, 798, 799], "offset_bi": [334, 800], "ordinal_dai": [335, 801], "quarter": [336, 802], "replace_time_zon": [337, 803], "round": [338, 481, 804, 932], "second": [339, 340, 805, 806], "strftime": [341, 807], "timestamp": [343, 809], "to_str": [344, 810], "truncat": [345, 811], "week": [346, 812], "weekdai": [347, 813], "with_time_unit": [348, 814], "year": [349, 815], "entropi": [350, 817], "eq": [351, 436], "eq_miss": 352, "ewm_mean": [353, 819], "ewm_std": [354, 820], "ewm_var": [355, 821], "exclud": [356, 576], "exp": [357, 822], "extend_const": [359, 824], "flatten": 364, "floor": [365, 829], "floordiv": 366, "forward_fil": 367, "from_json": [368, 647], "ge": 369, "gt": 370, "hash": [371, 832], "implod": [373, 583, 835], "inspect": [374, 652], "is_between": [376, 838], "is_finit": [378, 842], "is_first": [379, 843], "is_in": [380, 845], "is_infinit": [381, 846], "is_nan": [382, 848], "is_not": 383, "is_not_nan": [384, 849], "is_not_nul": [385, 850], "is_nul": [386, 851], "keep_nam": 388, "kurtosi": [389, 858], "le": 391, "len": [392, 859], "count_match": [400, 500, 868, 956], "differ": [402, 870], "eval": [403, 871], "get": [406, 874], "intersect": [408, 876], "length": [411, 509, 879, 965], "take": [421, 539, 889, 996], "union": [423, 891], "log": [425, 893], "log10": [426, 894], "log1p": [427, 895], "lower_bound": [428, 896], "lt": 429, "map": [430, 587, 659], "map_alia": 431, "map_dict": [432, 897], "meta": [436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 619], "has_multiple_output": 437, "is_regex_project": 438, "ne": [439, 453], "output_nam": 440, "pop": 441, "root_nam": 442, "tree_format": 443, "undo_alias": 444, "mod": 447, "mode": [448, 902], "mul": 449, "nan_max": [451, 906], "nan_min": [452, 907], "ne_miss": 454, "or_": 456, "over": 457, "pct_chang": [458, 910], "pow": 460, "prefix": 461, "radian": 464, "rank": [465, 916], "reinterpret": [467, 918], "repeat_bi": 468, "reshap": [469, 920], "rolling_appli": [471, 922], "rolling_max": [472, 923], "rolling_mean": [473, 924], "rolling_median": [474, 925], "rolling_min": [475, 926], "rolling_quantil": [476, 927], "rolling_skew": [477, 928], "rolling_std": [478, 929], "rolling_sum": [479, 930], "rolling_var": [480, 931], "search_sort": [483, 934], "shrink_dtyp": [487, 942], "shuffl": [488, 944], "sign": [489, 945], "sin": [490, 946], "sinh": [491, 947], "skew": [492, 948], "sort_bi": 495, "sqrt": [496, 951], "str": [498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988], "extract": [505, 961], "extract_al": [506, 962], "json_extract": [507, 963], "json_path_match": [508, 964], "ljust": [510, 966], "lstrip": [511, 967], "n_char": [512, 968], "parse_int": [513, 969], "replace_al": [515, 971], "rjust": [516, 972], "rstrip": [517, 973], "split": [519, 975], "split_exact": [520, 976], "splitn": [521, 977], "strip": [523, 979], "strptime": [524, 980], "to_dat": [525, 981], "to_datetim": [526, 982], "to_decim": [527, 983], "to_lowercas": [528, 984], "to_tim": [529, 985], "to_titlecas": [530, 986], "to_uppercas": [531, 987], "zfill": [532, 988], "field": [533, 989, 990], "rename_field": [534, 991], "sub": 535, "suffix": 536, "tan": [541, 998], "tanh": [542, 999], "to_phys": [543, 1008], "truediv": 545, "unique_count": [547, 1011], "upper_bound": [548, 1012], "value_count": [549, 1013], "where": 551, "xor": 552, "arang": 557, "arg_sort_bi": 558, "arg_wher": 559, "avg": 560, "coalesc": 561, "col": 562, "concat_list": 563, "concat_str": 564, "cov": 567, "cumfold": 568, "cumreduc": 569, "date_rang": 572, "element": 575, "format": 579, "from_epoch": 580, "group": 581, "int_rang": [584, 585], "lit": 586, "ones": 593, "reduc": 595, "repeat": 596, "rolling_corr": 597, "rolling_cov": 598, "sql_expr": 600, "time_rang": 606, "when": 608, "zero": 609, "categori": [613, 1021], "name": [614, 905], "express": 617, "oper": [622, 718], "conjunct": 622, "comparison": 622, "string": [623, 1029], "window": 626, "convers": 627, "parallel": 627, "refer": 628, "input": 629, "output": 629, "feather": 629, "ipc": 629, "parquet": 629, "databas": 629, "json": 629, "avro": 629, "excel": 629, "delta": 629, "lake": 629, "dataset": 629, "lazyfram": [631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 715], "collect": 635, "explain": 640, "fetch": 642, "profil": [668, 1033], "show_graph": 678, "sink_ipc": 679, "sink_parquet": 680, "with_context": 694, "lazygroupbi": [697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711], "read": 716, "write": 716, "logic": 716, "plan": 716, "selector": 718, "import": 718, "set": [718, 936], "chunk_length": 751, "cut": 764, "flag": 828, "get_chunk": 830, "has_valid": 831, "hist": 834, "inner_dtyp": 836, "is_boolean": 839, "is_float": 844, "is_integ": 847, "is_numer": 852, "is_sort": 853, "is_tempor": 854, "is_utf8": 856, "new_from_index": 908, "peak_max": 911, "peak_min": 912, "qcut": 914, "series_equ": 935, "set_at_idx": 937, "time_unit": 1000, "to_fram": 1003, "to_list": 1005, "view": 1015, "zip_with": 1016, "sql": 1032, "method": 1032, "assert": 1033, "primit": 1033, "strategi": 1033, "helper": 1033, "util": 1034}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.exceptions.ArrowError": [[74, "polars-exceptions-arrowerror"]], "polars.exceptions.SchemaError": [[83, "polars-exceptions-schemaerror"]], "polars.from_pandas": [[93, "polars-from-pandas"]], "polars.get_index_type": [[96, "polars-get-index-type"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.DataFrame.columns": [[135, "polars-dataframe-columns"]], "Aggregation": [[129, "aggregation"], [719, "aggregation"], [630, "aggregation"], [255, "aggregation"]], "polars.collect_all": [[71, "polars-collect-all"]], "polars.read_json": [[106, "polars-read-json"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.DataFrame.clone": [[134, "polars-dataframe-clone"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.testing.parametric.load_profile": [[123, "polars-testing-parametric-load-profile"]], "polars.threadpool_size": [[126, "polars-threadpool-size"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.enable_string_cache": [[73, "polars-enable-string-cache"]], "polars.exceptions.PolarsPanicError": [[81, "polars-exceptions-polarspanicerror"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.DataFrame.bottom_k": [[132, "polars-dataframe-bottom-k"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.DataFrame.describe": [[137, "polars-dataframe-describe"]], "polars.from_dicts": [[91, "polars-from-dicts"]], "polars.testing.parametric.create_list_strategy": [[121, "polars-testing-parametric-create-list-strategy"]], "polars.read_database": [[101, "polars-read-database"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.from_dataframe": [[89, "polars-from-dataframe"]], "polars.DataFrame.drop_nulls": [[140, "polars-dataframe-drop-nulls"]], "polars.exceptions.TooManyRowsReturnedError": [[87, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.RowsError": [[82, "polars-exceptions-rowserror"]], "polars.from_numpy": [[92, "polars-from-numpy"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.DataFrame.corr": [[136, "polars-dataframe-corr"]], "polars.DataFrame.drop_in_place": [[139, "polars-dataframe-drop-in-place"]], "polars.DataFrame.dtypes": [[141, "polars-dataframe-dtypes"]], "polars.concat": [[72, "polars-concat"]], "polars.DataFrame.drop": [[138, "polars-dataframe-drop"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[97, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.ShapeError": [[85, "polars-exceptions-shapeerror"]], "polars.from_dict": [[90, "polars-from-dict"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.from_records": [[94, "polars-from-records"]], "Config": [[128, "config"]], "Config options": [[128, "config-options"]], "Config load, save, and current state": [[128, "config-load-save-and-current-state"]], "Use as a context manager": [[128, "use-as-a-context-manager"]], "Use as a function decorator": [[128, "use-as-a-function-decorator"]], "polars.exceptions.ColumnNotFoundError": [[75, "polars-exceptions-columnnotfounderror"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.exceptions.NoRowsReturnedError": [[80, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.SchemaFieldNotFoundError": [[84, "polars-exceptions-schemafieldnotfounderror"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.exceptions.StructFieldNotFoundError": [[86, "polars-exceptions-structfieldnotfounderror"]], "polars.using_string_cache": [[127, "polars-using-string-cache"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.DataFrame.__dataframe__": [[130, "polars-dataframe-dataframe"]], "polars.testing.parametric.dataframes": [[122, "polars-testing-parametric-dataframes"]], "polars.from_arrow": [[88, "polars-from-arrow"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.from_repr": [[95, "polars-from-repr"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.testing.parametric.series": [[124, "polars-testing-parametric-series"]], "polars.exceptions.DuplicateError": [[77, "polars-exceptions-duplicateerror"]], "polars.exceptions.NoDataError": [[79, "polars-exceptions-nodataerror"]], "polars.DataFrame.apply": [[131, "polars-dataframe-apply"]], "polars.exceptions.ComputeError": [[76, "polars-exceptions-computeerror"]], "polars.testing.parametric.set_profile": [[125, "polars-testing-parametric-set-profile"]], "polars.DataFrame.clear": [[133, "polars-dataframe-clear"]], "polars.exceptions.InvalidOperationError": [[78, "polars-exceptions-invalidoperationerror"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Int16": [[43, "polars-int16"]], "polars.Binary": [[3, "polars-binary"]], "polars.Int64": [[45, "polars-int64"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Duration": [[40, "polars-duration"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Date": [[37, "polars-date"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Float32": [[41, "polars-float32"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Int32": [[44, "polars-int32"]], "polars.List": [[47, "polars-list"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.Struct": [[57, "polars-struct"]], "polars.build_info": [[70, "polars-build-info"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Float64": [[42, "polars-float64"]], "polars.Object": [[49, "polars-object"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.Null": [[48, "polars-null"]], "polars.Utf8": [[64, "polars-utf8"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1033, "examples"], [718, "examples"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Time": [[58, "polars-time"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.Array": [[2, "polars-array"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Int8": [[46, "polars-int8"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Series.rolling_max": [[923, "polars-series-rolling-max"]], "polars.Series.str.replace": [[970, "polars-series-str-replace"]], "polars.Series.search_sorted": [[934, "polars-series-search-sorted"]], "polars.Series.str.count_match": [[956, "polars-series-str-count-match"]], "polars.Series.series_equal": [[935, "polars-series-series-equal"]], "polars.Series.str.replace_all": [[971, "polars-series-str-replace-all"]], "polars.Series.rolling_std": [[929, "polars-series-rolling-std"]], "polars.Series.str.to_date": [[981, "polars-series-str-to-date"]], "polars.Series.shuffle": [[944, "polars-series-shuffle"]], "polars.Series.struct.field": [[989, "polars-series-struct-field"]], "polars.Series.str.encode": [[958, "polars-series-str-encode"]], "polars.Series.str.contains": [[955, "polars-series-str-contains"]], "polars.Series.rolling_quantile": [[927, "polars-series-rolling-quantile"]], "polars.Series.round": [[932, "polars-series-round"]], "polars.Series.sin": [[946, "polars-series-sin"]], "polars.Series.str.explode": [[960, "polars-series-str-explode"]], "polars.Series.str.extract": [[961, "polars-series-str-extract"]], "polars.Series.str.to_uppercase": [[987, "polars-series-str-to-uppercase"]], "polars.Series.str.splitn": [[977, "polars-series-str-splitn"]], "polars.Series.struct.unnest": [[993, "polars-series-struct-unnest"]], "polars.Series.shift": [[940, "polars-series-shift"]], "polars.Series.rolling_min": [[926, "polars-series-rolling-min"]], "polars.Series.str.lstrip": [[967, "polars-series-str-lstrip"]], "polars.Series.str.to_datetime": [[982, "polars-series-str-to-datetime"]], "polars.Series.str.strip": [[979, "polars-series-str-strip"]], "polars.Series.struct.schema": [[992, "polars-series-struct-schema"]], "polars.Series.str.decode": [[957, "polars-series-str-decode"]], "polars.Series.str.extract_all": [[962, "polars-series-str-extract-all"]], "polars.Series.str.to_time": [[985, "polars-series-str-to-time"]], "polars.Series.rolling_var": [[931, "polars-series-rolling-var"]], "polars.Series.str.json_path_match": [[964, "polars-series-str-json-path-match"]], "polars.Series.set_at_idx": [[937, "polars-series-set-at-idx"]], "polars.Series.str.to_decimal": [[983, "polars-series-str-to-decimal"]], "polars.Series.rolling_sum": [[930, "polars-series-rolling-sum"]], "polars.Series.str.concat": [[954, "polars-series-str-concat"]], "polars.Series.str.split_exact": [[976, "polars-series-str-split-exact"]], "polars.Series.slice": [[949, "polars-series-slice"]], "polars.Series.shift_and_fill": [[941, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[942, "polars-series-shrink-dtype"]], "polars.Series.str.to_titlecase": [[986, "polars-series-str-to-titlecase"]], "polars.Series.struct.rename_fields": [[991, "polars-series-struct-rename-fields"]], "polars.Series.rolling_median": [[925, "polars-series-rolling-median"]], "polars.Series.rolling_skew": [[928, "polars-series-rolling-skew"]], "polars.Series.str.lengths": [[965, "polars-series-str-lengths"]], "polars.Series.struct.fields": [[990, "polars-series-struct-fields"]], "polars.Series.str.rjust": [[972, "polars-series-str-rjust"]], "polars.Series.shape": [[939, "polars-series-shape"]], "polars.Series.sample": [[933, "polars-series-sample"]], "polars.Series.str.rstrip": [[973, "polars-series-str-rstrip"]], "polars.Series.shrink_to_fit": [[943, "polars-series-shrink-to-fit"]], "polars.Series.std": [[952, "polars-series-std"]], "polars.Series.set_sorted": [[938, "polars-series-set-sorted"]], "polars.Series.sinh": [[947, "polars-series-sinh"]], "polars.Series.str.starts_with": [[978, "polars-series-str-starts-with"]], "polars.Series.set": [[936, "polars-series-set"]], "polars.Series.sort": [[950, "polars-series-sort"]], "polars.Series.str.parse_int": [[969, "polars-series-str-parse-int"]], "polars.Series.skew": [[948, "polars-series-skew"]], "polars.Series.str.slice": [[974, "polars-series-str-slice"]], "polars.Series.str.split": [[975, "polars-series-str-split"]], "polars.Series.str.n_chars": [[968, "polars-series-str-n-chars"]], "polars.Series.str.ends_with": [[959, "polars-series-str-ends-with"]], "polars.Series.sqrt": [[951, "polars-series-sqrt"]], "polars.Series.str.json_extract": [[963, "polars-series-str-json-extract"]], "polars.Series.str.strptime": [[980, "polars-series-str-strptime"]], "polars.Series.str": [[953, "polars-series-str"]], "polars.Series.rolling_mean": [[924, "polars-series-rolling-mean"]], "polars.Series.str.ljust": [[966, "polars-series-str-ljust"]], "polars.Series.sign": [[945, "polars-series-sign"]], "polars.Series.str.zfill": [[988, "polars-series-str-zfill"]], "polars.Series.str.to_lowercase": [[984, "polars-series-str-to-lowercase"]], "polars.Series.new_from_index": [[908, "polars-series-new-from-index"]], "polars.Series.list.all": [[862, "polars-series-list-all"]], "polars.Series.list.join": [[877, "polars-series-list-join"]], "polars.Series.item": [[857, "polars-series-item"]], "polars.Series.qcut": [[914, "polars-series-qcut"]], "polars.Series.map_dict": [[897, "polars-series-map-dict"]], "polars.Series.list": [[861, "polars-series-list"]], "polars.Series.list.arg_max": [[864, "polars-series-list-arg-max"]], "polars.Series.list.sort": [[886, "polars-series-list-sort"]], "polars.Series.list.any": [[863, "polars-series-list-any"]], "polars.Series.list.min": [[882, "polars-series-list-min"]], "polars.Series.list.head": [[875, "polars-series-list-head"]], "polars.Series.is_utf8": [[856, "polars-series-is-utf8"]], "polars.Series.n_chunks": [[903, "polars-series-n-chunks"]], "polars.Series.mode": [[902, "polars-series-mode"]], "polars.Series.peak_max": [[911, "polars-series-peak-max"]], "polars.Series.min": [[901, "polars-series-min"]], "polars.Series.list.concat": [[866, "polars-series-list-concat"]], "polars.Series.nan_max": [[906, "polars-series-nan-max"]], "polars.Series.lower_bound": [[896, "polars-series-lower-bound"]], "polars.Series.quantile": [[915, "polars-series-quantile"]], "polars.Series.is_numeric": [[852, "polars-series-is-numeric"]], "polars.Series.log1p": [[895, "polars-series-log1p"]], "polars.Series.rechunk": [[917, "polars-series-rechunk"]], "polars.Series.len": [[859, "polars-series-len"]], "polars.Series.list.take": [[889, "polars-series-list-take"]], "polars.Series.name": [[905, "polars-series-name"]], "polars.Series.limit": [[860, "polars-series-limit"]], "polars.Series.reverse": [[921, "polars-series-reverse"]], "polars.Series.list.mean": [[881, "polars-series-list-mean"]], "polars.Series.list.eval": [[871, "polars-series-list-eval"]], "polars.Series.log10": [[894, "polars-series-log10"]], "polars.Series.is_unique": [[855, "polars-series-is-unique"]], "polars.Series.list.union": [[891, "polars-series-list-union"]], "polars.Series.reshape": [[920, "polars-series-reshape"]], "polars.Series.max": [[898, "polars-series-max"]], "polars.Series.peak_min": [[912, "polars-series-peak-min"]], "polars.Series.rolling_apply": [[922, "polars-series-rolling-apply"]], "polars.Series.list.unique": [[892, "polars-series-list-unique"]], "polars.Series.list.count_match": [[868, "polars-series-list-count-match"]], "polars.Series.list.reverse": [[883, "polars-series-list-reverse"]], "polars.Series.list.last": [[878, "polars-series-list-last"]], "polars.Series.mean": [[899, "polars-series-mean"]], "polars.Series.nan_min": [[907, "polars-series-nan-min"]], "polars.Series.is_temporal": [[854, "polars-series-is-temporal"]], "polars.Series.reinterpret": [[918, "polars-series-reinterpret"]], "polars.Series.list.lengths": [[879, "polars-series-list-lengths"]], "polars.Series.list.difference": [[870, "polars-series-list-difference"]], "polars.Series.list.to_struct": [[890, "polars-series-list-to-struct"]], "polars.Series.list.intersection": [[876, "polars-series-list-intersection"]], "polars.Series.list.get": [[874, "polars-series-list-get"]], "polars.Series.list.tail": [[888, "polars-series-list-tail"]], "polars.Series.rename": [[919, "polars-series-rename"]], "polars.Series.rank": [[916, "polars-series-rank"]], "polars.Series.pct_change": [[910, "polars-series-pct-change"]], "polars.Series.list.arg_min": [[865, "polars-series-list-arg-min"]], "polars.Series.list.diff": [[869, "polars-series-list-diff"]], "polars.Series.list.shift": [[884, "polars-series-list-shift"]], "polars.Series.n_unique": [[904, "polars-series-n-unique"]], "polars.Series.kurtosis": [[858, "polars-series-kurtosis"]], "polars.Series.list.slice": [[885, "polars-series-list-slice"]], "polars.Series.is_sorted": [[853, "polars-series-is-sorted"]], "polars.Series.median": [[900, "polars-series-median"]], "polars.Series.product": [[913, "polars-series-product"]], "polars.Series.list.explode": [[872, "polars-series-list-explode"]], "polars.Series.null_count": [[909, "polars-series-null-count"]], "polars.Series.log": [[893, "polars-series-log"]], "polars.Series.list.max": [[880, "polars-series-list-max"]], "polars.Series.list.contains": [[867, "polars-series-list-contains"]], "polars.Series.list.first": [[873, "polars-series-list-first"]], "polars.Series.list.sum": [[887, "polars-series-list-sum"]], "polars.Series.is_nan": [[848, "polars-series-is-nan"]], "polars.Series.is_in": [[845, "polars-series-is-in"]], "polars.Series.implode": [[835, "polars-series-implode"]], "polars.Series.dt.strftime": [[807, "polars-series-dt-strftime"]], "polars.Series.dt.offset_by": [[800, "polars-series-dt-offset-by"]], "polars.Series.dt.month_end": [[796, "polars-series-dt-month-end"]], "polars.Series.inner_dtype": [[836, "polars-series-inner-dtype"]], "polars.Series.is_null": [[851, "polars-series-is-null"]], "polars.Series.dt.nanoseconds": [[799, "polars-series-dt-nanoseconds"]], "polars.Series.dt.week": [[812, "polars-series-dt-week"]], "polars.Series.dt.to_string": [[810, "polars-series-dt-to-string"]], "polars.Series.ewm_std": [[820, "polars-series-ewm-std"]], "polars.Series.ewm_mean": [[819, "polars-series-ewm-mean"]], "polars.Series.hash": [[832, "polars-series-hash"]], "polars.Series.is_finite": [[842, "polars-series-is-finite"]], "polars.Series.ewm_var": [[821, "polars-series-ewm-var"]], "polars.Series.has_validity": [[831, "polars-series-has-validity"]], "polars.Series.dt.nanosecond": [[798, "polars-series-dt-nanosecond"]], "polars.Series.extend_constant": [[824, "polars-series-extend-constant"]], "polars.Series.is_first": [[843, "polars-series-is-first"]], "polars.Series.dt.minutes": [[794, "polars-series-dt-minutes"]], "polars.Series.dt.round": [[804, "polars-series-dt-round"]], "polars.Series.dt.hours": [[782, "polars-series-dt-hours"]], "polars.Series.dt.weekday": [[813, "polars-series-dt-weekday"]], "polars.Series.dt.year": [[815, "polars-series-dt-year"]], "polars.Series.explode": [[823, "polars-series-explode"]], "polars.Series.is_empty": [[841, "polars-series-is-empty"]], "polars.Series.dt.replace_time_zone": [[803, "polars-series-dt-replace-time-zone"]], "polars.Series.exp": [[822, "polars-series-exp"]], "polars.Series.dt.second": [[805, "polars-series-dt-second"]], "polars.Series.dt.mean": [[786, "polars-series-dt-mean"]], "polars.Series.floor": [[829, "polars-series-floor"]], "polars.Series.is_boolean": [[839, "polars-series-is-boolean"]], "polars.Series.dt.microseconds": [[789, "polars-series-dt-microseconds"]], "polars.Series.is_between": [[838, "polars-series-is-between"]], "polars.Series.estimated_size": [[818, "polars-series-estimated-size"]], "polars.Series.dt.with_time_unit": [[814, "polars-series-dt-with-time-unit"]], "polars.Series.dt.iso_year": [[784, "polars-series-dt-iso-year"]], "polars.Series.dt.max": [[785, "polars-series-dt-max"]], "polars.Series.dt.median": [[787, "polars-series-dt-median"]], "polars.Series.head": [[833, "polars-series-head"]], "polars.Series.flags": [[828, "polars-series-flags"]], "polars.Series.hist": [[834, "polars-series-hist"]], "polars.Series.dt.month_start": [[797, "polars-series-dt-month-start"]], "polars.Series.is_duplicated": [[840, "polars-series-is-duplicated"]], "polars.Series.dt.timestamp": [[809, "polars-series-dt-timestamp"]], "polars.Series.dt.milliseconds": [[791, "polars-series-dt-milliseconds"]], "polars.Series.dt.is_leap_year": [[783, "polars-series-dt-is-leap-year"]], "polars.Series.dt.min": [[792, "polars-series-dt-min"]], "polars.Series.dtype": [[816, "polars-series-dtype"]], "polars.Series.fill_null": [[826, "polars-series-fill-null"]], "polars.Series.filter": [[827, "polars-series-filter"]], "polars.Series.is_not_null": [[850, "polars-series-is-not-null"]], "polars.Series.fill_nan": [[825, "polars-series-fill-nan"]], "polars.Series.dt.month": [[795, "polars-series-dt-month"]], "polars.Series.is_not_nan": [[849, "polars-series-is-not-nan"]], "polars.Series.dt.microsecond": [[788, "polars-series-dt-microsecond"]], "polars.Series.dt.truncate": [[811, "polars-series-dt-truncate"]], "polars.Series.get_chunks": [[830, "polars-series-get-chunks"]], "polars.Series.dt.seconds": [[806, "polars-series-dt-seconds"]], "polars.Series.is_integer": [[847, "polars-series-is-integer"]], "polars.Series.dt.minute": [[793, "polars-series-dt-minute"]], "polars.Series.dt.ordinal_day": [[801, "polars-series-dt-ordinal-day"]], "polars.Series.entropy": [[817, "polars-series-entropy"]], "polars.Series.is_infinite": [[846, "polars-series-is-infinite"]], "polars.Series.dt.millisecond": [[790, "polars-series-dt-millisecond"]], "polars.Series.dt.quarter": [[802, "polars-series-dt-quarter"]], "polars.Series.dt.time": [[808, "polars-series-dt-time"]], "polars.Series.is_float": [[844, "polars-series-is-float"]], "polars.Series.interpolate": [[837, "polars-series-interpolate"]], "polars.Series.dt.hour": [[781, "polars-series-dt-hour"]], "Descriptive": [[1023, "descriptive"], [713, "descriptive"], [247, "descriptive"]], "polars.Series.var": [[1014, "polars-series-var"]], "polars.Series.view": [[1015, "polars-series-view"]], "polars.Series.to_list": [[1005, "polars-series-to-list"]], "polars.Series.take": [[996, "polars-series-take"]], "polars.Series.value_counts": [[1013, "polars-series-value-counts"]], "Binary": [[1019, "binary"], [611, "binary"], [622, "binary"]], "Attributes": [[1018, "attributes"], [712, "attributes"], [245, "attributes"]], "Series": [[1025, "series"]], "Temporal": [[1031, "temporal"], [625, "temporal"], [253, "temporal"]], "Miscellaneous": [[1027, "miscellaneous"], [716, "miscellaneous"], [620, "miscellaneous"], [627, "miscellaneous"], [251, "miscellaneous"]], "polars.Series.to_physical": [[1008, "polars-series-to-physical"]], "polars.Series.upper_bound": [[1012, "polars-series-upper-bound"]], "polars.Series.zip_with": [[1016, "polars-series-zip-with"]], "polars.Series.to_dummies": [[1002, "polars-series-to-dummies"]], "SQL": [[1032, "sql"]], "Methods": [[1032, "methods"]], "polars.Series.to_arrow": [[1001, "polars-series-to-arrow"]], "Utils": [[1034, "utils"]], "polars.Series.to_numpy": [[1006, "polars-series-to-numpy"]], "polars.Series.tan": [[998, "polars-series-tan"]], "Boolean": [[1020, "boolean"], [612, "boolean"]], "Manipulation/selection": [[1028, "manipulation-selection"], [717, "manipulation-selection"], [621, "manipulation-selection"], [252, "manipulation-selection"]], "String": [[1029, "string"], [623, "string"]], "polars.Series.tanh": [[999, "polars-series-tanh"]], "polars.Series.unique_counts": [[1011, "polars-series-unique-counts"]], "polars.Series.to_frame": [[1003, "polars-series-to-frame"]], "polars.Series.to_init_repr": [[1004, "polars-series-to-init-repr"]], "Computation": [[1022, "computation"], [615, "computation"], [246, "computation"]], "Categories": [[1021, "categories"], [613, "categories"]], "Array": [[1017, "array"], [610, "array"]], "polars.Series.unique": [[1010, "polars-series-unique"]], "polars.Series.tail": [[995, "polars-series-tail"]], "polars.Series.sum": [[994, "polars-series-sum"]], "List": [[1026, "list"], [618, "list"]], "polars.Series.time_unit": [[1000, "polars-series-time-unit"]], "Struct": [[1030, "struct"], [624, "struct"]], "Export": [[1024, "export"], [248, "export"]], "polars.Series.top_k": [[1009, "polars-series-top-k"]], "Testing": [[1033, "testing"]], "Asserts": [[1033, "asserts"]], "Parametric testing": [[1033, "parametric-testing"]], "Polars primitives": [[1033, "polars-primitives"]], "Strategy helpers": [[1033, "strategy-helpers"]], "Profiles": [[1033, "profiles"]], "polars.Series.to_pandas": [[1007, "polars-series-to-pandas"]], "polars.Series.take_every": [[997, "polars-series-take-every"]], "polars.LazyFrame.min": [[665, "polars-lazyframe-min"]], "polars.LazyFrame.unique": [[688, "polars-lazyframe-unique"]], "polars.LazyFrame.set_sorted": [[675, "polars-lazyframe-set-sorted"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[708, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[699, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.read_json": [[670, "polars-lazyframe-read-json"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[706, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.explain": [[640, "polars-lazyframe-explain"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[698, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[700, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.LazyFrame.limit": [[658, "polars-lazyframe-limit"]], "polars.LazyFrame.last": [[656, "polars-lazyframe-last"]], "polars.LazyFrame.dtypes": [[639, "polars-lazyframe-dtypes"]], "polars.LazyFrame.pipe": [[667, "polars-lazyframe-pipe"]], "polars.LazyFrame.explode": [[641, "polars-lazyframe-explode"]], "polars.LazyFrame.shift_and_fill": [[677, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.tail": [[685, "polars-lazyframe-tail"]], "polars.LazyFrame.join_asof": [[655, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fill_null": [[644, "polars-lazyframe-fill-null"]], "polars.LazyFrame.groupby_dynamic": [[649, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.null_count": [[666, "polars-lazyframe-null-count"]], "polars.LazyFrame.groupby": [[648, "polars-lazyframe-groupby"]], "polars.LazyFrame.update": [[690, "polars-lazyframe-update"]], "polars.LazyFrame.first": [[646, "polars-lazyframe-first"]], "polars.LazyFrame.melt": [[663, "polars-lazyframe-melt"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[709, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.select": [[674, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[676, "polars-lazyframe-shift"]], "polars.LazyFrame.sink_ipc": [[679, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.std": [[683, "polars-lazyframe-std"]], "polars.LazyFrame.groupby_rolling": [[650, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.fill_nan": [[643, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.max": [[660, "polars-lazyframe-max"]], "polars.LazyFrame.rename": [[671, "polars-lazyframe-rename"]], "polars.LazyFrame.with_columns": [[693, "polars-lazyframe-with-columns"]], "polars.LazyFrame.filter": [[645, "polars-lazyframe-filter"]], "polars.LazyFrame.fetch": [[642, "polars-lazyframe-fetch"]], "polars.LazyFrame.quantile": [[669, "polars-lazyframe-quantile"]], "polars.LazyFrame.from_json": [[647, "polars-lazyframe-from-json"]], "polars.LazyFrame.schema": [[673, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[704, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.merge_sorted": [[664, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.inspect": [[652, "polars-lazyframe-inspect"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[702, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.with_context": [[694, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[703, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[705, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.mean": [[661, "polars-lazyframe-mean"]], "polars.LazyFrame.interpolate": [[653, "polars-lazyframe-interpolate"]], "polars.LazyFrame.top_k": [[687, "polars-lazyframe-top-k"]], "polars.LazyFrame.width": [[692, "polars-lazyframe-width"]], "polars.LazyFrame.take_every": [[686, "polars-lazyframe-take-every"]], "polars.LazyFrame.write_json": [[696, "polars-lazyframe-write-json"]], "polars.LazyFrame.map": [[659, "polars-lazyframe-map"]], "polars.LazyFrame.sort": [[682, "polars-lazyframe-sort"]], "polars.LazyFrame.slice": [[681, "polars-lazyframe-slice"]], "polars.LazyFrame.profile": [[668, "polars-lazyframe-profile"]], "polars.LazyFrame.join": [[654, "polars-lazyframe-join"]], "polars.LazyFrame.with_row_count": [[695, "polars-lazyframe-with-row-count"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[707, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[701, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.head": [[651, "polars-lazyframe-head"]], "polars.LazyFrame.reverse": [[672, "polars-lazyframe-reverse"]], "polars.LazyFrame.show_graph": [[678, "polars-lazyframe-show-graph"]], "polars.LazyFrame.median": [[662, "polars-lazyframe-median"]], "polars.LazyFrame.sink_parquet": [[680, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.lazy": [[657, "polars-lazyframe-lazy"]], "polars.LazyFrame.unnest": [[689, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[697, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.sum": [[684, "polars-lazyframe-sum"]], "polars.LazyFrame.var": [[691, "polars-lazyframe-var"]], "polars.Series.arr.min": [[738, "polars-series-arr-min"]], "polars.Series.clip": [[753, "polars-series-clip"]], "polars.Series.dt.date": [[775, "polars-series-dt-date"]], "polars.Series.dot": [[767, "polars-series-dot"]], "polars.Series.any": [[723, "polars-series-any"]], "polars.Series.dt.datetime": [[776, "polars-series-dt-datetime"]], "polars.Series.dt.cast_time_unit": [[772, "polars-series-dt-cast-time-unit"]], "polars.Series.clone": [[756, "polars-series-clone"]], "polars.Series.arccosh": [[727, "polars-series-arccosh"]], "polars.Series.dt.combine": [[773, "polars-series-dt-combine"]], "polars.Series.dt": [[770, "polars-series-dt"]], "polars.Series.arcsinh": [[729, "polars-series-arcsinh"]], "polars.Series.arr.sum": [[739, "polars-series-arr-sum"]], "Read/write logical plan": [[716, "read-write-logical-plan"]], "polars.Series.dt.convert_time_zone": [[774, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.decode": [[742, "polars-series-bin-decode"]], "polars.Series.cumprod": [[761, "polars-series-cumprod"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[711, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arg_max": [[732, "polars-series-arg-max"]], "polars.Series.all": [[722, "polars-series-all"]], "Selectors": [[718, "selectors"]], "Importing": [[718, "importing"]], "Set operations": [[718, "set-operations"]], "Functions": [[718, "functions"], [616, "functions"], [627, "functions"]], "polars.Series.bin.ends_with": [[744, "polars-series-bin-ends-with"]], "polars.Series.bin.encode": [[743, "polars-series-bin-encode"]], "polars.Series.cumulative_eval": [[763, "polars-series-cumulative-eval"]], "polars.Series.drop_nans": [[768, "polars-series-drop-nans"]], "polars.Series.dt.day": [[777, "polars-series-dt-day"]], "polars.Series.chunk_lengths": [[751, "polars-series-chunk-lengths"]], "polars.Series.cumsum": [[762, "polars-series-cumsum"]], "polars.Series.abs": [[720, "polars-series-abs"]], "polars.Series.arcsin": [[728, "polars-series-arcsin"]], "LazyFrame": [[715, "lazyframe"]], "polars.Series.clear": [[752, "polars-series-clear"]], "polars.Series.append": [[724, "polars-series-append"]], "polars.Series.arctanh": [[731, "polars-series-arctanh"]], "polars.Series.cos": [[757, "polars-series-cos"]], "polars.Series.describe": [[765, "polars-series-describe"]], "polars.Series.clip_min": [[755, "polars-series-clip-min"]], "polars.Series.arg_min": [[733, "polars-series-arg-min"]], "polars.Series.cosh": [[758, "polars-series-cosh"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[710, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.alias": [[721, "polars-series-alias"]], "polars.Series.bottom_k": [[746, "polars-series-bottom-k"]], "polars.Series.cast": [[747, "polars-series-cast"]], "polars.Series.drop_nulls": [[769, "polars-series-drop-nulls"]], "polars.Series.cut": [[764, "polars-series-cut"]], "polars.Series.dt.days": [[778, "polars-series-dt-days"]], "polars.Series.dt.dst_offset": [[779, "polars-series-dt-dst-offset"]], "polars.Series.ceil": [[750, "polars-series-ceil"]], "polars.Series.arccos": [[726, "polars-series-arccos"]], "polars.Series.dt.epoch": [[780, "polars-series-dt-epoch"]], "polars.Series.cat.set_ordering": [[749, "polars-series-cat-set-ordering"]], "polars.Series.cummin": [[760, "polars-series-cummin"]], "polars.Series.arr.max": [[737, "polars-series-arr-max"]], "polars.Series.cat": [[748, "polars-series-cat"]], "polars.Series.dt.base_utc_offset": [[771, "polars-series-dt-base-utc-offset"]], "polars.Series.arctan": [[730, "polars-series-arctan"]], "polars.Series.cummax": [[759, "polars-series-cummax"]], "GroupBy": [[714, "groupby"], [249, "groupby"]], "polars.Series.apply": [[725, "polars-series-apply"]], "polars.Series.arg_sort": [[734, "polars-series-arg-sort"]], "polars.Series.bin.contains": [[741, "polars-series-bin-contains"]], "polars.Series.bin.starts_with": [[745, "polars-series-bin-starts-with"]], "polars.Series.clip_max": [[754, "polars-series-clip-max"]], "polars.Series.arg_unique": [[736, "polars-series-arg-unique"]], "polars.Series.diff": [[766, "polars-series-diff"]], "polars.Series.arr.unique": [[740, "polars-series-arr-unique"]], "polars.Series.arg_true": [[735, "polars-series-arg-true"]], "polars.Expr.str.count_match": [[500, "polars-expr-str-count-match"]], "polars.Expr.str.concat": [[498, "polars-expr-str-concat"]], "polars.Expr.str.ends_with": [[503, "polars-expr-str-ends-with"]], "polars.Expr.str.explode": [[504, "polars-expr-str-explode"]], "polars.corr": [[565, "polars-corr"]], "polars.Expr.str.decode": [[501, "polars-expr-str-decode"]], "polars.Expr.str.splitn": [[521, "polars-expr-str-splitn"]], "polars.Expr.tanh": [[542, "polars-expr-tanh"]], "polars.Expr.str.to_decimal": [[527, "polars-expr-str-to-decimal"]], "polars.Expr.upper_bound": [[548, "polars-expr-upper-bound"]], "polars.coalesce": [[561, "polars-coalesce"]], "polars.Expr.str.rjust": [[516, "polars-expr-str-rjust"]], "polars.Expr.str.strptime": [[524, "polars-expr-str-strptime"]], "polars.Expr.str.strip": [[523, "polars-expr-str-strip"]], "polars.arange": [[557, "polars-arange"]], "polars.Expr.take_every": [[540, "polars-expr-take-every"]], "polars.Expr.str.zfill": [[532, "polars-expr-str-zfill"]], "polars.col": [[562, "polars-col"]], "polars.Expr.str.extract_all": [[506, "polars-expr-str-extract-all"]], "polars.Expr.value_counts": [[549, "polars-expr-value-counts"]], "polars.Expr.str.json_extract": [[507, "polars-expr-str-json-extract"]], "polars.Expr.str.slice": [[518, "polars-expr-str-slice"]], "polars.Expr.suffix": [[536, "polars-expr-suffix"]], "polars.Expr.sum": [[537, "polars-expr-sum"]], "polars.Expr.str.starts_with": [[522, "polars-expr-str-starts-with"]], "polars.Expr.where": [[551, "polars-expr-where"]], "polars.Expr.str.json_path_match": [[508, "polars-expr-str-json-path-match"]], "polars.Expr.truediv": [[545, "polars-expr-truediv"]], "polars.Expr.take": [[539, "polars-expr-take"]], "polars.arg_where": [[559, "polars-arg-where"]], "polars.all": [[553, "polars-all"]], "polars.Expr.top_k": [[544, "polars-expr-top-k"]], "polars.Expr.unique_counts": [[547, "polars-expr-unique-counts"]], "polars.Expr.var": [[550, "polars-expr-var"]], "polars.Expr.str.to_lowercase": [[528, "polars-expr-str-to-lowercase"]], "polars.any": [[554, "polars-any"]], "polars.Expr.str.to_date": [[525, "polars-expr-str-to-date"]], "polars.Expr.str.to_uppercase": [[531, "polars-expr-str-to-uppercase"]], "polars.Expr.str.extract": [[505, "polars-expr-str-extract"]], "polars.cov": [[567, "polars-cov"]], "polars.Expr.str.replace": [[514, "polars-expr-str-replace"]], "polars.arg_sort_by": [[558, "polars-arg-sort-by"]], "polars.Expr.unique": [[546, "polars-expr-unique"]], "polars.Expr.str.contains": [[499, "polars-expr-str-contains"]], "polars.Expr.xor": [[552, "polars-expr-xor"]], "polars.Expr.str.n_chars": [[512, "polars-expr-str-n-chars"]], "polars.Expr.str.encode": [[502, "polars-expr-str-encode"]], "polars.Expr.str.to_time": [[529, "polars-expr-str-to-time"]], "polars.concat_list": [[563, "polars-concat-list"]], "polars.Expr.sub": [[535, "polars-expr-sub"]], "polars.concat_str": [[564, "polars-concat-str"]], "polars.Expr.str.rstrip": [[517, "polars-expr-str-rstrip"]], "polars.Expr.struct.field": [[533, "polars-expr-struct-field"]], "polars.Expr.std": [[497, "polars-expr-std"]], "polars.Expr.str.replace_all": [[515, "polars-expr-str-replace-all"]], "polars.Expr.to_physical": [[543, "polars-expr-to-physical"]], "polars.approx_unique": [[556, "polars-approx-unique"]], "polars.avg": [[560, "polars-avg"]], "polars.count": [[566, "polars-count"]], "polars.Expr.tan": [[541, "polars-expr-tan"]], "polars.Expr.str.ljust": [[510, "polars-expr-str-ljust"]], "polars.Expr.str.parse_int": [[513, "polars-expr-str-parse-int"]], "polars.Expr.str.to_titlecase": [[530, "polars-expr-str-to-titlecase"]], "polars.Expr.tail": [[538, "polars-expr-tail"]], "polars.Expr.str.split_exact": [[520, "polars-expr-str-split-exact"]], "polars.Expr.str.lstrip": [[511, "polars-expr-str-lstrip"]], "polars.Expr.struct.rename_fields": [[534, "polars-expr-struct-rename-fields"]], "polars.apply": [[555, "polars-apply"]], "polars.Expr.str.lengths": [[509, "polars-expr-str-lengths"]], "polars.Expr.str.split": [[519, "polars-expr-str-split"]], "polars.Expr.str.to_datetime": [[526, "polars-expr-str-to-datetime"]], "polars.Expr.rank": [[465, "polars-expr-rank"]], "polars.Expr.rolling_min": [[475, "polars-expr-rolling-min"]], "polars.Expr.log10": [[426, "polars-expr-log10"]], "polars.Expr.meta.output_name": [[440, "polars-expr-meta-output-name"]], "polars.Expr.slice": [[493, "polars-expr-slice"]], "polars.Expr.meta.is_regex_projection": [[438, "polars-expr-meta-is-regex-projection"]], "polars.Expr.rolling_mean": [[473, "polars-expr-rolling-mean"]], "polars.Expr.mean": [[434, "polars-expr-mean"]], "polars.Expr.map_dict": [[432, "polars-expr-map-dict"]], "polars.Expr.mode": [[448, "polars-expr-mode"]], "polars.Expr.rolling_std": [[478, "polars-expr-rolling-std"]], "polars.Expr.search_sorted": [[483, "polars-expr-search-sorted"]], "polars.Expr.sqrt": [[496, "polars-expr-sqrt"]], "polars.Expr.over": [[457, "polars-expr-over"]], "polars.Expr.reshape": [[469, "polars-expr-reshape"]], "polars.Expr.reinterpret": [[467, "polars-expr-reinterpret"]], "polars.Expr.repeat_by": [[468, "polars-expr-repeat-by"]], "polars.Expr.min": [[446, "polars-expr-min"]], "polars.Expr.meta.has_multiple_outputs": [[437, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.shuffle": [[488, "polars-expr-shuffle"]], "polars.Expr.median": [[435, "polars-expr-median"]], "polars.Expr.max": [[433, "polars-expr-max"]], "polars.Expr.ne": [[453, "polars-expr-ne"]], "polars.Expr.pow": [[460, "polars-expr-pow"]], "polars.Expr.meta.tree_format": [[443, "polars-expr-meta-tree-format"]], "polars.Expr.meta.ne": [[439, "polars-expr-meta-ne"]], "polars.Expr.pipe": [[459, "polars-expr-pipe"]], "polars.Expr.rolling_var": [[480, "polars-expr-rolling-var"]], "polars.Expr.skew": [[492, "polars-expr-skew"]], "polars.Expr.round": [[481, "polars-expr-round"]], "polars.Expr.ne_missing": [[454, "polars-expr-ne-missing"]], "polars.Expr.reverse": [[470, "polars-expr-reverse"]], "polars.Expr.sort_by": [[495, "polars-expr-sort-by"]], "polars.Expr.radians": [[464, "polars-expr-radians"]], "polars.Expr.rolling_sum": [[479, "polars-expr-rolling-sum"]], "polars.Expr.nan_min": [[452, "polars-expr-nan-min"]], "polars.Expr.set_sorted": [[484, "polars-expr-set-sorted"]], "polars.Expr.pct_change": [[458, "polars-expr-pct-change"]], "polars.Expr.lt": [[429, "polars-expr-lt"]], "polars.Expr.product": [[462, "polars-expr-product"]], "polars.Expr.mul": [[449, "polars-expr-mul"]], "polars.Expr.meta.pop": [[441, "polars-expr-meta-pop"]], "polars.Expr.mod": [[447, "polars-expr-mod"]], "polars.Expr.shift": [[485, "polars-expr-shift"]], "polars.Expr.map": [[430, "polars-expr-map"]], "polars.Expr.meta.undo_aliases": [[444, "polars-expr-meta-undo-aliases"]], "polars.Expr.rolling_quantile": [[476, "polars-expr-rolling-quantile"]], "polars.Expr.nan_max": [[451, "polars-expr-nan-max"]], "polars.Expr.sample": [[482, "polars-expr-sample"]], "polars.Expr.or_": [[456, "polars-expr-or"]], "polars.Expr.shift_and_fill": [[486, "polars-expr-shift-and-fill"]], "polars.Expr.sinh": [[491, "polars-expr-sinh"]], "polars.Expr.meta.write_json": [[445, "polars-expr-meta-write-json"]], "polars.Expr.meta.root_names": [[442, "polars-expr-meta-root-names"]], "polars.Expr.rechunk": [[466, "polars-expr-rechunk"]], "polars.Expr.meta.eq": [[436, "polars-expr-meta-eq"]], "polars.Expr.map_alias": [[431, "polars-expr-map-alias"]], "polars.Expr.rolling_max": [[472, "polars-expr-rolling-max"]], "polars.Expr.shrink_dtype": [[487, "polars-expr-shrink-dtype"]], "polars.Expr.sign": [[489, "polars-expr-sign"]], "polars.Expr.lower_bound": [[428, "polars-expr-lower-bound"]], "polars.Expr.log1p": [[427, "polars-expr-log1p"]], "polars.Expr.sin": [[490, "polars-expr-sin"]], "polars.Expr.rolling_apply": [[471, "polars-expr-rolling-apply"]], "polars.Expr.n_unique": [[450, "polars-expr-n-unique"]], "polars.Expr.rolling_median": [[474, "polars-expr-rolling-median"]], "polars.Expr.prefix": [[461, "polars-expr-prefix"]], "polars.Expr.null_count": [[455, "polars-expr-null-count"]], "polars.Expr.sort": [[494, "polars-expr-sort"]], "polars.Expr.rolling_skew": [[477, "polars-expr-rolling-skew"]], "polars.Expr.quantile": [[463, "polars-expr-quantile"]], "polars.Expr.list.arg_max": [[396, "polars-expr-list-arg-max"]], "polars.Expr.list.shift": [[416, "polars-expr-list-shift"]], "polars.Expr.list.count_match": [[400, "polars-expr-list-count-match"]], "polars.Expr.keep_name": [[388, "polars-expr-keep-name"]], "polars.Expr.is_not_nan": [[384, "polars-expr-is-not-nan"]], "polars.Expr.exclude": [[356, "polars-expr-exclude"]], "polars.Expr.implode": [[373, "polars-expr-implode"]], "polars.Expr.last": [[390, "polars-expr-last"]], "polars.Expr.list.get": [[406, "polars-expr-list-get"]], "polars.Expr.list.concat": [[398, "polars-expr-list-concat"]], "polars.Expr.head": [[372, "polars-expr-head"]], "polars.Expr.is_between": [[376, "polars-expr-is-between"]], "polars.Expr.is_infinite": [[381, "polars-expr-is-infinite"]], "polars.Expr.is_not_null": [[385, "polars-expr-is-not-null"]], "polars.Expr.exp": [[357, "polars-expr-exp"]], "polars.Expr.kurtosis": [[389, "polars-expr-kurtosis"]], "polars.Expr.list.intersection": [[408, "polars-expr-list-intersection"]], "polars.Expr.list.max": [[412, "polars-expr-list-max"]], "polars.Expr.is_first": [[379, "polars-expr-is-first"]], "polars.Expr.fill_nan": [[360, "polars-expr-fill-nan"]], "polars.Expr.extend_constant": [[359, "polars-expr-extend-constant"]], "polars.Expr.list.first": [[405, "polars-expr-list-first"]], "polars.Expr.list.sort": [[418, "polars-expr-list-sort"]], "polars.Expr.explode": [[358, "polars-expr-explode"]], "polars.Expr.list.tail": [[420, "polars-expr-list-tail"]], "polars.Expr.list.sum": [[419, "polars-expr-list-sum"]], "polars.Expr.list.last": [[410, "polars-expr-list-last"]], "polars.Expr.list.difference": [[402, "polars-expr-list-difference"]], "polars.Expr.list.lengths": [[411, "polars-expr-list-lengths"]], "polars.Expr.le": [[391, "polars-expr-le"]], "polars.Expr.list.union": [[423, "polars-expr-list-union"]], "polars.Expr.floor": [[365, "polars-expr-floor"]], "polars.Expr.list.explode": [[404, "polars-expr-list-explode"]], "polars.Expr.is_nan": [[382, "polars-expr-is-nan"]], "polars.Expr.list.slice": [[417, "polars-expr-list-slice"]], "polars.Expr.first": [[363, "polars-expr-first"]], "polars.Expr.inspect": [[374, "polars-expr-inspect"]], "polars.Expr.is_finite": [[378, "polars-expr-is-finite"]], "polars.Expr.is_unique": [[387, "polars-expr-is-unique"]], "polars.Expr.is_not": [[383, "polars-expr-is-not"]], "polars.Expr.is_duplicated": [[377, "polars-expr-is-duplicated"]], "polars.Expr.ewm_var": [[355, "polars-expr-ewm-var"]], "polars.Expr.floordiv": [[366, "polars-expr-floordiv"]], "polars.Expr.list.mean": [[413, "polars-expr-list-mean"]], "polars.Expr.from_json": [[368, "polars-expr-from-json"]], "polars.Expr.is_null": [[386, "polars-expr-is-null"]], "polars.Expr.log": [[425, "polars-expr-log"]], "polars.Expr.interpolate": [[375, "polars-expr-interpolate"]], "polars.Expr.list.diff": [[401, "polars-expr-list-diff"]], "polars.Expr.list.head": [[407, "polars-expr-list-head"]], "polars.Expr.list.take": [[421, "polars-expr-list-take"]], "polars.Expr.list.unique": [[424, "polars-expr-list-unique"]], "polars.Expr.forward_fill": [[367, "polars-expr-forward-fill"]], "polars.Expr.list.contains": [[399, "polars-expr-list-contains"]], "polars.Expr.list.eval": [[403, "polars-expr-list-eval"]], "polars.Expr.list.all": [[394, "polars-expr-list-all"]], "polars.Expr.flatten": [[364, "polars-expr-flatten"]], "polars.Expr.is_in": [[380, "polars-expr-is-in"]], "polars.Expr.list.reverse": [[415, "polars-expr-list-reverse"]], "polars.Expr.list.to_struct": [[422, "polars-expr-list-to-struct"]], "polars.Expr.list.join": [[409, "polars-expr-list-join"]], "polars.Expr.fill_null": [[361, "polars-expr-fill-null"]], "polars.Expr.hash": [[371, "polars-expr-hash"]], "polars.Expr.filter": [[362, "polars-expr-filter"]], "polars.Expr.ge": [[369, "polars-expr-ge"]], "polars.Expr.list.min": [[414, "polars-expr-list-min"]], "polars.Expr.limit": [[393, "polars-expr-limit"]], "polars.Expr.list.any": [[395, "polars-expr-list-any"]], "polars.Expr.list.arg_min": [[397, "polars-expr-list-arg-min"]], "polars.Expr.gt": [[370, "polars-expr-gt"]], "polars.Expr.len": [[392, "polars-expr-len"]], "polars.Expr.dt.weekday": [[347, "polars-expr-dt-weekday"]], "polars.Expr.ewm_std": [[354, "polars-expr-ewm-std"]], "polars.Expr.dot": [[306, "polars-expr-dot"]], "polars.Expr.dt.epoch": [[318, "polars-expr-dt-epoch"]], "polars.Expr.dt.base_utc_offset": [[309, "polars-expr-dt-base-utc-offset"]], "polars.Expr.eq": [[351, "polars-expr-eq"]], "polars.Expr.dt.second": [[339, "polars-expr-dt-second"]], "polars.Expr.dt.year": [[349, "polars-expr-dt-year"]], "polars.Expr.cumprod": [[301, "polars-expr-cumprod"]], "polars.Expr.cumsum": [[302, "polars-expr-cumsum"]], "polars.Expr.count": [[297, "polars-expr-count"]], "polars.Expr.dt.month_end": [[330, "polars-expr-dt-month-end"]], "polars.Expr.dt.day": [[315, "polars-expr-dt-day"]], "polars.Expr.bin.starts_with": [[286, "polars-expr-bin-starts-with"]], "polars.Expr.dt.nanoseconds": [[333, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.round": [[338, "polars-expr-dt-round"]], "polars.Expr.eq_missing": [[352, "polars-expr-eq-missing"]], "polars.Expr.dt.iso_year": [[322, "polars-expr-dt-iso-year"]], "polars.Expr.dt.hours": [[320, "polars-expr-dt-hours"]], "polars.Expr.cos": [[295, "polars-expr-cos"]], "polars.Expr.clip_min": [[294, "polars-expr-clip-min"]], "polars.Expr.dt.datetime": [[314, "polars-expr-dt-datetime"]], "polars.Expr.dt.dst_offset": [[317, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.month_start": [[331, "polars-expr-dt-month-start"]], "polars.Expr.cumulative_eval": [[303, "polars-expr-cumulative-eval"]], "polars.Expr.dt.to_string": [[344, "polars-expr-dt-to-string"]], "polars.Expr.cummax": [[299, "polars-expr-cummax"]], "polars.Expr.dt.date": [[313, "polars-expr-dt-date"]], "polars.Expr.drop_nans": [[307, "polars-expr-drop-nans"]], "polars.Expr.dt.days": [[316, "polars-expr-dt-days"]], "polars.Expr.dt.minutes": [[328, "polars-expr-dt-minutes"]], "polars.Expr.dt.hour": [[319, "polars-expr-dt-hour"]], "polars.Expr.dt.is_leap_year": [[321, "polars-expr-dt-is-leap-year"]], "polars.Expr.cast": [[289, "polars-expr-cast"]], "polars.Expr.dt.month": [[329, "polars-expr-dt-month"]], "polars.Expr.dt.quarter": [[336, "polars-expr-dt-quarter"]], "polars.Expr.dt.ordinal_day": [[335, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.replace_time_zone": [[337, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.microseconds": [[324, "polars-expr-dt-microseconds"]], "polars.Expr.dt.seconds": [[340, "polars-expr-dt-seconds"]], "polars.Expr.cat.set_ordering": [[290, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.combine": [[311, "polars-expr-dt-combine"]], "polars.Expr.dt.timestamp": [[343, "polars-expr-dt-timestamp"]], "polars.Expr.dt.milliseconds": [[326, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.minute": [[327, "polars-expr-dt-minute"]], "polars.Expr.cache": [[288, "polars-expr-cache"]], "polars.Expr.dt.truncate": [[345, "polars-expr-dt-truncate"]], "polars.Expr.dt.time": [[342, "polars-expr-dt-time"]], "polars.Expr.entropy": [[350, "polars-expr-entropy"]], "polars.Expr.dt.week": [[346, "polars-expr-dt-week"]], "polars.Expr.bin.ends_with": [[285, "polars-expr-bin-ends-with"]], "polars.Expr.clip_max": [[293, "polars-expr-clip-max"]], "polars.Expr.dt.microsecond": [[323, "polars-expr-dt-microsecond"]], "polars.Expr.degrees": [[304, "polars-expr-degrees"]], "polars.Expr.dt.millisecond": [[325, "polars-expr-dt-millisecond"]], "polars.Expr.cumcount": [[298, "polars-expr-cumcount"]], "polars.Expr.ewm_mean": [[353, "polars-expr-ewm-mean"]], "polars.Expr.ceil": [[291, "polars-expr-ceil"]], "polars.Expr.dt.cast_time_unit": [[310, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.strftime": [[341, "polars-expr-dt-strftime"]], "polars.Expr.cummin": [[300, "polars-expr-cummin"]], "polars.Expr.drop_nulls": [[308, "polars-expr-drop-nulls"]], "polars.Expr.dt.convert_time_zone": [[312, "polars-expr-dt-convert-time-zone"]], "polars.Expr.bin.encode": [[284, "polars-expr-bin-encode"]], "polars.Expr.dt.nanosecond": [[332, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.offset_by": [[334, "polars-expr-dt-offset-by"]], "polars.Expr.dt.with_time_unit": [[348, "polars-expr-dt-with-time-unit"]], "polars.Expr.diff": [[305, "polars-expr-diff"]], "polars.Expr.clip": [[292, "polars-expr-clip"]], "polars.Expr.bottom_k": [[287, "polars-expr-bottom-k"]], "polars.Expr.cosh": [[296, "polars-expr-cosh"]], "polars.cumreduce": [[569, "polars-cumreduce"]], "polars.date_range": [[572, "polars-date-range"]], "polars.cumsum": [[570, "polars-cumsum"]], "polars.max": [[588, "polars-max"]], "polars.sql_expr": [[600, "polars-sql-expr"]], "polars.min": [[591, "polars-min"]], "polars.date": [[571, "polars-date"]], "polars.map": [[587, "polars-map"]], "polars.reduce": [[595, "polars-reduce"]], "polars.mean": [[589, "polars-mean"]], "polars.var": [[607, "polars-var"]], "polars.int_ranges": [[585, "polars-int-ranges"]], "polars.LazyFrame.drop": [[637, "polars-lazyframe-drop"]], "polars.std": [[601, "polars-std"]], "polars.first": [[577, "polars-first"]], "Meta": [[619, "meta"]], "Expressions": [[617, "expressions"]], "polars.head": [[582, "polars-head"]], "polars.time_range": [[606, "polars-time-range"]], "polars.LazyFrame.clear": [[633, "polars-lazyframe-clear"]], "polars.n_unique": [[592, "polars-n-unique"]], "polars.rolling_cov": [[598, "polars-rolling-cov"]], "polars.median": [[590, "polars-median"]], "polars.fold": [[578, "polars-fold"]], "polars.ones": [[593, "polars-ones"]], "polars.tail": [[604, "polars-tail"]], "Columns / names": [[614, "columns-names"]], "polars.cumfold": [[568, "polars-cumfold"]], "polars.LazyFrame.bottom_k": [[631, "polars-lazyframe-bottom-k"]], "polars.lit": [[586, "polars-lit"]], "polars.select": [[599, "polars-select"]], "polars.implode": [[583, "polars-implode"]], "API reference": [[628, "api-reference"]], "polars.sum": [[603, "polars-sum"]], "polars.repeat": [[596, "polars-repeat"]], "polars.datetime": [[573, "polars-datetime"]], "Input/output": [[629, "input-output"]], "CSV": [[629, "csv"]], "Feather/ IPC": [[629, "feather-ipc"]], "Parquet": [[629, "parquet"]], "Database": [[629, "database"]], "JSON": [[629, "json"]], "AVRO": [[629, "avro"]], "Excel": [[629, "excel"]], "Delta Lake": [[629, "delta-lake"]], "Datasets": [[629, "datasets"]], "BatchedCsvReader": [[629, "batchedcsvreader"]], "polars.quantile": [[594, "polars-quantile"]], "polars.format": [[579, "polars-format"]], "polars.struct": [[602, "polars-struct"]], "polars.zeros": [[609, "polars-zeros"]], "Operators": [[622, "operators"]], "Conjunction": [[622, "conjunction"]], "Comparison": [[622, "comparison"]], "Numeric": [[622, "numeric"], [253, "numeric"]], "polars.LazyFrame.collect": [[635, "polars-lazyframe-collect"]], "polars.LazyFrame.clone": [[634, "polars-lazyframe-clone"]], "polars.LazyFrame.drop_nulls": [[638, "polars-lazyframe-drop-nulls"]], "polars.element": [[575, "polars-element"]], "polars.from_epoch": [[580, "polars-from-epoch"]], "Window": [[626, "window"]], "Conversion": [[627, "conversion"]], "Parallelization": [[627, "parallelization"]], "StringCache": [[627, "stringcache"]], "polars.groups": [[581, "polars-groups"]], "polars.when": [[608, "polars-when"]], "polars.duration": [[574, "polars-duration"]], "polars.exclude": [[576, "polars-exclude"]], "polars.time": [[605, "polars-time"]], "polars.LazyFrame.cache": [[632, "polars-lazyframe-cache"]], "polars.int_range": [[584, "polars-int-range"]], "polars.LazyFrame.columns": [[636, "polars-lazyframe-columns"]], "polars.rolling_corr": [[597, "polars-rolling-corr"]], "polars.DataFrame.join": [[169, "polars-dataframe-join"]], "polars.DataFrame.get_columns": [[152, "polars-dataframe-get-columns"]], "polars.DataFrame.filter": [[147, "polars-dataframe-filter"]], "polars.DataFrame.iter_slices": [[168, "polars-dataframe-iter-slices"]], "polars.DataFrame.reverse": [[191, "polars-dataframe-reverse"]], "polars.DataFrame.shift_and_fill": [[200, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.null_count": [[181, "polars-dataframe-null-count"]], "polars.DataFrame.to_dict": [[209, "polars-dataframe-to-dict"]], "polars.DataFrame.explode": [[143, "polars-dataframe-explode"]], "polars.DataFrame.to_dicts": [[210, "polars-dataframe-to-dicts"]], "polars.DataFrame.iter_rows": [[167, "polars-dataframe-iter-rows"]], "polars.DataFrame.median": [[175, "polars-dataframe-median"]], "polars.DataFrame.replace": [[189, "polars-dataframe-replace"]], "polars.DataFrame.groupby_rolling": [[156, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.max": [[173, "polars-dataframe-max"]], "polars.DataFrame.std": [[204, "polars-dataframe-std"]], "polars.DataFrame.quantile": [[186, "polars-dataframe-quantile"]], "polars.DataFrame.fill_nan": [[145, "polars-dataframe-fill-nan"]], "polars.DataFrame.fold": [[149, "polars-dataframe-fold"]], "polars.DataFrame.lazy": [[171, "polars-dataframe-lazy"]], "polars.DataFrame.partition_by": [[182, "polars-dataframe-partition-by"]], "polars.DataFrame.interpolate": [[162, "polars-dataframe-interpolate"]], "polars.DataFrame.shape": [[198, "polars-dataframe-shape"]], "polars.DataFrame.n_chunks": [[179, "polars-dataframe-n-chunks"]], "polars.DataFrame.is_unique": [[165, "polars-dataframe-is-unique"]], "polars.DataFrame.groupby_dynamic": [[155, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.melt": [[176, "polars-dataframe-melt"]], "polars.DataFrame.set_sorted": [[197, "polars-dataframe-set-sorted"]], "polars.DataFrame.head": [[158, "polars-dataframe-head"]], "polars.DataFrame.find_idx_by_name": [[148, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.item": [[166, "polars-dataframe-item"]], "polars.DataFrame.rechunk": [[187, "polars-dataframe-rechunk"]], "polars.DataFrame.extend": [[144, "polars-dataframe-extend"]], "polars.DataFrame.rename": [[188, "polars-dataframe-rename"]], "polars.DataFrame.n_unique": [[180, "polars-dataframe-n-unique"]], "polars.DataFrame.limit": [[172, "polars-dataframe-limit"]], "polars.DataFrame.product": [[185, "polars-dataframe-product"]], "polars.DataFrame.pivot": [[184, "polars-dataframe-pivot"]], "polars.DataFrame.shrink_to_fit": [[201, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.get_column": [[151, "polars-dataframe-get-column"]], "polars.DataFrame.to_arrow": [[208, "polars-dataframe-to-arrow"]], "polars.DataFrame.is_empty": [[164, "polars-dataframe-is-empty"]], "polars.DataFrame.schema": [[195, "polars-dataframe-schema"]], "polars.DataFrame.mean": [[174, "polars-dataframe-mean"]], "polars.DataFrame.glimpse": [[153, "polars-dataframe-glimpse"]], "polars.DataFrame.sum": [[205, "polars-dataframe-sum"]], "polars.DataFrame.rows": [[193, "polars-dataframe-rows"]], "polars.DataFrame.row": [[192, "polars-dataframe-row"]], "polars.DataFrame.join_asof": [[170, "polars-dataframe-join-asof"]], "polars.DataFrame.hstack": [[160, "polars-dataframe-hstack"]], "polars.DataFrame.pipe": [[183, "polars-dataframe-pipe"]], "polars.DataFrame.sample": [[194, "polars-dataframe-sample"]], "polars.DataFrame.select": [[196, "polars-dataframe-select"]], "polars.DataFrame.insert_at_idx": [[161, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.min": [[178, "polars-dataframe-min"]], "polars.DataFrame.slice": [[202, "polars-dataframe-slice"]], "polars.DataFrame.merge_sorted": [[177, "polars-dataframe-merge-sorted"]], "polars.DataFrame.take_every": [[207, "polars-dataframe-take-every"]], "polars.DataFrame.to_dummies": [[211, "polars-dataframe-to-dummies"]], "polars.DataFrame.estimated_size": [[142, "polars-dataframe-estimated-size"]], "polars.DataFrame.height": [[159, "polars-dataframe-height"]], "polars.DataFrame.frame_equal": [[150, "polars-dataframe-frame-equal"]], "polars.DataFrame.is_duplicated": [[163, "polars-dataframe-is-duplicated"]], "polars.DataFrame.tail": [[206, "polars-dataframe-tail"]], "polars.DataFrame.sort": [[203, "polars-dataframe-sort"]], "polars.DataFrame.fill_null": [[146, "polars-dataframe-fill-null"]], "polars.DataFrame.groupby": [[154, "polars-dataframe-groupby"]], "polars.DataFrame.shift": [[199, "polars-dataframe-shift"]], "polars.DataFrame.hash_rows": [[157, "polars-dataframe-hash-rows"]], "polars.DataFrame.replace_at_idx": [[190, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.to_init_repr": [[212, "polars-dataframe-to-init-repr"]], "polars.Expr.any": [[262, "polars-expr-any"]], "polars.dataframe.groupby.GroupBy.quantile": [[242, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arr.min": [[278, "polars-expr-arr-min"]], "polars.Expr.bin.decode": [[283, "polars-expr-bin-decode"]], "polars.Expr.arr.sum": [[279, "polars-expr-arr-sum"]], "polars.Expr.arg_min": [[273, "polars-expr-arg-min"]], "polars.Expr.append": [[263, "polars-expr-append"]], "polars.DataFrame.var": [[224, "polars-dataframe-var"]], "polars.DataFrame.unstack": [[221, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.mean": [[238, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.__iter__": [[229, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arcsin": [[268, "polars-expr-arcsin"]], "polars.DataFrame.to_series": [[215, "polars-dataframe-to-series"]], "polars.dataframe.groupby.GroupBy.all": [[231, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.abs": [[256, "polars-expr-abs"]], "polars.Expr.alias": [[259, "polars-expr-alias"]], "polars.DataFrame.unique": [[219, "polars-dataframe-unique"]], "polars.Expr.and_": [[261, "polars-expr-and"]], "polars.DataFrame.to_pandas": [[214, "polars-dataframe-to-pandas"]], "polars.Expr.arccosh": [[267, "polars-expr-arccosh"]], "polars.Expr.arg_unique": [[276, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.max": [[237, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.bin.contains": [[282, "polars-expr-bin-contains"]], "polars.Expr.arg_max": [[272, "polars-expr-arg-max"]], "polars.DataFrame.unnest": [[220, "polars-dataframe-unnest"]], "polars.DataFrame.top_k": [[217, "polars-dataframe-top-k"]], "polars.Expr.agg_groups": [[258, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.median": [[239, "polars-dataframe-groupby-groupby-median"]], "Data types": [[253, "data-types"]], "Nested": [[253, "nested"]], "Other": [[253, "other"]], "polars.DataFrame.with_columns": [[227, "polars-dataframe-with-columns"]], "polars.Expr.add": [[257, "polars-expr-add"]], "polars.Expr.arcsinh": [[269, "polars-expr-arcsinh"]], "polars.Expr.all": [[260, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.sum": [[243, "polars-dataframe-groupby-groupby-sum"]], "DataFrame": [[250, "dataframe"]], "polars.dataframe.groupby.GroupBy.agg": [[230, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.min": [[240, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arr.unique": [[280, "polars-expr-arr-unique"]], "polars.Expr.arctan": [[270, "polars-expr-arctan"]], "polars.Expr.arg_sort": [[274, "polars-expr-arg-sort"]], "polars.DataFrame.width": [[226, "polars-dataframe-width"]], "polars.Expr.approx_unique": [[265, "polars-expr-approx-unique"]], "polars.Expr.arctanh": [[271, "polars-expr-arctanh"]], "polars.DataFrame.to_numpy": [[213, "polars-dataframe-to-numpy"]], "polars.DataFrame.to_struct": [[216, "polars-dataframe-to-struct"]], "polars.Expr.arr.max": [[277, "polars-expr-arr-max"]], "polars.dataframe.groupby.GroupBy.last": [[236, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.apply": [[232, "polars-dataframe-groupby-groupby-apply"]], "polars.dataframe.groupby.GroupBy.head": [[235, "polars-dataframe-groupby-groupby-head"]], "polars.DataFrame.upsample": [[223, "polars-dataframe-upsample"]], "polars.dataframe.groupby.GroupBy.n_unique": [[241, "polars-dataframe-groupby-groupby-n-unique"]], "polars.DataFrame.update": [[222, "polars-dataframe-update"]], "polars.Expr.backward_fill": [[281, "polars-expr-backward-fill"]], "polars.dataframe.groupby.GroupBy.tail": [[244, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arccos": [[266, "polars-expr-arccos"]], "polars.DataFrame.with_row_count": [[228, "polars-dataframe-with-row-count"]], "polars.DataFrame.vstack": [[225, "polars-dataframe-vstack"]], "polars.Expr.arg_true": [[275, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.count": [[233, "polars-dataframe-groupby-groupby-count"]], "Exceptions": [[254, "exceptions"]], "polars.dataframe.groupby.GroupBy.first": [[234, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.transpose": [[218, "polars-dataframe-transpose"]], "polars.Expr.apply": [[264, "polars-expr-apply"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[70, "polars.build_info"]], "collect_all() (in module polars)": [[71, "polars.collect_all"]], "concat() (in module polars)": [[72, "polars.concat"]], "enable_string_cache() (in module polars)": [[73, "polars.enable_string_cache"]], "arrowerror": [[74, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[75, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[76, "polars.exceptions.ComputeError"]], "duplicateerror": [[77, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[78, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[79, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[80, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[81, "polars.exceptions.PolarsPanicError"]], "rowserror": [[82, "polars.exceptions.RowsError"]], "schemaerror": [[83, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[84, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[85, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[86, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[87, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[88, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[89, "polars.from_dataframe"]], "from_dict() (in module polars)": [[90, "polars.from_dict"]], "from_dicts() (in module polars)": [[91, "polars.from_dicts"]], "from_numpy() (in module polars)": [[92, "polars.from_numpy"]], "from_pandas() (in module polars)": [[93, "polars.from_pandas"]], "from_records() (in module polars)": [[94, "polars.from_records"]], "from_repr() (in module polars)": [[95, "polars.from_repr"]], "get_index_type() (in module polars)": [[96, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[97, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[126, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[127, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[130, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[131, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[132, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[133, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[134, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[135, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[136, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[137, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[138, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[139, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[140, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[141, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[142, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[143, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[144, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[145, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[146, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[147, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[148, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[149, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[150, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[151, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[152, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[153, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[154, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[155, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[157, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[158, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[159, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[160, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[161, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[162, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[163, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[164, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[165, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[166, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[167, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[168, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[169, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[170, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[171, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[172, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[173, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[174, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[175, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[176, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[177, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[178, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[179, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[181, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[182, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[183, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[184, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[185, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[186, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[187, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[188, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[189, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[191, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[192, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[193, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[194, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[195, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[196, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[197, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[198, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[199, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[200, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[201, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[202, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[203, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[204, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[205, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[206, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[207, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[208, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[209, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[210, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[211, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[212, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[213, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[214, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[215, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[216, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[217, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[218, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[219, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[220, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[221, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[222, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[223, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[224, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[225, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[226, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[227, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[228, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[229, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[256, "polars.Expr.abs"]], "add() (polars.expr method)": [[257, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[258, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[259, "polars.Expr.alias"]], "all() (polars.expr method)": [[260, "polars.Expr.all"]], "and_() (polars.expr method)": [[261, "polars.Expr.and_"]], "any() (polars.expr method)": [[262, "polars.Expr.any"]], "append() (polars.expr method)": [[263, "polars.Expr.append"]], "apply() (polars.expr method)": [[264, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[265, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[266, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[267, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[268, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[269, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[270, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[271, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[272, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[273, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[274, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[275, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[276, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[277, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[278, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[279, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[280, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[281, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[282, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[283, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[284, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[285, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[286, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[287, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[288, "polars.Expr.cache"]], "cast() (polars.expr method)": [[289, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[290, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[291, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[292, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[293, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[294, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[295, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[296, "polars.Expr.cosh"]], "count() (polars.expr method)": [[297, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[298, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[299, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[300, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[301, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[302, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[303, "polars.Expr.cumulative_eval"]], "degrees() (polars.expr method)": [[304, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[305, "polars.Expr.diff"]], "dot() (polars.expr method)": [[306, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[307, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[308, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[309, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[310, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[311, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[312, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[313, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[314, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[315, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[316, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[317, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[318, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[319, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[320, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[321, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[322, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[323, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[324, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[327, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[328, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[329, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[330, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[331, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[332, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[334, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[335, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[336, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[337, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[338, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[339, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[340, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[341, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[342, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[343, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[344, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[345, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[346, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[347, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[348, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[349, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[350, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[351, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[352, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[353, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[354, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[355, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[356, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[357, "polars.Expr.exp"]], "explode() (polars.expr method)": [[358, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[359, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[360, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[361, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[362, "polars.Expr.filter"]], "first() (polars.expr method)": [[363, "polars.Expr.first"]], "flatten() (polars.expr method)": [[364, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[365, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[366, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[367, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[368, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[369, "polars.Expr.ge"]], "gt() (polars.expr method)": [[370, "polars.Expr.gt"]], "hash() (polars.expr method)": [[371, "polars.Expr.hash"]], "head() (polars.expr method)": [[372, "polars.Expr.head"]], "implode() (polars.expr method)": [[373, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[374, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[375, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[376, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[377, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[378, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[379, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[380, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[381, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[382, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[383, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[384, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[385, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[386, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[387, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[388, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[389, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[390, "polars.Expr.last"]], "le() (polars.expr method)": [[391, "polars.Expr.le"]], "len() (polars.expr method)": [[392, "polars.Expr.len"]], "limit() (polars.expr method)": [[393, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[394, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[395, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[396, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[397, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[398, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[399, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[400, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[401, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[402, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[403, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[404, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[405, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[406, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[407, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[408, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[409, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[410, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[411, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[412, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[413, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[414, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[415, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[416, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[417, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[418, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[419, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[420, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[421, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[422, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[423, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[424, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[425, "polars.Expr.log"]], "log10() (polars.expr method)": [[426, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[427, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[428, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[429, "polars.Expr.lt"]], "map() (polars.expr method)": [[430, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[431, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[432, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[433, "polars.Expr.max"]], "mean() (polars.expr method)": [[434, "polars.Expr.mean"]], "median() (polars.expr method)": [[435, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[436, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[437, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[438, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[439, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[440, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[441, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[442, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[443, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[444, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[445, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[446, "polars.Expr.min"]], "mod() (polars.expr method)": [[447, "polars.Expr.mod"]], "mode() (polars.expr method)": [[448, "polars.Expr.mode"]], "mul() (polars.expr method)": [[449, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[450, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[451, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[452, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[453, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[454, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[455, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[456, "polars.Expr.or_"]], "over() (polars.expr method)": [[457, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[458, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[459, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[460, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[461, "polars.Expr.prefix"]], "product() (polars.expr method)": [[462, "polars.Expr.product"]], "quantile() (polars.expr method)": [[463, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[464, "polars.Expr.radians"]], "rank() (polars.expr method)": [[465, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[466, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[467, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[468, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[469, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[470, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[471, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[472, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[473, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[474, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[475, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[476, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[477, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[478, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[479, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[480, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[481, "polars.Expr.round"]], "sample() (polars.expr method)": [[482, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[483, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[484, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[485, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[486, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[487, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[488, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[489, "polars.Expr.sign"]], "sin() (polars.expr method)": [[490, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[491, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[492, "polars.Expr.skew"]], "slice() (polars.expr method)": [[493, "polars.Expr.slice"]], "sort() (polars.expr method)": [[494, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[495, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[496, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[497, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[498, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[499, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[500, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[501, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[502, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[503, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[504, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[505, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[506, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[507, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[508, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[509, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[510, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[511, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[512, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[513, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[514, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[515, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[516, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[517, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[518, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[519, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[520, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[521, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[522, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[523, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[524, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[525, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[526, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[527, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[528, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[529, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[530, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[531, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[532, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[533, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[534, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[535, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[536, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[537, "polars.Expr.sum"]], "tail() (polars.expr method)": [[538, "polars.Expr.tail"]], "take() (polars.expr method)": [[539, "polars.Expr.take"]], "take_every() (polars.expr method)": [[540, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[541, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[542, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[543, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[544, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[545, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[546, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[547, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[548, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[549, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[550, "polars.Expr.var"]], "where() (polars.expr method)": [[551, "polars.Expr.where"]], "xor() (polars.expr method)": [[552, "polars.Expr.xor"]], "all() (in module polars)": [[553, "polars.all"]], "any() (in module polars)": [[554, "polars.any"]], "apply() (in module polars)": [[555, "polars.apply"]], "approx_unique() (in module polars)": [[556, "polars.approx_unique"]], "arange() (in module polars)": [[557, "polars.arange"]], "arg_sort_by() (in module polars)": [[558, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[559, "polars.arg_where"]], "avg() (in module polars)": [[560, "polars.avg"]], "coalesce() (in module polars)": [[561, "polars.coalesce"]], "col() (in module polars)": [[562, "polars.col"]], "concat_list() (in module polars)": [[563, "polars.concat_list"]], "concat_str() (in module polars)": [[564, "polars.concat_str"]], "corr() (in module polars)": [[565, "polars.corr"]], "count() (in module polars)": [[566, "polars.count"]], "cov() (in module polars)": [[567, "polars.cov"]], "cumfold() (in module polars)": [[568, "polars.cumfold"]], "cumreduce() (in module polars)": [[569, "polars.cumreduce"]], "cumsum() (in module polars)": [[570, "polars.cumsum"]], "date() (in module polars)": [[571, "polars.date"]], "date_range() (in module polars)": [[572, "polars.date_range"]], "datetime() (in module polars)": [[573, "polars.datetime"]], "duration() (in module polars)": [[574, "polars.duration"]], "element() (in module polars)": [[575, "polars.element"]], "exclude() (in module polars)": [[576, "polars.exclude"]], "first() (in module polars)": [[577, "polars.first"]], "fold() (in module polars)": [[578, "polars.fold"]], "format() (in module polars)": [[579, "polars.format"]], "from_epoch() (in module polars)": [[580, "polars.from_epoch"]], "groups() (in module polars)": [[581, "polars.groups"]], "head() (in module polars)": [[582, "polars.head"]], "implode() (in module polars)": [[583, "polars.implode"]], "int_range() (in module polars)": [[584, "polars.int_range"]], "int_ranges() (in module polars)": [[585, "polars.int_ranges"]], "lit() (in module polars)": [[586, "polars.lit"]], "map() (in module polars)": [[587, "polars.map"]], "max() (in module polars)": [[588, "polars.max"]], "mean() (in module polars)": [[589, "polars.mean"]], "median() (in module polars)": [[590, "polars.median"]], "min() (in module polars)": [[591, "polars.min"]], "n_unique() (in module polars)": [[592, "polars.n_unique"]], "ones() (in module polars)": [[593, "polars.ones"]], "quantile() (in module polars)": [[594, "polars.quantile"]], "reduce() (in module polars)": [[595, "polars.reduce"]], "repeat() (in module polars)": [[596, "polars.repeat"]], "rolling_corr() (in module polars)": [[597, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[598, "polars.rolling_cov"]], "select() (in module polars)": [[599, "polars.select"]], "sql_expr() (in module polars)": [[600, "polars.sql_expr"]], "std() (in module polars)": [[601, "polars.std"]], "struct() (in module polars)": [[602, "polars.struct"]], "sum() (in module polars)": [[603, "polars.sum"]], "tail() (in module polars)": [[604, "polars.tail"]], "time() (in module polars)": [[605, "polars.time"]], "time_range() (in module polars)": [[606, "polars.time_range"]], "var() (in module polars)": [[607, "polars.var"]], "when() (in module polars)": [[608, "polars.when"]], "zeros() (in module polars)": [[609, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[631, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[632, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[633, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[634, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[635, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[636, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[637, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[638, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[639, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[640, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[641, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[642, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[643, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[644, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[645, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[646, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[647, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[648, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[649, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[650, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[651, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[652, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[653, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[654, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[655, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[656, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[657, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[658, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[659, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[660, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[661, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[662, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[663, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[664, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[665, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[666, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[667, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[668, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[669, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[670, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[671, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[672, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[673, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[674, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[675, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[676, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[677, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[678, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[679, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[680, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[681, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[682, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[683, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[684, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[685, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[686, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[687, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[688, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[689, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[690, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[691, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[692, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[693, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[694, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[695, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[696, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[697, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[698, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[699, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[700, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[701, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[702, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[703, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[704, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[705, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[706, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[707, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[708, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[709, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[710, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[711, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[718, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[718, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[718, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[718, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[718, "polars.selectors.datetime"]], "ends_with() (in module polars.selectors)": [[718, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[718, "polars.selectors.first"]], "float() (in module polars.selectors)": [[718, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[718, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[718, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[718, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[718, "polars.selectors.matches"]], "module": [[718, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[718, "polars.selectors.numeric"]], "polars.selectors": [[718, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[718, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[718, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[718, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[718, "polars.selectors.temporal"]], "abs() (polars.series method)": [[720, "polars.Series.abs"]], "alias() (polars.series method)": [[721, "polars.Series.alias"]], "all() (polars.series method)": [[722, "polars.Series.all"]], "any() (polars.series method)": [[723, "polars.Series.any"]], "append() (polars.series method)": [[724, "polars.Series.append"]], "apply() (polars.series method)": [[725, "polars.Series.apply"]], "arccos() (polars.series method)": [[726, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[727, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[728, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[729, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[730, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[731, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[732, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[733, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[734, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[735, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[736, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[737, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[738, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[739, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[740, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[741, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[742, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[743, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[744, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[745, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[746, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[747, "polars.Series.cast"]], "cat (polars.series attribute)": [[748, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[749, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[750, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[751, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[752, "polars.Series.clear"]], "clip() (polars.series method)": [[753, "polars.Series.clip"]], "clip_max() (polars.series method)": [[754, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[755, "polars.Series.clip_min"]], "clone() (polars.series method)": [[756, "polars.Series.clone"]], "cos() (polars.series method)": [[757, "polars.Series.cos"]], "cosh() (polars.series method)": [[758, "polars.Series.cosh"]], "cummax() (polars.series method)": [[759, "polars.Series.cummax"]], "cummin() (polars.series method)": [[760, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[761, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[762, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[763, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[764, "polars.Series.cut"]], "describe() (polars.series method)": [[765, "polars.Series.describe"]], "diff() (polars.series method)": [[766, "polars.Series.diff"]], "dot() (polars.series method)": [[767, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[768, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[769, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[770, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[771, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[772, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[773, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[774, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[775, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[776, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[777, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[778, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[779, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[780, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[781, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[782, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[783, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[784, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[785, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[786, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[787, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[788, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[789, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[790, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[791, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[792, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[793, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[794, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[795, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[796, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[797, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[798, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[799, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[800, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[801, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[802, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[803, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[804, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[805, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[806, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[807, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[808, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[809, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[810, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[811, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[812, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[813, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[814, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[815, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[816, "polars.Series.dtype"]], "entropy() (polars.series method)": [[817, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[818, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[819, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[820, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[821, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[822, "polars.Series.exp"]], "explode() (polars.series method)": [[823, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[824, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[825, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[826, "polars.Series.fill_null"]], "filter() (polars.series method)": [[827, "polars.Series.filter"]], "flags (polars.series attribute)": [[828, "polars.Series.flags"]], "floor() (polars.series method)": [[829, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[830, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[831, "polars.Series.has_validity"]], "hash() (polars.series method)": [[832, "polars.Series.hash"]], "head() (polars.series method)": [[833, "polars.Series.head"]], "hist() (polars.series method)": [[834, "polars.Series.hist"]], "implode() (polars.series method)": [[835, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[836, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[837, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[838, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[839, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[840, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[841, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[842, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[843, "polars.Series.is_first"]], "is_float() (polars.series method)": [[844, "polars.Series.is_float"]], "is_in() (polars.series method)": [[845, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[846, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[847, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[848, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[849, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[850, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[851, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[852, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[853, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[854, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[855, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[856, "polars.Series.is_utf8"]], "item() (polars.series method)": [[857, "polars.Series.item"]], "kurtosis() (polars.series method)": [[858, "polars.Series.kurtosis"]], "len() (polars.series method)": [[859, "polars.Series.len"]], "limit() (polars.series method)": [[860, "polars.Series.limit"]], "list (polars.series attribute)": [[861, "polars.Series.list"]], "all() (polars.series.list method)": [[862, "polars.Series.list.all"]], "any() (polars.series.list method)": [[863, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[864, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[865, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[866, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[867, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[868, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[869, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[870, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[871, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[872, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[873, "polars.Series.list.first"]], "get() (polars.series.list method)": [[874, "polars.Series.list.get"]], "head() (polars.series.list method)": [[875, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[876, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[877, "polars.Series.list.join"]], "last() (polars.series.list method)": [[878, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[879, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[880, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[881, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[882, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[883, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[884, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[885, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[886, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[887, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[888, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[889, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[890, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[891, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[892, "polars.Series.list.unique"]], "log() (polars.series method)": [[893, "polars.Series.log"]], "log10() (polars.series method)": [[894, "polars.Series.log10"]], "log1p() (polars.series method)": [[895, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[896, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[897, "polars.Series.map_dict"]], "max() (polars.series method)": [[898, "polars.Series.max"]], "mean() (polars.series method)": [[899, "polars.Series.mean"]], "median() (polars.series method)": [[900, "polars.Series.median"]], "min() (polars.series method)": [[901, "polars.Series.min"]], "mode() (polars.series method)": [[902, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[903, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[904, "polars.Series.n_unique"]], "name (polars.series attribute)": [[905, "polars.Series.name"]], "nan_max() (polars.series method)": [[906, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[907, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[908, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[909, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[910, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[911, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[912, "polars.Series.peak_min"]], "product() (polars.series method)": [[913, "polars.Series.product"]], "qcut() (polars.series method)": [[914, "polars.Series.qcut"]], "quantile() (polars.series method)": [[915, "polars.Series.quantile"]], "rank() (polars.series method)": [[916, "polars.Series.rank"]], "rechunk() (polars.series method)": [[917, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[918, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[919, "polars.Series.rename"]], "reshape() (polars.series method)": [[920, "polars.Series.reshape"]], "reverse() (polars.series method)": [[921, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[922, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[923, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[924, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[925, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[926, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[927, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[928, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[929, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[930, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[931, "polars.Series.rolling_var"]], "round() (polars.series method)": [[932, "polars.Series.round"]], "sample() (polars.series method)": [[933, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[934, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[935, "polars.Series.series_equal"]], "set() (polars.series method)": [[936, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[937, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[938, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[939, "polars.Series.shape"]], "shift() (polars.series method)": [[940, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[941, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[942, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[943, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[944, "polars.Series.shuffle"]], "sign() (polars.series method)": [[945, "polars.Series.sign"]], "sin() (polars.series method)": [[946, "polars.Series.sin"]], "sinh() (polars.series method)": [[947, "polars.Series.sinh"]], "skew() (polars.series method)": [[948, "polars.Series.skew"]], "slice() (polars.series method)": [[949, "polars.Series.slice"]], "sort() (polars.series method)": [[950, "polars.Series.sort"]], "sqrt() (polars.series method)": [[951, "polars.Series.sqrt"]], "std() (polars.series method)": [[952, "polars.Series.std"]], "str (polars.series attribute)": [[953, "polars.Series.str"]], "concat() (polars.series.str method)": [[954, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[955, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[956, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[957, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[958, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[959, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[960, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[961, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[962, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[963, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[964, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[965, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[966, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[967, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[968, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[969, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[970, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[971, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[972, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[973, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[974, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[975, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[976, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[977, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[978, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[979, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[980, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[981, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[982, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[983, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[984, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[985, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[986, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[987, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[988, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[989, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[990, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[991, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[992, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[993, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[994, "polars.Series.sum"]], "tail() (polars.series method)": [[995, "polars.Series.tail"]], "take() (polars.series method)": [[996, "polars.Series.take"]], "take_every() (polars.series method)": [[997, "polars.Series.take_every"]], "tan() (polars.series method)": [[998, "polars.Series.tan"]], "tanh() (polars.series method)": [[999, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[1000, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[1001, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1002, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1003, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1004, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1005, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1006, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1007, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1008, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1009, "polars.Series.top_k"]], "unique() (polars.series method)": [[1010, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1011, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1012, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1013, "polars.Series.value_counts"]], "var() (polars.series method)": [[1014, "polars.Series.var"]], "view() (polars.series method)": [[1015, "polars.Series.view"]], "zip_with() (polars.series method)": [[1016, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1032, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1032, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1032, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1032, "polars.SQLContext.__init__"]]}})