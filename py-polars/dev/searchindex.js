Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 89, 115, 130, 131, 233, 251, 265, 630, 738, 1041], "refer": [0, 31, 99, 100, 103, 136, 251, 344, 347, 435, 469, 511, 530, 531, 532, 535, 630, 821, 824, 930, 996, 997, 998, 1001, 1041], "input": [0, 65, 91, 99, 100, 103, 131, 132, 143, 154, 182, 197, 204, 218, 228, 231, 251, 258, 265, 359, 379, 429, 444, 460, 501, 558, 559, 560, 561, 562, 563, 565, 566, 569, 570, 571, 572, 578, 579, 585, 586, 593, 594, 595, 597, 598, 599, 602, 603, 611, 614, 615, 616, 630, 641, 644, 654, 661, 687, 695, 700, 706, 710, 728, 738, 852, 908, 909, 911, 1041], "output": [0, 26, 28, 31, 32, 33, 34, 103, 131, 155, 156, 167, 177, 182, 184, 193, 197, 224, 228, 251, 260, 265, 433, 434, 443, 480, 482, 484, 486, 488, 494, 555, 563, 573, 581, 597, 619, 630, 641, 662, 663, 672, 676, 677, 687, 706, 709, 712, 728, 738, 1029, 1041], "seri": [0, 1, 2, 23, 57, 66, 67, 68, 69, 72, 88, 90, 93, 95, 118, 122, 131, 139, 147, 149, 151, 152, 156, 157, 160, 161, 163, 165, 173, 174, 178, 189, 190, 206, 210, 213, 216, 217, 232, 251, 264, 265, 267, 268, 269, 270, 271, 272, 275, 276, 283, 291, 292, 293, 297, 298, 307, 313, 315, 319, 323, 327, 329, 331, 336, 340, 341, 343, 348, 351, 361, 362, 368, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 399, 400, 401, 407, 410, 412, 419, 420, 423, 424, 425, 431, 433, 463, 468, 469, 470, 471, 472, 473, 475, 477, 483, 489, 490, 493, 496, 497, 504, 519, 524, 530, 531, 532, 535, 539, 545, 546, 547, 548, 554, 559, 561, 563, 564, 565, 567, 568, 574, 576, 577, 578, 581, 586, 587, 589, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 605, 607, 608, 611, 613, 614, 615, 617, 619, 620, 622, 630, 641, 658, 663, 711, 728, 1033, 1035, 1037, 1040, 1042, 1045, 1046, 1047, 1049], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 128, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 591, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 607, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 630, 641, 648, 650, 654, 655, 659, 662, 667, 668, 669, 670, 672, 676, 677, 681, 685, 692, 693, 694, 695, 701, 702, 703, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 737, 738, 752, 753, 763, 778, 779, 817, 848, 876, 877, 885, 928, 980, 992, 993, 1009, 1018, 1019, 1029, 1041, 1048, 1049], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 71, 72, 110, 111, 112, 113, 114, 115, 117, 122, 171, 183, 251, 365, 425, 619, 630, 641, 727, 731, 1048, 1049], "express": [0, 71, 119, 122, 124, 131, 132, 143, 145, 147, 154, 180, 184, 192, 197, 204, 218, 228, 231, 233, 251, 258, 260, 261, 262, 264, 265, 276, 289, 294, 295, 296, 299, 305, 309, 312, 314, 320, 333, 334, 337, 344, 354, 355, 359, 362, 364, 365, 369, 371, 372, 373, 377, 379, 383, 386, 391, 394, 395, 403, 406, 425, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 446, 448, 450, 452, 456, 457, 459, 460, 462, 463, 464, 465, 472, 488, 489, 490, 492, 494, 499, 501, 505, 506, 511, 512, 513, 514, 520, 521, 541, 542, 545, 551, 552, 554, 557, 558, 559, 560, 561, 562, 565, 566, 567, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 593, 594, 595, 596, 597, 598, 599, 602, 603, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 621, 622, 629, 641, 644, 648, 653, 654, 655, 658, 661, 681, 687, 690, 691, 692, 693, 695, 700, 706, 707, 710, 712, 728, 731, 738, 767, 768, 769, 777, 787, 814, 838, 852, 882, 885, 950, 957, 971, 972, 977, 978, 979, 980, 986, 987, 1041], "selector": [0, 615, 641], "extend": [0, 91, 251, 362, 630, 641, 737, 838, 1041], "function": [0, 31, 65, 66, 67, 68, 69, 89, 95, 99, 100, 103, 110, 120, 131, 136, 142, 149, 176, 183, 184, 215, 219, 222, 223, 233, 251, 261, 265, 305, 341, 356, 357, 358, 425, 433, 434, 460, 462, 477, 478, 479, 480, 481, 482, 484, 485, 486, 498, 549, 559, 561, 563, 565, 576, 577, 578, 586, 587, 589, 595, 597, 598, 602, 607, 615, 630, 641, 672, 676, 680, 703, 712, 728, 738, 777, 818, 832, 833, 834, 835, 848, 904, 928, 938, 952, 953, 959, 964, 1023, 1041, 1049], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 72, 73, 78, 79, 83, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 117, 118, 120, 121, 122, 124, 130, 131, 134, 144, 153, 154, 155, 156, 167, 168, 169, 171, 182, 183, 187, 192, 193, 194, 202, 209, 214, 215, 228, 230, 249, 251, 262, 265, 278, 279, 280, 281, 285, 290, 291, 313, 342, 351, 354, 355, 372, 373, 378, 385, 387, 394, 427, 432, 456, 457, 459, 460, 466, 469, 487, 488, 498, 511, 512, 530, 531, 532, 535, 549, 551, 552, 558, 565, 570, 593, 594, 596, 605, 608, 622, 630, 641, 646, 647, 655, 661, 662, 663, 680, 692, 693, 706, 728, 737, 738, 752, 753, 760, 762, 766, 770, 778, 783, 786, 828, 848, 906, 928, 930, 948, 949, 959, 964, 996, 997, 998, 1001, 1021, 1022, 1023, 1024, 1026, 1031, 1040, 1041, 1048], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 78, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 106, 107, 110, 111, 116, 117, 118, 121, 122, 131, 149, 153, 155, 156, 157, 168, 169, 209, 215, 217, 220, 251, 265, 290, 291, 292, 294, 295, 296, 315, 319, 323, 327, 329, 331, 336, 340, 343, 359, 374, 381, 383, 384, 412, 425, 435, 472, 525, 526, 527, 530, 549, 563, 565, 570, 580, 581, 582, 583, 585, 586, 593, 594, 595, 596, 605, 608, 618, 619, 622, 630, 641, 648, 653, 655, 662, 663, 667, 681, 691, 692, 693, 701, 728, 760, 762, 763, 767, 768, 769, 788, 792, 796, 803, 805, 808, 813, 817, 820, 846, 891, 904, 959, 991, 992, 993, 996, 1021, 1022, 1024, 1032, 1041, 1048], "config": [0, 65, 197, 228, 251, 583, 641, 687, 706, 728], "except": [0, 158, 170, 172, 207, 251, 585, 641, 668, 728, 731, 847, 874, 1011, 1022, 1031, 1041], "test": [0, 101, 103, 641, 664, 671, 728], "util": [0, 95, 589, 641, 655, 728], "sql": [0, 29, 50, 54, 101, 169, 251, 612, 641], "These": [1, 31, 128, 251, 348, 629, 818, 825], "allow": [1, 30, 31, 56, 78, 89, 110, 112, 113, 114, 115, 122, 124, 130, 167, 170, 171, 192, 193, 195, 214, 215, 220, 230, 251, 265, 337, 344, 347, 433, 471, 488, 530, 531, 532, 630, 667, 668, 672, 676, 692, 693, 701, 707, 728, 731, 738, 814, 821, 824, 932, 949, 951, 996, 997, 998, 1023, 1041, 1049], "you": [1, 13, 31, 35, 55, 65, 72, 88, 90, 91, 92, 94, 99, 100, 101, 103, 104, 106, 107, 108, 110, 117, 128, 131, 140, 144, 155, 156, 167, 180, 192, 193, 194, 211, 214, 219, 233, 251, 265, 294, 295, 296, 333, 334, 340, 344, 347, 365, 379, 406, 425, 433, 435, 471, 476, 478, 479, 480, 481, 482, 484, 485, 486, 515, 518, 530, 532, 576, 587, 605, 608, 622, 630, 648, 651, 662, 663, 664, 668, 671, 691, 693, 728, 731, 737, 738, 767, 768, 769, 810, 811, 817, 821, 824, 852, 885, 932, 937, 981, 984, 996, 998, 1022, 1031, 1041, 1049], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 123, 125, 1048], "custom": [1, 31, 66, 67, 68, 69, 123, 124, 125, 131, 233, 251, 265, 344, 347, 425, 433, 477, 563, 597, 630, 672, 712, 728, 738, 821, 824, 904, 938, 1041, 1049], "dedic": [1, 89, 167, 193, 251], "namespac": [1, 250, 629, 641, 727], "underli": [1, 74, 81, 88, 90, 91, 92, 94, 106, 107, 108, 119, 122, 124, 144, 167, 168, 193, 209, 251, 284, 313, 314, 318, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 340, 342, 349, 350, 351, 352, 471, 487, 505, 507, 630, 728, 731, 737, 755, 786, 787, 791, 795, 797, 798, 802, 804, 807, 809, 812, 815, 816, 817, 819, 826, 827, 828, 829, 932, 948, 959, 971, 973, 1017, 1022, 1041], "polar": [1, 251, 629, 630, 635, 641, 728, 731, 1041, 1048], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 93, 119, 120, 194, 215, 251, 630, 635, 641, 728, 1021, 1022, 1041, 1048], "without": [1, 6, 95, 102, 105, 109, 111, 115, 222, 223, 251, 265, 305, 341, 478, 479, 480, 481, 482, 484, 485, 486, 611, 630, 703, 728, 777, 783, 818, 848, 928, 1041], "requir": [1, 30, 31, 35, 65, 93, 117, 118, 132, 136, 192, 215, 218, 251, 281, 356, 357, 358, 427, 493, 530, 531, 532, 552, 608, 630, 644, 693, 695, 700, 728, 753, 833, 834, 835, 906, 958, 996, 997, 998, 1022, 1023, 1026, 1041], "subclass": [1, 251], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 143, 145, 147, 169, 170, 180, 184, 192, 197, 228, 251, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 626, 630, 631, 632, 635, 636, 637, 638, 654, 656, 667, 668, 682, 687, 690, 706, 728, 777, 787, 839, 876, 877, 882, 885, 889, 899, 902, 957, 971, 975, 994, 1012, 1041], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 72, 73, 80, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 115, 117, 118, 120, 122, 128, 130, 131, 132, 136, 140, 142, 145, 149, 154, 155, 156, 167, 169, 170, 171, 176, 177, 182, 184, 192, 193, 194, 197, 198, 204, 210, 215, 218, 223, 224, 228, 231, 251, 261, 301, 303, 304, 310, 311, 341, 348, 353, 355, 356, 357, 358, 379, 381, 383, 384, 385, 387, 388, 389, 392, 397, 425, 435, 457, 460, 469, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 495, 498, 500, 501, 513, 515, 518, 519, 530, 532, 543, 559, 560, 561, 562, 566, 569, 571, 572, 573, 578, 579, 581, 598, 599, 602, 603, 611, 614, 615, 616, 621, 623, 624, 626, 629, 630, 631, 632, 635, 636, 637, 638, 641, 644, 651, 656, 661, 662, 663, 664, 667, 668, 671, 672, 676, 677, 681, 684, 687, 688, 692, 693, 695, 700, 703, 706, 707, 710, 728, 731, 735, 737, 775, 776, 818, 825, 831, 832, 833, 834, 835, 845, 852, 856, 859, 860, 862, 863, 864, 865, 872, 876, 904, 930, 934, 938, 944, 961, 964, 979, 981, 984, 985, 996, 998, 1010, 1022, 1023, 1031, 1033, 1035, 1037, 1041, 1042, 1045, 1046, 1047, 1049], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 71, 88, 91, 93, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 124, 137, 140, 146, 158, 163, 165, 167, 168, 171, 172, 176, 179, 180, 187, 192, 193, 194, 203, 207, 212, 214, 220, 222, 224, 251, 262, 263, 264, 282, 299, 305, 311, 312, 359, 364, 370, 374, 376, 378, 381, 384, 388, 389, 391, 395, 406, 412, 422, 425, 433, 434, 451, 458, 464, 469, 474, 493, 499, 501, 506, 512, 513, 514, 517, 520, 521, 523, 529, 542, 555, 560, 570, 578, 579, 581, 585, 587, 592, 607, 614, 615, 616, 621, 630, 635, 641, 648, 651, 653, 655, 657, 672, 676, 681, 691, 694, 701, 707, 728, 731, 777, 779, 783, 785, 847, 854, 869, 874, 885, 891, 901, 904, 930, 965, 972, 978, 979, 980, 983, 986, 987, 989, 995, 1011, 1041, 1048, 1049], "support": [1, 30, 31, 35, 72, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 106, 107, 111, 119, 124, 128, 130, 167, 168, 169, 193, 194, 203, 204, 211, 215, 251, 420, 460, 499, 501, 524, 570, 630, 635, 667, 694, 695, 728, 731, 899, 965, 990, 1023, 1041, 1048], "target": [1, 29, 30, 31, 70, 251, 511, 530, 531, 532, 581, 977, 996, 997, 998], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 128, 130, 131, 132, 136, 140, 141, 142, 144, 149, 154, 155, 156, 157, 161, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 192, 193, 194, 195, 197, 201, 203, 205, 206, 209, 211, 214, 215, 218, 219, 220, 222, 223, 224, 225, 226, 228, 229, 233, 234, 250, 251, 261, 264, 265, 266, 275, 281, 288, 289, 291, 292, 299, 305, 312, 313, 325, 333, 334, 337, 340, 341, 344, 347, 351, 355, 361, 377, 378, 379, 383, 395, 405, 406, 407, 411, 412, 421, 425, 426, 427, 430, 431, 433, 439, 440, 441, 442, 443, 444, 454, 455, 457, 460, 466, 469, 470, 471, 472, 473, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 490, 492, 493, 494, 499, 500, 501, 511, 516, 517, 522, 523, 529, 530, 532, 533, 538, 550, 552, 553, 554, 555, 559, 561, 564, 571, 574, 576, 578, 581, 586, 587, 589, 595, 598, 602, 608, 611, 615, 619, 630, 641, 642, 644, 645, 648, 651, 653, 655, 661, 662, 663, 665, 667, 668, 672, 676, 677, 681, 684, 687, 690, 691, 692, 693, 694, 695, 700, 701, 703, 706, 707, 708, 709, 712, 713, 727, 728, 731, 737, 738, 747, 753, 759, 762, 763, 777, 783, 785, 786, 787, 798, 810, 811, 814, 817, 818, 821, 824, 828, 832, 837, 844, 845, 848, 853, 858, 859, 861, 866, 868, 870, 871, 873, 884, 885, 886, 890, 891, 900, 905, 906, 910, 912, 913, 914, 915, 917, 918, 920, 921, 923, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 939, 940, 942, 945, 946, 947, 949, 952, 953, 954, 957, 958, 959, 960, 965, 966, 968, 977, 982, 983, 988, 989, 995, 996, 998, 999, 1004, 1005, 1009, 1010, 1017, 1019, 1021, 1022, 1023, 1025, 1026, 1028, 1030, 1031, 1041, 1048, 1049], "featur": [1, 35, 39, 56, 70, 251], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 75, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 132, 140, 142, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 180, 182, 183, 184, 192, 193, 194, 195, 203, 204, 205, 206, 207, 209, 214, 215, 218, 219, 220, 222, 223, 224, 225, 233, 234, 250, 251, 258, 261, 263, 264, 265, 266, 276, 289, 299, 305, 312, 314, 324, 337, 341, 344, 348, 356, 357, 358, 361, 374, 377, 379, 392, 398, 406, 409, 420, 424, 425, 430, 433, 435, 439, 442, 444, 460, 469, 471, 473, 476, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 494, 495, 498, 499, 500, 501, 503, 505, 506, 511, 512, 514, 516, 517, 519, 520, 522, 523, 524, 527, 529, 530, 531, 532, 535, 538, 555, 556, 559, 561, 564, 567, 570, 571, 573, 574, 576, 577, 578, 581, 587, 596, 598, 602, 608, 609, 610, 611, 613, 615, 619, 620, 621, 630, 644, 648, 651, 653, 655, 661, 662, 663, 666, 667, 668, 670, 672, 676, 677, 681, 691, 692, 693, 694, 695, 696, 700, 701, 703, 704, 709, 712, 713, 728, 731, 736, 737, 738, 777, 785, 787, 797, 814, 818, 821, 825, 832, 833, 834, 835, 837, 845, 846, 847, 848, 851, 853, 855, 861, 866, 867, 868, 870, 871, 872, 874, 877, 885, 888, 899, 903, 904, 928, 930, 932, 934, 937, 945, 947, 949, 950, 951, 952, 953, 954, 960, 961, 964, 965, 968, 971, 972, 977, 978, 980, 982, 983, 985, 986, 988, 989, 990, 993, 995, 996, 997, 998, 1001, 1004, 1011, 1017, 1022, 1023, 1029, 1030, 1031, 1041, 1048, 1049], "primarili": 1, "intend": [1, 581], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 50, 51, 52, 53, 55, 56, 65, 72, 89, 91, 92, 94, 96, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 126, 131, 138, 140, 145, 146, 149, 154, 155, 156, 163, 165, 167, 168, 170, 174, 176, 179, 180, 182, 183, 184, 192, 193, 194, 195, 197, 204, 205, 206, 211, 212, 213, 214, 215, 219, 220, 222, 223, 224, 225, 228, 231, 233, 251, 259, 265, 266, 276, 284, 285, 289, 292, 305, 310, 311, 340, 344, 347, 351, 353, 356, 357, 358, 364, 365, 378, 379, 392, 406, 425, 433, 435, 438, 460, 469, 471, 473, 476, 478, 479, 480, 481, 482, 484, 485, 486, 488, 490, 493, 494, 498, 500, 501, 503, 505, 507, 508, 509, 511, 512, 513, 515, 516, 520, 522, 524, 526, 528, 530, 531, 532, 535, 556, 559, 560, 561, 562, 563, 564, 570, 572, 573, 576, 578, 579, 581, 587, 589, 596, 598, 599, 602, 603, 605, 608, 609, 610, 611, 613, 614, 615, 616, 619, 620, 622, 629, 630, 640, 641, 648, 650, 651, 656, 657, 661, 662, 663, 664, 668, 670, 671, 676, 687, 693, 695, 696, 701, 703, 704, 706, 710, 712, 728, 731, 738, 755, 756, 763, 777, 778, 817, 821, 824, 828, 831, 833, 834, 835, 839, 840, 845, 848, 852, 872, 885, 904, 911, 928, 930, 932, 934, 937, 949, 952, 953, 954, 958, 960, 964, 968, 971, 973, 974, 977, 978, 979, 981, 982, 986, 988, 990, 992, 996, 997, 998, 1001, 1012, 1018, 1020, 1021, 1022, 1023, 1030, 1031, 1041, 1048, 1049], "librari": [1, 74, 81, 433, 630, 1049], "author": 1, "domain": [1, 512, 978], "specif": [1, 26, 30, 31, 88, 90, 92, 94, 99, 101, 102, 106, 107, 111, 121, 122, 167, 251, 344, 347, 477, 530, 531, 532, 535, 630, 728, 731, 821, 824, 938, 996, 997, 998, 1001, 1041, 1049], "capabl": [1, 31, 251], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 91, 99, 100, 101, 102, 103, 110, 111, 117, 123, 125, 132, 140, 144, 154, 155, 156, 170, 214, 218, 220, 224, 251, 261, 337, 341, 344, 348, 362, 379, 381, 384, 385, 387, 388, 389, 425, 444, 466, 476, 478, 479, 480, 481, 482, 484, 485, 486, 519, 565, 621, 630, 644, 651, 653, 662, 663, 668, 692, 693, 700, 701, 709, 728, 737, 814, 818, 821, 825, 838, 852, 856, 860, 862, 863, 864, 865, 904, 937, 952, 985, 1041, 1049], "mai": [1, 30, 39, 72, 88, 90, 91, 92, 94, 99, 102, 104, 106, 107, 111, 112, 115, 131, 142, 144, 155, 156, 170, 200, 201, 215, 222, 223, 224, 251, 265, 305, 312, 313, 325, 337, 341, 348, 419, 424, 425, 433, 443, 478, 479, 480, 481, 482, 484, 485, 486, 491, 492, 530, 532, 576, 577, 581, 587, 607, 630, 662, 663, 668, 672, 689, 690, 693, 703, 708, 712, 728, 737, 738, 777, 785, 786, 798, 814, 818, 825, 832, 848, 898, 903, 928, 956, 957, 996, 998, 1041, 1049], "exist": [1, 29, 30, 31, 65, 102, 111, 122, 228, 251, 283, 286, 287, 314, 706, 728, 787], "belong": [1, 155, 251, 662, 728], "core": [1, 215, 251, 1049], "cannot": [1, 89, 99, 100, 103, 104, 117, 126, 131, 194, 195, 233, 251, 284, 435, 488, 507, 526, 540, 630, 691, 728, 738, 755, 949, 973, 992, 1041], "overrid": [1, 31, 88, 90, 91, 92, 93, 94, 99, 106, 107, 119, 120, 124, 126, 251, 435, 630, 728, 911, 1041], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 88, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 124, 125, 128, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 163, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 265, 283, 285, 286, 287, 291, 306, 309, 315, 337, 340, 341, 344, 347, 348, 359, 361, 365, 367, 371, 377, 379, 386, 401, 402, 409, 410, 412, 420, 423, 425, 434, 435, 443, 445, 446, 448, 460, 462, 464, 466, 472, 474, 476, 478, 479, 480, 481, 482, 484, 485, 486, 492, 493, 500, 501, 539, 540, 542, 545, 557, 558, 560, 562, 563, 564, 568, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 595, 597, 599, 600, 601, 603, 604, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 620, 630, 636, 644, 648, 649, 650, 651, 653, 654, 655, 658, 660, 661, 662, 663, 665, 667, 668, 676, 677, 681, 683, 684, 685, 688, 690, 691, 692, 693, 694, 695, 700, 701, 702, 703, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 734, 760, 762, 778, 779, 788, 814, 817, 818, 821, 824, 825, 837, 840, 881, 882, 891, 904, 911, 920, 921, 928, 933, 952, 953, 1005, 1007, 1018, 1019, 1020, 1041, 1045, 1048, 1049], "dt": [1, 65, 156, 251, 581, 583, 638, 663, 728, 731, 1047], "attempt": [1, 214, 251, 581], "do": [1, 31, 65, 71, 72, 110, 144, 155, 156, 170, 184, 209, 219, 222, 251, 305, 406, 460, 517, 523, 529, 605, 608, 622, 630, 648, 653, 662, 663, 668, 672, 681, 691, 692, 693, 728, 731, 737, 777, 885, 983, 989, 995, 1022, 1031, 1041], "so": [1, 56, 101, 110, 126, 153, 155, 156, 184, 251, 276, 289, 379, 409, 425, 517, 523, 529, 630, 662, 663, 728, 888, 983, 989, 995], "rais": [1, 14, 18, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 117, 118, 184, 192, 251, 284, 340, 424, 443, 505, 507, 519, 530, 531, 532, 535, 596, 755, 817, 903, 971, 973, 985, 996, 997, 998, 1001, 1022, 1031, 1041], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 71, 74, 78, 79, 81, 88, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 122, 124, 131, 133, 134, 142, 145, 147, 149, 155, 156, 167, 168, 170, 180, 184, 190, 192, 209, 214, 222, 228, 233, 251, 260, 261, 265, 284, 290, 294, 295, 296, 300, 301, 302, 303, 304, 305, 314, 340, 344, 351, 362, 364, 365, 371, 391, 403, 406, 409, 424, 425, 433, 434, 444, 465, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 505, 507, 512, 530, 531, 532, 535, 545, 551, 559, 561, 565, 567, 570, 578, 581, 584, 589, 593, 594, 596, 598, 602, 605, 607, 608, 611, 614, 615, 619, 621, 622, 630, 641, 646, 647, 648, 653, 655, 658, 662, 663, 668, 672, 681, 691, 706, 707, 712, 728, 731, 738, 755, 760, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 787, 817, 821, 828, 832, 838, 861, 882, 885, 888, 903, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 952, 953, 971, 973, 978, 996, 997, 998, 1001, 1022, 1031, 1041, 1048], "attributeerror": 1, "howev": [1, 91, 142, 214, 251, 581, 832, 1041], "can": [1, 13, 31, 38, 55, 65, 79, 91, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 124, 126, 128, 131, 132, 133, 141, 149, 154, 155, 156, 163, 165, 180, 184, 194, 197, 204, 214, 218, 219, 222, 228, 233, 251, 265, 289, 301, 304, 305, 333, 334, 337, 340, 348, 362, 378, 379, 406, 425, 443, 451, 460, 466, 471, 478, 479, 480, 481, 482, 484, 485, 486, 488, 490, 493, 494, 495, 498, 501, 514, 517, 523, 529, 530, 532, 555, 566, 570, 581, 587, 589, 619, 621, 629, 630, 640, 644, 648, 653, 662, 663, 687, 695, 700, 706, 708, 728, 731, 738, 777, 810, 811, 814, 817, 818, 825, 838, 852, 885, 904, 916, 928, 932, 952, 953, 954, 958, 961, 964, 980, 983, 989, 995, 996, 998, 1041, 1048], "other": [1, 18, 31, 55, 99, 100, 103, 110, 117, 118, 140, 144, 150, 169, 170, 176, 177, 192, 194, 197, 223, 226, 228, 249, 251, 258, 262, 264, 276, 294, 295, 296, 309, 354, 355, 369, 372, 373, 379, 383, 394, 401, 405, 411, 426, 432, 435, 439, 442, 450, 452, 456, 457, 459, 501, 541, 549, 551, 558, 559, 560, 561, 562, 569, 571, 572, 578, 579, 581, 598, 599, 602, 603, 611, 614, 615, 616, 630, 641, 651, 667, 668, 676, 677, 687, 703, 706, 707, 728, 731, 737, 767, 768, 769, 781, 859, 880, 884, 890, 905, 951, 1024, 1032, 1040, 1041], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 70, 72, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 122, 124, 128, 131, 140, 155, 156, 167, 169, 170, 174, 193, 194, 206, 211, 213, 214, 224, 251, 259, 265, 276, 289, 293, 294, 295, 296, 337, 359, 368, 460, 471, 478, 479, 480, 481, 482, 484, 485, 486, 553, 581, 630, 648, 651, 662, 663, 664, 667, 668, 671, 728, 764, 767, 768, 769, 778, 814, 843, 861, 928, 932, 1017, 1020, 1041, 1048, 1049], "gener": [1, 101, 119, 120, 121, 122, 124, 136, 184, 195, 212, 214, 219, 251, 488, 494, 565, 581, 593, 594, 608, 619, 630, 728, 949, 960, 1018, 1041, 1049], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 630, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 760, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 876, 877, 883, 884, 885, 886, 889, 890, 891, 893, 898, 899, 900, 902, 904, 905, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 929, 930, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 960, 961, 962, 963, 965, 966, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1048, 1049], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 120, 121, 122, 124, 128, 183, 219, 251, 258, 462, 512, 558, 597, 630, 680, 728, 731, 978, 1049], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 119, 1048], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 71, 133, 134, 137, 144, 158, 160, 161, 172, 173, 174, 175, 176, 178, 181, 182, 184, 186, 187, 189, 190, 195, 200, 202, 203, 205, 206, 207, 212, 219, 221, 224, 225, 226, 229, 230, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 282, 288, 289, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 630, 644, 645, 647, 648, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 728, 737, 738, 760, 770, 841, 849, 910, 911, 922, 925, 926, 931, 952, 953, 954, 966, 1028, 1032, 1041], "_expr": [1, 67], "hello": [1, 18, 51, 54, 517, 523, 529, 891, 983, 989, 995], "return": [1, 9, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 80, 82, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 109, 110, 111, 121, 127, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 149, 153, 154, 155, 156, 158, 160, 166, 167, 168, 169, 171, 172, 179, 180, 182, 183, 184, 192, 193, 194, 195, 207, 208, 214, 215, 218, 219, 220, 224, 228, 230, 233, 236, 240, 245, 251, 261, 263, 267, 268, 269, 270, 271, 272, 275, 276, 283, 285, 286, 287, 288, 297, 298, 307, 312, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 346, 348, 349, 350, 352, 361, 375, 379, 381, 382, 383, 384, 385, 387, 388, 389, 396, 399, 400, 402, 407, 409, 410, 412, 423, 424, 431, 435, 444, 446, 451, 462, 468, 472, 473, 475, 488, 489, 495, 496, 497, 504, 506, 508, 510, 511, 512, 514, 515, 516, 518, 519, 522, 524, 525, 526, 527, 538, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 558, 559, 563, 565, 566, 567, 570, 580, 581, 582, 583, 589, 591, 593, 594, 596, 597, 605, 608, 611, 614, 617, 618, 619, 621, 622, 630, 644, 646, 648, 651, 652, 653, 655, 662, 663, 664, 670, 671, 672, 680, 681, 691, 692, 693, 698, 699, 700, 701, 706, 709, 715, 719, 724, 728, 731, 734, 735, 736, 738, 745, 746, 748, 749, 754, 756, 759, 766, 778, 779, 785, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 822, 823, 825, 826, 827, 829, 832, 837, 845, 847, 848, 854, 856, 857, 859, 860, 862, 863, 864, 865, 869, 871, 874, 878, 879, 881, 886, 888, 889, 891, 902, 903, 910, 911, 916, 928, 934, 935, 936, 937, 949, 950, 951, 953, 961, 970, 971, 972, 974, 976, 977, 978, 980, 981, 982, 984, 985, 988, 990, 991, 992, 993, 1004, 1011, 1013, 1025, 1027, 1028, 1032, 1041, 1048, 1049], "lit": [1, 379, 391, 576, 587, 605, 608, 621, 622, 630, 840, 1041], "alia": [1, 12, 65, 67, 69, 155, 156, 172, 221, 228, 251, 258, 262, 265, 283, 285, 286, 287, 288, 294, 295, 296, 300, 301, 302, 303, 304, 308, 312, 313, 314, 315, 318, 319, 320, 321, 323, 325, 326, 327, 329, 331, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 354, 355, 365, 367, 369, 372, 373, 377, 379, 382, 383, 391, 394, 395, 396, 403, 405, 406, 411, 426, 432, 434, 435, 447, 450, 452, 456, 457, 459, 461, 463, 464, 469, 471, 489, 505, 506, 509, 511, 512, 515, 518, 524, 526, 527, 528, 539, 540, 541, 542, 549, 550, 551, 557, 558, 559, 561, 563, 565, 568, 569, 571, 572, 576, 577, 578, 581, 583, 584, 587, 588, 597, 598, 602, 607, 608, 614, 615, 619, 621, 630, 662, 663, 665, 671, 702, 706, 728, 786, 788, 794, 814, 817, 821, 823, 828, 874, 885, 911, 977, 978, 992, 993, 1041], "hi": [1, 466, 630], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 517, 523, 529, 536, 891, 983, 989, 995, 1002], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 98, 99, 100, 101, 102, 104, 108, 110, 115, 121, 131, 166, 170, 180, 183, 192, 203, 216, 221, 224, 251, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 291, 293, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 366, 368, 370, 374, 376, 377, 378, 380, 381, 383, 384, 386, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 449, 451, 453, 454, 455, 458, 459, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 510, 511, 512, 513, 514, 516, 517, 519, 522, 523, 525, 526, 527, 529, 530, 533, 534, 536, 537, 539, 540, 542, 543, 546, 547, 548, 550, 552, 553, 554, 555, 556, 559, 561, 563, 564, 566, 567, 568, 570, 571, 573, 574, 575, 576, 577, 578, 581, 583, 585, 586, 587, 588, 589, 591, 595, 598, 600, 601, 602, 604, 607, 608, 612, 613, 614, 615, 617, 620, 630, 649, 665, 668, 680, 694, 702, 707, 709, 728, 731, 752, 753, 817, 876, 877, 885, 952, 953, 965, 980, 996, 1012, 1041, 1048], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 47, 50, 51, 52, 54, 56, 57, 65, 66, 67, 68, 69, 72, 73, 85, 88, 90, 91, 92, 93, 94, 95, 110, 115, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 195, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 630, 644, 646, 648, 650, 651, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 687, 689, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 752, 753, 759, 760, 762, 763, 764, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 854, 856, 859, 860, 862, 863, 864, 865, 869, 871, 876, 877, 883, 884, 885, 886, 889, 890, 891, 893, 898, 899, 900, 902, 904, 905, 910, 911, 916, 924, 925, 926, 928, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 956, 960, 961, 962, 963, 965, 966, 967, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1011, 1012, 1013, 1014, 1015, 1018, 1019, 1020, 1024, 1025, 1026, 1027, 1028, 1029, 1032, 1041, 1048], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 103, 110, 115, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 261, 265, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 313, 314, 315, 318, 319, 321, 322, 324, 330, 332, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 450, 451, 452, 456, 457, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 500, 501, 502, 505, 508, 509, 511, 512, 513, 515, 518, 520, 524, 525, 526, 527, 528, 531, 535, 539, 540, 541, 542, 544, 545, 546, 550, 553, 554, 555, 557, 558, 563, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 584, 585, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 605, 607, 608, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 630, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 734, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 760, 762, 763, 764, 765, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 787, 788, 791, 792, 794, 795, 797, 799, 800, 801, 803, 805, 806, 807, 809, 813, 815, 817, 818, 819, 821, 823, 824, 825, 827, 828, 832, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 872, 873, 883, 884, 885, 886, 889, 890, 893, 898, 899, 900, 902, 904, 905, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 937, 938, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 960, 962, 963, 964, 965, 966, 968, 974, 975, 977, 978, 979, 981, 984, 986, 990, 994, 997, 1001, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1041, 1048, 1049], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 122, 124, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 630, 644, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 760, 763, 764, 765, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 871, 873, 876, 877, 883, 884, 885, 886, 888, 889, 890, 893, 898, 899, 900, 902, 904, 905, 910, 912, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 977, 979, 980, 986, 992, 993, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1048, 1049], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 110, 115, 116, 117, 118, 121, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 262, 263, 264, 265, 266, 273, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 292, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 312, 314, 315, 319, 320, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 498, 499, 500, 501, 502, 504, 506, 509, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 523, 524, 526, 527, 528, 529, 530, 532, 533, 534, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 600, 601, 602, 604, 607, 611, 612, 613, 614, 615, 617, 619, 620, 621, 630, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 734, 737, 738, 740, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 763, 764, 765, 766, 770, 771, 774, 775, 776, 777, 778, 779, 780, 781, 785, 787, 789, 790, 793, 795, 800, 801, 807, 809, 810, 811, 816, 817, 818, 819, 822, 825, 827, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 854, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 873, 883, 884, 885, 886, 889, 890, 891, 893, 898, 899, 900, 902, 904, 905, 907, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 960, 962, 964, 965, 966, 967, 968, 970, 972, 977, 978, 979, 980, 983, 984, 985, 986, 987, 989, 992, 993, 995, 996, 998, 999, 1000, 1002, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1041, 1048, 1049], "column_0": [1, 131, 219, 251], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 168, 251, 526, 527, 992, 993], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 66, 67, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 110, 120, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 583, 584, 585, 586, 587, 588, 589, 591, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 607, 611, 612, 613, 614, 615, 616, 617, 620, 621, 630, 662, 663, 702, 703, 709, 712, 715, 724, 728, 731, 752, 753, 763, 817, 876, 877, 885, 980, 987, 992, 993, 1019, 1041, 1049], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 71, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 110, 111, 120, 121, 122, 124, 135, 138, 141, 142, 143, 147, 152, 154, 155, 160, 167, 179, 182, 192, 193, 194, 197, 204, 210, 211, 219, 220, 221, 222, 228, 231, 232, 251, 259, 281, 306, 361, 367, 376, 433, 444, 445, 460, 466, 472, 473, 477, 478, 479, 480, 481, 482, 484, 485, 486, 500, 501, 512, 525, 539, 540, 545, 549, 565, 566, 570, 571, 584, 592, 594, 596, 612, 614, 615, 619, 630, 649, 650, 652, 654, 661, 662, 676, 687, 695, 701, 702, 706, 707, 710, 711, 728, 731, 753, 765, 778, 832, 837, 841, 844, 848, 849, 859, 928, 934, 938, 939, 940, 941, 942, 943, 945, 946, 947, 950, 978, 991, 1012, 1021, 1024, 1041, 1049], "with_row_count": [1, 251, 435, 478, 479, 481, 484, 485, 486, 630, 728, 953, 1041], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 72, 77, 88, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 118, 119, 120, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 143, 148, 151, 153, 154, 166, 167, 169, 170, 176, 177, 182, 184, 188, 192, 193, 194, 196, 197, 204, 210, 212, 214, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 251, 260, 265, 283, 285, 286, 287, 359, 379, 391, 425, 434, 443, 445, 460, 464, 501, 512, 539, 540, 542, 559, 560, 561, 562, 564, 566, 569, 570, 571, 572, 573, 575, 578, 579, 581, 585, 591, 592, 598, 599, 602, 603, 606, 608, 609, 610, 611, 614, 615, 616, 617, 619, 630, 644, 649, 650, 651, 654, 661, 667, 668, 676, 677, 684, 686, 687, 695, 700, 701, 702, 703, 706, 708, 709, 710, 728, 731, 734, 766, 778, 904, 928, 933, 977, 978, 986, 1005, 1007, 1018, 1019, 1023, 1041, 1048, 1049], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 97, 99, 100, 110, 131, 133, 144, 155, 158, 167, 168, 172, 193, 194, 195, 205, 207, 208, 211, 213, 225, 236, 245, 251, 288, 305, 308, 313, 314, 321, 346, 351, 362, 375, 396, 404, 405, 410, 423, 425, 461, 462, 472, 484, 486, 488, 498, 503, 520, 523, 526, 527, 529, 532, 544, 546, 550, 551, 556, 558, 573, 581, 589, 591, 605, 608, 609, 610, 613, 617, 620, 622, 630, 646, 648, 662, 664, 671, 696, 698, 699, 704, 715, 724, 728, 731, 737, 759, 766, 777, 780, 786, 787, 794, 823, 828, 838, 847, 874, 883, 884, 889, 902, 904, 924, 945, 947, 949, 964, 968, 986, 992, 993, 998, 1011, 1013, 1020, 1025, 1030, 1041, 1048, 1049], "filter": [1, 66, 102, 110, 111, 115, 140, 163, 164, 165, 233, 251, 509, 528, 557, 587, 630, 651, 655, 665, 712, 728, 731, 952, 1041], "col": [1, 12, 28, 31, 65, 66, 67, 68, 92, 94, 110, 120, 122, 131, 143, 147, 154, 155, 156, 164, 166, 171, 180, 183, 192, 197, 204, 221, 228, 231, 251, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 377, 378, 379, 380, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 449, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 533, 534, 536, 537, 538, 539, 540, 541, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 563, 567, 569, 571, 572, 576, 577, 578, 583, 586, 587, 588, 589, 590, 595, 598, 602, 606, 607, 615, 621, 630, 647, 654, 658, 661, 662, 663, 665, 670, 680, 687, 695, 702, 706, 707, 710, 728, 731, 752, 753, 763, 814, 817, 876, 877, 885, 934, 952, 953, 980, 996, 1041, 1049], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 47, 50, 55, 65, 66, 67, 69, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 131, 133, 134, 136, 137, 138, 141, 145, 146, 149, 150, 152, 153, 154, 155, 157, 161, 166, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 193, 194, 195, 196, 197, 201, 203, 204, 205, 206, 212, 213, 214, 215, 216, 219, 222, 224, 225, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 257, 259, 262, 267, 268, 269, 270, 271, 272, 275, 276, 277, 290, 293, 295, 296, 297, 298, 300, 305, 306, 307, 310, 311, 322, 326, 327, 329, 330, 336, 342, 343, 354, 355, 356, 357, 358, 360, 362, 363, 364, 365, 368, 369, 372, 373, 374, 378, 381, 384, 385, 387, 388, 389, 391, 392, 394, 399, 400, 403, 406, 409, 416, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 449, 450, 452, 454, 455, 456, 457, 458, 459, 461, 462, 463, 466, 467, 468, 469, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 495, 496, 497, 498, 502, 503, 511, 512, 530, 532, 538, 541, 543, 547, 548, 549, 551, 556, 557, 559, 565, 566, 567, 568, 569, 571, 573, 575, 576, 581, 582, 584, 587, 593, 594, 600, 601, 605, 606, 607, 608, 612, 618, 619, 620, 621, 622, 630, 646, 647, 650, 652, 656, 657, 661, 662, 667, 670, 675, 679, 681, 682, 686, 687, 690, 691, 693, 695, 696, 704, 706, 707, 708, 710, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 739, 740, 741, 742, 743, 744, 745, 747, 749, 760, 764, 766, 771, 772, 777, 778, 779, 781, 795, 799, 800, 801, 802, 803, 804, 805, 806, 807, 812, 813, 819, 820, 831, 833, 834, 835, 839, 843, 846, 848, 856, 858, 860, 862, 863, 864, 865, 871, 872, 885, 888, 904, 910, 913, 914, 924, 928, 929, 930, 937, 938, 940, 941, 943, 944, 945, 947, 948, 949, 961, 962, 963, 967, 968, 970, 977, 978, 980, 996, 998, 1004, 1014, 1015, 1018, 1023, 1024, 1028, 1030, 1031, 1041, 1049], "drop": [1, 91, 131, 139, 140, 220, 228, 251, 308, 310, 311, 404, 466, 630, 651, 701, 706, 728, 780, 782, 783, 883, 928, 1041], "aaa": [1, 31, 251, 505, 539, 540, 971], "bbb": [1, 31, 251, 539, 540, 731], "ccc": [1, 31, 251, 539, 540], "ddd": [1, 31, 251, 539, 540], "eee": [1, 31, 251, 731], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 38, 56, 65, 66, 72, 75, 77, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 122, 130, 131, 132, 136, 138, 139, 140, 141, 143, 148, 151, 153, 154, 155, 156, 160, 161, 166, 167, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 204, 205, 206, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 251, 261, 263, 265, 275, 306, 314, 318, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 342, 344, 347, 349, 350, 352, 359, 361, 365, 367, 379, 391, 401, 407, 421, 424, 425, 435, 441, 443, 445, 460, 464, 466, 470, 472, 473, 478, 479, 480, 481, 482, 484, 485, 486, 493, 500, 501, 510, 526, 527, 530, 531, 532, 533, 535, 542, 557, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 630, 644, 650, 651, 652, 654, 661, 662, 663, 667, 668, 672, 673, 674, 675, 676, 678, 679, 680, 682, 684, 686, 687, 688, 695, 696, 697, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 728, 731, 735, 736, 778, 789, 790, 791, 795, 797, 798, 802, 804, 807, 809, 812, 815, 816, 819, 821, 822, 824, 826, 827, 829, 837, 880, 886, 900, 903, 928, 934, 958, 976, 992, 993, 996, 997, 998, 999, 1001, 1009, 1018, 1019, 1041, 1049], "txt": [1, 12, 110], "utf8": [1, 10, 18, 56, 73, 91, 95, 99, 100, 110, 119, 121, 124, 141, 142, 143, 149, 196, 214, 251, 344, 347, 412, 435, 504, 508, 511, 512, 514, 515, 524, 525, 526, 527, 530, 531, 532, 533, 535, 570, 572, 630, 652, 654, 686, 728, 731, 821, 824, 870, 891, 970, 974, 977, 978, 980, 981, 990, 991, 992, 993, 996, 997, 998, 999, 1001, 1041], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 710, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 156, 183, 251, 258, 265, 276, 285, 290, 292, 294, 295, 296, 301, 304, 306, 308, 312, 320, 340, 344, 347, 354, 355, 363, 364, 369, 372, 373, 374, 378, 379, 382, 385, 387, 388, 389, 391, 394, 405, 406, 411, 426, 432, 434, 435, 450, 452, 456, 457, 460, 461, 462, 463, 466, 469, 476, 478, 479, 480, 481, 482, 484, 485, 486, 505, 509, 512, 515, 518, 520, 521, 524, 526, 527, 528, 538, 541, 549, 551, 558, 560, 562, 563, 569, 572, 579, 584, 594, 597, 599, 603, 612, 616, 619, 621, 630, 663, 680, 728, 731, 763, 817, 885], "tp": [1, 68], "cast": [1, 67, 68, 73, 88, 149, 155, 156, 183, 215, 228, 251, 264, 292, 303, 304, 313, 344, 347, 435, 459, 462, 471, 513, 514, 538, 543, 549, 572, 612, 630, 662, 663, 680, 706, 728, 731, 763, 775, 776, 786, 821, 824, 932, 979, 980, 1010, 1019, 1024, 1041], "int64": [1, 2, 31, 33, 67, 68, 95, 99, 141, 149, 155, 156, 171, 183, 196, 209, 215, 251, 278, 279, 280, 281, 303, 304, 319, 323, 327, 329, 331, 336, 343, 359, 462, 471, 513, 543, 549, 565, 570, 585, 593, 594, 596, 608, 614, 630, 647, 652, 662, 663, 665, 670, 680, 686, 709, 728, 750, 751, 752, 753, 775, 776, 792, 796, 803, 805, 808, 813, 820, 932, 951, 1010, 1022, 1023, 1024, 1041], "int8": [1, 68, 149, 251, 303, 304, 543, 605, 608, 622, 630, 775, 776, 780, 911, 935, 1010, 1028, 1041], "int16": [1, 68, 303, 304, 543, 630, 731, 775, 776, 911, 1010, 1020, 1041], "int32": [1, 68, 88, 91, 95, 121, 122, 155, 156, 168, 251, 290, 325, 352, 549, 608, 630, 662, 663, 728, 731, 798, 829, 910, 1024, 1041], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 68, 72, 73, 88, 90, 91, 92, 93, 94, 95, 103, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 260, 264, 265, 277, 282, 283, 285, 286, 287, 290, 292, 299, 306, 309, 310, 311, 359, 361, 363, 364, 365, 367, 370, 374, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 391, 395, 401, 405, 406, 411, 412, 414, 426, 434, 451, 458, 460, 462, 464, 466, 469, 474, 476, 493, 499, 501, 510, 513, 520, 542, 553, 555, 557, 559, 560, 561, 562, 563, 564, 566, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 584, 585, 586, 587, 588, 591, 595, 597, 598, 599, 600, 601, 602, 603, 604, 607, 609, 610, 613, 614, 615, 616, 617, 620, 630, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 664, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 710, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 737, 763, 779, 781, 831, 832, 840, 852, 859, 870, 884, 885, 890, 905, 933, 951, 976, 979, 986, 1009, 1023, 1027, 1041, 1048], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 110, 116, 117, 118, 124, 131, 132, 133, 134, 137, 140, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 176, 177, 179, 180, 182, 183, 184, 185, 189, 193, 194, 199, 204, 207, 208, 209, 210, 211, 212, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 262, 264, 265, 277, 278, 279, 280, 282, 288, 290, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 314, 318, 323, 330, 331, 332, 338, 339, 341, 342, 343, 344, 347, 348, 349, 350, 352, 354, 355, 360, 361, 363, 364, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 388, 389, 391, 394, 395, 396, 403, 404, 405, 406, 407, 410, 411, 419, 420, 423, 426, 429, 432, 434, 435, 450, 452, 456, 457, 459, 460, 462, 463, 464, 466, 467, 469, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 491, 492, 495, 499, 500, 501, 502, 505, 515, 516, 518, 519, 520, 522, 524, 526, 527, 530, 539, 540, 541, 542, 544, 545, 546, 549, 550, 551, 558, 560, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 584, 586, 587, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 613, 614, 615, 616, 617, 619, 620, 621, 630, 644, 646, 647, 648, 651, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 689, 690, 691, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 737, 740, 747, 750, 751, 752, 759, 764, 765, 767, 777, 779, 781, 795, 796, 802, 804, 807, 808, 809, 810, 811, 812, 816, 818, 819, 820, 821, 824, 825, 826, 827, 839, 840, 847, 848, 851, 852, 854, 859, 862, 863, 864, 865, 869, 883, 884, 885, 886, 889, 890, 898, 899, 902, 905, 911, 917, 924, 925, 926, 928, 930, 934, 937, 941, 943, 944, 945, 946, 947, 949, 951, 961, 965, 966, 971, 981, 982, 984, 985, 988, 990, 992, 993, 996, 1009, 1011, 1012, 1013, 1020, 1023, 1024, 1025, 1032, 1041, 1049], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 66, 68, 72, 73, 91, 93, 95, 103, 110, 120, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 153, 154, 155, 158, 160, 161, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 228, 231, 234, 235, 236, 237, 238, 239, 241, 244, 245, 251, 258, 265, 282, 379, 391, 401, 412, 414, 460, 462, 493, 526, 530, 553, 555, 560, 562, 564, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 586, 587, 588, 591, 595, 597, 598, 599, 600, 601, 602, 603, 604, 613, 615, 616, 617, 620, 630, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 661, 662, 667, 670, 676, 679, 681, 684, 685, 686, 687, 691, 694, 695, 700, 703, 706, 707, 710, 713, 714, 715, 716, 717, 718, 720, 723, 724, 728, 731, 779, 852, 870, 992, 996, 1027, 1041], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 57, 65, 66, 68, 69, 72, 88, 91, 92, 93, 94, 95, 97, 100, 116, 122, 131, 133, 134, 137, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 170, 171, 172, 174, 176, 179, 180, 182, 184, 185, 186, 189, 194, 199, 204, 207, 208, 209, 210, 211, 214, 217, 222, 224, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 262, 283, 286, 287, 288, 290, 292, 293, 294, 295, 296, 305, 306, 307, 308, 309, 314, 315, 319, 340, 342, 343, 344, 347, 349, 355, 358, 359, 362, 364, 368, 369, 372, 373, 375, 376, 379, 382, 385, 387, 388, 389, 391, 394, 396, 403, 405, 406, 407, 410, 411, 416, 422, 423, 426, 450, 452, 457, 459, 460, 461, 462, 464, 466, 467, 469, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 489, 495, 501, 506, 514, 515, 518, 519, 538, 541, 542, 544, 546, 550, 551, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 591, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 613, 615, 616, 617, 620, 630, 646, 647, 648, 653, 654, 655, 656, 657, 659, 661, 662, 663, 664, 666, 668, 669, 670, 671, 674, 675, 676, 681, 689, 690, 691, 694, 695, 696, 697, 698, 699, 705, 706, 708, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 737, 740, 744, 747, 759, 763, 765, 767, 773, 777, 778, 779, 780, 781, 787, 788, 789, 790, 791, 792, 817, 819, 820, 821, 822, 824, 826, 827, 835, 838, 847, 848, 851, 852, 884, 885, 886, 889, 890, 893, 902, 905, 910, 911, 917, 924, 925, 926, 928, 929, 930, 934, 937, 938, 939, 940, 942, 943, 946, 949, 951, 961, 967, 972, 980, 981, 985, 1011, 1025, 1028, 1032, 1041, 1049], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 57, 66, 68, 72, 88, 91, 92, 93, 94, 131, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 228, 229, 236, 244, 245, 251, 258, 262, 265, 282, 290, 303, 304, 306, 309, 314, 337, 339, 342, 353, 355, 363, 364, 370, 375, 376, 378, 396, 397, 398, 405, 407, 411, 426, 457, 459, 465, 466, 468, 469, 470, 473, 475, 478, 479, 480, 481, 482, 484, 485, 486, 489, 501, 506, 510, 515, 518, 519, 541, 544, 546, 558, 563, 576, 577, 578, 584, 587, 597, 615, 630, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 662, 663, 664, 666, 667, 669, 671, 672, 676, 679, 681, 684, 686, 687, 689, 690, 691, 694, 695, 698, 699, 702, 703, 705, 706, 708, 709, 715, 723, 724, 728, 731, 737, 765, 771, 775, 776, 781, 814, 827, 848, 876, 877, 884, 886, 890, 905, 917, 930, 934, 936, 941, 943, 945, 947, 951, 972, 976, 981, 985, 1010, 1041, 1048, 1049], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 72, 116, 135, 136, 137, 138, 139, 141, 143, 147, 148, 150, 155, 156, 158, 160, 162, 169, 173, 174, 175, 177, 178, 181, 184, 186, 188, 190, 192, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 224, 225, 226, 251, 258, 262, 280, 304, 306, 314, 318, 338, 340, 341, 348, 350, 352, 360, 375, 378, 396, 405, 411, 426, 435, 459, 466, 469, 473, 485, 501, 533, 544, 546, 563, 576, 577, 581, 587, 597, 615, 630, 649, 650, 652, 654, 658, 662, 663, 664, 666, 667, 671, 677, 679, 682, 684, 686, 687, 698, 699, 703, 709, 728, 731, 744, 752, 787, 791, 798, 817, 818, 825, 827, 871, 884, 890, 905, 911, 934, 946, 999, 1041, 1049], "float32": [1, 28, 68, 149, 213, 214, 251, 596, 728, 731, 855, 910, 1041], "lazi": [1, 50, 51, 52, 53, 55, 68, 72, 110, 122, 170, 183, 251, 265, 589, 605, 608, 622, 630, 667, 668, 707, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 1048, 1049], "i16": [1, 68, 493, 630, 731, 911, 1020, 1041, 1049], "i32": [1, 68, 88, 91, 95, 121, 122, 197, 251, 290, 325, 352, 475, 493, 519, 621, 630, 687, 728, 798, 829, 910, 936, 985, 1041, 1049], "f32": [1, 68, 140, 213, 251, 406, 469, 493, 573, 584, 630, 651, 728, 731, 885, 910, 930, 1041], "i64": [1, 2, 15, 19, 47, 50, 52, 66, 67, 68, 69, 72, 88, 90, 91, 92, 93, 94, 95, 110, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 165, 169, 170, 173, 176, 177, 178, 182, 183, 184, 185, 188, 189, 190, 191, 195, 197, 200, 201, 203, 204, 206, 207, 208, 210, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 244, 245, 251, 258, 260, 264, 265, 278, 279, 280, 281, 282, 288, 292, 294, 295, 296, 301, 302, 303, 304, 306, 308, 309, 319, 321, 323, 327, 329, 331, 336, 343, 346, 359, 361, 362, 364, 365, 366, 367, 369, 370, 375, 376, 377, 378, 379, 382, 385, 387, 388, 389, 391, 393, 396, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 426, 427, 431, 433, 434, 450, 451, 452, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 473, 474, 475, 476, 488, 490, 491, 493, 494, 495, 499, 500, 501, 520, 521, 539, 540, 541, 542, 543, 544, 545, 546, 550, 551, 552, 554, 557, 563, 565, 569, 570, 572, 576, 577, 578, 579, 583, 584, 585, 586, 587, 591, 593, 594, 595, 596, 597, 598, 599, 602, 603, 607, 611, 612, 615, 616, 617, 621, 630, 644, 646, 648, 650, 651, 654, 655, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 680, 681, 684, 685, 687, 689, 690, 694, 695, 697, 698, 699, 700, 701, 702, 703, 706, 708, 710, 711, 712, 714, 715, 716, 717, 720, 723, 724, 728, 731, 737, 738, 750, 751, 752, 753, 759, 763, 767, 770, 773, 774, 775, 776, 779, 792, 794, 796, 803, 805, 808, 813, 820, 823, 838, 840, 841, 847, 851, 859, 883, 884, 885, 886, 889, 890, 898, 899, 900, 902, 904, 905, 916, 928, 933, 934, 936, 939, 942, 946, 949, 952, 953, 956, 960, 961, 965, 966, 1009, 1011, 1012, 1013, 1019, 1025, 1026, 1029, 1032, 1041, 1048, 1049], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 307, 630, 771, 962, 1014, 1041], "mathshortcut": [1, 69], "": [1, 2, 28, 31, 50, 53, 57, 69, 88, 95, 99, 100, 101, 111, 124, 132, 138, 140, 142, 143, 154, 155, 161, 169, 170, 182, 184, 189, 190, 194, 197, 204, 208, 212, 218, 220, 221, 222, 228, 251, 265, 321, 344, 347, 359, 392, 410, 412, 419, 420, 423, 433, 444, 451, 454, 455, 460, 461, 471, 475, 477, 501, 505, 511, 512, 515, 516, 518, 520, 522, 524, 525, 527, 530, 531, 532, 535, 536, 538, 539, 540, 559, 560, 561, 562, 566, 570, 573, 578, 579, 585, 588, 589, 598, 599, 602, 603, 611, 612, 614, 615, 616, 630, 644, 650, 651, 654, 661, 662, 668, 687, 695, 700, 701, 702, 706, 712, 728, 731, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 759, 760, 762, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 787, 794, 810, 811, 818, 821, 824, 825, 832, 834, 835, 838, 839, 840, 841, 843, 846, 847, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 873, 883, 886, 889, 891, 893, 898, 899, 900, 902, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 960, 961, 962, 963, 965, 966, 968, 971, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 985, 986, 988, 989, 990, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1041], "_": [1, 65, 69, 184, 212, 251, 512, 526, 978, 992, 1018, 1041], "squar": [1, 69, 233, 392, 502, 630, 712, 872, 967, 1041], "cube": [1, 69, 463, 630], "s2": [1, 118, 149, 251, 737, 765, 781, 859, 871, 904, 917, 951, 1023, 1032, 1041], "renam": [1, 91, 99, 100, 197, 228, 231, 251, 260, 434, 447, 540, 611, 614, 630, 687, 706, 710, 728, 785, 793, 1007, 1019, 1041], "n2": [1, 425], "in_plac": [1, 160, 202, 226, 251, 931, 933, 959, 966, 1041], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 71, 72, 73, 88, 89, 93, 95, 97, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 130, 132, 133, 134, 137, 146, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 195, 197, 204, 210, 214, 215, 218, 219, 220, 221, 222, 224, 228, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 261, 262, 263, 264, 265, 276, 283, 284, 286, 287, 290, 300, 301, 302, 303, 304, 306, 313, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 397, 398, 402, 421, 424, 425, 432, 446, 456, 457, 459, 466, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 493, 494, 498, 500, 501, 505, 507, 509, 513, 514, 519, 525, 526, 528, 530, 531, 532, 535, 539, 540, 545, 552, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 573, 574, 581, 587, 593, 594, 605, 608, 614, 619, 621, 622, 630, 644, 646, 647, 648, 653, 655, 657, 661, 662, 663, 667, 668, 670, 672, 676, 681, 687, 691, 692, 693, 695, 700, 701, 702, 706, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 735, 736, 737, 738, 748, 755, 760, 765, 766, 778, 785, 786, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 831, 833, 834, 835, 841, 845, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 872, 876, 877, 900, 903, 917, 925, 926, 928, 932, 944, 951, 964, 966, 971, 973, 975, 979, 980, 985, 991, 992, 994, 996, 997, 998, 1001, 1022, 1023, 1031, 1032, 1041, 1048, 1049], "s3": [1, 30, 102, 111, 115, 251, 904, 1041], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 72, 116, 120, 131, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 150, 153, 158, 160, 169, 173, 174, 175, 178, 186, 188, 190, 192, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 225, 226, 228, 251, 262, 264, 277, 299, 301, 304, 305, 306, 310, 311, 314, 378, 395, 404, 405, 406, 411, 426, 452, 459, 463, 464, 466, 473, 474, 493, 499, 501, 516, 522, 530, 542, 546, 558, 564, 568, 573, 574, 575, 577, 579, 584, 586, 591, 595, 597, 598, 599, 600, 601, 602, 603, 604, 613, 616, 617, 620, 630, 649, 650, 651, 652, 654, 658, 664, 667, 671, 672, 681, 684, 686, 687, 698, 699, 703, 706, 709, 728, 731, 777, 798, 848, 871, 883, 884, 885, 890, 905, 924, 928, 934, 937, 938, 941, 943, 945, 947, 982, 988, 996, 1041, 1049], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 72, 131, 136, 137, 149, 156, 158, 162, 193, 194, 197, 207, 222, 223, 226, 228, 244, 251, 258, 262, 264, 277, 299, 301, 304, 306, 307, 310, 311, 314, 318, 338, 349, 350, 378, 383, 391, 395, 404, 418, 421, 459, 466, 468, 473, 477, 483, 485, 495, 499, 512, 533, 546, 563, 571, 576, 577, 630, 663, 664, 666, 671, 687, 698, 703, 706, 723, 728, 779, 791, 802, 804, 812, 818, 819, 825, 826, 859, 871, 883, 900, 934, 938, 944, 946, 948, 961, 978, 999, 1041], "27": [1, 69, 244, 304, 325, 339, 352, 630, 723, 1041, 1049], "16": [1, 31, 43, 59, 67, 155, 156, 228, 251, 301, 304, 378, 452, 463, 519, 563, 576, 583, 584, 587, 630, 662, 663, 691, 706, 728, 731, 818, 825, 924, 962, 985, 1014, 1041], "64": [1, 42, 45, 61, 67, 69, 452, 463, 630, 693, 728, 924, 1041], "25": [1, 31, 69, 95, 122, 137, 155, 156, 170, 224, 228, 251, 308, 320, 325, 341, 348, 352, 466, 478, 479, 480, 481, 482, 484, 485, 486, 551, 581, 589, 619, 630, 662, 663, 668, 674, 704, 706, 728, 731, 779, 780, 793, 818, 825, 831, 848, 924, 928, 1041], "125": [1, 31, 69, 251, 258, 630, 924, 1041], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 183, 215, 251, 462, 566, 588, 630, 680, 728, 738, 1022, 1023, 1041], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 70, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 114, 119, 121, 122, 124, 128, 131, 136, 140, 144, 146, 147, 149, 166, 167, 168, 182, 183, 192, 193, 194, 210, 211, 214, 215, 220, 222, 251, 258, 262, 265, 290, 342, 354, 355, 364, 369, 372, 373, 383, 394, 401, 406, 432, 433, 435, 447, 450, 452, 456, 457, 459, 460, 462, 473, 477, 489, 519, 530, 531, 532, 535, 541, 545, 551, 558, 559, 562, 563, 573, 586, 595, 596, 621, 630, 651, 657, 680, 701, 728, 731, 737, 738, 781, 819, 840, 859, 871, 880, 885, 911, 934, 938, 950, 953, 985, 996, 997, 998, 1001, 1012, 1021, 1022, 1023, 1041, 1048, 1049], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 136, 183, 215, 251, 462, 630, 680, 728, 1023, 1041, 1048], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 630, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1048], "width": [2, 24, 31, 99, 100, 251, 278, 279, 280, 281, 516, 522, 538, 728, 750, 751, 752, 753, 982, 988, 1004], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 142, 145, 146, 148, 157, 158, 159, 161, 166, 167, 168, 170, 172, 173, 174, 178, 179, 180, 190, 192, 195, 199, 200, 201, 203, 205, 206, 207, 208, 213, 216, 218, 222, 225, 227, 229, 236, 245, 251, 258, 282, 288, 294, 295, 296, 305, 308, 356, 357, 358, 362, 363, 364, 370, 374, 375, 396, 402, 404, 409, 410, 419, 420, 423, 424, 425, 459, 461, 462, 463, 469, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 499, 503, 511, 513, 516, 519, 520, 522, 524, 526, 527, 533, 538, 544, 545, 546, 550, 556, 558, 565, 573, 574, 580, 582, 583, 589, 591, 593, 594, 601, 604, 605, 608, 609, 610, 613, 614, 615, 617, 618, 620, 622, 630, 644, 646, 655, 656, 657, 664, 668, 671, 681, 689, 690, 693, 694, 696, 698, 699, 700, 704, 705, 708, 715, 724, 728, 745, 746, 759, 760, 765, 766, 767, 768, 769, 777, 780, 832, 833, 834, 835, 838, 839, 840, 846, 847, 848, 871, 873, 874, 881, 882, 883, 888, 889, 898, 899, 902, 903, 904, 913, 917, 918, 920, 921, 922, 923, 924, 927, 930, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 956, 957, 960, 965, 968, 977, 979, 982, 985, 986, 988, 990, 992, 993, 999, 1004, 1010, 1011, 1012, 1013, 1020, 1025, 1030, 1041, 1048, 1049], "inner": [2, 47, 56, 73, 121, 169, 223, 251, 278, 279, 280, 281, 309, 412, 549, 630, 667, 703, 709, 728, 750, 751, 752, 753, 781, 891, 1024, 1041], "polarsdatatyp": [2, 47, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 131, 141, 251, 265, 290, 359, 433, 435, 513, 563, 565, 570, 585, 596, 597, 605, 608, 622, 630, 652, 728, 731, 738, 760, 911, 979, 1041], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 72, 91, 99, 100, 107, 110, 115, 130, 132, 133, 137, 140, 146, 149, 150, 162, 169, 174, 175, 181, 184, 186, 200, 201, 204, 205, 206, 210, 215, 218, 221, 223, 225, 228, 234, 251, 260, 264, 265, 275, 282, 284, 294, 295, 296, 299, 301, 304, 308, 310, 311, 319, 323, 327, 329, 331, 336, 343, 355, 356, 357, 358, 359, 362, 363, 364, 370, 378, 385, 386, 387, 388, 389, 395, 397, 398, 404, 405, 408, 409, 411, 413, 419, 424, 425, 426, 435, 457, 458, 461, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 491, 492, 493, 495, 500, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 518, 519, 522, 524, 526, 527, 528, 538, 539, 540, 549, 560, 562, 569, 571, 572, 574, 579, 585, 596, 599, 603, 609, 610, 614, 616, 621, 630, 644, 646, 651, 657, 666, 667, 679, 689, 690, 695, 700, 702, 703, 706, 707, 709, 713, 728, 738, 747, 755, 766, 767, 780, 783, 792, 796, 803, 805, 808, 813, 820, 833, 834, 835, 838, 840, 845, 864, 865, 876, 877, 883, 890, 898, 903, 904, 905, 923, 924, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 951, 956, 957, 961, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 984, 985, 988, 990, 992, 993, 994, 1020, 1022, 1023, 1024, 1031, 1041, 1048, 1049], "nest": [2, 47, 56, 95, 142, 251, 641, 832, 1041, 1048, 1049], "fix": [2, 103, 120, 122, 351, 478, 479, 480, 481, 482, 484, 485, 486, 630, 828], "length": [2, 12, 47, 72, 110, 120, 155, 156, 203, 251, 305, 306, 341, 348, 420, 425, 444, 466, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 499, 516, 518, 522, 524, 538, 605, 608, 609, 610, 622, 630, 662, 663, 681, 694, 728, 765, 777, 778, 787, 818, 825, 873, 899, 904, 922, 928, 936, 938, 939, 940, 941, 942, 943, 945, 946, 947, 965, 982, 984, 988, 990, 1004, 1041], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 174, 176, 177, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 233, 236, 243, 245, 251, 258, 260, 262, 264, 265, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 296, 300, 301, 302, 303, 304, 305, 306, 308, 309, 313, 314, 315, 321, 337, 340, 341, 342, 344, 346, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 362, 364, 365, 369, 370, 371, 372, 373, 374, 375, 378, 379, 383, 392, 394, 396, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 419, 420, 421, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 446, 450, 452, 456, 457, 459, 460, 461, 462, 463, 464, 466, 467, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 538, 539, 540, 541, 542, 544, 545, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 587, 588, 589, 591, 592, 593, 594, 596, 597, 598, 599, 602, 603, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 630, 644, 646, 648, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 667, 668, 671, 672, 676, 677, 680, 681, 682, 683, 684, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 715, 722, 724, 728, 731, 734, 737, 738, 747, 753, 754, 755, 756, 757, 758, 759, 760, 763, 766, 767, 768, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 786, 787, 788, 794, 814, 817, 818, 819, 821, 823, 824, 825, 828, 831, 832, 833, 834, 835, 838, 839, 840, 841, 846, 847, 848, 851, 852, 861, 867, 868, 872, 874, 880, 881, 882, 883, 884, 885, 888, 889, 890, 891, 898, 899, 900, 902, 903, 904, 905, 906, 911, 924, 928, 929, 930, 931, 932, 933, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 956, 957, 960, 964, 965, 966, 968, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1001, 1004, 1005, 1007, 1011, 1012, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1029, 1030, 1031, 1032, 1041, 1048], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 70, 88, 90, 91, 92, 94, 97, 99, 101, 106, 107, 108, 110, 126, 131, 139, 141, 153, 154, 155, 156, 157, 162, 167, 170, 177, 182, 192, 193, 194, 197, 214, 221, 224, 228, 231, 233, 251, 282, 283, 284, 285, 318, 332, 337, 338, 341, 344, 348, 349, 359, 362, 370, 374, 424, 433, 460, 469, 472, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 494, 495, 498, 504, 507, 508, 513, 515, 516, 517, 522, 523, 529, 530, 538, 570, 585, 589, 609, 610, 611, 614, 621, 623, 624, 626, 630, 631, 632, 636, 637, 638, 662, 663, 664, 666, 668, 671, 672, 677, 681, 687, 693, 702, 706, 710, 712, 728, 738, 754, 755, 756, 766, 791, 809, 814, 815, 818, 821, 825, 826, 838, 846, 851, 903, 930, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 961, 964, 970, 973, 974, 979, 981, 982, 983, 988, 989, 995, 996, 1004, 1033, 1035, 1037, 1041, 1042, 1045, 1046, 1047, 1049], "size": [2, 13, 35, 99, 100, 120, 121, 122, 124, 126, 142, 155, 222, 251, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 565, 593, 594, 609, 610, 630, 662, 693, 728, 832, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1041, 1049], "datatyp": [2, 28, 33, 47, 63, 88, 90, 91, 92, 94, 96, 103, 105, 106, 107, 109, 124, 141, 143, 149, 196, 251, 290, 359, 407, 493, 510, 549, 570, 585, 596, 630, 641, 654, 686, 709, 728, 738, 760, 779, 861, 866, 868, 870, 886, 958, 976, 1024, 1041], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 72, 73, 91, 93, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 137, 140, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 166, 167, 170, 172, 173, 174, 175, 176, 178, 180, 182, 184, 185, 186, 188, 192, 193, 194, 195, 200, 201, 204, 205, 206, 207, 210, 211, 215, 218, 222, 223, 224, 225, 234, 235, 237, 238, 239, 241, 242, 251, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 301, 304, 305, 306, 308, 310, 311, 314, 318, 332, 338, 349, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 398, 399, 400, 403, 404, 408, 409, 410, 413, 415, 416, 417, 419, 422, 423, 427, 429, 431, 432, 433, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 466, 467, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 520, 521, 524, 526, 527, 528, 538, 541, 543, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 558, 564, 569, 572, 574, 576, 577, 578, 579, 586, 587, 592, 595, 596, 598, 599, 600, 601, 602, 603, 604, 607, 608, 609, 610, 615, 616, 621, 630, 644, 651, 656, 657, 662, 663, 665, 666, 668, 673, 674, 675, 676, 678, 679, 682, 684, 689, 690, 695, 696, 697, 700, 703, 704, 709, 713, 714, 716, 717, 718, 720, 721, 728, 731, 733, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 763, 764, 767, 768, 769, 771, 772, 777, 778, 779, 780, 782, 783, 787, 791, 809, 815, 826, 832, 833, 834, 835, 838, 839, 840, 843, 845, 846, 847, 848, 849, 851, 852, 854, 856, 857, 859, 860, 862, 863, 864, 865, 869, 874, 876, 877, 878, 879, 882, 883, 887, 888, 889, 892, 894, 895, 896, 898, 902, 906, 911, 912, 913, 915, 916, 918, 920, 921, 922, 923, 924, 927, 928, 929, 930, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 951, 952, 953, 956, 957, 961, 962, 963, 964, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 984, 986, 987, 990, 992, 993, 994, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1023, 1024, 1027, 1029, 1031, 1032, 1041, 1049], "within": [2, 47, 117, 118, 154, 155, 156, 170, 224, 251, 469, 501, 630, 662, 663, 668, 728, 1048], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 583, 584, 585, 586, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 622, 630, 641, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 759, 760, 762, 763, 764, 765, 766, 767, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 838, 839, 840, 841, 843, 846, 847, 848, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 876, 877, 883, 884, 885, 886, 889, 890, 891, 893, 898, 899, 900, 902, 904, 905, 910, 911, 912, 913, 914, 915, 916, 917, 918, 924, 925, 926, 928, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 960, 961, 962, 963, 965, 966, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1041, 1048], "dtype": [2, 31, 38, 68, 72, 73, 88, 90, 92, 94, 95, 99, 100, 106, 107, 110, 119, 120, 121, 122, 124, 130, 155, 156, 170, 213, 214, 215, 251, 265, 267, 268, 269, 270, 271, 272, 275, 290, 291, 294, 295, 296, 297, 298, 303, 304, 307, 319, 323, 327, 329, 331, 336, 343, 351, 359, 361, 399, 400, 401, 412, 424, 431, 433, 435, 468, 471, 472, 478, 479, 480, 481, 482, 484, 485, 486, 493, 496, 497, 504, 513, 524, 530, 543, 545, 547, 548, 549, 554, 555, 563, 565, 574, 585, 589, 593, 594, 596, 597, 605, 608, 614, 622, 630, 662, 663, 668, 728, 731, 750, 751, 760, 762, 766, 767, 768, 769, 775, 776, 779, 780, 792, 796, 803, 805, 808, 813, 820, 828, 832, 837, 855, 861, 868, 878, 879, 880, 891, 903, 910, 911, 935, 951, 958, 970, 979, 990, 996, 1010, 1020, 1022, 1023, 1024, 1028, 1041, 1049], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 72, 89, 99, 100, 103, 119, 128, 140, 154, 162, 167, 180, 186, 192, 193, 194, 220, 228, 243, 251, 258, 261, 262, 344, 347, 354, 355, 362, 369, 372, 373, 378, 394, 432, 450, 452, 456, 457, 459, 463, 467, 469, 478, 479, 480, 481, 482, 484, 485, 486, 533, 541, 551, 553, 558, 573, 581, 606, 608, 619, 623, 624, 626, 630, 631, 632, 635, 636, 637, 638, 641, 651, 666, 682, 701, 706, 722, 728, 738, 821, 824, 838, 851, 929, 930, 943, 999, 1024, 1033, 1035, 1037, 1041, 1042, 1045, 1046, 1047], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 119, 251, 623, 624, 626, 631, 632, 636, 637, 638, 728, 1033, 1035, 1037, 1042, 1045, 1046, 1047], "A": [5, 28, 31, 50, 53, 71, 95, 99, 100, 101, 108, 110, 126, 149, 155, 170, 184, 193, 210, 222, 223, 224, 228, 251, 257, 306, 314, 319, 323, 327, 329, 331, 336, 343, 354, 355, 362, 372, 373, 381, 384, 385, 387, 394, 425, 432, 433, 434, 444, 456, 457, 464, 474, 475, 477, 478, 479, 480, 481, 482, 484, 485, 486, 505, 506, 511, 512, 514, 520, 521, 538, 542, 571, 581, 584, 588, 619, 630, 662, 668, 684, 703, 706, 728, 731, 787, 792, 796, 803, 805, 808, 813, 820, 838, 936, 938, 939, 940, 942, 945, 946, 947, 971, 972, 977, 978, 980, 986, 987, 1004, 1041, 1048], "encod": [5, 64, 99, 100, 110, 212, 251, 283, 284, 286, 287, 371, 507, 630, 755, 973], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 89, 91, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 135, 140, 154, 155, 156, 157, 167, 170, 176, 195, 197, 203, 212, 214, 219, 220, 222, 228, 251, 265, 351, 374, 383, 405, 411, 420, 424, 425, 426, 435, 462, 466, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 494, 498, 499, 517, 523, 524, 529, 530, 531, 532, 535, 565, 567, 581, 593, 594, 605, 608, 609, 610, 614, 619, 621, 622, 630, 641, 651, 653, 661, 662, 663, 667, 668, 672, 676, 687, 692, 693, 694, 701, 706, 709, 712, 728, 737, 738, 828, 846, 859, 884, 890, 899, 903, 904, 905, 911, 938, 939, 940, 941, 942, 943, 945, 946, 947, 949, 953, 960, 964, 965, 983, 989, 990, 995, 996, 997, 998, 1001, 1022, 1041, 1049], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 73, 95, 99, 100, 110, 119, 120, 121, 124, 127, 132, 149, 153, 154, 155, 156, 170, 184, 194, 197, 204, 213, 218, 222, 224, 228, 231, 251, 258, 286, 292, 337, 341, 344, 347, 348, 361, 367, 371, 379, 412, 435, 446, 460, 462, 478, 479, 480, 481, 482, 484, 485, 486, 501, 504, 505, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 538, 559, 560, 561, 562, 566, 569, 571, 572, 578, 579, 581, 588, 598, 599, 602, 603, 611, 614, 615, 616, 619, 630, 644, 653, 660, 661, 662, 663, 668, 687, 695, 700, 706, 709, 710, 728, 731, 757, 763, 814, 818, 821, 824, 825, 837, 852, 891, 969, 970, 971, 975, 976, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 1000, 1002, 1003, 1004, 1020, 1041, 1049], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 371, 630, 660, 683, 728], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 406, 512, 885, 978], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 71, 72, 73, 88, 89, 93, 95, 99, 100, 104, 107, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 130, 132, 133, 134, 146, 147, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 170, 182, 184, 194, 195, 198, 202, 204, 210, 212, 214, 215, 218, 219, 220, 221, 224, 226, 228, 235, 237, 238, 241, 251, 261, 262, 263, 264, 265, 275, 281, 283, 284, 286, 287, 290, 300, 301, 302, 303, 304, 305, 306, 324, 340, 342, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 397, 398, 402, 406, 421, 424, 427, 432, 433, 439, 440, 441, 442, 446, 456, 457, 459, 466, 469, 471, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 493, 494, 498, 500, 501, 505, 507, 509, 519, 520, 521, 525, 526, 528, 530, 531, 532, 535, 540, 552, 555, 558, 559, 560, 561, 562, 563, 565, 566, 567, 573, 576, 581, 593, 594, 596, 605, 608, 614, 619, 622, 630, 644, 646, 648, 653, 655, 657, 661, 662, 663, 667, 668, 672, 676, 681, 688, 691, 692, 693, 695, 700, 701, 702, 706, 714, 716, 717, 720, 728, 731, 735, 736, 737, 738, 747, 753, 755, 760, 766, 773, 774, 775, 776, 777, 778, 797, 817, 819, 831, 833, 834, 835, 841, 845, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 876, 877, 881, 882, 885, 900, 903, 906, 925, 926, 928, 930, 931, 932, 933, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 953, 954, 959, 964, 966, 971, 973, 975, 985, 986, 987, 991, 992, 994, 996, 997, 998, 1001, 1021, 1022, 1023, 1026, 1029, 1031, 1041, 1048], "decim": [6, 28, 31, 251, 487, 533, 630, 948, 999, 1041], "temporari": 6, "remov": [6, 8, 138, 212, 223, 251, 265, 359, 434, 517, 523, 529, 530, 532, 585, 630, 650, 703, 728, 983, 989, 995, 996, 998], "later": [6, 581], "onc": [6, 53, 99, 100, 103, 126, 130, 131, 193, 195, 231, 251, 265, 289, 488, 630, 645, 710, 728, 738, 949, 1041], "stabil": 6, "happen": [6, 466, 630, 928, 1041], "being": [6, 99, 100, 110, 115, 212, 222, 223, 251, 265, 305, 341, 478, 479, 480, 481, 482, 484, 485, 486, 488, 494, 584, 630, 703, 728, 777, 818, 848, 928, 1041, 1049], "consid": [6, 99, 100, 110, 115, 131, 140, 150, 176, 193, 220, 222, 223, 251, 265, 294, 295, 296, 305, 341, 433, 478, 479, 480, 481, 482, 484, 485, 486, 576, 587, 630, 651, 664, 671, 676, 701, 703, 712, 728, 738, 767, 768, 769, 777, 818, 848, 861, 928, 951, 952, 953, 1041], "break": [6, 115, 222, 223, 251, 265, 305, 306, 341, 466, 478, 479, 480, 481, 482, 484, 485, 486, 630, 703, 728, 777, 818, 848, 928, 1041], "chang": [6, 26, 65, 99, 100, 115, 222, 223, 224, 251, 265, 305, 308, 341, 461, 478, 479, 480, 481, 482, 484, 485, 486, 488, 494, 630, 703, 728, 777, 818, 848, 924, 928, 959, 1041], "current": [6, 9, 26, 52, 89, 95, 101, 127, 130, 133, 134, 169, 251, 320, 341, 425, 461, 630, 641, 646, 647, 667, 728, 731, 766, 770, 785, 793, 818, 924, 1041, 1048], "alpha": [6, 71, 265, 356, 357, 358, 630, 648, 653, 655, 681, 691, 728, 833, 834, 835, 1041], "state": [6, 8, 71, 81, 127, 576, 641, 648, 653, 655, 681, 691, 728], "cfg": [7, 8, 9, 15, 128], "path": [7, 9, 27, 28, 29, 30, 31, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 251, 448, 490, 514, 630, 683, 692, 693, 709, 728, 954, 980, 1041], "previous": 7, "save": [7, 155, 156, 170, 224, 251, 312, 320, 337, 340, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 641, 662, 663, 668, 728, 793, 814, 817, 818, 825], "share": [7, 56, 142, 251, 832, 1041], "option": [7, 8, 9, 26, 30, 31, 39, 65, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 166, 170, 176, 210, 214, 219, 251, 392, 477, 478, 479, 480, 481, 482, 484, 485, 486, 498, 524, 581, 596, 614, 621, 630, 641, 667, 668, 676, 728, 731, 868, 872, 938, 939, 940, 941, 942, 943, 945, 946, 947, 964, 990, 1019, 1041], "from": [7, 8, 28, 31, 50, 51, 52, 65, 72, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 137, 138, 142, 144, 153, 155, 156, 167, 168, 170, 171, 176, 184, 188, 192, 194, 195, 197, 212, 219, 220, 222, 224, 251, 300, 307, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 355, 359, 371, 378, 392, 425, 454, 455, 457, 461, 462, 468, 478, 479, 481, 484, 485, 486, 488, 501, 511, 512, 513, 519, 530, 531, 532, 535, 553, 555, 569, 580, 581, 582, 583, 608, 613, 618, 619, 629, 630, 650, 655, 660, 662, 663, 668, 676, 683, 684, 687, 701, 707, 728, 731, 737, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 832, 868, 872, 904, 920, 921, 922, 924, 949, 977, 978, 979, 985, 996, 997, 998, 1001, 1029, 1032, 1041, 1048, 1049], "json": [7, 9, 33, 34, 106, 107, 113, 251, 371, 448, 513, 514, 630, 641, 660, 683, 709, 728, 979, 980], "file": [7, 9, 27, 28, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 251, 448, 655, 683, 692, 693, 709, 728, 737, 1041], "produc": [7, 121, 122, 124, 403, 443, 581, 597, 672, 728, 882], "filepath": [7, 9], "same": [7, 18, 30, 31, 54, 56, 65, 71, 72, 73, 104, 110, 120, 128, 131, 138, 154, 194, 204, 220, 228, 231, 233, 251, 257, 264, 361, 439, 442, 460, 477, 478, 479, 480, 481, 482, 484, 485, 486, 501, 540, 570, 581, 630, 650, 661, 672, 695, 701, 706, 710, 728, 733, 737, 738, 787, 837, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1032, 1041], "reset": [8, 128], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 72, 88, 90, 91, 92, 93, 94, 95, 99, 100, 103, 106, 107, 108, 110, 119, 120, 121, 122, 123, 124, 140, 142, 154, 156, 157, 167, 169, 170, 176, 182, 184, 192, 193, 194, 195, 205, 212, 220, 222, 225, 229, 251, 292, 306, 340, 353, 355, 356, 357, 358, 374, 420, 424, 425, 428, 435, 454, 455, 457, 461, 466, 469, 478, 479, 480, 481, 482, 484, 485, 486, 488, 494, 503, 511, 517, 519, 523, 524, 529, 530, 531, 532, 535, 556, 565, 567, 573, 581, 589, 593, 594, 596, 605, 608, 613, 614, 619, 620, 622, 630, 651, 653, 661, 663, 667, 668, 676, 693, 696, 701, 704, 709, 728, 763, 817, 831, 832, 833, 834, 835, 846, 899, 903, 904, 911, 920, 921, 924, 930, 949, 960, 968, 971, 977, 983, 985, 989, 990, 995, 996, 997, 998, 1001, 1030, 1041, 1049], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 88, 89, 90, 92, 94, 95, 99, 101, 102, 106, 107, 108, 110, 111, 120, 122, 124, 126, 128, 130, 131, 132, 136, 145, 155, 156, 166, 167, 169, 170, 180, 183, 192, 193, 194, 211, 214, 218, 219, 223, 224, 228, 251, 265, 303, 304, 310, 311, 333, 334, 337, 341, 348, 379, 385, 387, 406, 424, 478, 479, 480, 481, 482, 483, 484, 485, 486, 498, 505, 511, 512, 515, 517, 518, 520, 523, 529, 530, 543, 551, 576, 581, 587, 605, 607, 608, 621, 622, 630, 640, 644, 648, 655, 656, 662, 663, 664, 668, 671, 684, 691, 695, 700, 703, 706, 728, 738, 775, 776, 810, 811, 814, 825, 885, 903, 944, 952, 953, 959, 964, 971, 977, 978, 981, 983, 984, 986, 989, 995, 996, 1010, 1041, 1048], "oper": [8, 31, 56, 72, 78, 79, 88, 90, 91, 92, 93, 94, 99, 108, 131, 144, 149, 154, 161, 171, 177, 180, 182, 183, 187, 194, 209, 214, 215, 219, 222, 230, 231, 251, 258, 259, 262, 300, 301, 302, 303, 304, 305, 354, 355, 369, 372, 373, 391, 394, 405, 411, 425, 426, 432, 447, 450, 452, 456, 457, 459, 463, 471, 541, 551, 558, 559, 561, 571, 572, 584, 630, 641, 655, 661, 664, 667, 671, 676, 677, 710, 728, 737, 773, 774, 775, 776, 777, 884, 890, 905, 932, 1017, 1021, 1022, 1023, 1031, 1041], "environ": [8, 26, 123, 126], "local": [8, 30, 102, 111, 124, 251, 340, 789, 790, 817, 822, 925, 926, 1041], "non": [8, 31, 39, 65, 93, 156, 168, 176, 197, 223, 228, 251, 379, 425, 461, 477, 478, 479, 480, 481, 482, 484, 485, 486, 506, 512, 559, 560, 561, 562, 569, 571, 572, 578, 579, 581, 598, 599, 602, 603, 609, 610, 611, 614, 615, 616, 630, 663, 676, 687, 703, 706, 728, 852, 904, 924, 938, 939, 940, 941, 942, 943, 945, 946, 947, 972, 978, 1022, 1041], "env": [8, 125], "back": [8, 65, 144, 215, 251, 460, 536, 630, 737, 1002, 1023, 1041], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 73, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 137, 140, 145, 146, 153, 155, 156, 157, 162, 166, 169, 170, 171, 174, 176, 180, 181, 184, 192, 195, 201, 203, 204, 210, 212, 215, 219, 220, 221, 222, 223, 224, 251, 260, 264, 265, 277, 282, 294, 295, 296, 299, 301, 304, 306, 310, 311, 340, 341, 348, 355, 356, 357, 358, 359, 362, 363, 364, 370, 374, 378, 379, 385, 386, 387, 388, 389, 395, 397, 398, 405, 409, 411, 420, 425, 426, 433, 435, 446, 448, 457, 458, 461, 463, 466, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 492, 493, 494, 495, 499, 500, 504, 505, 508, 509, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 535, 538, 539, 540, 549, 559, 560, 562, 563, 565, 569, 572, 574, 579, 581, 582, 583, 585, 586, 595, 596, 597, 598, 599, 602, 603, 608, 609, 610, 613, 614, 616, 618, 619, 620, 621, 630, 646, 647, 651, 656, 657, 662, 663, 666, 667, 668, 670, 672, 676, 679, 690, 691, 692, 693, 694, 695, 701, 702, 703, 707, 709, 712, 728, 731, 738, 745, 746, 766, 767, 778, 779, 781, 799, 800, 801, 806, 817, 818, 825, 830, 831, 833, 834, 835, 838, 839, 840, 842, 845, 846, 848, 850, 851, 852, 861, 864, 865, 868, 871, 872, 876, 877, 884, 888, 890, 899, 904, 905, 911, 912, 913, 914, 915, 919, 928, 929, 930, 933, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 949, 953, 955, 957, 960, 961, 964, 965, 968, 970, 971, 974, 975, 979, 980, 981, 982, 983, 984, 985, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 1001, 1016, 1019, 1020, 1023, 1024, 1030, 1031, 1041, 1048], "written": [9, 27, 28, 31, 32, 33, 34, 35, 251, 692, 693, 709, 728], "contain": [9, 29, 31, 65, 70, 90, 93, 95, 102, 111, 117, 121, 132, 140, 155, 168, 180, 184, 218, 251, 265, 286, 287, 383, 435, 475, 506, 509, 511, 512, 514, 527, 528, 630, 644, 651, 662, 681, 700, 728, 731, 911, 917, 936, 972, 975, 977, 978, 980, 993, 994, 1017, 1041], "where": [9, 31, 50, 65, 101, 121, 140, 144, 167, 176, 193, 205, 225, 251, 276, 350, 353, 355, 457, 489, 498, 501, 503, 556, 567, 573, 609, 610, 613, 620, 621, 630, 676, 696, 704, 728, 737, 748, 827, 831, 950, 964, 968, 1030, 1032, 1041, 1048], "ascii": [10, 18, 516, 518, 522, 538, 982, 984, 988, 1004], "charact": [10, 12, 18, 24, 28, 29, 99, 100, 110, 251, 337, 510, 512, 515, 516, 517, 522, 523, 525, 526, 529, 538, 681, 728, 731, 814, 976, 978, 981, 982, 983, 988, 989, 991, 992, 995, 1004], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 251], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 88, 95, 99, 100, 102, 110, 111, 184, 209, 215, 222, 223, 251, 703, 728, 1023, 1041, 1048], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 71, 89, 93, 95, 99, 100, 103, 104, 107, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 137, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 195, 198, 202, 204, 210, 212, 214, 215, 218, 219, 220, 224, 226, 228, 234, 235, 237, 238, 239, 241, 244, 251, 261, 262, 263, 265, 275, 281, 283, 286, 287, 300, 301, 302, 303, 304, 305, 306, 324, 340, 342, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 397, 398, 402, 406, 421, 424, 427, 432, 433, 446, 456, 457, 459, 466, 469, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 490, 493, 494, 498, 500, 501, 505, 509, 513, 519, 520, 521, 525, 526, 528, 530, 531, 532, 552, 555, 558, 559, 560, 561, 562, 565, 566, 567, 573, 576, 581, 593, 594, 596, 605, 608, 614, 619, 621, 622, 630, 644, 646, 647, 648, 653, 655, 661, 662, 663, 667, 668, 670, 672, 681, 688, 691, 692, 693, 695, 700, 701, 706, 713, 714, 716, 717, 718, 720, 723, 728, 731, 737, 747, 753, 760, 765, 766, 773, 774, 775, 776, 777, 778, 797, 817, 819, 831, 833, 834, 835, 841, 852, 853, 854, 856, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 872, 876, 877, 885, 900, 903, 906, 917, 925, 926, 928, 930, 931, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 951, 954, 959, 964, 966, 971, 975, 979, 985, 986, 987, 991, 992, 994, 996, 997, 998, 1021, 1022, 1023, 1026, 1029, 1031, 1032, 1041, 1048], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 258, 512, 520, 630, 731, 978, 986], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 258, 506, 512, 630, 972, 978, 1019, 1041], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 47, 50, 65, 67, 69, 91, 115, 122, 133, 134, 136, 137, 138, 141, 145, 146, 149, 152, 153, 154, 161, 169, 170, 174, 175, 184, 185, 186, 203, 204, 205, 225, 228, 231, 235, 237, 238, 239, 240, 241, 243, 244, 251, 257, 267, 268, 269, 270, 271, 272, 290, 293, 297, 298, 305, 307, 310, 311, 342, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 368, 369, 372, 373, 378, 385, 387, 388, 389, 391, 392, 394, 416, 428, 429, 430, 432, 436, 437, 438, 449, 452, 454, 455, 456, 457, 461, 463, 467, 468, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 496, 497, 498, 502, 503, 547, 548, 551, 556, 568, 569, 571, 573, 575, 585, 600, 601, 612, 613, 620, 630, 646, 650, 656, 657, 661, 667, 668, 674, 675, 682, 695, 696, 704, 706, 707, 710, 714, 716, 717, 718, 719, 720, 722, 723, 728, 731, 739, 740, 741, 742, 743, 744, 764, 771, 772, 777, 778, 779, 819, 834, 835, 839, 843, 848, 924, 928, 938, 940, 941, 943, 944, 945, 947, 948, 962, 963, 967, 1014, 1015, 1028, 1041, 1049], "fmt": [11, 377, 588, 630, 665, 728], "floatfmt": 11, "mix": [11, 530, 532, 779, 996, 998, 1041], "control": [11, 31, 55, 72, 120, 251, 653, 728], "how": [11, 30, 31, 56, 65, 72, 73, 91, 94, 101, 140, 169, 222, 223, 251, 292, 308, 378, 403, 404, 460, 472, 483, 513, 621, 630, 651, 667, 703, 728, 763, 780, 882, 883, 944, 979, 1041], "float": [11, 31, 41, 42, 115, 117, 118, 119, 122, 124, 137, 142, 145, 170, 186, 195, 201, 243, 251, 293, 294, 295, 296, 306, 310, 311, 342, 353, 354, 355, 356, 357, 358, 363, 368, 372, 373, 378, 381, 384, 385, 387, 388, 389, 394, 402, 428, 432, 436, 449, 454, 455, 456, 457, 463, 466, 467, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 489, 551, 568, 600, 601, 606, 608, 613, 615, 620, 630, 656, 668, 682, 690, 691, 722, 728, 731, 760, 764, 767, 768, 769, 778, 779, 781, 819, 831, 832, 833, 834, 835, 839, 843, 848, 858, 872, 881, 882, 907, 913, 914, 920, 921, 927, 928, 929, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 952, 953, 964, 968, 1010, 1030, 1041, 1049], "point": [11, 31, 41, 42, 122, 124, 145, 155, 171, 251, 293, 306, 310, 311, 342, 363, 368, 385, 387, 487, 488, 581, 630, 656, 662, 672, 684, 728, 764, 819, 839, 843, 858, 948, 949, 1041], "full": [11, 38, 65, 70, 72, 99, 100, 102, 110, 111, 155, 156, 251, 530, 531, 532, 535, 662, 663, 672, 728, 731, 996, 997, 998, 1001], "format": [11, 14, 18, 28, 31, 98, 99, 100, 110, 115, 143, 153, 167, 176, 193, 194, 211, 249, 251, 341, 344, 347, 446, 519, 530, 531, 532, 535, 654, 660, 676, 709, 728, 821, 824, 985, 996, 997, 998, 1001, 1040], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 82, 88, 90, 92, 94, 97, 99, 100, 101, 103, 106, 107, 110, 113, 120, 122, 123, 125, 126, 132, 133, 142, 143, 145, 146, 158, 167, 168, 171, 172, 179, 180, 195, 200, 201, 205, 207, 218, 222, 225, 234, 236, 245, 251, 276, 282, 288, 299, 305, 308, 322, 325, 330, 332, 342, 349, 350, 352, 356, 357, 358, 362, 364, 370, 375, 385, 387, 395, 396, 404, 410, 419, 423, 425, 462, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 494, 503, 515, 518, 520, 526, 527, 533, 544, 550, 556, 573, 574, 581, 591, 609, 610, 613, 617, 620, 630, 644, 646, 654, 655, 656, 657, 664, 671, 681, 689, 690, 693, 696, 698, 700, 704, 713, 715, 724, 728, 759, 766, 777, 780, 795, 798, 807, 809, 819, 826, 827, 829, 832, 833, 834, 835, 838, 840, 847, 858, 874, 883, 889, 898, 902, 904, 917, 918, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 956, 957, 960, 968, 981, 984, 986, 992, 993, 999, 1011, 1025, 1030, 1041, 1049], "plai": [12, 572], "sam": 12, "As": [12, 88, 90, 91, 92, 94, 103, 106, 107, 251, 728], "time": [12, 30, 38, 40, 50, 55, 70, 71, 110, 144, 155, 156, 170, 224, 251, 288, 312, 313, 314, 315, 320, 321, 337, 340, 341, 344, 346, 347, 348, 351, 401, 402, 425, 478, 479, 480, 481, 482, 484, 485, 486, 530, 532, 535, 549, 550, 571, 572, 581, 583, 589, 619, 630, 648, 662, 663, 668, 681, 728, 731, 737, 759, 785, 786, 787, 788, 793, 794, 814, 817, 818, 821, 823, 824, 825, 828, 880, 882, 996, 998, 1001, 1024, 1025, 1041, 1049], "goe": 12, "By": [12, 13, 65, 99, 100, 103, 110, 155, 156, 170, 205, 224, 225, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 503, 519, 556, 573, 596, 613, 620, 630, 662, 663, 668, 696, 704, 728, 814, 818, 825, 968, 985, 1022, 1030, 1041], "begin": [12, 356, 357, 358, 511, 581, 630, 833, 834, 835, 977, 1041], "beauti": 12, "friendship": 12, "len": [12, 31, 120, 122, 168, 251, 300, 306, 466, 473, 516, 522, 538, 630, 778, 928, 934, 982, 988, 1004, 1041], "u32": [12, 50, 155, 181, 229, 234, 242, 244, 251, 259, 266, 273, 274, 275, 276, 277, 299, 300, 318, 322, 326, 330, 332, 338, 339, 342, 349, 350, 395, 399, 400, 403, 414, 435, 453, 458, 469, 476, 478, 479, 481, 484, 485, 486, 489, 506, 515, 518, 549, 553, 559, 564, 566, 567, 574, 604, 630, 662, 679, 708, 713, 721, 723, 728, 747, 748, 749, 760, 791, 795, 802, 804, 807, 809, 812, 815, 816, 819, 826, 827, 848, 893, 930, 937, 972, 981, 984, 1024, 1027, 1029, 1041], "37": 12, "beaut": 12, "48": [12, 156, 251, 663, 728], "fmt_str_length": 12, "50": [12, 31, 144, 251, 294, 295, 296, 341, 348, 630, 767, 825, 1041], "print": [12, 15, 17, 18, 23, 100, 116, 141, 153, 154, 168, 171, 213, 230, 251, 377, 446, 583, 630, 665, 728, 859, 938, 1020, 1041, 1049], "overwrit": [13, 29, 30, 88, 90, 91, 92, 94, 99, 100, 106, 107, 110, 130, 251, 655, 728], "chunk": [13, 97, 99, 100, 108, 110, 112, 113, 114, 122, 124, 144, 168, 179, 251, 264, 470, 630, 693, 728, 737, 765, 844, 917, 931, 1017, 1041], "stream": [13, 32, 71, 132, 154, 169, 218, 220, 251, 644, 648, 653, 655, 661, 667, 672, 676, 681, 691, 692, 693, 695, 700, 701, 728], "engin": [13, 29, 101, 126, 131, 154, 169, 220, 233, 251, 661, 667, 672, 676, 701, 712, 728, 738, 1041], "determin": [13, 31, 63, 65, 72, 91, 94, 99, 100, 103, 108, 110, 114, 131, 149, 155, 156, 167, 168, 219, 224, 251, 292, 324, 340, 425, 435, 443, 472, 478, 479, 480, 481, 482, 484, 485, 486, 498, 513, 533, 605, 608, 622, 630, 662, 663, 728, 763, 797, 817, 848, 904, 911, 964, 979, 999, 1041], "schema": [13, 30, 50, 56, 66, 67, 68, 72, 73, 83, 84, 86, 88, 90, 91, 92, 94, 95, 99, 100, 101, 105, 106, 107, 109, 110, 113, 120, 122, 131, 133, 134, 141, 142, 177, 180, 214, 251, 278, 279, 280, 425, 443, 513, 558, 614, 630, 646, 647, 652, 672, 677, 709, 712, 728, 731, 752, 770, 979, 1041], "thread": [13, 28, 97, 99, 100, 101, 126, 251, 265, 406, 488, 494, 630, 885], "pool": [13, 126], "For": [13, 30, 31, 101, 102, 103, 111, 144, 156, 169, 170, 233, 251, 290, 356, 357, 358, 425, 444, 466, 471, 498, 505, 511, 512, 520, 576, 581, 587, 588, 630, 663, 668, 712, 728, 737, 833, 834, 835, 932, 964, 971, 977, 978, 986, 1022, 1041], "some": [13, 26, 30, 31, 91, 99, 100, 110, 140, 251, 651, 728, 859, 1041, 1049], "dataset": [13, 99, 100, 110, 115, 169, 251, 392, 630, 641, 667, 672, 728, 872, 1041], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 38, 55, 56, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 99, 100, 104, 108, 110, 111, 112, 113, 122, 124, 131, 132, 141, 142, 144, 146, 149, 155, 156, 169, 183, 192, 194, 197, 204, 212, 214, 218, 220, 251, 294, 295, 296, 340, 356, 357, 358, 364, 425, 433, 435, 444, 462, 476, 500, 501, 517, 523, 529, 530, 566, 576, 581, 587, 630, 644, 657, 662, 663, 667, 672, 687, 693, 695, 700, 701, 728, 737, 767, 768, 769, 817, 832, 833, 834, 835, 840, 911, 937, 952, 953, 983, 989, 995, 996, 1018, 1041], "have": [13, 26, 31, 38, 65, 73, 89, 99, 100, 101, 103, 122, 124, 144, 156, 167, 187, 193, 194, 211, 251, 289, 305, 356, 357, 358, 444, 466, 469, 530, 532, 581, 630, 663, 676, 691, 708, 728, 731, 737, 777, 833, 834, 835, 845, 928, 930, 996, 998, 1041, 1049], "larg": [13, 65, 155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "element": [13, 23, 121, 124, 132, 166, 184, 192, 205, 218, 225, 251, 265, 267, 268, 269, 270, 271, 272, 288, 297, 298, 300, 301, 302, 303, 304, 305, 360, 374, 383, 403, 405, 406, 407, 411, 426, 429, 430, 460, 461, 469, 472, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 495, 496, 497, 502, 503, 526, 527, 533, 547, 548, 550, 556, 573, 609, 610, 613, 620, 630, 644, 695, 696, 700, 704, 728, 738, 739, 740, 741, 742, 743, 744, 759, 766, 771, 772, 773, 774, 775, 776, 777, 836, 841, 847, 859, 871, 874, 882, 884, 885, 886, 890, 905, 908, 909, 924, 930, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 961, 962, 963, 967, 968, 992, 993, 999, 1011, 1014, 1015, 1020, 1025, 1026, 1030, 1041], "too": [13, 155, 156, 170, 224, 251, 337, 341, 348, 476, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "optimist": 13, "lead": [13, 95, 115, 155, 156, 251, 265, 433, 490, 517, 529, 538, 545, 555, 573, 630, 662, 663, 672, 712, 728, 738, 954, 983, 995, 1004, 1041], "out": [13, 95, 116, 156, 194, 251, 284, 381, 384, 409, 424, 505, 507, 621, 630, 663, 692, 693, 728, 755, 888, 903, 971, 973], "memori": [13, 72, 88, 89, 92, 93, 94, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 144, 194, 202, 233, 251, 460, 470, 493, 630, 693, 728, 737, 738, 931, 958, 959, 1041], "error": [13, 30, 74, 99, 100, 110, 155, 156, 170, 184, 192, 224, 251, 284, 290, 337, 341, 348, 391, 412, 424, 478, 479, 480, 481, 482, 484, 485, 486, 505, 507, 511, 513, 514, 530, 531, 532, 535, 630, 662, 663, 668, 712, 728, 755, 760, 814, 818, 825, 891, 903, 971, 973, 977, 979, 980, 996, 997, 998, 1001, 1041], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 72, 80, 82, 87, 91, 92, 94, 95, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 122, 131, 132, 133, 140, 144, 147, 149, 153, 154, 155, 157, 158, 163, 165, 166, 167, 168, 170, 171, 172, 176, 180, 194, 195, 203, 207, 208, 211, 213, 218, 220, 222, 223, 229, 233, 236, 245, 251, 265, 276, 361, 375, 396, 407, 425, 460, 461, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 499, 501, 510, 513, 544, 565, 566, 576, 577, 587, 591, 593, 594, 607, 609, 610, 617, 621, 630, 644, 646, 648, 651, 655, 658, 659, 662, 664, 668, 669, 671, 672, 676, 693, 694, 698, 699, 700, 701, 703, 708, 712, 715, 724, 728, 737, 837, 847, 871, 886, 924, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 965, 976, 979, 1011, 1041, 1049], "per": [13, 28, 31, 120, 122, 132, 153, 180, 181, 204, 218, 240, 242, 243, 251, 265, 289, 406, 409, 424, 501, 566, 630, 644, 695, 700, 719, 721, 722, 728, 885, 888, 903], "everi": [13, 99, 100, 110, 155, 208, 211, 224, 251, 300, 301, 302, 303, 304, 305, 341, 348, 361, 399, 400, 404, 405, 407, 409, 410, 420, 423, 510, 546, 576, 577, 630, 655, 662, 699, 728, 773, 774, 775, 776, 777, 818, 825, 837, 878, 879, 883, 884, 886, 888, 889, 899, 902, 976, 1013, 1041], "process": [13, 28, 126, 251, 692, 693, 728], "liter": [14, 18, 30, 50, 103, 122, 123, 124, 125, 153, 167, 173, 174, 178, 179, 182, 192, 193, 197, 206, 210, 223, 228, 251, 261, 263, 283, 314, 354, 355, 362, 369, 372, 373, 379, 391, 394, 432, 450, 452, 456, 457, 463, 505, 520, 521, 541, 551, 559, 560, 561, 562, 565, 567, 569, 571, 572, 578, 579, 580, 581, 582, 593, 594, 596, 598, 599, 602, 603, 605, 608, 611, 614, 615, 616, 618, 619, 622, 630, 657, 687, 703, 706, 728, 731, 735, 736, 754, 787, 838, 852, 952, 953, 971, 986, 987, 1041, 1048], "left": [14, 52, 65, 117, 118, 155, 156, 169, 170, 223, 251, 356, 357, 358, 378, 379, 478, 479, 480, 481, 482, 484, 485, 486, 489, 516, 538, 549, 569, 576, 577, 581, 587, 607, 619, 621, 630, 662, 663, 667, 668, 703, 728, 833, 834, 835, 852, 950, 982, 1004, 1024, 1041], "center": [14, 31, 251, 356, 357, 358, 477, 478, 479, 480, 481, 482, 484, 485, 486, 630, 833, 834, 835, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1041], "right": [14, 16, 31, 99, 100, 117, 118, 155, 156, 169, 170, 251, 306, 356, 357, 358, 379, 405, 411, 426, 466, 478, 479, 480, 481, 482, 484, 485, 486, 489, 498, 522, 569, 581, 619, 630, 662, 663, 667, 668, 728, 778, 833, 834, 835, 852, 884, 890, 905, 928, 950, 964, 988, 1041], "cell": 14, "align": [14, 31, 65, 72, 251, 538, 1004], "keyerror": [14, 18], "recognis": [14, 18, 119], "column_abc": 14, "column_xyz": 14, "visibl": [15, 142, 251, 832, 1041], "eg": [15, 23, 31, 101, 251, 341, 530, 532, 551, 630, 996, 998], "low": [15, 126], "rang": [15, 31, 101, 137, 142, 155, 168, 251, 306, 307, 318, 332, 338, 339, 341, 348, 349, 378, 466, 565, 571, 580, 581, 582, 593, 594, 618, 619, 630, 662, 728, 778, 779, 791, 809, 815, 816, 818, 825, 826, 832, 924, 928, 1041], "100": [15, 31, 91, 94, 99, 100, 110, 113, 251, 513, 533, 538, 728, 939, 940, 942, 979, 999, 1041, 1049], "98": [15, 161, 251, 288, 500, 533, 545, 550, 630, 999], "99": [15, 31, 145, 146, 161, 164, 251, 259, 288, 362, 364, 500, 545, 550, 630, 656, 657, 728, 831, 838, 1041], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 72, 95, 101, 110, 122, 124, 134, 144, 152, 155, 156, 158, 160, 161, 162, 179, 183, 185, 189, 190, 197, 207, 228, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 264, 273, 274, 275, 277, 294, 299, 301, 304, 306, 308, 310, 311, 312, 314, 320, 333, 334, 340, 341, 348, 351, 374, 375, 378, 383, 391, 395, 396, 404, 410, 419, 420, 423, 429, 461, 462, 466, 499, 538, 544, 558, 569, 576, 581, 584, 587, 589, 591, 596, 597, 617, 619, 630, 648, 662, 663, 664, 666, 671, 680, 681, 687, 693, 697, 698, 706, 710, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 738, 767, 778, 780, 785, 787, 793, 817, 825, 828, 831, 847, 859, 874, 883, 889, 898, 899, 902, 908, 924, 952, 953, 1011, 1041, 1049], "95": [15, 259, 630], "96": [15, 259, 630], "97": [15, 161, 251, 259, 630], "move": [16, 194, 251, 356, 357, 358, 478, 479, 481, 485, 630, 833, 834, 835, 939, 940, 942, 946, 1041], "inlin": [16, 194, 251, 505, 511, 512, 520, 971, 977, 978, 986], "parenthes": 16, "below": [17, 31, 102, 111, 140, 251, 364, 378, 581, 621, 630, 651, 728], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 95], "utf8_full_condens": [18, 95], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 506, 511, 514, 972, 977, 980], "rounded_corn": 18, "style": [18, 31, 184, 251], "border": 18, "line": [18, 31, 99, 100, 103, 110, 153, 163, 165, 251, 511, 977], "includ": [18, 26, 28, 30, 31, 70, 102, 111, 122, 132, 137, 142, 155, 182, 194, 218, 219, 222, 251, 306, 342, 379, 466, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 523, 525, 526, 529, 576, 609, 610, 630, 644, 662, 700, 728, 778, 779, 819, 832, 852, 928, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 991, 992, 995, 1031, 1041], "divid": [18, 341, 348, 356, 357, 358, 392, 630, 818, 825, 833, 834, 835, 872, 1041], "dens": [18, 153, 251, 469, 630, 930, 1041], "space": [18, 155, 251, 662, 728], "horizont": [18, 72, 149, 160, 222, 251, 559, 560, 561, 562, 571, 572, 576, 577, 578, 579, 584, 587, 598, 599, 602, 603, 607, 615, 616], "markdown": 18, "compat": [18, 31, 35, 251, 505, 506, 511, 512, 520, 521, 693, 728, 731, 971, 972, 977, 978, 986, 987], "No": [18, 536, 1002], "appli": [18, 28, 31, 50, 72, 110, 119, 122, 124, 149, 183, 251, 318, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 352, 357, 358, 433, 462, 477, 478, 479, 481, 485, 520, 530, 531, 532, 535, 558, 576, 577, 587, 597, 607, 630, 664, 671, 672, 680, 728, 789, 790, 791, 795, 797, 798, 802, 804, 807, 809, 812, 815, 816, 819, 822, 826, 827, 829, 834, 835, 938, 939, 940, 942, 946, 986, 996, 997, 998, 1001, 1041], "round": [18, 31, 67, 95, 251, 293, 368, 547, 630, 764, 843, 1041], "corner": [18, 95], "op": [18, 124, 251, 472, 530, 532, 630, 728, 996, 998, 1041], "one": [18, 29, 31, 55, 65, 80, 88, 90, 91, 92, 93, 94, 106, 107, 123, 124, 125, 128, 146, 147, 153, 154, 155, 156, 167, 176, 184, 192, 193, 198, 214, 217, 232, 251, 259, 364, 391, 425, 430, 477, 500, 512, 545, 581, 612, 615, 621, 630, 657, 658, 661, 662, 663, 676, 688, 707, 711, 728, 737, 840, 868, 904, 909, 938, 978, 1005, 1041], "more": [18, 31, 33, 35, 55, 65, 72, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 106, 107, 108, 111, 122, 124, 128, 131, 136, 137, 167, 171, 176, 180, 192, 193, 195, 214, 220, 233, 251, 262, 265, 281, 294, 295, 296, 391, 392, 427, 430, 433, 459, 488, 498, 512, 530, 531, 532, 552, 612, 615, 621, 630, 676, 693, 701, 728, 731, 738, 753, 767, 768, 769, 779, 868, 872, 906, 949, 964, 978, 996, 997, 998, 1026, 1041, 1049], "semigraph": 18, "box": [18, 131, 251], "draw": [18, 23, 24, 121, 488, 494, 630, 1049], "found": [18, 28, 52, 75, 84, 86, 91, 95, 141, 223, 251, 489, 514, 530, 532, 630, 703, 728, 950, 980, 996, 998, 1041, 1048], "unicod": 18, "block": [18, 154, 220, 251, 661, 684, 701, 708, 712, 728, 952, 953, 1041], "http": [18, 31, 89, 101, 130, 136, 251, 511, 977], "en": [18, 31, 251], "wikipedia": 18, "org": [18, 89, 101, 130, 136, 251], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 251], "etc": [19, 30, 31, 99, 102, 104, 108, 111, 112, 114, 251, 731, 952, 953, 1041], "inform": [21, 70, 102, 111, 136, 251, 294, 295, 296, 392, 498, 505, 511, 512, 520, 581, 630, 681, 728, 767, 768, 769, 872, 964, 971, 977, 978, 986, 1041], "separ": [22, 28, 97, 99, 100, 110, 182, 184, 212, 219, 221, 251, 265, 407, 412, 510, 572, 576, 577, 630, 702, 728, 886, 891, 976, 1009, 1018, 1041], "between": [22, 72, 119, 120, 122, 124, 136, 186, 243, 251, 290, 309, 379, 405, 411, 412, 426, 461, 467, 482, 488, 494, 504, 573, 575, 606, 609, 610, 630, 682, 722, 728, 760, 781, 852, 884, 890, 891, 905, 924, 929, 943, 970, 1041], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 126, 137, 146, 154, 155, 156, 184, 251, 294, 295, 301, 364, 425, 460, 469, 478, 490, 527, 599, 612, 630, 657, 661, 662, 663, 693, 728, 767, 768, 773, 779, 840, 904, 930, 939, 954, 993, 1041], "both": [23, 28, 56, 155, 156, 169, 170, 177, 192, 251, 264, 379, 478, 479, 480, 481, 482, 484, 485, 486, 581, 619, 630, 640, 662, 663, 667, 668, 677, 728, 852, 861, 1041], "tbl_row": 23, "char": [24, 56, 73, 512, 518, 978, 984], "enabl": [25, 73, 127, 197, 228, 251, 490, 630, 687, 706, 728, 954, 1041], "addit": [25, 30, 31, 91, 102, 111, 120, 138, 143, 154, 182, 197, 198, 204, 221, 228, 231, 251, 258, 320, 359, 362, 460, 501, 505, 511, 512, 520, 559, 561, 566, 569, 570, 571, 572, 578, 585, 598, 602, 611, 614, 615, 630, 650, 654, 661, 687, 688, 695, 702, 706, 710, 728, 785, 793, 838, 971, 977, 978, 986, 1041], "verbos": [25, 128, 512, 978], "debug": [25, 648, 655, 672, 728, 1049], "log": [25, 67, 288, 353, 430, 452, 463, 550, 630, 759, 831, 1025, 1041], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 70, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 122, 167, 182, 188, 192, 193, 194, 196, 210, 211, 251, 306, 435, 466, 476, 630, 684, 686, 728, 911, 1041], "show": [26, 31, 54, 140, 153, 171, 181, 251, 651, 681, 691, 728], "variabl": [26, 47, 52, 123, 126, 176, 212, 251, 676, 728, 1018, 1041, 1048], "restrict": [26, 527, 581, 993], "dictionari": [26, 31, 88, 90, 91, 92, 94, 99, 100, 105, 106, 107, 109, 110, 167, 182, 192, 193, 194, 210, 211, 251, 435, 630, 728, 779, 911, 1041], "those": [26, 31, 99, 194, 251, 469, 511, 630, 731, 930, 977, 1041], "been": [26, 31, 251, 469, 478, 479, 480, 481, 482, 484, 485, 486, 565, 630, 930, 1041], "set_fmt_float": 26, "directli": [26, 52, 122, 124, 128, 194, 251, 356, 357, 358, 608, 630, 728, 833, 834, 835, 1041, 1049], "via": [26, 99, 100, 103, 110, 112, 113, 114, 167, 193, 251, 265, 630], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 98, 99, 103, 104, 105, 108, 109, 251], "bytesio": [27, 28, 31, 32, 35, 98, 99, 100, 103, 104, 108, 251], "compress": [27, 32, 35, 251, 692, 693, 728], "avrocompress": [27, 251], "uncompress": [27, 32, 35, 104, 112, 251, 693, 728], "write": [27, 28, 29, 30, 31, 32, 33, 35, 100, 104, 128, 251, 294, 295, 296, 448, 630, 670, 691, 693, 709, 728, 767, 768, 769, 1041], "apach": [27, 35, 98, 101, 251], "avro": [27, 98, 251, 641], "should": [27, 28, 29, 31, 32, 33, 34, 35, 72, 88, 90, 92, 94, 102, 106, 107, 110, 119, 120, 124, 130, 131, 132, 138, 155, 156, 167, 170, 192, 193, 194, 211, 212, 218, 221, 224, 233, 251, 259, 265, 292, 305, 306, 337, 341, 348, 351, 359, 385, 387, 406, 466, 477, 478, 479, 480, 481, 482, 484, 485, 486, 489, 498, 570, 585, 592, 596, 609, 610, 621, 630, 644, 650, 662, 663, 667, 668, 672, 691, 692, 693, 695, 700, 702, 709, 728, 731, 738, 763, 777, 778, 814, 818, 825, 828, 885, 928, 938, 939, 940, 941, 942, 943, 945, 946, 947, 950, 964, 1041], "snappi": [27, 35, 251, 693, 728], "deflat": [27, 251], "import": [27, 28, 31, 32, 35, 38, 65, 88, 92, 93, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 153, 155, 168, 170, 214, 215, 222, 224, 251, 307, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 581, 583, 619, 630, 641, 662, 668, 672, 728, 771, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 856, 860, 862, 863, 868, 938, 962, 1014, 1041, 1049], "pathlib": [27, 28, 32, 35, 110, 251], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 225, 226, 227, 230, 251, 260, 291, 294, 295, 296, 337, 375, 377, 396, 402, 408, 409, 413, 414, 473, 491, 492, 504, 506, 508, 510, 512, 517, 523, 525, 527, 529, 534, 537, 544, 546, 564, 568, 570, 573, 574, 575, 586, 590, 591, 595, 598, 600, 601, 602, 604, 606, 611, 613, 617, 620, 621, 630, 649, 650, 651, 652, 658, 665, 666, 667, 679, 684, 686, 687, 701, 702, 705, 707, 709, 728, 731, 762, 767, 814, 891, 934, 972, 974, 976, 978, 993, 1000, 1003, 1041], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 195, 196, 197, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 220, 221, 225, 226, 230, 251, 260, 291, 377, 414, 498, 508, 510, 525, 527, 564, 568, 570, 573, 574, 575, 586, 591, 595, 598, 600, 601, 602, 604, 611, 613, 617, 620, 621, 630, 649, 650, 651, 652, 658, 665, 666, 667, 679, 684, 686, 687, 701, 702, 705, 709, 728, 731, 762, 891, 964, 974, 976, 993, 1041], "ham": [27, 28, 30, 32, 35, 135, 136, 138, 139, 140, 141, 147, 148, 150, 157, 158, 160, 169, 173, 174, 175, 178, 181, 186, 188, 190, 192, 195, 196, 197, 200, 201, 203, 205, 206, 207, 212, 213, 214, 215, 216, 220, 225, 226, 251, 291, 570, 649, 650, 651, 652, 658, 667, 679, 684, 686, 687, 701, 707, 728, 762], "d": [27, 28, 30, 32, 35, 56, 73, 91, 115, 137, 153, 155, 157, 158, 161, 169, 207, 209, 222, 226, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 258, 321, 344, 347, 379, 462, 493, 506, 512, 526, 530, 531, 532, 569, 589, 630, 662, 667, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 794, 821, 824, 852, 972, 978, 992, 996, 997, 998, 1041], "e": [27, 28, 30, 32, 35, 56, 73, 89, 99, 100, 103, 104, 108, 112, 114, 137, 153, 155, 156, 158, 170, 207, 209, 214, 222, 224, 251, 258, 265, 337, 341, 348, 353, 359, 379, 428, 435, 478, 479, 480, 481, 482, 484, 485, 486, 493, 498, 585, 621, 630, 662, 663, 668, 670, 684, 728, 731, 814, 818, 825, 831, 852, 951, 964, 1022, 1041], "dirpath": [27, 28, 32, 35, 110, 251], "new_fil": [27, 28, 32, 35, 251], "has_head": [28, 31, 99, 100, 103, 110, 251], "quot": [28, 29, 99, 100, 110, 251], "batch_siz": [28, 99, 100, 113, 251], "1024": [28, 99, 100, 113, 251, 693, 728], "datetime_format": [28, 251], "date_format": [28, 251], "time_format": [28, 251], "float_precis": [28, 31, 251], "null_valu": [28, 99, 100, 110, 251], "textiowrapp": [28, 251], "comma": [28, 251], "csv": [28, 99, 100, 103, 110, 251, 641, 692, 693, 728], "result": [28, 33, 34, 65, 72, 92, 94, 101, 102, 110, 112, 114, 115, 124, 144, 155, 156, 169, 180, 194, 201, 215, 224, 231, 251, 265, 306, 344, 347, 356, 357, 358, 362, 392, 425, 433, 460, 466, 473, 477, 478, 479, 480, 481, 482, 484, 485, 486, 490, 492, 525, 526, 532, 551, 565, 576, 577, 581, 597, 605, 608, 609, 610, 622, 630, 645, 662, 663, 667, 672, 681, 690, 692, 693, 709, 710, 728, 737, 738, 821, 824, 833, 834, 835, 872, 928, 934, 938, 939, 940, 941, 942, 943, 945, 946, 947, 954, 957, 991, 992, 998, 1022, 1041, 1048, 1049], "If": [28, 29, 30, 31, 32, 33, 34, 50, 56, 70, 72, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 123, 130, 131, 132, 140, 144, 153, 155, 156, 158, 166, 167, 170, 172, 176, 180, 193, 194, 195, 203, 207, 211, 212, 214, 218, 219, 220, 222, 223, 251, 265, 294, 295, 296, 306, 314, 333, 334, 340, 365, 392, 420, 425, 433, 435, 446, 460, 466, 469, 471, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 494, 498, 499, 513, 515, 517, 518, 523, 524, 525, 526, 527, 529, 530, 531, 532, 535, 559, 561, 563, 565, 567, 573, 574, 576, 578, 581, 587, 593, 594, 596, 598, 602, 605, 608, 609, 610, 614, 615, 619, 621, 622, 630, 644, 651, 653, 662, 663, 667, 668, 672, 676, 684, 693, 694, 700, 701, 703, 709, 712, 728, 731, 737, 738, 767, 768, 769, 778, 787, 810, 811, 817, 845, 847, 848, 871, 872, 874, 899, 904, 928, 930, 932, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 949, 950, 954, 960, 964, 965, 979, 981, 983, 984, 989, 990, 991, 992, 993, 995, 996, 997, 998, 1001, 1011, 1017, 1022, 1031, 1041, 1048], "instead": [28, 33, 34, 50, 54, 65, 72, 99, 108, 122, 131, 155, 156, 167, 170, 180, 182, 192, 193, 194, 197, 215, 224, 228, 251, 275, 306, 337, 341, 348, 466, 478, 479, 480, 481, 482, 484, 485, 486, 515, 517, 523, 529, 559, 561, 565, 567, 578, 581, 593, 594, 598, 602, 605, 608, 614, 615, 619, 622, 630, 656, 662, 663, 668, 687, 706, 709, 728, 731, 747, 778, 814, 818, 825, 928, 952, 953, 981, 983, 989, 995, 1023, 1041, 1048], "whether": [28, 92, 94, 124, 132, 198, 218, 251, 306, 324, 340, 342, 397, 398, 440, 441, 466, 490, 581, 619, 630, 644, 672, 688, 695, 700, 728, 731, 778, 797, 817, 819, 876, 877, 928, 1041, 1048], "header": [28, 31, 35, 95, 99, 100, 103, 110, 141, 184, 219, 251, 693, 728], "field": [28, 57, 84, 86, 91, 214, 221, 251, 425, 435, 475, 512, 513, 526, 527, 540, 576, 577, 597, 614, 630, 702, 728, 778, 904, 928, 936, 992, 993, 1007, 1009, 1041], "symbol": [28, 251], "byte": [28, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 142, 251, 283, 286, 287, 515, 518, 693, 728, 754, 757, 758, 832, 981, 984, 1041], "specifi": [28, 31, 65, 75, 84, 86, 103, 122, 132, 138, 142, 143, 146, 154, 155, 156, 169, 182, 192, 194, 197, 198, 204, 218, 221, 228, 231, 251, 356, 357, 358, 359, 364, 435, 460, 472, 478, 479, 480, 481, 482, 484, 485, 486, 501, 516, 522, 559, 561, 566, 569, 570, 571, 572, 578, 581, 585, 598, 602, 611, 614, 615, 630, 644, 650, 654, 657, 661, 662, 663, 667, 687, 688, 695, 700, 702, 706, 710, 728, 832, 833, 834, 835, 840, 982, 988, 1041], "defin": [28, 31, 38, 119, 120, 122, 131, 155, 156, 180, 183, 233, 251, 265, 379, 424, 462, 476, 478, 479, 480, 481, 482, 484, 485, 486, 563, 581, 596, 614, 619, 630, 662, 663, 680, 712, 728, 731, 738, 852, 903, 937, 1041], "chrono": [28, 251, 344, 347, 530, 531, 532, 535, 821, 824, 996, 997, 998, 1001], "rust": [28, 35, 81, 104, 108, 131, 233, 251, 738, 1041], "crate": [28, 251, 505, 506, 511, 512, 520, 521, 530, 531, 532, 535, 731, 971, 972, 977, 978, 986, 987, 996, 997, 998, 1001], "fraction": [28, 117, 118, 195, 251, 342, 461, 488, 530, 532, 630, 819, 924, 949, 996, 998, 1041], "second": [28, 121, 155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 530, 532, 581, 582, 583, 618, 619, 621, 630, 662, 663, 668, 728, 731, 814, 818, 825, 996, 998, 1049], "precis": [28, 31, 38, 39, 167, 193, 194, 211, 251, 313, 533, 731, 786, 999], "infer": [28, 88, 90, 91, 92, 93, 94, 99, 100, 103, 106, 107, 110, 113, 131, 251, 473, 513, 530, 531, 532, 533, 535, 608, 630, 728, 934, 979, 996, 997, 998, 999, 1001, 1041], "maximum": [28, 99, 100, 110, 120, 121, 122, 124, 173, 251, 399, 436, 454, 469, 598, 599, 630, 673, 728, 767, 799, 878, 912, 920, 925, 930, 1041], "timeunit": [28, 38, 40, 251, 313, 314, 346, 351, 532, 581, 731, 786, 787, 823, 828, 998], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 72, 91, 117, 122, 131, 133, 167, 168, 177, 180, 183, 192, 193, 194, 215, 222, 251, 646, 677, 680, 728, 731, 766, 1041, 1048, 1049], "datetim": [28, 31, 65, 95, 122, 137, 153, 155, 156, 168, 170, 224, 251, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 402, 478, 479, 480, 481, 482, 484, 485, 486, 530, 532, 549, 581, 583, 589, 596, 619, 630, 662, 663, 668, 728, 731, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 868, 881, 882, 920, 921, 953, 996, 998, 1024, 1041], "place": [28, 132, 139, 160, 161, 184, 189, 194, 200, 201, 204, 218, 226, 251, 275, 412, 419, 491, 492, 500, 630, 644, 689, 690, 695, 700, 728, 747, 891, 898, 931, 933, 956, 957, 966, 1041], "float64": [28, 31, 91, 99, 122, 141, 142, 149, 196, 215, 228, 251, 267, 268, 269, 270, 271, 272, 290, 297, 298, 307, 342, 359, 385, 387, 468, 496, 497, 547, 548, 570, 585, 605, 608, 622, 630, 652, 686, 706, 728, 731, 819, 1023, 1028, 1041], "repres": [28, 48, 63, 88, 90, 92, 93, 94, 205, 225, 251, 385, 387, 503, 556, 559, 570, 573, 581, 585, 596, 609, 610, 613, 619, 620, 630, 696, 704, 728, 953, 968, 1030, 1041], "empti": [28, 79, 91, 99, 100, 103, 110, 133, 134, 155, 164, 176, 251, 596, 611, 646, 647, 662, 676, 728, 731, 766, 770, 855, 1041], "table_nam": [29, 31, 251], "connection_uri": [29, 101, 251], "if_exist": [29, 251], "dbwritemod": [29, 251], "fail": [29, 30, 89, 102, 104, 107, 111, 130, 220, 251, 276, 425, 530, 531, 532, 535, 630, 701, 728, 738, 996, 997, 998, 1001, 1041], "dbwriteengin": [29, 251], "sqlalchemi": [29, 251], "databas": [29, 101, 251, 641], "creat": [29, 31, 88, 92, 94, 111, 120, 121, 122, 123, 124, 125, 133, 134, 155, 156, 181, 184, 224, 228, 251, 314, 341, 348, 425, 470, 478, 479, 481, 484, 485, 486, 524, 555, 571, 580, 581, 582, 583, 618, 619, 630, 646, 647, 653, 662, 663, 706, 728, 766, 770, 778, 783, 787, 818, 825, 922, 928, 931, 990, 1022, 1041, 1048, 1049], "append": [29, 30, 122, 144, 169, 170, 251, 306, 466, 470, 581, 621, 630, 667, 668, 728, 1041], "your": [29, 31, 65, 99, 100, 117, 118, 131, 167, 193, 194, 197, 211, 228, 231, 251, 265, 289, 530, 531, 532, 630, 648, 664, 671, 672, 687, 706, 710, 728, 738, 996, 997, 998, 1041, 1049], "special": [29, 99, 100, 110, 251, 512, 738, 978, 1041], "connect": [29, 99, 101, 104, 108, 112, 114, 115, 251, 642], "uri": [29, 30, 101, 102, 111, 251], "postgresql": [29, 101, 251, 460, 630], "user": [29, 101, 131, 183, 233, 251, 265, 433, 462, 490, 563, 581, 630, 680, 712, 728, 738, 954, 1041], "pass": [29, 31, 35, 53, 65, 90, 101, 103, 110, 120, 122, 124, 132, 136, 138, 154, 155, 156, 158, 172, 182, 183, 197, 204, 207, 218, 224, 228, 231, 251, 265, 321, 340, 362, 377, 460, 462, 478, 479, 480, 481, 482, 484, 485, 486, 501, 517, 523, 529, 559, 561, 566, 570, 578, 581, 589, 598, 602, 614, 615, 630, 644, 650, 661, 662, 663, 665, 672, 680, 687, 691, 695, 700, 706, 710, 712, 728, 738, 794, 817, 838, 847, 874, 983, 989, 995, 1011, 1041], "server": [29, 101, 251], "port": [29, 99, 101, 104, 108, 112, 114, 251], "sqlite": [29, 251], "db": [29, 101, 251], "replac": [29, 30, 99, 100, 110, 145, 146, 190, 219, 228, 251, 314, 340, 435, 521, 565, 630, 656, 706, 728, 787, 817, 911, 952, 953, 987, 1041], "insert": [29, 99, 100, 104, 108, 110, 112, 113, 114, 161, 189, 219, 221, 251, 489, 504, 538, 630, 702, 728, 950, 970, 1004, 1041], "mode": [29, 30, 50, 251, 512, 605, 608, 622, 630, 728, 978, 1041, 1048], "new": [29, 30, 31, 110, 128, 131, 140, 160, 161, 180, 181, 188, 189, 208, 221, 222, 228, 251, 260, 314, 361, 378, 434, 520, 521, 526, 527, 539, 540, 546, 565, 630, 641, 651, 684, 699, 702, 706, 712, 728, 734, 783, 787, 837, 922, 933, 986, 987, 992, 993, 1005, 1007, 1013, 1019, 1032, 1041, 1048], "alreadi": [29, 30, 251, 305, 406, 630, 777, 885, 1041], "adbc": [29, 101, 251], "deltalak": [30, 102, 111, 116, 251], "deltat": [30, 251], "ignor": [30, 121, 122, 124, 174, 206, 251, 308, 340, 356, 357, 358, 404, 454, 455, 630, 780, 817, 833, 834, 835, 883, 920, 921, 1041], "overwrite_schema": [30, 251], "storage_opt": [30, 99, 102, 104, 108, 111, 112, 114, 251], "delta_write_opt": [30, 251], "delta": [30, 40, 102, 111, 205, 225, 251, 484, 486, 503, 556, 573, 609, 610, 613, 620, 630, 641, 696, 704, 728, 945, 947, 968, 1030, 1041], "like": [30, 89, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 163, 165, 169, 214, 251, 312, 406, 447, 469, 511, 581, 615, 619, 630, 655, 683, 728, 785, 885, 930, 977, 1041], "categor": [30, 56, 73, 169, 212, 213, 251, 291, 292, 435, 549, 630, 731, 761, 762, 763, 778, 928, 1024, 1041], "protocol": [30, 89, 101, 130, 251], "object": [30, 31, 32, 35, 55, 72, 89, 90, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 122, 124, 130, 154, 155, 156, 171, 194, 214, 215, 251, 581, 596, 619, 641, 662, 663, 683, 728, 731, 761, 784, 875, 969, 1017, 1041], "handl": [30, 72, 95, 99, 100, 110, 115, 251, 308, 404, 538, 630, 780, 883, 1004, 1041], "throw": [30, 89, 251, 290, 513, 514, 630, 760, 979, 980, 1041], "add": [30, 31, 100, 131, 144, 155, 228, 229, 251, 464, 542, 583, 587, 621, 630, 662, 667, 706, 707, 708, 728, 737, 1041], "anyth": [30, 192, 251, 512, 978], "updat": [30, 251, 728], "extra": [30, 35, 99, 102, 103, 104, 108, 111, 112, 114, 144, 155, 251, 662, 693, 728, 737, 1041], "storag": [30, 99, 102, 104, 108, 111, 112, 114, 251], "backend": [30, 101, 102, 111, 251], "cloud": [30, 102, 111, 115, 251], "configur": [30, 102, 111, 251], "authent": [30, 102, 111, 251], "see": [30, 31, 38, 101, 102, 103, 111, 117, 118, 122, 124, 136, 169, 183, 251, 294, 295, 296, 364, 378, 392, 433, 498, 505, 511, 512, 520, 581, 607, 630, 731, 767, 768, 769, 872, 964, 971, 977, 978, 986, 1041, 1049], "here": [30, 31, 88, 90, 91, 92, 94, 101, 102, 106, 107, 111, 120, 122, 124, 251, 514, 728, 980], "gc": [30, 102, 111, 251], "azur": [30, 102, 111, 251], "keyword": [30, 53, 102, 108, 111, 136, 183, 192, 197, 228, 231, 251, 462, 611, 614, 630, 680, 687, 706, 710, 728, 1041], "argument": [30, 35, 99, 102, 108, 111, 136, 138, 143, 154, 155, 156, 174, 182, 183, 184, 197, 198, 204, 206, 215, 221, 224, 228, 231, 251, 341, 348, 359, 379, 460, 462, 478, 479, 480, 481, 482, 484, 485, 486, 501, 517, 523, 529, 559, 561, 566, 569, 570, 571, 572, 578, 581, 585, 598, 602, 608, 611, 614, 615, 619, 630, 650, 654, 661, 662, 663, 680, 687, 688, 695, 702, 706, 710, 728, 818, 825, 852, 983, 989, 995, 1023, 1041], "while": [30, 100, 102, 103, 111, 122, 124, 167, 176, 219, 251, 676, 728], "lake": [30, 102, 111, 251, 641], "instanti": [30, 31, 197, 228, 251, 687, 706, 728], "basic": [30, 31, 251, 1049], "filesystem": [30, 102, 111, 251], "table_path": [30, 102, 111, 251], "doe": [30, 65, 72, 82, 88, 90, 91, 92, 94, 95, 99, 100, 102, 103, 106, 107, 110, 111, 115, 117, 118, 144, 168, 169, 192, 193, 194, 220, 228, 251, 351, 425, 435, 553, 581, 586, 595, 630, 655, 667, 672, 701, 706, 728, 737, 828, 845, 911, 959, 1031, 1041], "match": [30, 31, 38, 72, 82, 88, 90, 91, 92, 94, 106, 107, 117, 118, 146, 170, 192, 251, 441, 483, 505, 506, 509, 511, 512, 513, 514, 520, 521, 528, 530, 531, 532, 570, 630, 657, 668, 728, 731, 861, 868, 944, 971, 972, 975, 977, 978, 979, 980, 986, 987, 994, 996, 997, 998, 1041], "version": [30, 70, 102, 111, 116, 251, 333, 334, 530, 532, 565, 581, 607, 608, 619, 810, 811, 996, 998], "old": [30, 188, 251, 684, 728], "existing_table_path": [30, 251], "store": [30, 99, 108, 144, 167, 193, 251, 291, 737, 762, 1041], "bucket": [30, 102, 111, 251, 341, 348, 818, 825, 848, 1041], "prefix": [30, 128, 251, 260, 287, 434, 528, 538, 542, 630, 731, 758, 994, 1004], "aws_region": [30, 111, 251], "the_aws_region": [30, 251], "aws_access_key_id": [30, 102, 111, 251], "the_aws_access_key_id": [30, 102, 111, 251], "aws_secret_access_kei": [30, 102, 111, 251], "the_aws_secret_access_kei": [30, 102, 111, 251], "workbook": [31, 251], "worksheet": [31, 251], "posit": [31, 138, 143, 154, 182, 197, 198, 204, 221, 228, 231, 251, 356, 357, 358, 359, 460, 501, 519, 559, 561, 566, 569, 570, 571, 572, 578, 585, 598, 602, 611, 614, 615, 630, 650, 654, 661, 687, 688, 695, 702, 706, 710, 728, 833, 834, 835, 985, 1041], "tupl": [31, 101, 131, 167, 192, 193, 194, 199, 230, 251, 473, 630, 681, 691, 728, 731, 934, 1041], "a1": [31, 66, 68, 251], "table_styl": [31, 251], "column_format": [31, 251], "dtype_format": [31, 251], "oneormoredatatyp": [31, 120, 251, 868, 1041], "conditional_format": [31, 251], "conditionalformatdict": [31, 251], "column_tot": [31, 251], "columntotalsdefinit": [31, 251], "column_width": [31, 251], "row_tot": [31, 251], "rowtotalsdefinit": [31, 251], "row_height": [31, 251], "sparklin": [31, 251], "sequenc": [31, 57, 65, 71, 88, 90, 91, 92, 94, 97, 99, 100, 106, 107, 110, 120, 121, 122, 132, 137, 143, 144, 169, 170, 176, 180, 183, 184, 194, 204, 212, 218, 220, 221, 222, 223, 224, 251, 383, 425, 433, 462, 501, 540, 563, 566, 576, 577, 587, 589, 597, 607, 612, 630, 644, 654, 667, 668, 680, 695, 700, 701, 702, 703, 728, 737, 779, 781, 904, 953, 1007, 1041], "formula": [31, 251, 353, 630, 831, 1041], "autofilt": [31, 251], "autofit": [31, 251], "hidden_column": [31, 251], "hide_gridlin": [31, 251], "sheet_zoom": [31, 251], "excel": [31, 103, 251, 641], "open": [31, 99, 100, 103, 104, 108, 112, 114, 251], "xlsxwriter": [31, 116, 251], "ha": [31, 65, 110, 130, 155, 156, 224, 251, 265, 288, 305, 391, 444, 478, 479, 480, 481, 482, 484, 485, 486, 550, 563, 565, 630, 662, 663, 712, 728, 759, 766, 777, 779, 845, 858, 1025, 1041], "close": [31, 155, 156, 251, 379, 430, 478, 479, 480, 481, 482, 484, 485, 486, 498, 581, 619, 630, 662, 663, 728, 852, 964, 1041], "xlsx": [31, 103, 251], "work": [31, 39, 100, 103, 189, 251, 265, 281, 293, 294, 295, 296, 359, 368, 406, 427, 460, 476, 518, 552, 630, 753, 764, 767, 768, 769, 843, 885, 906, 984, 1026, 1041], "directori": [31, 108, 251], "sheet1": [31, 251], "valid": [31, 38, 50, 104, 108, 124, 128, 142, 169, 251, 305, 505, 506, 511, 512, 514, 520, 521, 581, 630, 667, 728, 731, 777, 832, 845, 971, 972, 977, 978, 980, 986, 987, 1041], "notat": [31, 251], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 120, 122, 123, 125, 155, 156, 251, 293, 342, 368, 369, 471, 478, 479, 480, 481, 482, 483, 484, 485, 486, 519, 558, 565, 589, 593, 594, 608, 630, 662, 663, 728, 731, 745, 746, 764, 819, 843, 861, 932, 944, 953, 985, 1041, 1048, 1049], "medium": [31, 251], "kei": [31, 65, 70, 72, 155, 167, 169, 170, 177, 182, 184, 188, 191, 193, 194, 251, 614, 662, 667, 668, 677, 684, 685, 728], "follow": [31, 70, 99, 100, 102, 110, 111, 131, 155, 156, 170, 183, 224, 251, 265, 337, 341, 348, 462, 469, 478, 479, 480, 481, 482, 483, 484, 485, 486, 540, 551, 563, 581, 621, 623, 624, 626, 630, 631, 632, 636, 637, 638, 662, 663, 668, 680, 728, 814, 818, 825, 930, 952, 953, 1033, 1035, 1037, 1041, 1042, 1045, 1046, 1047, 1049], "first_column": [31, 251], "last_column": [31, 251], "banded_column": [31, 251], "banded_row": [31, 251], "sheet": [31, 103, 251], "chart": [31, 251, 681, 728], "subsequ": [31, 55, 187, 215, 251, 425, 653, 728], "colnam": [31, 110, 122, 141, 251, 652, 728], "given": [31, 50, 51, 65, 88, 90, 91, 92, 94, 99, 100, 106, 107, 110, 119, 120, 122, 123, 124, 125, 131, 132, 142, 143, 155, 156, 166, 182, 183, 192, 194, 200, 201, 204, 218, 223, 251, 265, 306, 312, 315, 344, 346, 347, 353, 379, 402, 419, 425, 428, 460, 462, 466, 469, 472, 473, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 489, 491, 492, 512, 530, 532, 540, 581, 585, 608, 609, 610, 619, 630, 644, 654, 662, 663, 672, 680, 689, 690, 695, 700, 703, 712, 728, 731, 738, 778, 785, 788, 821, 823, 824, 831, 832, 848, 852, 871, 881, 898, 904, 907, 910, 922, 928, 930, 934, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 956, 957, 978, 996, 998, 1028, 1032, 1041, 1048, 1049], "dd": [31, 251], "mm": [31, 251], "yyyi": [31, 251], "00": [31, 122, 155, 170, 224, 251, 312, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 530, 532, 535, 581, 583, 619, 630, 662, 668, 728, 731, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 996, 998, 1001], "overridden": [31, 88, 90, 92, 94, 106, 107, 126, 251, 728], "basi": [31, 122, 251], "param": [31, 88, 90, 91, 92, 94, 99, 100, 106, 107, 110, 121, 122, 124, 192, 251, 728], "It": [31, 131, 177, 183, 233, 251, 265, 289, 443, 476, 581, 630, 672, 677, 712, 728, 952, 953, 1041], "also": [31, 55, 91, 110, 120, 121, 122, 123, 124, 128, 141, 154, 155, 156, 177, 180, 193, 197, 204, 228, 251, 301, 304, 340, 378, 379, 469, 478, 479, 480, 481, 482, 484, 485, 486, 501, 523, 529, 576, 577, 581, 587, 589, 607, 621, 629, 630, 635, 661, 662, 663, 677, 687, 695, 706, 707, 728, 731, 817, 852, 930, 995, 1041], "group": [31, 35, 50, 100, 154, 155, 156, 168, 180, 182, 184, 194, 222, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 259, 265, 361, 367, 406, 460, 466, 469, 476, 500, 501, 505, 511, 512, 520, 545, 563, 630, 661, 662, 663, 693, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728, 731, 885, 937, 971, 977, 978, 986, 1041], "float_dtyp": [31, 251], "simplifi": [31, 71, 251, 648, 653, 655, 681, 691, 692, 693, 728], "uniform": [31, 251], "condit": [31, 140, 147, 192, 251, 509, 528, 567, 587, 621, 651, 658, 728], "suppli": [31, 88, 90, 91, 92, 94, 106, 107, 192, 251, 462, 630, 728], "typenam": [31, 251], "3_color_scal": [31, 251], "data_bar": [31, 251], "make": [31, 57, 72, 88, 93, 99, 100, 104, 108, 112, 114, 177, 180, 187, 224, 251, 357, 358, 435, 460, 472, 488, 494, 526, 538, 630, 677, 728, 834, 835, 848, 911, 992, 1004, 1041, 1049], "icon": [31, 251], "multipl": [31, 53, 71, 72, 99, 100, 110, 112, 113, 114, 120, 124, 132, 138, 142, 144, 147, 154, 155, 160, 168, 182, 184, 194, 197, 198, 204, 218, 228, 231, 251, 424, 440, 444, 451, 452, 460, 473, 476, 478, 479, 480, 481, 482, 484, 485, 486, 501, 559, 561, 565, 566, 570, 576, 577, 578, 587, 597, 598, 602, 607, 612, 615, 621, 630, 644, 650, 658, 661, 662, 687, 688, 695, 700, 706, 710, 712, 728, 737, 832, 903, 916, 934, 1041], "singl": [31, 51, 65, 72, 99, 100, 101, 108, 110, 120, 138, 139, 140, 144, 151, 166, 169, 182, 192, 194, 204, 251, 265, 337, 365, 403, 424, 433, 470, 473, 501, 504, 557, 559, 561, 563, 565, 566, 570, 571, 572, 578, 594, 597, 598, 602, 612, 615, 630, 650, 651, 667, 695, 728, 737, 814, 882, 903, 931, 934, 970, 1017, 1041], "across": [31, 65, 251, 559, 560, 561, 562, 578, 579, 598, 599, 602, 603, 615, 616], "effect": [31, 130, 149, 155, 214, 251, 265, 320, 581, 630, 662, 708, 728, 785, 793], "heatmap": [31, 251], "min": [31, 35, 137, 146, 155, 156, 184, 251, 294, 296, 302, 364, 460, 469, 481, 603, 611, 619, 630, 657, 662, 663, 693, 728, 767, 769, 774, 779, 840, 930, 942, 1041, 1049], "entir": [31, 251], "final": [31, 65, 114, 251, 356, 357, 358, 630, 655, 728, 833, 834, 835, 1041], "made": [31, 251, 619, 1022, 1041], "up": [31, 57, 101, 167, 170, 193, 194, 211, 251, 265, 293, 538, 630, 667, 668, 672, 728, 731, 764, 1004, 1041], "abov": [31, 251, 621], "order": [31, 50, 52, 65, 91, 117, 131, 132, 154, 155, 156, 182, 183, 184, 195, 198, 204, 214, 218, 220, 224, 251, 265, 275, 281, 292, 421, 427, 469, 488, 489, 490, 494, 500, 501, 540, 552, 553, 566, 630, 640, 644, 661, 662, 663, 676, 688, 692, 693, 695, 700, 701, 728, 738, 747, 753, 763, 778, 867, 900, 906, 928, 930, 935, 949, 950, 954, 966, 1007, 1026, 1027, 1041], "than": [31, 87, 92, 94, 99, 100, 110, 115, 122, 124, 131, 133, 153, 154, 167, 170, 182, 192, 193, 195, 222, 233, 251, 265, 372, 373, 391, 394, 432, 446, 476, 488, 498, 516, 522, 527, 538, 573, 581, 615, 630, 661, 668, 692, 693, 728, 738, 937, 949, 964, 982, 988, 993, 1004, 1041, 1049], "total": [31, 142, 251, 832, 1041], "export": [31, 167, 168, 193, 194, 211, 214, 251], "numer": [31, 170, 251, 258, 294, 295, 296, 369, 379, 430, 450, 452, 463, 472, 493, 541, 551, 630, 641, 668, 728, 731, 767, 768, 769, 779, 852, 866, 951, 958, 1041, 1049], "associ": [31, 51, 53, 65, 101, 121, 194, 251], "sum": [31, 50, 142, 149, 154, 155, 156, 166, 184, 231, 251, 265, 303, 304, 353, 365, 425, 478, 481, 485, 557, 559, 576, 578, 579, 587, 607, 616, 630, 648, 653, 655, 661, 662, 663, 679, 681, 691, 710, 728, 731, 775, 776, 831, 832, 939, 940, 942, 945, 946, 947, 1041], "must": [31, 89, 90, 102, 111, 137, 143, 155, 156, 170, 177, 192, 251, 306, 425, 433, 466, 478, 479, 480, 481, 482, 484, 485, 486, 630, 654, 662, 663, 668, 672, 677, 728, 778, 779, 928, 1041], "funcnam": [31, 251], "averag": [31, 251, 356, 357, 358, 469, 630, 833, 834, 835, 930, 1041], "count_num": [31, 251], "count": [31, 50, 99, 100, 104, 108, 110, 112, 113, 114, 137, 155, 156, 170, 180, 181, 184, 219, 223, 224, 229, 233, 242, 251, 266, 300, 337, 395, 403, 453, 458, 478, 479, 480, 481, 482, 484, 485, 486, 506, 553, 555, 564, 604, 630, 662, 663, 668, 679, 703, 708, 712, 721, 728, 779, 814, 848, 882, 918, 923, 972, 1027, 1029, 1041], "std_dev": [31, 251], "var": [31, 125, 251, 486, 630, 728, 1041], "pixel": [31, 251], "unit": [31, 38, 40, 122, 124, 142, 251, 313, 314, 321, 346, 351, 431, 444, 530, 532, 554, 581, 589, 630, 681, 728, 731, 786, 787, 794, 823, 828, 832, 910, 996, 998, 1028, 1041, 1049], "hand": [31, 99, 100, 110, 251, 405, 411, 426, 884, 890, 905], "side": [31, 155, 156, 251, 379, 405, 411, 426, 478, 479, 480, 481, 482, 484, 485, 486, 489, 630, 662, 663, 728, 852, 884, 890, 905, 950, 1041], "call": [31, 54, 100, 122, 124, 128, 131, 154, 155, 156, 171, 250, 251, 265, 301, 304, 598, 602, 630, 642, 661, 662, 663, 727, 728, 731, 738, 1041], "ad": [31, 91, 130, 155, 219, 228, 251, 264, 362, 576, 577, 630, 662, 706, 728, 838, 1041], "end": [31, 99, 100, 108, 110, 155, 251, 283, 286, 287, 312, 337, 341, 342, 359, 379, 420, 505, 509, 512, 524, 528, 565, 570, 581, 585, 593, 594, 619, 621, 630, 662, 664, 671, 681, 728, 731, 757, 785, 814, 818, 852, 899, 975, 978, 990, 994, 1041], "wise": [31, 65, 149, 251, 267, 268, 269, 270, 271, 272, 297, 298, 360, 429, 495, 496, 497, 547, 548, 576, 577, 587, 598, 602, 607, 630, 739, 740, 741, 742, 743, 744, 771, 772, 836, 908, 909, 961, 962, 963, 1014, 1015, 1041], "particip": [31, 251], "distinct": [31, 124, 182, 251, 281, 427, 469, 583, 630, 753, 906, 930, 1041, 1049], "referenc": [31, 251, 540], "differ": [31, 99, 115, 117, 144, 155, 156, 167, 193, 194, 211, 219, 251, 308, 318, 337, 338, 340, 349, 355, 404, 435, 454, 455, 457, 488, 494, 530, 553, 581, 586, 589, 595, 630, 653, 662, 663, 728, 731, 737, 738, 780, 791, 814, 815, 817, 826, 883, 920, 921, 951, 996, 1041], "row_index": [31, 251], "height": [31, 140, 251], "provid": [31, 53, 99, 100, 101, 102, 110, 111, 122, 124, 166, 251, 265, 284, 285, 425, 433, 507, 508, 511, 513, 514, 589, 614, 630, 641, 692, 693, 728, 738, 755, 756, 848, 871, 973, 974, 977, 979, 980, 1041, 1048, 1049], "intersect": [31, 251, 731], "bodi": [31, 251], "start": [31, 98, 99, 100, 101, 104, 108, 110, 112, 113, 114, 126, 154, 155, 171, 203, 224, 229, 251, 283, 286, 287, 318, 321, 322, 324, 325, 330, 332, 338, 339, 341, 342, 346, 348, 349, 350, 352, 359, 379, 420, 478, 479, 481, 484, 485, 486, 499, 505, 509, 512, 524, 528, 565, 570, 576, 581, 585, 587, 593, 594, 619, 621, 630, 661, 662, 681, 694, 708, 728, 731, 758, 786, 788, 791, 794, 795, 797, 802, 804, 807, 809, 812, 815, 816, 818, 819, 823, 825, 826, 827, 828, 829, 852, 899, 965, 975, 978, 990, 994, 1041, 1049], "zero": [31, 88, 89, 98, 99, 100, 104, 108, 121, 130, 146, 167, 192, 209, 214, 215, 251, 364, 425, 430, 489, 498, 538, 551, 630, 646, 657, 728, 766, 840, 904, 964, 1004, 1017, 1022, 1023, 1041], "unless": [31, 65, 90, 215, 251, 523, 529, 608, 728, 995, 1023, 1031, 1041], "marker": [31, 251], "compliant": [31, 251], "case": [31, 65, 88, 90, 91, 92, 94, 106, 107, 114, 126, 131, 144, 155, 156, 167, 193, 194, 211, 251, 312, 433, 434, 443, 444, 505, 512, 520, 630, 662, 663, 728, 731, 737, 785, 971, 978, 986, 1041], "three": [31, 217, 251, 425, 489, 630, 904], "avail": [31, 97, 101, 102, 111, 120, 128, 250, 251, 469, 565, 623, 624, 626, 629, 630, 631, 632, 635, 636, 637, 638, 641, 642, 655, 727, 728, 731, 930, 1033, 1035, 1037, 1041, 1042, 1045, 1046, 1047], "insert_befor": [31, 251], "insert_aft": [31, 251], "respect": [31, 251], "direct": [31, 101, 108, 114, 222, 251], "far": [31, 251], "thei": [31, 91, 110, 117, 128, 171, 194, 251, 477, 630, 731, 938, 1041], "strongli": [31, 126, 131, 192, 233, 251, 265, 630, 738, 1041], "advis": [31, 171, 251, 289, 630], "structur": [31, 79, 83, 85, 144, 183, 194, 214, 251, 462, 630, 680, 728, 737, 1041], "wherev": [31, 131, 233, 251, 265, 630, 738, 1041], "possibl": [31, 99, 131, 132, 154, 167, 193, 218, 220, 233, 251, 265, 431, 443, 527, 554, 630, 644, 661, 695, 700, 701, 728, 738, 993, 1041], "simpl": [31, 124, 180, 251], "colx": [31, 55, 251, 731, 1049], "coli": [31, 251, 731, 1049], "after": [31, 55, 72, 91, 98, 99, 100, 104, 108, 110, 112, 113, 114, 144, 221, 250, 251, 359, 435, 460, 469, 538, 630, 702, 728, 737, 911, 930, 1004, 1041], "befor": [31, 99, 110, 126, 128, 144, 155, 170, 221, 251, 303, 304, 305, 435, 460, 461, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 538, 543, 609, 610, 630, 662, 665, 668, 702, 728, 737, 775, 776, 777, 911, 924, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1004, 1010, 1041], "most": [31, 52, 88, 99, 100, 101, 110, 251, 444, 451, 461, 527, 555, 630, 916, 924, 993, 1029, 1041, 1048], "mandatori": [31, 251], "return_dtyp": [31, 131, 251, 265, 433, 435, 563, 597, 630, 738, 911, 1041], "latter": [31, 144, 251, 737, 1041], "appropri": [31, 214, 251, 469, 630, 930, 1041], "pure": [31, 251], "actual": [31, 91, 103, 122, 124, 194, 251, 289, 630, 959, 1041], "indic": [31, 98, 99, 100, 104, 108, 110, 119, 120, 124, 155, 156, 170, 194, 198, 212, 224, 251, 276, 337, 341, 348, 381, 384, 385, 387, 388, 389, 424, 439, 442, 478, 479, 480, 481, 482, 484, 485, 486, 489, 495, 545, 566, 567, 630, 662, 663, 668, 688, 728, 731, 814, 818, 825, 856, 860, 862, 863, 864, 865, 903, 950, 961, 1012, 1018, 1041, 1049], "calcul": [31, 65, 155, 205, 225, 251, 308, 356, 357, 358, 392, 404, 405, 431, 483, 498, 503, 554, 556, 563, 573, 609, 610, 613, 620, 630, 662, 696, 704, 728, 780, 833, 834, 835, 872, 883, 884, 944, 964, 968, 1030, 1041], "individu": [31, 122, 156, 214, 251, 265, 512, 630, 663, 693, 728, 765, 978, 1041], "gridlin": [31, 251], "zoom": [31, 251], "level": [31, 35, 110, 112, 113, 114, 122, 131, 149, 180, 251, 365, 630, 664, 671, 693, 728], "definit": [31, 120, 251, 392, 630, 872, 1041], "take": [31, 122, 128, 149, 155, 177, 183, 184, 208, 214, 251, 337, 501, 546, 581, 584, 586, 595, 630, 662, 677, 699, 728, 814, 1013, 1032, 1041], "care": [31, 251, 265, 490, 630, 954, 1041], "rel": [31, 101, 102, 111, 117, 118, 251, 337, 356, 357, 358, 480, 482, 484, 486, 630, 814, 833, 834, 835, 1041], "readthedoc": [31, 251], "io": [31, 251], "working_with_conditional_format": [31, 251], "html": [31, 89, 130, 136, 251], "similarli": [31, 91, 155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "well": [31, 99, 100, 110, 143, 184, 251, 379, 581, 630, 654, 728, 852, 1041], "adjac": [31, 251], "two": [31, 55, 90, 92, 94, 101, 149, 176, 177, 184, 217, 232, 233, 251, 259, 309, 314, 425, 500, 545, 565, 573, 575, 609, 610, 619, 630, 676, 677, 711, 712, 728, 781, 787, 904, 1041], "help": [31, 251, 655, 728], "appear": [31, 91, 117, 251, 553, 630, 1027, 1041], "working_with_sparklin": [31, 251], "inject": [31, 65, 251], "locat": [31, 144, 190, 216, 221, 251, 489, 630, 702, 728, 737, 950, 953, 1012, 1041], "syntax": [31, 131, 180, 251, 505, 511, 512, 520, 691, 728, 971, 977, 978, 986, 1041], "ensur": [31, 73, 101, 121, 122, 124, 154, 182, 192, 251, 379, 555, 630, 661, 672, 728, 731, 1022, 1029, 1041], "correctli": [31, 251], "microsoft": [31, 116, 251], "com": [31, 101, 251, 356, 357, 358, 511, 512, 630, 833, 834, 835, 977, 978, 1041], "u": [31, 38, 40, 53, 95, 251, 313, 314, 321, 346, 351, 530, 532, 581, 589, 731, 786, 787, 794, 823, 828, 996, 998], "offic": [31, 251], "f5ed2452": [31, 251], "2337": [31, 251], "4f71": [31, 251], "bed3": [31, 251], "c8ae6d2b276": [31, 251], "random": [31, 120, 122, 124, 157, 195, 251, 374, 469, 488, 494, 630, 846, 930, 949, 960, 1041], "date": [31, 38, 65, 99, 100, 101, 110, 115, 122, 137, 153, 155, 156, 168, 170, 224, 251, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 402, 478, 479, 480, 481, 482, 484, 485, 486, 530, 531, 549, 581, 589, 596, 618, 630, 662, 663, 668, 728, 731, 785, 786, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 868, 881, 882, 920, 921, 953, 996, 997, 1024, 1041], "dtm": [31, 251, 314, 787], "2023": [31, 95, 116, 168, 251, 314, 581, 596, 731, 787], "num": [31, 217, 251, 379, 382, 538, 630, 852, 1041], "500": [31, 167, 223, 251, 655, 703, 728, 802, 804, 812, 819, 939, 940, 942, 1041], "val": [31, 191, 251, 292, 462, 549, 621, 630, 685, 728, 763], "10_000": [31, 251], "20_000": [31, 251], "30_000": [31, 251], "increas": [31, 65, 99, 108, 251, 305, 630, 777, 1041], "b4": [31, 251], "light": [31, 251], "twice": [31, 103, 251], "each": [31, 65, 100, 113, 117, 118, 120, 131, 153, 154, 155, 156, 168, 170, 182, 215, 221, 224, 230, 231, 233, 234, 236, 245, 251, 265, 306, 337, 341, 348, 410, 423, 430, 466, 469, 476, 480, 482, 484, 486, 501, 512, 526, 527, 563, 565, 566, 572, 581, 593, 594, 614, 630, 662, 663, 668, 681, 702, 710, 712, 713, 715, 724, 728, 765, 778, 814, 818, 825, 889, 902, 928, 930, 937, 978, 992, 993, 1009, 1041, 1049], "titl": [31, 50, 251], "explicit": [31, 110, 120, 251, 607], "integr": [31, 251, 1049], "multi_fram": [31, 251], "wb": [31, 251], "coordin": [31, 251], "advanc": [31, 251, 425, 904, 1049], "min_color": [31, 251], "76933c": [31, 251], "mid_color": [31, 251], "c4d79b": [31, 251], "max_color": [31, 251], "ebf1d": [31, 251], "data_bar_2010": [31, 251], "bar_color": [31, 251], "9bbb59": [31, 251], "bar_negative_color_sam": [31, 251], "bar_negative_border_color_sam": [31, 251], "000": [31, 251, 1049], "white": [31, 251], "w": [31, 52, 53, 155, 194, 251, 511, 560, 562, 662, 728, 731, 977, 989], "get_worksheet_by_nam": [31, 251], "fmt_titl": [31, 251], "add_format": [31, 251], "font_color": [31, 251], "4f6228": [31, 251], "font_siz": [31, 251], "12": [31, 65, 95, 121, 122, 155, 156, 170, 224, 251, 303, 312, 314, 322, 325, 332, 333, 334, 339, 341, 348, 352, 461, 468, 485, 493, 533, 577, 580, 581, 582, 597, 619, 630, 662, 663, 664, 668, 671, 691, 698, 728, 731, 738, 778, 785, 787, 809, 818, 825, 948, 999, 1041, 1049], "ital": [31, 251], "bold": [31, 251], "customis": [31, 251], "trend": [31, 251], "win_loss": [31, 251], "subtl": [31, 251], "tone": [31, 251], "hidden": [31, 251], "id": [31, 72, 233, 251, 476, 520, 521, 553, 555, 630, 712, 937, 1027, 1041, 1049], "q1": [31, 251], "55": [31, 67, 251], "20": [31, 122, 144, 160, 161, 177, 183, 185, 189, 190, 251, 273, 274, 275, 308, 341, 348, 374, 378, 462, 478, 479, 481, 589, 596, 619, 630, 677, 680, 728, 731, 780, 825, 1041], "35": [31, 116, 251, 308, 630, 780, 1041], "q2": [31, 251], "30": [31, 144, 155, 160, 183, 189, 190, 210, 228, 251, 273, 274, 275, 308, 314, 319, 325, 333, 339, 340, 341, 348, 352, 374, 493, 581, 596, 619, 630, 662, 680, 706, 728, 731, 778, 780, 787, 792, 810, 817, 818, 825, 1041, 1049], "15": [31, 116, 121, 131, 155, 156, 161, 251, 305, 308, 334, 341, 348, 462, 485, 577, 608, 619, 630, 662, 663, 728, 731, 777, 780, 818, 825, 1041], "60": [31, 144, 251, 342, 343, 485, 530, 630, 815, 819, 820, 996], "q3": [31, 251], "40": [31, 144, 183, 251, 341, 348, 374, 533, 630, 680, 728, 798, 825, 999], "80": [31, 251], "q4": [31, 251], "75": [31, 137, 251, 262, 459, 478, 479, 480, 481, 484, 485, 486, 630, 779, 848, 928, 1041, 1049], "account": [31, 95, 101, 251, 337, 356, 357, 358, 630, 814, 833, 834, 835, 1041], "flavour": [31, 251], "integer_dtyp": [31, 197, 251, 687, 728, 731], "0_": [31, 251], "just": [31, 110, 176, 251, 676, 728], "unifi": [31, 251, 731], "multi": [31, 99, 100, 251, 359, 511, 598, 602, 630, 977], "2_color_scal": [31, 251], "95b3d7": [31, 251], "ffffff": [31, 251], "base": [31, 36, 140, 147, 155, 156, 251, 312, 320, 353, 356, 357, 358, 428, 429, 466, 519, 630, 651, 658, 662, 663, 728, 731, 785, 793, 831, 833, 834, 835, 848, 907, 908, 928, 985, 1032, 1041, 1049], "standardis": [31, 251], "z": [31, 52, 72, 95, 120, 122, 142, 163, 165, 169, 176, 193, 194, 251, 258, 262, 292, 374, 401, 459, 472, 512, 530, 532, 560, 562, 579, 599, 603, 608, 616, 630, 667, 676, 694, 728, 731, 763, 840, 978, 996, 998, 1041, 1048], "score": [31, 251], "conjunct": [31, 103, 251], "a123": [31, 251], "b345": [31, 251], "c567": [31, 251], "d789": [31, 251], "e101": [31, 251], "45": [31, 156, 251, 314, 341, 348, 485, 506, 512, 596, 619, 630, 663, 728, 731, 787, 818, 825, 972, 978, 1049], "85": [31, 251, 1049], "font": [31, 251], "consola": [31, 251], "standard": [31, 116, 205, 214, 251, 325, 357, 484, 498, 503, 514, 613, 630, 696, 728, 798, 834, 964, 968, 980, 1041, 1049], "stdev": [31, 251], "ipccompress": [32, 251], "arrow": [32, 74, 88, 101, 104, 112, 167, 193, 194, 209, 211, 251, 692, 728, 1017, 1022, 1041], "ipc": [32, 104, 105, 112, 115, 251, 641], "binari": [32, 251, 283, 285, 286, 287, 754, 756, 757, 758], "feather": [32, 104, 112, 251, 641], "lz4": [32, 35, 251, 692, 693, 728], "zstd": [32, 35, 251, 692, 693, 728], "pretti": [33, 251], "row_ori": [33, 251], "iobas": [33, 34, 106, 107, 251, 448, 683, 709, 728], "serial": [33, 34, 251], "represent": [33, 34, 213, 251, 292, 318, 322, 325, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 352, 549, 630, 653, 670, 728, 763, 791, 795, 797, 798, 802, 804, 807, 809, 812, 815, 816, 819, 826, 827, 829, 1020, 1024, 1041], "orient": [33, 66, 68, 92, 94, 251, 728], "slower": [33, 92, 94, 131, 154, 182, 224, 233, 251, 661, 728, 738, 1041], "common": [33, 65, 72, 251, 581, 635], "write_ndjson": [33, 251], "newlin": [34, 107, 113, 251], "delimit": [34, 99, 100, 107, 110, 113, 184, 212, 251, 504, 970, 1018, 1041], "parquetcompress": [35, 251], "compression_level": [35, 251, 693, 728], "statist": [35, 99, 100, 108, 114, 137, 251, 357, 358, 392, 478, 479, 480, 481, 482, 483, 484, 485, 486, 498, 630, 693, 728, 779, 834, 835, 872, 944, 964, 1041], "row_group_s": [35, 251, 693, 728], "use_pyarrow": [35, 99, 104, 108, 251, 693, 728, 1021, 1022, 1041], "pyarrow_opt": [35, 102, 108, 111, 251], "parquet": [35, 108, 109, 114, 251, 641, 693, 728], "gzip": [35, 251, 693, 728], "lzo": [35, 251, 693, 728], "brotli": [35, 251, 693, 728], "choos": [35, 184, 251, 692, 693, 728], "good": [35, 167, 251, 692, 693, 728], "perform": [35, 65, 79, 89, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 132, 154, 155, 156, 170, 187, 194, 218, 233, 251, 265, 289, 460, 530, 531, 532, 630, 644, 662, 663, 668, 692, 693, 695, 700, 708, 728, 738, 996, 997, 998, 1041], "fast": [35, 123, 125, 251, 362, 490, 630, 692, 693, 728, 838, 954, 1041, 1049], "decompress": [35, 251, 692, 693, 728], "backward": [35, 146, 170, 251, 282, 334, 364, 630, 657, 668, 693, 728, 811, 840, 1041], "guarante": [35, 89, 99, 100, 220, 251, 655, 693, 701, 728], "deal": [35, 167, 251, 340, 469, 530, 630, 693, 728, 817, 930, 996, 1041], "older": [35, 251, 693, 728], "reader": [35, 97, 99, 100, 104, 108, 251, 642, 693, 728], "higher": [35, 186, 243, 251, 467, 482, 606, 630, 682, 693, 722, 728, 929, 943, 1041], "mean": [35, 99, 100, 104, 108, 110, 137, 146, 154, 155, 156, 170, 184, 224, 231, 251, 337, 341, 348, 361, 364, 478, 479, 480, 481, 482, 484, 485, 486, 498, 511, 565, 568, 581, 630, 657, 661, 662, 663, 668, 672, 693, 710, 728, 779, 814, 818, 825, 837, 840, 845, 940, 964, 977, 1041], "smaller": [35, 142, 251, 655, 693, 728, 832, 1041], "disk": [35, 104, 251, 691, 692, 693, 728], "11": [35, 116, 122, 156, 251, 310, 311, 325, 333, 334, 337, 341, 348, 378, 461, 469, 485, 499, 538, 558, 570, 615, 630, 648, 663, 664, 671, 681, 693, 698, 728, 731, 738, 814, 818, 825, 938, 1041], "22": [35, 121, 251, 341, 348, 351, 478, 479, 481, 484, 485, 486, 530, 570, 630, 693, 728, 731, 818, 825, 828, 996, 1049], "comput": [35, 71, 72, 76, 142, 154, 170, 215, 220, 231, 243, 251, 257, 267, 268, 269, 270, 271, 272, 278, 279, 280, 297, 298, 300, 301, 302, 303, 304, 309, 353, 360, 392, 405, 411, 415, 416, 417, 426, 428, 429, 430, 451, 460, 461, 465, 466, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 495, 496, 497, 498, 502, 547, 548, 559, 560, 561, 562, 566, 573, 575, 578, 584, 598, 602, 609, 610, 615, 630, 661, 665, 667, 668, 693, 701, 707, 710, 722, 728, 733, 739, 740, 741, 742, 743, 744, 750, 751, 752, 771, 772, 773, 774, 775, 776, 781, 831, 832, 836, 872, 884, 890, 894, 895, 896, 905, 907, 908, 909, 916, 924, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 961, 962, 963, 964, 967, 1014, 1015, 1023, 1041], "512": [35, 251, 463, 630, 924, 1041], "implement": [35, 89, 130, 131, 233, 251, 265, 630, 712, 738, 952, 953, 1041], "v": [35, 52, 53, 142, 251, 489, 630, 778, 950, 1041], "At": [35, 251], "moment": [35, 136, 251, 392, 498, 630, 872, 964, 1041], "pyarrow": [35, 88, 93, 99, 101, 102, 104, 108, 111, 115, 116, 168, 209, 214, 215, 251, 642, 1017, 1021, 1022, 1023, 1041], "write_t": [35, 251], "calendar": [37, 38, 155, 156, 170, 224, 251, 325, 337, 341, 348, 352, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 798, 814, 818, 825, 829], "time_unit": [38, 40, 95, 313, 314, 321, 346, 351, 530, 532, 581, 589, 731, 786, 787, 794, 823, 828, 996, 998], "time_zon": [38, 95, 315, 340, 532, 581, 731, 785, 788, 793, 817, 998], "timezon": [38, 581, 731], "m": [38, 40, 53, 169, 251, 312, 313, 314, 320, 321, 344, 346, 347, 351, 511, 530, 531, 532, 535, 581, 589, 667, 728, 731, 785, 786, 787, 793, 794, 821, 823, 824, 828, 977, 996, 997, 998, 1001], "zone": [38, 312, 315, 340, 530, 532, 581, 731, 785, 788, 817, 996, 998], "zoneinfo": [38, 731], "run": [38, 71, 123, 125, 131, 154, 171, 184, 220, 233, 251, 265, 305, 406, 475, 476, 611, 630, 648, 653, 655, 661, 672, 676, 681, 691, 692, 693, 701, 728, 731, 738, 777, 885, 936, 937, 1041, 1048, 1049], "available_timezon": [38, 731], "check": [38, 99, 100, 110, 117, 118, 150, 155, 156, 164, 166, 169, 251, 261, 263, 283, 286, 287, 379, 383, 402, 505, 509, 528, 630, 662, 663, 667, 672, 728, 735, 736, 754, 757, 758, 853, 855, 858, 859, 861, 866, 867, 868, 870, 871, 881, 951, 971, 975, 994, 1041], "128": [39, 67, 924, 1041], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 471, 505, 630, 932, 971, 1041], "neg": [39, 155, 156, 158, 172, 200, 201, 203, 207, 251, 419, 420, 462, 491, 492, 499, 524, 630, 662, 663, 689, 690, 694, 708, 728, 847, 874, 898, 899, 956, 957, 965, 990, 1011, 1041], "scale": [39, 142, 251, 462, 533, 630, 832, 999, 1041], "experiment": [39, 115, 197, 222, 223, 228, 251, 305, 341, 478, 479, 480, 481, 482, 484, 485, 486, 630, 687, 703, 706, 728, 777, 818, 848, 928, 1041], "progress": 39, "expect": [39, 80, 82, 87, 265, 563, 596, 630, 670, 672, 728, 928, 1041], "32": [41, 44, 60, 67, 156, 166, 251, 452, 493, 630, 663, 728, 781, 815, 924, 943, 1041], "sign": [43, 44, 45, 46, 337, 471, 538, 630, 814, 861, 932, 1004, 1041], "arrai": [47, 88, 92, 99, 100, 108, 142, 209, 214, 215, 251, 278, 279, 280, 281, 285, 294, 295, 296, 300, 301, 302, 303, 304, 401, 414, 415, 416, 417, 418, 421, 422, 429, 478, 479, 481, 485, 490, 506, 508, 511, 514, 584, 630, 728, 750, 751, 752, 753, 756, 767, 768, 769, 773, 774, 775, 776, 781, 832, 880, 893, 894, 895, 896, 897, 900, 901, 908, 909, 939, 940, 942, 945, 946, 947, 954, 959, 972, 974, 977, 980, 1017, 1022, 1023, 1031, 1041], "integer_list": 47, "float_list": 47, "wrap": [49, 95, 379, 630], "arbitrari": [49, 122, 731], "python": [49, 99, 100, 116, 131, 167, 193, 194, 211, 233, 251, 265, 314, 433, 563, 581, 619, 621, 630, 635, 712, 738, 787, 799, 800, 801, 806, 1021, 1041], "queri": [50, 52, 71, 101, 104, 110, 112, 113, 114, 144, 171, 183, 251, 265, 433, 435, 514, 630, 648, 653, 655, 664, 671, 681, 691, 708, 712, 728, 737, 738, 980, 1041, 1048], "eager": [50, 51, 52, 53, 54, 55, 155, 222, 251, 306, 313, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 466, 478, 479, 481, 484, 485, 486, 565, 567, 581, 589, 593, 594, 605, 608, 614, 619, 622, 629, 630, 662, 728, 785, 786, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 1048], "pars": [50, 99, 100, 103, 107, 110, 112, 113, 132, 154, 197, 204, 218, 228, 231, 251, 379, 460, 501, 513, 519, 530, 532, 533, 559, 560, 561, 562, 566, 569, 571, 572, 578, 579, 589, 598, 599, 602, 603, 611, 612, 614, 615, 616, 630, 644, 661, 687, 695, 700, 706, 710, 728, 852, 979, 985, 996, 998, 999, 1041], "against": [50, 406, 728, 885, 1048, 1049], "eagerli": [50, 425], "unset": [50, 121, 340, 425, 817], "init": [50, 128], "eager_execut": [50, 1048], "itself": [50, 120, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 609, 610, 630, 670, 728, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1041, 1048], "alwai": [50, 99, 121, 131, 154, 233, 251, 443, 530, 581, 621, 672, 728, 738, 996, 1041, 1048, 1049], "impact": [50, 155, 251, 662, 728, 1048], "declar": [50, 88, 90, 91, 92, 94, 106, 107, 251, 728], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 612, 1048], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 324, 326, 333, 334, 337, 731, 797, 810, 811, 814], "533316061": 50, "232338648": 50, "1970": [50, 115], "134821952": 50, "register_glob": [51, 53, 55, 1048], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1048], "frame_data": [51, 54], "execut": [51, 52, 54, 72, 171, 251, 289, 406, 630, 645, 672, 681, 728, 885, 1048], "collect": [51, 52, 55, 68, 71, 110, 111, 115, 122, 124, 138, 140, 171, 209, 251, 265, 383, 571, 589, 614, 619, 630, 644, 650, 651, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 684, 685, 687, 689, 690, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 706, 707, 708, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 731, 859, 1041, 1048, 1049], "global": [52, 56, 73, 122, 127, 214, 251, 435, 630, 1048], "scope": [52, 55, 128, 640, 731, 1048], "automat": [52, 55, 88, 90, 91, 92, 94, 95, 99, 100, 101, 106, 107, 110, 122, 124, 126, 197, 228, 251, 435, 517, 523, 529, 630, 687, 706, 728, 911, 983, 989, 995, 1041, 1048], "map": [52, 53, 90, 91, 99, 100, 104, 105, 108, 109, 110, 112, 131, 141, 167, 188, 192, 193, 194, 210, 251, 341, 348, 434, 435, 460, 476, 555, 563, 630, 652, 684, 728, 818, 825, 911, 937, 1041, 1048], "recent": [52, 461, 630, 924, 1041, 1048], "df1": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 177, 215, 226, 251, 677, 728], "x": [52, 53, 65, 72, 95, 99, 100, 101, 110, 120, 122, 142, 160, 163, 165, 169, 176, 184, 193, 194, 251, 258, 262, 265, 306, 307, 354, 355, 369, 372, 373, 374, 394, 401, 412, 430, 432, 433, 450, 452, 456, 457, 459, 463, 466, 472, 476, 495, 498, 526, 541, 549, 551, 558, 560, 562, 563, 576, 577, 579, 587, 596, 597, 599, 603, 607, 616, 630, 667, 672, 676, 694, 728, 731, 734, 738, 840, 870, 961, 964, 992, 1024, 1041, 1048], "df2": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 215, 226, 251], "t": [52, 53, 72, 103, 110, 131, 155, 183, 220, 222, 251, 265, 305, 312, 320, 340, 353, 356, 357, 358, 406, 460, 462, 466, 511, 517, 530, 532, 563, 621, 630, 662, 680, 701, 728, 731, 738, 777, 817, 831, 833, 834, 835, 885, 928, 951, 977, 983, 989, 996, 998, 1031, 1041], "join": [52, 56, 65, 71, 72, 73, 170, 223, 251, 378, 460, 630, 648, 653, 655, 668, 681, 691, 703, 707, 728], "named_fram": [53, 1048], "lf1": [53, 55], "o": [53, 104, 112, 288, 305, 510, 550, 630, 759, 777, 976, 995, 1025, 1041], "lf2": [53, 55, 728], "p": [53, 67, 183, 251, 462, 466, 614, 630, 680, 728], "q": [53, 194, 251, 306, 466, 614, 630], "r": [53, 462, 506, 510, 511, 512, 520, 630, 731, 972, 976, 977, 978, 986], "lf3": [53, 728], "lf4": [53, 728], "either": [53, 122, 156, 166, 171, 174, 182, 192, 206, 214, 251, 530, 559, 566, 614, 663, 670, 728, 731, 996], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 621], "hello_world": 54, "baz": [54, 161, 162, 184, 221, 251, 525, 527, 666, 702, 728, 731, 993], "hello_data": 54, "foo_bar": [54, 596], "registr": [55, 641], "lifetim": [55, 128, 640], "context": [55, 56, 126, 180, 234, 251, 259, 265, 289, 299, 365, 406, 443, 500, 501, 555, 563, 574, 586, 589, 595, 608, 611, 619, 629, 630, 640, 641, 707, 713, 728, 885, 1048], "manag": [55, 56, 640, 641, 1048], "often": [55, 128, 155, 156, 251, 403, 472, 630, 662, 663, 728, 882], "want": [55, 91, 131, 144, 180, 251, 265, 294, 295, 296, 365, 433, 435, 476, 478, 479, 480, 481, 482, 484, 485, 486, 576, 587, 605, 608, 622, 630, 648, 664, 671, 728, 731, 737, 738, 767, 768, 769, 937, 1022, 1041], "df0": [55, 177, 251, 677, 728], "exit": [55, 56, 128, 1048], "construct": [55, 88, 90, 91, 92, 93, 94, 251, 371, 435, 605, 608, 622, 630, 660, 683, 728, 1041], "persist": [55, 692, 693, 728], "through": [55, 731, 1041], "tbl0": 55, "remain": [55, 99, 100, 110, 142, 251, 526, 527, 565, 672, 728, 832, 992, 993, 1041], "text": [55, 518, 520, 521, 612, 984, 1049], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 126, 128, 155, 156, 251, 662, 663, 728], "cach": [56, 71, 73, 104, 110, 112, 114, 127, 435, 478, 479, 480, 481, 482, 484, 485, 486, 530, 531, 532, 535, 630, 640, 648, 653, 655, 681, 691, 728, 996, 997, 998, 1001], "categori": [56, 73, 212, 251, 291, 292, 306, 466, 630, 762, 763, 778, 848, 928, 1041], "until": [56, 171, 251, 289, 581, 630], "finish": [56, 76, 144, 251, 737, 1041], "invalid": [56, 99, 100, 110, 513, 514, 519, 551, 581, 630, 979, 980, 985], "outermost": 56, "color": [56, 73, 233, 283, 285, 286, 287, 712], "red": [56, 73, 233, 712], "green": [56, 73, 233, 712], "blue": [56, 73, 283, 285, 286, 287], "orang": [56, 73, 135, 234, 235, 237, 238, 239, 241, 243, 244, 251, 713, 714, 716, 717, 718, 720, 722, 723], "uint8": [56, 73, 119, 121, 213, 214, 251, 303, 304, 435, 543, 558, 630, 731, 775, 776, 1010, 1041, 1049], "yellow": [56, 73, 283, 285, 286, 287], "black": [56, 73, 131, 251, 283, 285, 286, 287], "succe": [56, 99, 100, 110], "df_join": [56, 73], "cat": [56, 73, 213, 251, 306, 466, 505, 534, 537, 549, 572, 626, 630, 731, 778, 848, 928, 971, 1000, 1003, 1037, 1041], "u8": [56, 73, 212, 213, 251, 435, 558, 630, 731, 1018, 1041, 1049], "schemadict": [57, 88, 90, 91, 92, 93, 94, 110, 196, 251, 614, 672, 686, 712, 728], "composit": [57, 121, 1049], "struct_seri": [57, 712], "dai": [58, 155, 156, 168, 170, 224, 251, 321, 325, 332, 333, 334, 337, 338, 339, 341, 346, 348, 349, 350, 352, 478, 479, 480, 481, 482, 484, 485, 486, 580, 581, 582, 583, 630, 662, 663, 668, 728, 731, 810, 811, 814, 815, 818, 825, 827], "unsign": [59, 60, 61, 62, 471, 630, 861, 932, 1041], "could": [63, 76, 140, 155, 251, 290, 576, 587, 630, 651, 662, 728, 760, 1041], "static": [63, 712], "utf": 64, "frametyp": [65, 1048], "joinstrategi": [65, 169, 251, 667, 728], "outer": [65, 72, 169, 251, 667, 728], "descend": [65, 132, 198, 204, 218, 251, 275, 421, 469, 490, 500, 501, 566, 630, 644, 688, 695, 700, 728, 747, 867, 900, 930, 954, 966, 1041], "fill": [65, 72, 133, 145, 146, 201, 222, 251, 282, 301, 304, 363, 364, 370, 378, 478, 479, 481, 485, 492, 516, 522, 538, 588, 605, 608, 622, 630, 656, 657, 690, 707, 728, 839, 840, 922, 939, 940, 942, 945, 946, 947, 957, 982, 988, 1004, 1041], "sort": [65, 66, 117, 121, 132, 155, 156, 170, 177, 183, 184, 198, 218, 224, 236, 245, 251, 275, 292, 365, 460, 490, 501, 555, 557, 566, 630, 644, 653, 662, 663, 668, 677, 680, 681, 688, 691, 700, 715, 724, 728, 731, 747, 763, 867, 954, 1026, 1029, 1041, 1049], "origin": [65, 99, 100, 220, 251, 340, 391, 435, 460, 471, 506, 511, 512, 514, 516, 522, 538, 630, 701, 728, 778, 817, 911, 928, 972, 977, 978, 980, 982, 988, 1004, 1041], "In": [65, 102, 111, 114, 122, 124, 128, 131, 142, 144, 155, 156, 180, 214, 251, 265, 581, 630, 662, 663, 728, 737, 832, 931, 1041], "duplic": [65, 77, 163, 169, 170, 220, 251, 380, 466, 630, 667, 668, 701, 728, 854, 928, 1041], "behaviour": [65, 72, 505, 511, 512, 520, 551, 630, 971, 977, 978, 986], "strategi": [65, 72, 99, 119, 120, 121, 122, 124, 146, 155, 169, 170, 179, 251, 265, 364, 425, 630, 657, 662, 667, 668, 728, 840, 904, 1041], "suitabl": [65, 72, 120, 131, 251, 265, 489, 630, 738, 950, 1041, 1049], "get": [65, 96, 105, 109, 126, 132, 135, 141, 151, 152, 155, 156, 158, 159, 163, 165, 166, 172, 179, 192, 196, 199, 203, 207, 218, 227, 236, 245, 251, 259, 273, 274, 275, 277, 281, 291, 300, 301, 302, 303, 304, 321, 337, 366, 375, 380, 382, 390, 393, 396, 408, 413, 414, 427, 436, 437, 438, 443, 445, 449, 454, 455, 467, 475, 499, 503, 515, 518, 543, 544, 552, 556, 581, 586, 591, 595, 598, 599, 600, 601, 602, 603, 613, 617, 620, 630, 644, 649, 652, 659, 662, 663, 664, 669, 671, 686, 694, 698, 700, 705, 715, 724, 728, 745, 746, 747, 748, 749, 753, 762, 765, 773, 774, 775, 776, 794, 814, 844, 847, 852, 854, 857, 869, 874, 887, 892, 893, 906, 912, 914, 915, 917, 920, 921, 925, 926, 929, 936, 965, 968, 981, 984, 1011, 1017, 1018, 1026, 1030, 1031, 1041], "speedup": [65, 131, 167, 251, 265, 630, 738, 1041], "receiv": [65, 110, 131, 183, 251, 462, 630, 680, 728, 1049], "now": [65, 156, 251, 466, 530, 532, 630, 663, 728, 996, 998], "One": [65, 137, 180, 184, 251, 262, 459, 612, 630, 731, 779, 1041], "whose": [65, 170, 184, 251, 359, 585, 630, 668, 728], "uniqu": [65, 119, 120, 121, 124, 165, 169, 180, 194, 242, 251, 266, 277, 306, 382, 390, 453, 466, 530, 531, 532, 535, 553, 555, 564, 604, 630, 667, 721, 728, 749, 779, 857, 869, 918, 928, 996, 997, 998, 1001, 1027, 1029, 1041], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 132, 147, 149, 171, 204, 218, 251, 261, 262, 263, 283, 286, 287, 324, 365, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 397, 398, 402, 459, 501, 513, 557, 558, 566, 567, 614, 630, 644, 647, 658, 670, 695, 700, 728, 731, 735, 736, 748, 754, 797, 841, 852, 853, 854, 856, 857, 859, 860, 862, 863, 864, 865, 869, 876, 877, 881, 925, 926, 952, 971, 1032, 1041], "know": [65, 425, 518, 984, 1022, 1031, 1041], "first": [65, 99, 100, 103, 110, 113, 121, 131, 153, 155, 158, 170, 172, 179, 183, 184, 207, 212, 213, 219, 220, 224, 236, 251, 275, 277, 305, 334, 337, 341, 375, 382, 396, 406, 409, 410, 425, 435, 462, 489, 501, 511, 513, 514, 520, 521, 569, 576, 581, 587, 591, 621, 630, 648, 662, 664, 668, 671, 680, 701, 707, 715, 728, 731, 747, 777, 779, 811, 814, 818, 847, 857, 874, 885, 888, 889, 904, 911, 950, 977, 979, 980, 986, 987, 1011, 1020, 1041, 1049], "2022": [65, 137, 153, 155, 156, 170, 224, 251, 314, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 530, 581, 583, 589, 630, 662, 663, 668, 728, 731, 787, 798, 814, 818, 825, 996], "y": [65, 72, 95, 120, 122, 142, 163, 165, 169, 176, 184, 193, 194, 251, 258, 262, 344, 347, 354, 355, 372, 373, 394, 401, 412, 432, 456, 457, 459, 472, 476, 530, 531, 532, 551, 558, 560, 562, 579, 596, 599, 603, 616, 630, 667, 676, 694, 728, 731, 734, 821, 824, 996, 997, 998, 1041], "df3": [65, 251], "set_tbl_format": 65, "09": [65, 122, 156, 251, 314, 325, 333, 334, 533, 663, 728, 791, 999], "01": [65, 122, 137, 153, 155, 156, 224, 251, 312, 313, 314, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 530, 531, 532, 535, 581, 583, 619, 630, 662, 663, 728, 731, 786, 787, 788, 789, 790, 791, 792, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 996, 997, 998, 1001], "02": [65, 153, 155, 156, 170, 224, 251, 313, 314, 321, 322, 323, 330, 331, 332, 333, 334, 337, 340, 341, 342, 343, 346, 348, 349, 351, 478, 479, 480, 481, 482, 484, 485, 486, 487, 530, 531, 532, 535, 581, 583, 619, 630, 662, 663, 668, 728, 731, 786, 787, 789, 790, 794, 795, 796, 799, 800, 801, 802, 804, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 904, 996, 997, 998, 1001], "03": [65, 95, 155, 156, 224, 251, 313, 314, 315, 319, 321, 323, 331, 332, 333, 334, 340, 341, 342, 343, 344, 346, 347, 348, 349, 351, 478, 479, 481, 484, 485, 486, 531, 535, 581, 630, 662, 663, 728, 786, 787, 788, 791, 792, 794, 795, 796, 799, 800, 801, 802, 804, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 819, 820, 821, 823, 824, 826, 827, 828, 997, 1001], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 99, 100, 110, 220, 223, 224, 251, 391, 435, 569, 630, 701, 703, 728, 778, 911, 928, 1041], "easili": [65, 197, 228, 231, 251, 570, 614, 687, 706, 710, 728], "dot": [65, 630, 691, 728, 1041], "product": [65, 136, 251, 303, 309, 563, 630, 775, 781, 1041], "fill_nul": [65, 145, 251, 630, 656, 707, 728, 1041], "sum_horizont": [65, 615], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 110, 131, 149, 183, 233, 251, 265, 425, 433, 434, 462, 477, 563, 576, 577, 587, 597, 607, 630, 672, 680, 712, 728, 738, 904, 938, 1041], "decor": [66, 67, 68, 69, 122, 124, 131, 251, 265, 630, 640, 641, 738, 1041], "under": [66, 67, 68, 69, 623, 624, 626, 631, 632, 636, 637, 638, 1033, 1035, 1037, 1042, 1045, 1046, 1047], "access": [66, 67, 68, 69, 167, 192, 193, 251, 435, 630, 707, 728, 1049], "by_first_letter_of_column_nam": 66, "f": [66, 100, 137, 153, 168, 209, 219, 222, 251, 258, 265, 425, 493, 510, 530, 532, 563, 571, 597, 630, 904, 976, 996, 998], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 283, 286, 505, 509, 731, 975], "slice": [66, 71, 142, 158, 168, 207, 251, 410, 423, 477, 478, 479, 480, 481, 482, 484, 485, 486, 630, 648, 653, 655, 672, 681, 691, 692, 693, 728, 832, 847, 889, 902, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1011, 1041], "to_seri": [66, 151, 251, 530, 567, 608, 996], "xx": [66, 68, 121, 124, 731], "xy": [66, 68], "yy": [66, 68, 121, 124, 731], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 155, 156, 170, 224, 251, 282, 337, 341, 348, 469, 478, 479, 480, 481, 482, 484, 485, 486, 581, 630, 662, 663, 668, 728, 814, 818, 825, 930, 1041], "ceil": [67, 630, 1041], "previou": [67, 128, 461, 540, 630, 924, 1041], "floor": [67, 630, 1041], "nearest": [67, 170, 186, 243, 251, 293, 368, 467, 482, 606, 630, 668, 682, 722, 728, 764, 843, 851, 929, 943, 1041], "24": [67, 116, 131, 142, 155, 156, 170, 224, 251, 303, 305, 323, 337, 341, 348, 452, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 777, 796, 814, 818, 825, 871, 1041], "001": [67, 326, 327, 329, 336, 583, 803, 805, 813], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 122, 314, 318, 319, 332, 333, 337, 349, 530, 580, 581, 582, 589, 596, 731, 785, 787, 791, 792, 810, 814, 996, 1049], "42": [69, 156, 157, 177, 251, 663, 677, 728, 846, 1041], "961": 69, "1764": 69, "4160": 69, "build": [70, 89, 731, 1049], "wa": 70, "compil": [70, 399, 400, 878, 879], "gate": 70, "info": [70, 102, 111, 116, 324, 797], "otherwis": [70, 121, 126, 177, 194, 197, 251, 284, 294, 295, 296, 340, 356, 357, 358, 425, 462, 471, 505, 507, 559, 561, 578, 598, 602, 615, 621, 630, 677, 687, 728, 738, 755, 767, 768, 769, 817, 833, 834, 835, 904, 932, 952, 953, 971, 973, 1041], "depend": [70, 116, 265, 399, 400, 443, 466, 469, 563, 586, 589, 595, 630, 878, 879, 928, 930, 1041, 1049], "host": [70, 99, 104, 108, 112, 114], "git": 70, "lazy_fram": 71, "type_coercion": [71, 648, 653, 655, 681, 691, 692, 693, 728], "predicate_pushdown": [71, 648, 653, 655, 672, 681, 691, 692, 693, 728], "projection_pushdown": [71, 648, 653, 655, 672, 681, 691, 692, 693, 728], "simplify_express": [71, 648, 653, 655, 681, 691, 692, 693, 728], "no_optim": [71, 648, 655, 672, 681, 692, 693, 728], "slice_pushdown": [71, 648, 653, 655, 672, 681, 691, 692, 693, 728], "common_subplan_elimin": [71, 648, 653, 655, 681, 691, 728], "graph": [71, 171, 251, 665, 707, 728], "parallel": [71, 72, 97, 101, 108, 114, 155, 170, 171, 183, 251, 305, 406, 630, 641, 662, 667, 668, 712, 728, 777, 885, 1041], "threadpool": [71, 126], "coercion": [71, 472, 630, 648, 653, 655, 681, 691, 692, 693, 728], "optim": [71, 108, 110, 112, 113, 114, 167, 171, 183, 187, 193, 220, 251, 648, 653, 655, 672, 681, 691, 692, 693, 701, 708, 712, 728], "predic": [71, 110, 112, 113, 114, 115, 147, 166, 192, 251, 365, 557, 587, 630, 648, 653, 655, 658, 672, 681, 684, 691, 692, 693, 708, 728, 841, 952, 953, 1041], "pushdown": [71, 648, 653, 655, 672, 681, 684, 691, 692, 693, 708, 728, 952, 953, 1041], "project": [71, 110, 112, 113, 114, 265, 500, 501, 630, 648, 653, 655, 672, 681, 684, 691, 692, 693, 709, 728], "turn": [71, 99, 100, 110, 536, 555, 630, 648, 653, 655, 672, 681, 692, 693, 728, 1002], "off": [71, 99, 100, 110, 555, 630, 648, 653, 655, 672, 681, 692, 693, 728], "Will": [71, 219, 251, 648, 653, 655, 681, 691, 728, 1041], "try": [71, 83, 85, 99, 100, 103, 104, 108, 110, 112, 114, 648, 653, 655, 681, 691, 728], "branch": [71, 648, 653, 655, 681, 691, 728], "subplan": [71, 648, 653, 655, 681, 691, 728], "occur": [71, 403, 451, 469, 630, 648, 653, 655, 681, 691, 728, 882, 916, 930, 1041], "union": [71, 72, 648, 653, 655, 681, 691, 728, 731], "part": [71, 88, 122, 512, 526, 527, 648, 653, 655, 681, 691, 707, 728, 791, 795, 802, 804, 807, 809, 812, 819, 829, 978, 992, 993], "fashion": [71, 169, 251, 648, 653, 655, 681, 691, 728], "item": [72, 100, 192, 195, 251, 361, 402, 409, 412, 488, 527, 630, 837, 881, 888, 891, 949, 993, 1041], "iter": [72, 123, 125, 132, 154, 155, 156, 167, 168, 182, 192, 193, 194, 197, 198, 204, 218, 219, 228, 230, 231, 251, 305, 359, 460, 501, 559, 560, 561, 562, 566, 569, 570, 571, 572, 578, 579, 585, 598, 599, 602, 603, 611, 614, 615, 616, 630, 644, 661, 662, 663, 687, 688, 695, 700, 706, 710, 728, 777, 1041, 1049], "polarstyp": 72, "concatmethod": 72, "vertic": [72, 144, 222, 226, 251, 504, 970], "rechunk": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 144, 251, 630, 737, 765, 917, 1041], "combin": [72, 83, 85, 155, 156, 157, 170, 224, 251, 262, 276, 337, 348, 459, 517, 523, 529, 581, 630, 662, 663, 668, 691, 728, 814, 818, 825, 983, 989, 995], "concaten": [72, 149, 183, 251, 462, 571, 572, 630, 680, 728, 765, 917, 1041], "diagon": [72, 219, 251], "vstack": [72, 144, 251], "vertical_relax": 72, "coerc": [72, 472, 630], "equal": [72, 73, 99, 100, 110, 117, 118, 132, 150, 155, 170, 177, 218, 251, 354, 355, 372, 394, 425, 457, 477, 478, 479, 480, 481, 482, 484, 485, 486, 515, 516, 522, 538, 609, 610, 630, 644, 662, 668, 677, 695, 700, 728, 904, 938, 939, 940, 941, 942, 943, 945, 946, 947, 951, 981, 982, 988, 1004, 1041, 1049], "supertyp": [72, 146, 251, 264, 630, 657, 728], "find": [72, 148, 251, 466, 489, 630, 950, 1041], "miss": [72, 99, 100, 110, 145, 251, 282, 356, 357, 358, 370, 378, 385, 387, 630, 656, 728, 833, 834, 835, 1031, 1041], "stack": [72, 160, 226, 251], "don": [72, 131, 220, 222, 251, 265, 305, 406, 460, 466, 563, 630, 701, 728, 731, 738, 777, 885, 928, 951, 1031, 1041], "auto": [72, 88, 90, 91, 92, 94, 106, 107, 108, 114, 219, 251, 728, 1049], "logic": [72, 131, 233, 251, 262, 459, 549, 558, 630, 660, 667, 683, 709, 728, 738, 1024, 1041], "align_fram": 72, "pattern": [72, 99, 100, 110, 112, 113, 114, 167, 251, 441, 505, 506, 511, 512, 520, 521, 712, 731, 952, 953, 971, 972, 977, 978, 986, 987, 1041], "collis": 72, "need": [72, 95, 99, 100, 101, 103, 117, 118, 155, 156, 194, 202, 214, 251, 425, 435, 493, 515, 533, 605, 608, 622, 630, 662, 663, 728, 958, 981, 999, 1041], "sure": [72, 88, 93, 99, 100, 104, 108, 155, 156, 187, 251, 662, 663, 728], "contigu": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 187, 251], "relev": 72, "df_h1": 72, "l1": 72, "l2": 72, "df_h2": 72, "r1": 72, "r2": 72, "r3": 72, "df_d1": 72, "df_d2": 72, "df_a1": 72, "df_a2": 72, "df_a3": 72, "disabl": [73, 127, 167, 251], "encount": [74, 155, 251, 454, 455, 513, 514, 573, 576, 587, 630, 662, 728, 920, 921, 979, 980, 1041], "certain": [78, 102, 111, 161, 224, 251, 570, 648, 681, 692, 693, 728, 1041], "least": [80, 122, 461, 555, 630, 924, 1029, 1041], "unexpect": [81, 251, 265, 433, 630, 738, 1041], "caus": [81, 89, 99, 100, 110, 130, 144, 251, 737, 1041], "panic": 81, "mismatch": [83, 107], "incompat": 85, "pa": [88, 115], "chunkedarrai": [88, 179, 251, 781, 1041], "recordbatch": [88, 168, 251], "schemadefinit": [88, 90, 91, 92, 94, 106, 107, 251, 728], "schema_overrid": [88, 90, 91, 92, 93, 94, 106, 107, 168, 214, 251, 281, 728, 731, 753], "copi": [88, 89, 130, 133, 134, 168, 209, 214, 215, 228, 251, 362, 538, 630, 646, 647, 706, 728, 734, 766, 770, 783, 838, 1004, 1017, 1022, 1023, 1041], "closest": 88, "pair": [88, 90, 91, 92, 94, 106, 107, 121, 188, 251, 684, 728, 1049], "sever": [88, 90, 91, 92, 94, 106, 107, 251, 728, 1049], "wai": [88, 90, 91, 92, 94, 106, 107, 138, 154, 168, 183, 204, 231, 251, 460, 462, 501, 511, 570, 630, 650, 661, 680, 695, 710, 712, 728, 977], "equival": [88, 90, 91, 92, 94, 102, 106, 107, 155, 166, 180, 251, 258, 262, 354, 355, 369, 372, 373, 394, 432, 450, 452, 456, 457, 459, 463, 518, 541, 551, 558, 630, 662, 728, 871, 984, 1000, 1002, 1003, 1041], "form": [88, 90, 91, 92, 94, 106, 107, 167, 193, 222, 251, 461, 630, 728, 924, 1041], "them": [88, 90, 91, 92, 94, 106, 107, 110, 144, 155, 156, 170, 177, 224, 251, 379, 412, 454, 455, 460, 571, 630, 662, 663, 668, 677, 728, 731, 737, 891, 920, 921, 1041], "dimens": [88, 90, 92, 94, 106, 107, 251, 473, 630, 728, 934, 1041], "allow_copi": [89, 130], "interchang": [89, 130], "__dataframe__": 89, "convers": [89, 130, 167, 168, 193, 194, 211, 215, 251, 530, 531, 532, 535, 581, 641, 996, 997, 998, 1001, 1021, 1022, 1023, 1041], "detail": [89, 101, 117, 118, 130, 251, 728, 1049], "latest": [89, 102, 111, 130, 370, 444, 630], "index": [89, 93, 96, 116, 130, 148, 155, 156, 161, 166, 167, 170, 184, 190, 192, 193, 203, 214, 216, 224, 229, 251, 259, 273, 274, 275, 277, 337, 399, 400, 409, 420, 424, 425, 478, 479, 480, 481, 482, 484, 485, 486, 489, 499, 511, 524, 545, 630, 662, 663, 668, 694, 708, 728, 745, 746, 747, 748, 749, 814, 871, 878, 879, 888, 899, 903, 904, 922, 950, 953, 965, 977, 990, 1012, 1041], "runtimeerror": 89, "from_panda": [89, 103], "from_arrow": 89, "effici": [89, 168, 251], "clone": [90, 91, 92, 93, 94, 133, 214, 215, 251, 646, 728, 766, 1021, 1022, 1023, 1031, 1041], "dimension": [90, 92, 94, 214, 251, 728, 1041], "infer_schema_length": [91, 94, 99, 100, 103, 110, 113, 251, 513, 728, 979], "NOT": [91, 117, 118, 442, 1048], "typic": [91, 131, 251, 320, 731, 738, 793, 1041], "clearer": 91, "load": [91, 93, 102, 111, 123, 125, 251, 641, 664, 671, 728, 1049], "_partial_": [91, 251, 728], "omit": [91, 95, 120, 122, 124, 128, 180, 194, 251, 619, 731], "mani": [91, 94, 101, 144, 251, 513, 737, 979, 1041], "scan": [91, 94, 99, 100, 108, 110, 111, 112, 113, 114, 115, 155, 156, 251, 655, 662, 663, 664, 671, 728], "slow": [91, 94, 99, 100, 110, 265, 305, 630, 712, 777, 1041], "partial": 91, "present": [91, 117, 122, 383, 630, 1031, 1041], "np": [92, 147, 214, 251, 545, 630, 728, 856, 860, 862, 863, 938, 1012, 1041], "ndarrai": [92, 147, 214, 251, 545, 630, 728, 781, 950, 953, 1012, 1022, 1041], "numpi": [92, 116, 136, 167, 193, 194, 211, 214, 215, 251, 454, 455, 630, 728, 856, 860, 862, 863, 920, 921, 938, 1022, 1023, 1031, 1041], "columnar": [92, 94, 167, 193, 251], "interpret": [92, 94, 99, 100, 110, 251, 728], "yield": [92, 94, 99, 100, 110, 142, 144, 219, 251, 460, 630, 728, 737, 832, 1041], "conclus": [92, 94, 251, 728], "nan_to_nul": [93, 251, 728, 1041], "include_index": 93, "pd": [93, 103, 549, 630, 1023, 1024, 1041], "panda": [93, 103, 116, 155, 215, 251, 333, 334, 549, 630, 662, 728, 810, 811, 1023, 1024, 1041], "instal": [93, 99, 100, 101, 104, 108, 116, 136, 214, 215, 251, 691, 728, 1023, 1041], "datetimeindex": [93, 781, 1041], "nan": [93, 117, 118, 122, 130, 145, 215, 251, 310, 311, 354, 355, 363, 372, 373, 378, 385, 387, 388, 389, 394, 432, 436, 449, 454, 455, 456, 457, 551, 573, 630, 656, 728, 740, 744, 782, 839, 862, 863, 920, 921, 938, 1023, 1041, 1049], "convert": [93, 102, 103, 111, 130, 210, 211, 212, 213, 214, 217, 251, 307, 315, 344, 347, 425, 434, 468, 519, 530, 531, 532, 533, 535, 630, 728, 788, 821, 824, 904, 985, 996, 997, 998, 999, 1001, 1009, 1020, 1021, 1022, 1023, 1031, 1041], "pd_df": 93, "pd_seri": 93, "tbl": [95, 97, 100], "reconstruct": 95, "repr": [95, 122, 124], "trim": 95, "whitespac": [95, 517, 523, 529, 983, 989, 995], "prompt": 95, "extract": [95, 318, 319, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 339, 342, 343, 349, 350, 352, 462, 512, 513, 514, 630, 789, 790, 791, 792, 795, 796, 798, 802, 803, 804, 805, 807, 808, 809, 812, 813, 815, 816, 819, 820, 822, 826, 827, 829, 978, 979, 980], "to_init_repr": [95, 251, 1041], "truncat": [95, 155, 167, 193, 194, 211, 251, 337, 662, 681, 728, 814], "identifi": [95, 176, 182, 220, 251, 676, 701, 728], "compound": [95, 194, 251, 731], "struct": [95, 180, 197, 217, 221, 228, 251, 306, 425, 435, 466, 475, 476, 513, 526, 527, 555, 576, 577, 579, 597, 630, 687, 702, 706, 712, 728, 778, 904, 928, 936, 979, 992, 993, 1041], "neither": [95, 103, 195, 251, 425, 904], "source_ac": 95, "source_cha": 95, "ident": [95, 133, 134, 251, 344, 475, 476, 630, 646, 647, 728, 766, 770, 821, 936, 937, 1041], "timestamp": [95, 340, 589, 817], "tor_id": 95, "nnel_id": 95, "\u03bc": [95, 122, 155, 156, 167, 170, 193, 194, 211, 224, 251, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 530, 532, 581, 583, 589, 630, 662, 663, 668, 728, 731, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 825, 826, 827, 828, 829, 996, 998], "asia": [95, 731, 789, 790, 822], "tokyo": [95, 731], "123456780": 95, "9876543210": 95, "56": [95, 547, 619, 630], "59": [95, 121, 314, 330, 342, 582, 618, 619, 731, 787, 807, 819], "663053": 95, "jst": [95, 731], "803065983": 95, "2055938745": 95, "38": [95, 122], "18": [95, 156, 177, 251, 304, 341, 348, 351, 378, 391, 530, 532, 565, 581, 619, 630, 663, 677, 681, 728, 731, 828, 996, 998], "050545": 95, "source_actor_id": 95, "source_channel_id": 95, "sr": [95, 734, 1041], "to_list": [95, 156, 251, 663, 728, 971, 1041], "datatypeclass": 96, "uint32": [96, 116, 142, 251, 275, 318, 322, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 399, 400, 414, 472, 506, 515, 518, 545, 549, 630, 731, 748, 760, 791, 795, 802, 804, 807, 809, 812, 815, 816, 819, 826, 827, 832, 861, 878, 879, 893, 951, 972, 1024, 1041], "regular": [96, 167, 192, 193, 224, 251, 359, 505, 506, 511, 512, 520, 521, 570, 585, 598, 602, 615, 630, 731, 971, 972, 977, 978, 986, 987], "uint64": [96, 157, 251, 374, 399, 400, 471, 630, 846, 878, 879, 932, 1041], "bigidx": 96, "read": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 251, 371, 433, 621, 630, 655, 660, 683, 728, 737, 1041], "batch": [97, 100, 113, 672, 728], "over": [97, 99, 100, 102, 110, 122, 131, 144, 167, 168, 192, 193, 194, 219, 230, 233, 251, 265, 305, 364, 378, 433, 434, 466, 469, 477, 478, 479, 480, 481, 482, 484, 485, 486, 563, 576, 577, 587, 597, 607, 630, 712, 731, 737, 738, 777, 938, 939, 940, 942, 946, 1041], "fetch": [97, 110, 171, 251, 646, 648, 664, 671, 728], "ideal": 97, "read_csv_batch": [97, 642], "tpch": [97, 100], "tables_scale_100": [97, 100], "lineitem": [97, 100, 101], "try_parse_d": [97, 99, 100, 110], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 168, 251, 655, 728], "accept": [98, 99, 100, 102, 104, 108, 132, 143, 154, 197, 204, 218, 228, 231, 251, 258, 359, 379, 460, 501, 558, 559, 560, 561, 562, 566, 569, 570, 571, 572, 578, 579, 585, 598, 599, 602, 603, 611, 614, 615, 616, 630, 644, 654, 661, 687, 695, 700, 706, 710, 728, 852, 1041], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 318, 321, 322, 324, 325, 330, 332, 338, 339, 341, 342, 346, 348, 349, 350, 352, 478, 479, 481, 484, 485, 486, 619, 630, 786, 788, 791, 794, 795, 797, 802, 804, 807, 809, 812, 815, 816, 818, 819, 823, 825, 826, 827, 828, 829], "textio": 99, "new_column": [99, 100, 103, 110, 189, 251], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 107, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 155, 156, 170, 224, 251, 265, 337, 341, 348, 406, 433, 466, 478, 479, 480, 481, 482, 484, 485, 486, 519, 596, 621, 630, 662, 663, 668, 672, 728, 738, 814, 818, 825, 848, 885, 928, 985, 1041], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 155, 156, 170, 214, 222, 224, 251, 258, 265, 306, 337, 341, 348, 359, 466, 478, 479, 480, 481, 482, 484, 485, 486, 493, 585, 630, 662, 663, 668, 684, 728, 814, 818, 825, 951, 1022, 1041], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 168, 251], "shorter": [99, 100], "comment": [99, 100, 110], "instanc": [99, 100, 110, 122, 124, 128, 144, 149, 251, 290, 444, 478, 479, 480, 481, 482, 484, 485, 486, 576, 587, 630, 672, 708, 728, 737, 760, 1041], "escap": [99, 100, 110], "dure": [99, 100, 110, 128, 144, 251, 737, 1041], "would": [99, 100, 110, 275, 409, 443, 469, 566, 581, 630, 731, 747, 888, 930, 1022, 1041], "prefer": [99, 100, 102, 110, 125, 131, 144, 167, 192, 193, 233, 251, 265, 477, 630, 728, 737, 738, 938, 1041, 1049], "treat": [99, 100, 110, 505, 520, 521, 971, 986, 987], "10000": [99, 168, 251, 538], "might": [99, 100, 110, 126, 132, 214, 218, 251, 265, 553, 630, 644, 695, 700, 728, 1023, 1041], "issu": [99, 100, 103, 110, 303, 304, 543, 630, 775, 776, 1010, 1041], "iso8601": [99, 100, 110], "physic": [99, 100, 170, 251, 292, 549, 630, 645, 667, 668, 728, 763, 1024, 1041], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 153, 170, 251, 264, 266, 290, 460, 516, 522, 564, 630, 668, 728, 760, 982, 988, 1041], "buffer": [99, 100, 142, 167, 251, 832, 1041], "modifi": [99, 100, 110, 126, 128, 160, 167, 226, 251, 276, 340, 351, 505, 511, 512, 520, 630, 817, 828, 933, 971, 977, 978, 986, 1000, 1002, 1003, 1041], "upper": [99, 100, 142, 155, 251, 294, 295, 379, 425, 554, 565, 581, 593, 594, 619, 630, 662, 728, 768, 832, 852, 910, 1028, 1041], "bound": [99, 100, 142, 155, 251, 294, 295, 296, 379, 409, 424, 425, 431, 554, 565, 581, 593, 594, 619, 630, 662, 728, 768, 769, 832, 852, 888, 903, 910, 1028, 1041], "lossi": [99, 100, 110], "decod": [99, 100], "reduc": [99, 100, 108, 110, 112, 113, 114, 238, 239, 241, 244, 493, 587, 630, 693, 717, 718, 720, 723, 728, 913, 927, 958, 1010, 1041], "usag": [99, 100, 110, 122, 124, 202, 251, 731, 959, 1041], "expens": [99, 100, 108, 110, 113, 114, 123, 125, 131, 155, 156, 167, 192, 193, 194, 219, 220, 251, 265, 630, 662, 663, 701, 728, 737, 738, 1041, 1049], "aggreg": [99, 100, 108, 149, 154, 155, 156, 173, 174, 175, 178, 180, 184, 185, 186, 205, 206, 222, 225, 231, 232, 235, 237, 251, 259, 365, 376, 433, 460, 477, 478, 479, 480, 481, 482, 484, 485, 486, 555, 559, 560, 561, 562, 576, 577, 578, 579, 587, 592, 598, 599, 602, 603, 607, 615, 616, 630, 662, 663, 672, 673, 674, 675, 678, 679, 682, 696, 697, 704, 710, 711, 714, 716, 728, 849, 938, 939, 940, 942, 945, 946, 947, 1041], "nativ": [99, 104, 108, 120, 131, 167, 193, 194, 211, 233, 251, 265, 630, 635, 738, 1041, 1049], "parser": 99, "even": [99, 462, 466, 630, 928, 1041], "regard": [99, 573], "sens": [99, 104, 108, 112, 114, 177, 224, 251, 460, 630, 677, 728], "particular": [99, 104, 108, 112, 114, 142, 251, 832, 1041], "usernam": [99, 101, 104, 108, 112, 114], "password": [99, 101, 104, 108, 112, 114], "skip": [99, 100, 103, 108, 110, 114, 222, 251, 738, 1041], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 155, 156, 203, 224, 229, 251, 312, 320, 333, 334, 337, 341, 348, 420, 499, 524, 530, 532, 581, 630, 662, 663, 694, 708, 728, 785, 793, 810, 811, 814, 818, 825, 899, 965, 990, 996, 998, 1041], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 233, 251, 498, 630, 712, 964, 1041], "estim": [99, 100, 142, 251, 266, 357, 358, 392, 564, 630, 728, 832, 834, 835, 872, 1041], "alloc": [99, 100, 142, 187, 251, 832, 1041], "scan_csv": [99, 100, 692, 693, 728], "lazili": [99, 100, 110, 111, 112, 113, 114, 435, 630], "glob": [99, 100, 110, 112, 113, 114], "continu": [99, 108, 306, 466, 498, 630, 778, 928, 964, 1041], "benchmark": [99, 108, 289, 630], "50000": 100, "batchedcsvread": [100, 641], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "df_current_batch": 100, "concat": [100, 765, 917, 1041], "partition_df": 100, "partition_bi": [100, 168, 251], "as_dict": [100, 182, 251], "fh": 100, "write_csv": [100, 110, 251], "els": [100, 621], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "driver": 101, "snowflak": 101, "warehous": 101, "role": 101, "partit": [101, 102, 108, 111, 115, 168, 182, 251], "transfer": 101, "document": [101, 103, 344, 347, 514, 530, 531, 532, 535, 821, 824, 980, 996, 997, 998, 1001], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": [101, 155, 251, 662, 728], "doc": [101, 136, 251], "github": 101, "sfu": 101, "connector": 101, "destin": 101, "limit": [101, 110, 146, 251, 282, 294, 295, 296, 364, 370, 630, 657, 664, 693, 728, 767, 768, 769, 840, 1041], "small": [101, 121, 171, 251, 341, 655, 728, 1049], "still": 101, "develop": [101, 122, 124], "partition_col": 101, "explicitli": [101, 120, 122, 128, 435, 614, 630, 640], "test_tabl": 101, "compani": 101, "testdb": 101, "public": [101, 251, 630, 641, 728, 1041], "myrol": 101, "delta_table_opt": [102, 111], "root": [102, 111, 391, 434, 445, 464, 502, 542, 629, 630, 967, 1041], "absolut": [102, 111, 117, 118, 257, 356, 357, 358, 630, 733, 833, 834, 835, 1041], "sinc": [102, 111, 132, 218, 251, 321, 530, 532, 565, 581, 589, 608, 619, 644, 695, 700, 728, 794, 996, 998], "avoid": [102, 193, 251], "year": [102, 111, 155, 156, 170, 224, 251, 324, 325, 337, 338, 341, 348, 349, 478, 479, 480, 481, 482, 484, 485, 486, 580, 581, 582, 630, 662, 663, 668, 728, 797, 798, 814, 815, 818, 825, 826], "2021": [102, 111, 137, 153, 155, 224, 251, 530, 596, 662, 728, 731, 789, 790, 798, 822, 868, 996, 1041], "aw": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 131, 251, 425, 1048], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "nor": [103, 195, 251], "skip_empty_lin": 103, "my": [103, 115, 536, 1002], "datasheet": 103, "correct": [103, 357, 358, 392, 483, 498, 630, 672, 728, 834, 835, 872, 944, 964, 1041], "look": [103, 283, 425, 754], "whole": [103, 500, 501, 511, 630, 712, 728, 977], "With": [103, 131, 166, 251, 265, 478, 479, 480, 481, 482, 484, 485, 486, 630, 738, 871, 1041], "1000": [103, 142, 213, 251, 326, 327, 538, 803, 1020, 1041, 1049], "spreadsheet": [103, 184, 251], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": 103, "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "improv": [104, 112, 693, 728], "repeat": [104, 112, 306, 466, 470, 472, 605, 622, 630], "page": [104, 108, 112, 114, 251, 630, 641, 693, 728, 1041], "give": [104, 108, 112, 113, 114, 176, 220, 251, 321, 392, 472, 551, 630, 641, 676, 701, 728, 794, 872, 1041], "That": [104, 672, 728], "filenam": 104, "my_fil": 104, "write_ipc": [104, 251], "read_ndjson": 106, "becaus": [107, 131, 142, 155, 171, 222, 233, 251, 406, 488, 494, 581, 630, 662, 712, 728, 738, 832, 885, 1041], "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 167, 193, 194, 211, 251, 530, 532, 996, 998], "stabl": [108, 132, 136, 195, 218, 251, 430, 630, 644, 676, 695, 700, 728], "row_group": [108, 114], "pressur": [108, 113, 114, 493, 630, 693, 728, 958, 1041], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 368, 630, 843, 1041], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114, 167, 192, 194, 251], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 144, 251, 737, 1041], "headerless": 110, "unlik": [110, 155, 251, 662, 728], "fewer": [110, 466, 630, 928, 1041], "my_long_fil": 110, "doesn": [110, 155, 251, 353, 630, 662, 728, 831, 1031, 1041], "thing": [110, 586, 595], "less": [110, 170, 251, 394, 432, 516, 522, 527, 538, 630, 668, 728, 982, 988, 993, 1004, 1049], "breezah": 110, "languag": [110, 155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "hard": [110, 672, 728], "mydf": 110, "lambda": [110, 131, 149, 183, 233, 251, 265, 356, 357, 358, 425, 433, 434, 477, 563, 576, 577, 587, 597, 607, 630, 672, 680, 712, 728, 738, 833, 834, 835, 904, 1041], "lower": [110, 155, 186, 243, 251, 294, 296, 379, 431, 434, 467, 471, 482, 565, 581, 593, 594, 606, 619, 630, 655, 662, 682, 722, 728, 769, 852, 910, 929, 932, 943, 1028, 1041], "simpli": [110, 460, 576, 587, 630], "idx": [110, 155, 168, 251, 425, 662, 728, 904, 953, 1041], "uint16": [110, 303, 304, 543, 630, 731, 775, 776, 1010, 1041], "u16": [110, 122, 1049], "eu": 111, "central": [111, 392, 498, 630, 872, 964, 1041], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "05": [115, 117, 118, 122, 170, 224, 251, 314, 315, 319, 340, 342, 344, 347, 581, 668, 728, 731, 787, 788, 789, 790, 791, 792, 817, 818, 821, 822, 824, 825, 827], "04": [115, 155, 224, 251, 314, 315, 318, 319, 323, 330, 331, 332, 333, 334, 338, 340, 341, 342, 343, 344, 347, 349, 350, 351, 530, 581, 583, 662, 728, 731, 788, 792, 796, 802, 804, 807, 808, 809, 810, 811, 812, 816, 817, 819, 820, 821, 824, 826, 827, 828, 996], "stdout": [116, 128, 153, 251, 446], "17": [116, 122, 231, 487, 589, 608, 619, 630, 710, 771, 818, 1041, 1049], "platform": 116, "linux": 116, "90": [116, 533, 999], "wsl2": 116, "x86_64": 116, "glibc2": 116, "main": 116, "apr": 116, "14": [116, 122, 131, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 312, 325, 378, 469, 619, 630, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 731, 785, 818], "44": [116, 177, 251, 309, 630, 677, 728], "51": 116, "gcc": 116, "matplotlib": [116, 681, 691, 728], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "08": [117, 118, 122, 156, 251, 314, 341, 530, 581, 583, 619, 663, 728, 731, 818, 825, 996], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 150, 251, 354, 355, 372, 373, 394, 432, 456, 457, 630, 951, 1041], "exactli": [117, 118, 121, 122, 124, 526, 527, 959, 992, 993, 1041], "toler": [117, 118, 170, 251, 668, 728], "inexact": [117, 118], "assert": [117, 118, 120, 122, 124, 156, 251, 641, 663, 728, 731, 845, 1041], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 149, 251, 871, 904, 1023, 1032, 1041], "searchstrategi": [119, 121, 122, 124], "null_prob": [119, 122, 124], "percentag": [119, 122, 124, 461, 630, 924, 1041], "chanc": [119, 122, 124, 1049], "independ": [119, 120, 122, 124], "flag": [119, 490, 505, 511, 512, 520, 630, 653, 672, 728, 954, 971, 977, 978, 986, 1041], "hypothesi": [119, 120, 121, 122, 123, 124, 1049], "sampled_from": [119, 1049], "unique_small_int": 119, "ccy": [119, 1049], "gbp": [119, 1049], "eur": [119, 137, 153, 251, 1049], "jpy": [119, 1049], "min_col": [120, 122], "max_col": [120, 122], "standalon": [120, 122], "mincol": 120, "assign": [120, 155, 251, 306, 425, 460, 466, 469, 526, 527, 630, 662, 728, 778, 904, 911, 928, 930, 992, 993, 1041], "exact": [120, 122, 124, 202, 251, 530, 531, 532, 551, 630, 996, 997, 998], "minimum": [120, 121, 122, 124, 149, 178, 251, 356, 357, 358, 449, 455, 469, 602, 603, 630, 678, 693, 728, 767, 806, 833, 834, 835, 921, 926, 930, 1041, 1049], "especi": [120, 476, 630, 937, 1041], "test_unique_xyz": 120, "assert_someth": 120, "punctuat": 120, "test_special_char_colname_init": 120, "inner_dtyp": [121, 124], "select_from": [121, 124], "min_siz": [121, 122, 124, 1049], "max_siz": [121, 122, 124, 1049], "anoth": [121, 154, 251, 305, 313, 424, 439, 442, 630, 661, 707, 728, 777, 786, 903, 951, 1041], "randomli": 121, "innermost": 121, "2x": 121, "lst": 121, "11330": 121, "24030": 121, "116": 121, "zz": [121, 124], "uint8_pair": [121, 1049], "uint": [121, 1049], "zip": [121, 1049], "131": 121, "176": 121, "149": [121, 1049], "max_data_s": [122, 124], "include_col": 122, "allow_infin": [122, 124], "allowed_dtyp": [122, 124, 1049], "excluded_dtyp": [122, 124], "describ": [122, 153, 251, 1041], "desir": [122, 425, 581, 904], "n_chunk": [122, 124, 251, 1041], "randomis": 122, "onto": 122, "pct": 122, "preced": [122, 731], "disallow": [122, 124], "inf": [122, 124, 272, 306, 381, 384, 466, 551, 630, 744, 778, 848, 856, 860, 910, 924, 928, 1028, 1041], "exclud": [122, 124, 301, 304, 379, 570, 630, 852, 868, 1041], "deploi": [122, 124], "characterist": [122, 124], "concret": [122, 124], "test_repr": 122, "isinst": [122, 124, 251], "0x11f561580": 122, "known": [122, 425, 712, 904], "0565": 122, "34715": 122, "5844": 122, "33": [122, 177, 251, 487, 570, 630, 677, 728, 943, 1041], "076854": 122, "3382": 122, "48662": 122, "7540": 122, "29": [122, 155, 156, 170, 224, 251, 312, 333, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 619, 630, 662, 663, 668, 728, 785, 810, 814, 818, 825], "836271": 122, "4063": 122, "06": [122, 224, 251, 314, 325, 339, 340, 352, 619, 731, 817, 818, 827], "39092": 122, "1889": 122, "13": [122, 133, 134, 145, 146, 152, 156, 161, 171, 179, 228, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 477, 533, 571, 576, 579, 587, 616, 619, 620, 630, 646, 647, 656, 657, 663, 670, 706, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 738, 818, 825, 826, 999, 1041], "41": [122, 485, 630, 1049], "874455": 122, "15836": 122, "1755e": 122, "575050513": 122, "profil": [123, 125, 728], "balanc": [123, 125, 1049], "set_environ": 123, "polars_hypothesis_profil": [123, 125], "1500": 123, "constructor": 124, "normal": [124, 155, 251, 353, 392, 498, 630, 662, 728, 831, 872, 964, 1041], "test_repr_is_valid_str": 124, "experi": 124, "create_list_strategi": [124, 1049], "polars_max_thread": 126, "behind": 126, "lock": 126, "reason": 126, "pyspark": 126, "udf": [126, 131, 183, 233, 251, 265, 462, 563, 630, 680, 712, 728, 738, 1041], "similar": [126, 149, 170, 251, 344, 347, 460, 476, 621, 630, 668, 728, 821, 824, 937, 1041], "recommend": [126, 167, 183, 251, 581, 731], "initi": [128, 576, 587, 621], "whatev": 128, "were": 128, "enter": 128, "advantag": [128, 183, 251], "initialis": [128, 728, 1048], "set_": 128, "set_verbos": 128, "do_various_th": 128, "restor": 128, "cleaner": 128, "breviti": 128, "vein": 128, "durat": [128, 170, 224, 251, 312, 319, 320, 323, 327, 329, 331, 336, 343, 351, 549, 581, 619, 630, 668, 728, 731, 785, 792, 793, 796, 803, 805, 808, 813, 820, 828, 1024, 1041], "set_ascii_t": 128, "write_ascii_frame_to_stdout": 128, "sy": 128, "nan_as_nul": 130, "_pyarrowdatafram": 130, "nullabl": 130, "extens": [130, 215, 251, 1023, 1041], "propag": [130, 174, 206, 251, 355, 454, 455, 457, 630, 920, 921, 1041], "inference_s": [131, 251], "256": [131, 251, 924, 1041], "almost": [131, 233, 251, 530, 531, 532, 581, 738, 996, 997, 998, 1041], "_significantly_": [131, 233, 251, 738, 1041], "intens": [131, 233, 251, 460, 630, 738, 1041], "forc": [131, 170, 233, 251, 667, 668, 712, 728, 738, 1041], "materi": [131, 233, 251, 681, 712, 728, 731, 738, 1041], "parallelis": [131, 233, 251, 738, 1041], "optimis": [131, 194, 233, 251, 728, 738, 952, 953, 1041], "achiev": [131, 233, 251, 265, 630, 738, 1041], "best": [131, 233, 251, 265, 630, 738, 1041], "tri": [131, 251], "arbitrarili": [131, 251], "rearrang": [131, 251], "transform": [131, 251, 433, 534, 536, 537, 630], "preserv": [131, 154, 214, 215, 251, 495, 630, 961, 1023, 1041], "lru_cach": [131, 251, 265, 630, 738, 1041], "magnitud": [131, 251, 265, 630, 738, 1041], "column_1": [131, 219, 251], "better": [131, 214, 233, 251, 265, 555, 630, 712, 952, 953, 1041], "scalar": [131, 166, 192, 251, 489, 563, 596, 630, 871, 950, 1041], "k": [132, 194, 218, 251, 288, 292, 392, 550, 630, 644, 700, 728, 759, 763, 872, 1025, 1041], "intoexpr": [132, 154, 155, 156, 197, 204, 218, 228, 231, 251, 264, 379, 403, 405, 411, 426, 460, 492, 501, 559, 560, 561, 562, 565, 566, 569, 571, 572, 576, 578, 579, 587, 593, 594, 598, 599, 602, 603, 608, 611, 614, 615, 616, 621, 630, 644, 658, 661, 662, 663, 687, 695, 700, 706, 710, 728, 852, 1041], "nulls_last": [132, 204, 218, 251, 275, 500, 630, 644, 695, 700, 728, 747, 1041], "maintain_ord": [132, 154, 182, 184, 218, 220, 224, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 265, 281, 427, 545, 552, 574, 630, 644, 648, 653, 655, 661, 681, 691, 692, 693, 695, 700, 701, 711, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 753, 778, 906, 928, 1026, 1041], "smallest": [132, 218, 251, 288, 630, 644, 700, 728, 759, 1041], "largest": [132, 155, 156, 170, 218, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 550, 630, 644, 662, 663, 668, 700, 728, 814, 818, 825, 1025, 1041], "top": [132, 218, 251, 644, 700, 728], "last": [132, 158, 170, 172, 184, 194, 204, 207, 218, 220, 245, 251, 275, 305, 318, 333, 338, 349, 409, 423, 500, 527, 544, 581, 617, 630, 644, 668, 695, 698, 700, 701, 724, 728, 731, 747, 777, 791, 810, 815, 826, 847, 874, 888, 902, 993, 1011, 1041], "maintain": [132, 218, 251, 281, 427, 489, 552, 630, 644, 692, 693, 695, 700, 728, 753, 906, 950, 1026, 1041], "wors": [132, 218, 251, 644, 695, 700, 728], "search": [132, 170, 218, 251, 644, 668, 695, 700, 728], "top_k": [132, 251, 288, 630, 644, 728, 759, 1041], "greater": [133, 170, 251, 372, 373, 498, 527, 630, 668, 728, 964, 993, 1041], "cheap": [133, 134, 251, 646, 647, 728, 737, 766, 770, 1041], "deepcopi": [133, 134, 251, 646, 647, 728, 766, 770, 1041], "clear": [134, 251, 647, 728, 770, 1041], "properti": [135, 141, 159, 196, 199, 227, 251, 649, 652, 686, 705, 728, 731, 1049], "appl": [135, 160, 169, 188, 190, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 464, 474, 509, 528, 542, 630, 667, 684, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 728, 975, 994], "banana": [135, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 464, 474, 542, 630, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723], "pairwis": [136, 251], "pearson": [136, 251, 392, 498, 573, 630, 872, 964, 1041], "correl": [136, 251, 573, 609], "coeffici": [136, 251, 498, 630, 964, 1041], "corrcoef": [136, 251], "percentil": [137, 251, 779, 1041], "summari": [137, 251, 779, 1041], "glimps": [137, 158, 251], "usd": [137, 153, 251, 1049], "2020": [137, 153, 156, 251, 315, 319, 320, 323, 326, 327, 329, 331, 336, 340, 343, 344, 347, 530, 531, 532, 663, 728, 731, 788, 792, 793, 796, 803, 805, 808, 813, 817, 820, 821, 824, 996, 997, 998], "null_count": [137, 140, 251, 305, 630, 728, 777, 779, 1041], "266667": [137, 251], "666667": [137, 174, 225, 239, 251, 356, 630, 704, 718, 728], "std": [137, 251, 477, 484, 630, 728, 779, 945, 1041], "101514": [137, 251], "707107": [137, 251, 357, 484, 630, 834, 1041], "57735": [137, 251], "median": [137, 184, 251, 364, 480, 630, 707, 728, 779, 941, 1041], "more_column": [138, 143, 198, 221, 251, 359, 585, 630, 650, 654, 688, 702, 728], "Or": [138, 154, 155, 156, 170, 204, 224, 231, 251, 460, 501, 570, 621, 630, 650, 661, 662, 663, 668, 695, 710, 728], "subset": [140, 180, 220, 251, 651, 701, 728], "snippet": [140, 251, 651, 728], "all_horizont": [140, 251, 559, 651, 728], "is_nul": [140, 251, 630, 651, 728, 1041], "sizeunit": [142, 251, 832, 1041], "heap": [142, 251, 832, 1041], "its": [142, 251, 314, 341, 348, 501, 630, 787, 818, 825, 832, 1041], "bitmap": [142, 251, 832, 1041], "therefor": [142, 251, 621, 832, 1041], "structarrai": [142, 251, 832, 1041], "constant": [142, 156, 251, 312, 362, 630, 663, 728, 785, 832, 838, 1041], "unchang": [142, 251, 549, 630, 672, 712, 728, 832, 1024, 1041], "capac": [142, 202, 251, 832, 959, 1041], "ffi": [142, 251, 832, 1041], "kb": [142, 251, 832, 1041], "mb": [142, 251, 832, 1041], "gb": [142, 251, 832, 1041], "tb": [142, 251, 832, 1041], "revers": [142, 251, 300, 301, 302, 303, 304, 434, 464, 542, 630, 728, 773, 774, 775, 776, 1041], "1_000_000": [142, 251, 832, 1041], "25888898": [142, 251], "689577102661133": [142, 251], "long": [143, 176, 222, 251, 654, 676, 728], "letter": [143, 236, 245, 251, 359, 512, 585, 630, 654, 715, 724, 728, 731, 978], "thu": [144, 251, 573, 737, 1041], "faster": [144, 214, 222, 251, 265, 477, 518, 553, 630, 692, 693, 728, 737, 738, 938, 984, 1041], "onlin": [144, 251, 737, 1041], "rerun": [144, 251, 737, 1041], "evalu": [145, 147, 170, 251, 262, 276, 305, 377, 379, 383, 397, 398, 425, 435, 459, 559, 561, 565, 567, 581, 584, 593, 594, 605, 608, 614, 619, 621, 622, 630, 658, 665, 667, 668, 728, 748, 777, 876, 877, 1032, 1041], "fill_valu": [145, 201, 222, 251, 492, 630, 690, 728, 957, 1041], "Not": [145, 251, 385, 387, 435, 630, 656, 728], "To": [145, 251, 310, 311, 337, 364, 505, 511, 512, 520, 536, 615, 630, 656, 728, 814, 971, 977, 978, 986, 1002], "fillnullstrategi": [146, 251, 364, 630, 657, 728, 840, 1041], "matches_supertyp": [146, 251, 657, 728], "forward": [146, 170, 251, 333, 364, 370, 630, 657, 668, 728, 810, 840, 1041], "consecut": [146, 251, 282, 364, 370, 504, 630, 657, 728, 840, 970, 1041], "fill_nan": [146, 251, 630, 728, 1041], "OR": [147, 251, 561, 562, 658, 728, 731], "reduct": [149, 251], "supercast": [149, 251], "parent": [149, 251], "rule": [149, 251], "arithmet": [149, 251], "zip_with": [149, 251, 1041], "foo11": [149, 251], "bar22": [149, 251], "null_equ": [150, 251, 951, 1041], "retriev": [151, 251, 399, 400, 539, 878, 879, 1005], "return_as_str": [153, 251, 446], "preview": [153, 251], "wide": [153, 176, 222, 251, 676, 728], "nice": [153, 251], "few": [153, 251], "rather": [153, 170, 251, 446, 476, 538, 630, 668, 728, 937, 1004, 1041], "head": [153, 172, 207, 251, 264, 396, 630, 671, 728, 874, 1011, 1041], "tail": [153, 158, 251, 264, 498, 630, 728, 847, 964, 1041], "more_bi": [154, 182, 204, 251, 501, 630, 661, 695, 728], "consist": [154, 182, 251, 530, 661, 728, 996], "regardless": [154, 251, 514, 980], "agg": [154, 155, 156, 251, 259, 265, 365, 367, 500, 501, 545, 557, 574, 630, 648, 653, 655, 661, 662, 663, 681, 691, 728, 731], "index_column": [155, 156, 251, 662, 663, 728], "timedelta": [155, 156, 224, 251, 318, 321, 322, 325, 330, 332, 337, 338, 339, 341, 342, 346, 348, 349, 350, 352, 478, 479, 480, 481, 482, 484, 485, 486, 581, 619, 630, 662, 663, 728, 731, 799, 801, 806, 814, 818, 825, 920, 921, 1041], "period": [155, 156, 200, 201, 251, 341, 348, 356, 357, 358, 419, 461, 491, 492, 581, 619, 630, 662, 663, 689, 690, 728, 818, 825, 833, 834, 835, 898, 924, 956, 957, 1041], "include_boundari": [155, 251, 662, 728], "closedinterv": [155, 156, 251, 379, 478, 479, 480, 481, 482, 484, 485, 486, 581, 619, 630, 662, 663, 728, 852, 1041], "start_bi": [155, 251, 662, 728], "startbi": [155, 251, 662, 728], "window": [155, 156, 251, 305, 341, 348, 356, 357, 358, 460, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 571, 581, 609, 610, 619, 630, 662, 663, 728, 777, 818, 825, 833, 834, 835, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1041], "check_sort": [155, 156, 251, 662, 663, 728], "dynamicgroupbi": [155, 251], "groupbi": [155, 156, 180, 251, 259, 265, 305, 365, 367, 406, 460, 500, 501, 545, 557, 563, 574, 630, 648, 653, 655, 662, 663, 681, 691, 728, 731, 777, 885, 1041], "member": [155, 251, 662, 728, 859, 1041], "seen": [155, 251, 282, 370, 630, 662, 728], "roll": [155, 156, 251, 333, 334, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 571, 609, 610, 630, 662, 663, 728, 810, 811, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1041], "slot": [155, 251, 305, 308, 404, 630, 662, 728, 777, 780, 883, 1041], "interv": [155, 156, 224, 251, 306, 324, 341, 342, 348, 379, 466, 478, 479, 480, 481, 482, 484, 485, 486, 581, 619, 630, 662, 663, 728, 778, 791, 794, 795, 797, 802, 804, 807, 809, 812, 815, 816, 818, 819, 823, 825, 826, 827, 829, 852, 928, 1041], "1n": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "nanosecond": [155, 156, 170, 224, 251, 337, 341, 342, 348, 478, 479, 480, 481, 482, 484, 485, 486, 583, 630, 662, 663, 668, 728, 814, 818, 819, 825], "1u": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "microsecond": [155, 156, 167, 170, 193, 194, 211, 224, 251, 337, 341, 342, 348, 478, 479, 480, 481, 482, 484, 485, 486, 582, 583, 618, 630, 662, 663, 668, 681, 728, 731, 814, 818, 825], "1m": [155, 156, 170, 224, 251, 326, 327, 329, 336, 337, 341, 343, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 803, 805, 813, 814, 818, 820, 825], "millisecond": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 583, 630, 662, 663, 668, 728, 731, 814, 818, 825], "minut": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 581, 582, 583, 618, 619, 630, 662, 663, 668, 728, 731, 814, 818, 825], "1h": [155, 156, 170, 224, 251, 320, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 619, 630, 662, 663, 668, 728, 793, 795, 814, 818, 825], "hour": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 581, 582, 583, 618, 619, 630, 662, 663, 668, 728, 731, 814, 818, 825], "1d": [155, 156, 170, 224, 251, 313, 323, 331, 337, 341, 348, 351, 478, 479, 480, 481, 482, 484, 485, 486, 581, 596, 630, 662, 663, 668, 728, 731, 786, 794, 796, 799, 800, 801, 806, 808, 814, 818, 823, 825, 827, 828], "1w": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "week": [155, 156, 170, 224, 251, 337, 341, 348, 350, 478, 479, 480, 481, 482, 484, 485, 486, 583, 630, 662, 663, 668, 728, 731, 814, 818, 825, 827], "1mo": [155, 156, 170, 224, 251, 315, 319, 333, 334, 337, 340, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 581, 630, 662, 663, 668, 728, 788, 792, 809, 810, 811, 814, 815, 816, 817, 818, 825, 826], "month": [155, 156, 170, 224, 251, 318, 333, 334, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 580, 581, 582, 630, 662, 663, 668, 728, 791, 810, 811, 814, 818, 825], "1q": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "quarter": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "1y": [155, 156, 170, 224, 251, 324, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 581, 630, 662, 663, 668, 728, 797, 814, 818, 825, 829], "1i": [155, 156, 170, 224, 251, 337, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814], "3d12h4m25": [155, 156, 170, 224, 251, 341, 348, 581, 662, 663, 668, 728, 818, 825], "suffix": [155, 156, 169, 170, 197, 224, 228, 231, 251, 260, 286, 337, 341, 348, 385, 387, 388, 389, 434, 460, 464, 474, 478, 479, 480, 481, 482, 484, 485, 486, 509, 630, 662, 663, 667, 668, 687, 706, 707, 710, 728, 731, 757, 814, 818, 825, 975], "_satur": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 581, 630, 662, 663, 668, 728, 814, 818, 825], "satur": [155, 156, 170, 224, 251, 337, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 814, 818, 825], "28": [155, 156, 170, 210, 224, 251, 258, 337, 340, 341, 348, 351, 478, 479, 480, 481, 482, 484, 485, 486, 581, 630, 662, 663, 668, 728, 814, 817, 818, 825, 828, 1049], "correspond": [155, 156, 170, 214, 224, 251, 325, 337, 341, 348, 466, 469, 476, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 798, 814, 818, 825, 930, 937, 1041], "due": [155, 156, 170, 194, 224, 251, 290, 320, 337, 340, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 488, 494, 630, 662, 663, 668, 728, 760, 793, 814, 817, 818, 825, 1041], "daylight": [155, 156, 170, 224, 251, 312, 320, 337, 340, 341, 348, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 663, 668, 728, 793, 814, 817, 818, 825], "10i": [155, 156, 251, 662, 663, 728], "ascend": [155, 156, 251, 662, 663, 728], "dynam": [155, 251, 425, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 728, 904], "matter": [155, 156, 167, 193, 194, 211, 251, 662, 663, 728], "_lower_bound": [155, 251, 662, 728], "_upper_bound": [155, 251, 662, 728], "harder": [155, 251, 662, 728], "tempor": [155, 156, 167, 193, 194, 211, 251, 379, 478, 479, 480, 481, 482, 484, 485, 486, 581, 619, 630, 641, 662, 663, 728, 731, 852, 868, 1041], "inclus": [155, 156, 251, 379, 478, 479, 480, 481, 482, 484, 485, 486, 525, 526, 565, 593, 594, 630, 662, 663, 728, 852, 991, 992, 1041], "datapoint": [155, 251, 662, 728], "mondai": [155, 251, 348, 350, 662, 728, 825, 827], "tuesdai": [155, 251, 662, 728], "wednesdai": [155, 251, 662, 728], "thursdai": [155, 251, 662, 728], "fridai": [155, 251, 662, 728], "saturdai": [155, 251, 662, 728], "sundai": [155, 251, 350, 662, 728, 827], "weekli": [155, 251, 348, 662, 728, 825], "sorted": [155, 156, 251, 662, 663, 728], "metadata": [155, 156, 251, 662, 663, 728], "verifi": [155, 156, 251, 662, 663, 728], "incorrectli": [155, 156, 251, 425, 662, 663, 728], "incorrect": [155, 156, 251, 351, 490, 630, 662, 663, 712, 728, 828, 954, 1041], "re": [155, 214, 251, 333, 334, 662, 728, 810, 811, 1048], "come": [155, 251, 333, 334, 392, 630, 642, 662, 727, 728, 810, 811, 872, 1041], "set_index": [155, 251, 662, 728], "resampl": [155, 251, 662, 728], "reset_index": [155, 251, 662, 728], "though": [155, 251, 662, 728], "evenli": [155, 251, 662, 728], "upsampl": [155, 251, 662, 728], "date_rang": [155, 224, 251, 313, 315, 318, 319, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 630, 662, 728, 785, 786, 788, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829], "30m": [155, 251, 341, 348, 662, 728, 818, 825], "time_min": [155, 251, 662, 728], "time_max": [155, 251, 662, 728], "23": [155, 156, 251, 314, 322, 341, 478, 479, 481, 484, 485, 486, 582, 618, 619, 630, 662, 663, 728, 731, 787, 795, 1049], "boundari": [155, 251, 294, 295, 296, 630, 662, 728, 767, 768, 769, 848, 1041], "time_count": [155, 251, 662, 728], "_lower_boundari": [155, 251, 662, 728], "_upper_boundari": [155, 251, 662, 728], "lower_bound": [155, 251, 294, 296, 379, 630, 662, 728, 767, 769, 852, 1028, 1041], "upper_bound": [155, 251, 294, 295, 379, 425, 630, 662, 728, 767, 768, 852, 910, 1041], "time_agg_list": [155, 251, 662, 728], "int_rang": [155, 222, 233, 251, 565, 662, 712, 728], "2i": [155, 251, 662, 728], "3i": [155, 251, 662, 728], "a_agg_list": [155, 251, 662, 728], "rollinggroupbi": [156, 251], "dynamic_groupbi": [156, 251, 663, 728], "groupby_dynam": [156, 251, 663, 728], "t_0": [156, 251, 478, 479, 480, 481, 482, 484, 485, 486, 630, 663, 728], "t_1": [156, 251, 478, 479, 480, 481, 482, 484, 485, 486, 630, 663, 728], "t_n": [156, 251, 478, 479, 480, 481, 482, 484, 485, 486, 630, 663, 728], "19": [156, 170, 251, 341, 479, 481, 533, 619, 630, 663, 668, 728, 818, 825, 999], "43": [156, 251, 304, 485, 630, 663, 728], "strptime": [156, 251, 340, 663, 728, 817], "set_sort": [156, 170, 224, 251, 630, 663, 668, 728, 1041], "2d": [156, 214, 251, 596, 663, 728, 785, 791], "sum_a": [156, 251, 663, 728], "min_a": [156, 251, 663, 728], "max_a": [156, 251, 663, 728], "seed": [157, 195, 251, 374, 469, 488, 494, 630, 846, 930, 949, 960, 1041], "seed_1": [157, 251, 374, 630, 846, 1041], "seed_2": [157, 251, 374, 630, 846, 1041], "seed_3": [157, 251, 374, 630, 846, 1041], "hash": [157, 251, 630, 1041], "u64": [157, 251, 374, 471, 630, 681, 728, 846, 1041], "10783150408545073287": [157, 251], "1438741209321515184": [157, 251], "10047419486152048166": [157, 251], "2047317070637311557": [157, 251], "ab": [158, 172, 207, 228, 251, 539, 540, 630, 706, 728, 847, 874, 1011, 1041], "grown": [160, 251], "intermedi": [162, 251, 666, 728, 851, 1041, 1049], "linear": [162, 186, 243, 251, 378, 401, 438, 467, 482, 571, 572, 606, 630, 666, 682, 722, 728, 851, 880, 929, 943, 1041], "mask": [163, 165, 251, 283, 284, 286, 287, 380, 382, 390, 402, 505, 507, 630, 754, 755, 841, 852, 854, 857, 869, 881, 925, 926, 952, 971, 973, 1032, 1041], "visual": [163, 165, 251], "buffer_s": [167, 251], "intern": [167, 251], "veri": [167, 219, 251, 265, 630, 647, 712, 728, 770, 1041], "fit": [167, 202, 222, 251, 493, 608, 630, 958, 959, 1041], "signific": [167, 251, 265, 630], "4x": [167, 251], "materialis": [167, 168, 192, 193, 194, 251], "rows_by_kei": [167, 193, 251], "iter_row": [168, 192, 193, 194, 251], "17_500": [168, 251], "klmnoopqrstuvwxyz": [168, 251], "__name__": [168, 251], "7500": [168, 251], "15_000": [168, 251], "record_batch": [168, 251], "to_arrow": [168, 251, 1041], "to_batch": [168, 251], "date32": [168, 251], "large_str": [168, 209, 215, 251], "15000": [168, 251], "2500": [168, 251], "left_on": [169, 170, 251, 667, 668, 728], "right_on": [169, 170, 251, 667, 668, 728], "_right": [169, 170, 251, 667, 668, 728], "joinvalid": [169, 251, 667, 728], "semi": [169, 251, 667, 728], "anti": [169, 251, 667, 712, 728, 952, 953, 1041], "cross": [169, 251, 667, 728], "many_to_mani": [169, 251, 667, 728], "one_to_on": [169, 251, 667, 728], "one_to_mani": [169, 251, 667, 728], "many_to_on": [169, 251, 667, 728], "join_asof": [169, 251, 667, 728], "stringcach": [169, 251, 641], "other_df": [169, 251], "by_left": [170, 251, 668, 728], "by_right": [170, 251, 668, 728], "asofjoinstrategi": [170, 251, 668, 728], "allow_parallel": [170, 251, 667, 668, 728], "force_parallel": [170, 251, 667, 668, 728], "asof": [170, 251, 668, 728], "asof_join": [170, 251], "distanc": [170, 251, 668, 728, 848, 1041], "plan": [170, 171, 251, 645, 653, 660, 667, 668, 683, 691, 709, 728], "gdp": [170, 251, 668, 728], "2016": [170, 251, 668, 728], "2017": [170, 251, 668, 728], "2018": [170, 251, 340, 668, 728, 817], "2019": [170, 251, 668, 728], "record": [170, 214, 251, 668, 728], "jan": [170, 251, 668, 728], "1st": [170, 251, 581, 668, 728], "4164": [170, 251, 668, 728], "4411": [170, 251, 668, 728], "4566": [170, 251, 668, 728], "4696": [170, 251, 668, 728], "popul": [170, 251, 668, 728], "12th": [170, 251, 668, 728], "82": [170, 251, 668, 728], "66": [170, 251, 485, 558, 630, 668, 728, 943, 1041], "83": [170, 251, 668, 728], "52": [170, 228, 251, 487, 630, 668, 706, 728], "request": [171, 251], "describe_plan": [171, 251], "unoptim": [171, 251], "describe_optimized_plan": [171, 251], "show_graph": [171, 251, 728], "un": [171, 251], "graphviz": [171, 251, 691, 728], "axi": [173, 174, 176, 178, 206, 251, 676, 728], "null_strategi": [174, 206, 251], "nullstrategi": [174, 206, 251], "spam": [174, 251, 512, 978], "id_var": [176, 251, 676, 728], "value_var": [176, 251, 676, 728], "variable_nam": [176, 251, 676, 728], "value_nam": [176, 251, 676, 728], "unpivot": [176, 251, 676, 728], "leav": [176, 251, 425, 676, 728], "massag": [176, 251, 676, 728], "measur": [176, 251, 676, 728], "merg": [177, 251, 677, 728], "caller": [177, 251, 425, 672, 677, 712, 728], "respons": [177, 251, 677, 728], "steve": [177, 251, 677, 728], "elis": [177, 251, 677, 728], "bob": [177, 251, 677, 728], "ag": [177, 251, 677, 728], "anna": [177, 251, 677, 728], "megan": [177, 251, 677, 728], "thoma": [177, 251, 677, 728], "21": [177, 206, 251, 478, 479, 481, 484, 485, 486, 589, 630, 677, 728, 731], "what": [180, 251, 1022, 1031, 1041], "pack": [180, 251], "expr_unique_subset": [180, 251], "df_nuniqu": [180, 251], "df_agg_nuniqu": [180, 251], "include_kei": [182, 194, 251], "offer": [183, 251, 462, 630, 680, 728], "fulli": [183, 195, 251], "cast_str_to_int": [183, 251, 680, 728], "col_nam": [183, 251, 434, 630, 680, 728], "tdf": [183, 251, 680, 728], "aggregate_funct": [184, 251], "pivotagg": [184, 251], "nodefault": [184, 251], "_nodefault": [184, 251], "no_default": [184, 251], "sort_column": [184, 251], "predefin": [184, 251], "predict": [184, 187, 224, 251, 488, 494, 630], "transpos": [184, 251], "discoveri": [184, 251], "col1": [184, 222, 251, 728, 1049], "col2": [184, 222, 251, 728, 1049], "col3": [184, 251, 1049], "tanh": [184, 251, 630, 1041], "998347": [184, 251], "964028": [184, 251], "999954": [184, 251], "interpol": [186, 243, 251, 364, 438, 467, 482, 606, 630, 682, 722, 728, 929, 943, 1041], "rollinginterpolationmethod": [186, 243, 251, 467, 482, 606, 630, 682, 722, 728, 929, 943, 1041], "midpoint": [186, 243, 251, 467, 482, 606, 630, 682, 722, 728, 929, 943, 1041], "by_pred": [192, 251], "accord": [192, 251, 435, 581, 630, 798], "never": [192, 251, 581], "mutual": [192, 251], "exclus": [192, 251, 558, 565, 593, 594, 630], "addition": [192, 251], "clariti": [192, 251], "toomanyrowsreturnederror": [192, 251, 641], "norowsreturnederror": [192, 251, 641], "inherit": [192, 251], "rowserror": [192, 251, 641], "selectortyp": [194, 251, 731], "high": [194, 251], "cost": [194, 251], "reoconstruct": [194, 251], "defaultdict": [194, 251], "assum": [194, 251, 466, 630, 672, 712, 728], "with_replac": [195, 251, 488, 630, 949, 1041], "shuffl": [195, 233, 251, 488, 630, 712, 949, 1041], "modul": [195, 251, 488, 494, 629, 630, 731, 949, 960, 1041], "named_expr": [197, 228, 251, 611, 614, 687, 706, 728], "threshold": [197, 251, 687, 728], "set_auto_structifi": [197, 228, 251, 687, 706, 728], "auto_structifi": [197, 228, 251, 687, 706, 728], "is_odd": [197, 251, 687, 728], "_is_odd": [197, 251, 687, 728], "shift_and_fil": [200, 251, 630, 728, 1041], "shift": [201, 251, 308, 404, 461, 492, 571, 630, 690, 728, 780, 883, 924, 957, 1041], "shrink": [202, 251, 493, 630, 958, 959, 1041], "hold": [202, 251], "ddof": [205, 225, 251, 484, 486, 503, 556, 573, 609, 610, 613, 620, 630, 696, 704, 728, 945, 947, 968, 1030, 1041], "deviat": [205, 251, 357, 484, 503, 613, 630, 696, 728, 834, 968, 1041], "degre": [205, 225, 251, 468, 484, 486, 503, 556, 573, 609, 610, 613, 620, 630, 696, 704, 728, 945, 947, 968, 1030, 1041], "freedom": [205, 225, 251, 484, 486, 503, 556, 573, 609, 610, 613, 620, 630, 696, 704, 728, 945, 947, 968, 1030, 1041], "divisor": [205, 225, 251, 484, 486, 503, 556, 573, 609, 610, 613, 620, 630, 696, 704, 728, 945, 947, 968, 1030, 1041], "816497": [205, 251], "16a": [206, 251], "27b": [206, 251], "38c": [206, 251], "nth": [208, 251, 527, 546, 630, 699, 728, 993, 1013, 1041], "mostli": [209, 251, 365, 630], "categoricaltyp": [209, 251], "as_seri": [210, 251], "fruit": [210, 251, 464, 474, 509, 528, 542, 630, 975, 994], "car": [210, 251, 464, 474, 542, 630], "beetl": [210, 251, 464, 474, 542, 630], "audi": [210, 251, 464, 474, 542, 630], "300": [210, 251, 939, 940, 942, 1041], "drop_first": [212, 251], "dummi": [212, 251, 1018, 1041], "foo_1": [212, 251], "foo_2": [212, 251], "bar_3": [212, 251], "bar_4": [212, 251], "ham_a": [212, 251], "ham_b": [212, 251], "instantiat": [213, 251, 1020, 1041], "from_repr": [213, 251, 1020, 1041], "df_from_str_repr": [213, 251], "eval": [213, 251, 584, 1020, 1041], "indexord": [214, 251], "fortran": [214, 251], "downstream": [214, 251, 490, 630, 954, 1041], "applic": [214, 251, 478, 479, 480, 481, 482, 484, 485, 486, 630], "prevent": [214, 251, 303, 304, 391, 543, 630, 728, 775, 776, 1010, 1041], "reshap": [214, 251, 407, 630, 886, 1041], "ll": [214, 251], "u1": [214, 251], "f4": [214, 251], "view": [214, 251, 1022, 1041], "recarrai": [214, 251], "rec": [214, 251], "use_pyarrow_extension_arrai": [215, 251, 1023, 1041], "trigger": [215, 251, 1023, 1041], "sent": [215, 251, 1022, 1023, 1041], "pandas_df1": [215, 251], "pandas_df2": [215, 251], "pandas_df2_pa": [215, 251], "na": [215, 251, 1023, 1041], "get_column": [216, 251], "four": [217, 251], "five": [217, 251, 1049], "bottom_k": [218, 251, 550, 630, 700, 728, 1025, 1041], "include_head": [219, 251], "header_nam": [219, 251], "column_nam": [219, 251], "perhap": [219, 251], "column_2": [219, 251], "name_gener": [219, 251], "base_nam": [219, 251], "my_column_": [219, 251], "my_column_0": [219, 251], "my_column_1": [219, 251], "my_column_2": [219, 251], "uniquekeepstrategi": [220, 251, 701, 728], "kept": [220, 251, 701, 728], "decompos": [221, 251, 702, 728], "t_a": [221, 251, 702, 728], "t_b": [221, 251, 702, 728], "t_c": [221, 251, 702, 728], "t_d": [221, 251, 702, 728], "womp": [221, 251, 702, 728], "t_": [221, 251, 702, 728], "t_struct": [221, 251, 702, 728], "step": [222, 251, 565, 593, 594], "unstackdirect": [222, 251], "much": [222, 251, 305, 424, 630, 777, 903, 1041], "pivot": [222, 251], "phase": [222, 251], "subject": [222, 251], "ascii_uppercas": [222, 251], "h": [222, 251, 258, 344, 347, 493, 530, 532, 535, 630, 996, 998, 1001], "col1_0": [222, 251], "col1_1": [222, 251], "col1_2": [222, 251], "col2_0": [222, 251], "col2_1": [222, 251], "col2_2": [222, 251], "syntact": [223, 251, 585, 586, 590, 595, 605, 606, 611, 622, 703, 728, 967, 1041], "sugar": [223, 251, 585, 586, 590, 595, 605, 606, 611, 622, 703, 728, 967, 1041], "coalesc": [223, 251, 530, 703, 728, 996], "400": [223, 251, 703, 728, 939, 940, 942, 1041], "600": [223, 251, 703, 728, 731], "700": [223, 251, 703, 728], "new_df": [223, 251, 703, 728], "time_column": [224, 251], "frequenc": [224, 251], "forward_fil": [224, 251, 301, 304, 630], "varianc": [225, 251, 358, 392, 486, 556, 620, 630, 704, 728, 835, 872, 947, 1030, 1041], "grow": [226, 251], "is_not": [228, 251, 630, 706, 728], "not_c": [228, 251, 706, 728], "diff": [228, 251, 319, 323, 327, 329, 331, 336, 343, 405, 630, 706, 728, 792, 796, 803, 805, 808, 813, 820, 884, 1041], "_diff": [228, 251, 706, 728], "row_nr": [229, 251, 435, 478, 479, 481, 484, 485, 486, 630, 708, 728, 953, 1041], "named_agg": [231, 710], "_sum": [231, 710], "_mean_squar": [231, 710], "b_sum": [231, 710], "c_mean_squar": [231, 710], "sub": [233, 278, 279, 280, 630, 750, 751, 752], "triangl": [233, 712], "group_df": [233, 712], "deem": [234, 299, 574, 630, 713], "nr": [236, 245, 715, 724], "maxim": [238, 273, 630, 717, 745, 1041], "833333": [239, 718], "minim": [241, 274, 400, 493, 501, 630, 720, 746, 879, 915, 958, 1041], "overview": [251, 630, 641, 728, 1041, 1049], "frameinittyp": [251, 728], "variou": [251, 630, 728, 731, 1041], "entri": [251, 728, 1048], "behavior": [251, 265, 424, 563, 630, 903], "mydatafram": 251, "notic": [251, 728, 1041], "df4": 251, "df5": 251, "df6": 251, "corr": 251, "drop_in_plac": 251, "drop_nul": [251, 310, 630, 728, 1041], "estimated_s": [251, 1041], "explod": [251, 367, 460, 473, 630, 728, 934, 1041], "find_idx_by_nam": 251, "fold": [251, 444, 569, 576, 577, 607], "frame_equ": [251, 341, 348], "groupby_rol": [251, 478, 479, 480, 481, 482, 484, 485, 486, 630, 662, 728], "hash_row": 251, "hstack": 251, "insert_at_idx": 251, "is_dupl": [251, 630, 1041], "is_empti": [251, 1041], "is_uniqu": [251, 630, 1041], "iter_slic": 251, "melt": [251, 728], "merge_sort": [251, 728], "n_uniqu": [251, 630, 1041], "pipe": [251, 630, 728], "quantil": [251, 466, 482, 630, 728, 928, 943, 1041], "replace_at_idx": 251, "shrink_to_fit": [251, 1041], "take_everi": [251, 630, 728, 1041], "to_dict": 251, "to_dummi": [251, 1041], "to_numpi": [251, 433, 630, 1041], "to_panda": [251, 1041], "to_struct": [251, 512], "unnest": [251, 475, 512, 526, 527, 540, 630, 728, 904, 936, 992, 993, 1041], "unstack": 251, "write_avro": 251, "write_databas": 251, "write_delta": 251, "write_excel": 251, "write_json": [251, 683, 728], "write_parquet": 251, "cumprod": [258, 630, 1041], "ghi": [258, 512, 630, 731, 978], "94": [259, 630], "map_alia": [260, 464, 542, 630], "confus": [261, 385, 387, 630], "tt": [261, 630], "tf": [261, 263, 630], "ff": [261, 263, 630], "upcast": [264, 630], "skip_nul": [265, 630, 738, 1041], "pass_nam": [265, 630], "applystrategi": [265, 630], "thread_loc": [265, 630], "unknown": [265, 435, 511, 596, 630, 977], "stage": [265, 630], "speed": [265, 630, 693, 728], "code": [265, 283, 285, 286, 287, 490, 630, 670, 728, 954, 1041], "amount": [265, 630], "releas": [265, 630, 1049], "gil": [265, 630], "bug": [265, 433, 630, 672, 712, 728, 738, 1041], "discourag": [265, 630], "loop": [265, 630], "a_times_2": [265, 630], "approx": [266, 564, 630, 728], "hyperloglog": [266, 564, 630, 728], "algorithm": [266, 564, 630, 728], "cardin": [266, 564, 630, 728], "invers": [267, 268, 269, 270, 271, 272, 630, 739, 740, 741, 742, 743, 744, 1041], "cosin": [267, 268, 297, 298, 433, 630, 739, 740, 771, 772, 1041], "570796": [267, 269, 630, 739, 741, 1041], "hyperbol": [268, 270, 272, 298, 497, 548, 630, 740, 742, 744, 772, 963, 1015, 1041], "sine": [269, 270, 433, 496, 497, 630, 741, 742, 962, 963, 1041], "881374": [270, 630, 742, 1041], "tangent": [271, 272, 547, 548, 630, 743, 744, 1014, 1015, 1041], "785398": [271, 630, 743, 1041], "arg_wher": [276, 630], "substr": [283, 286, 287, 505, 509, 520, 521, 525, 526, 527, 528, 731, 754, 757, 758, 971, 975, 986, 987, 991, 992, 993, 994], "ends_with": [283, 287, 505, 528, 731, 994], "x00": [283, 285, 286, 287], "xff": [283, 285, 286, 287], "hex": [283, 284, 285, 286, 287, 507, 508, 519, 755, 756, 973, 974, 985], "code_encoded_hex": [283, 285, 286, 287], "contains_ff": [283, 286, 287], "starts_with_ff": [283, 286, 287], "ends_with_ff": [283, 286, 287], "000000": [283, 285, 286, 287], "ffff00": [283, 285, 286, 287], "0000ff": [283, 285, 286, 287], "transferencod": [284, 285, 507, 508, 755, 756, 973, 974], "strict": [284, 290, 505, 507, 519, 530, 531, 532, 535, 630, 755, 760, 951, 971, 973, 985, 996, 997, 998, 1001, 1041], "base64": [284, 285, 507, 508, 755, 756, 973, 974], "anywher": [286, 287, 530, 531, 532, 996, 997, 998], "complex": [288, 305, 550, 630, 759, 777, 1025, 1041], "frac": [288, 356, 357, 358, 498, 550, 630, 759, 833, 834, 835, 964, 1025, 1041], "hurt": [289, 630], "lot": [289, 630], "content": [289, 494, 555, 630, 960, 1041], "problem": [289, 630], "overflow": [290, 303, 304, 519, 543, 630, 760, 775, 776, 985, 1010, 1041], "to_fram": [291, 341, 348, 530, 952, 953, 992, 993, 996, 1041], "categoricalord": [292, 763], "lexic": [292, 731, 763], "foo_clip": [294, 295, 296, 630], "clip": [295, 296, 630, 768, 769, 1041], "543081": [298, 630, 772, 1041], "cumul": [300, 301, 302, 303, 304, 576, 577, 578, 579, 630, 773, 774, 775, 776, 1041], "a_revers": [300, 301, 302, 303, 304, 434, 474, 542, 630], "value_cummax": [301, 630], "value_cummax_all_fil": [301, 630], "value_cumsum": [304, 630], "value_cumsum_all_fil": [304, 630], "min_period": [305, 356, 357, 358, 477, 478, 479, 480, 481, 482, 484, 485, 486, 609, 610, 630, 777, 833, 834, 835, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1041], "slide": [305, 630, 777, 1041], "realli": [305, 630, 777, 1041], "visit": [305, 630, 777, 1041], "label": [306, 466, 477, 478, 479, 480, 481, 482, 484, 485, 486, 630, 681, 728, 778, 928, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1041], "left_clos": [306, 466, 630, 778, 928, 1041], "include_break": [306, 466, 630, 778, 928, 1041], "bin": [306, 466, 519, 558, 624, 630, 778, 848, 928, 985, 1035, 1041], "discret": [306, 308, 353, 404, 405, 466, 630, 778, 780, 831, 848, 883, 884, 928, 1041], "prob": [306, 466, 630, 928, 1041], "endpoint": [306, 466, 478, 479, 480, 481, 482, 484, 485, 486, 630, 778, 928, 1041], "observ": [306, 356, 357, 358, 466, 630, 778, 833, 834, 835, 928, 1041], "fall": [306, 466, 476, 630, 778, 852, 928, 937, 1041], "radian": [307, 630], "pi": [307, 630, 771, 962, 1014, 1041], "720": [307, 468, 630], "540": [307, 468, 630], "360": [307, 468, 630], "180": [307, 325, 339, 352, 468, 630], "null_behavior": [308, 404, 630, 780, 883, 1041], "nullbehavior": [308, 404, 630, 780, 883, 1041], "th": [308, 404, 405, 498, 630, 780, 883, 884, 964, 1041], "drop_nan": [311, 630, 1041], "utc": [312, 315, 320, 340, 530, 532, 731, 785, 788, 793, 817, 996, 998], "usual": [312, 785], "vari": [312, 581, 785, 1049], "rare": [312, 785], "countri": [312, 785], "switch": [312, 785], "samoa": [312, 785], "apia": [312, 785], "did": [312, 512, 785, 978], "2011": [312, 785], "dst_offset": [312, 785], "2012": [312, 785], "replace_time_zon": [312, 320, 789, 790, 822], "pacif": [312, 785], "11h": [312, 785], "13h": [312, 785], "lose": [313, 565, 786], "2001": [313, 318, 321, 322, 324, 325, 330, 332, 337, 338, 339, 341, 342, 346, 348, 349, 350, 351, 352, 478, 479, 481, 484, 485, 486, 530, 630, 786, 791, 794, 795, 797, 799, 800, 801, 802, 804, 806, 807, 809, 812, 814, 815, 816, 818, 819, 823, 825, 826, 827, 828, 829, 996], "time_unit_m": [313, 786], "time_unit_n": [313, 786], "naiv": [314, 530, 532, 787, 996, 998], "compon": [314, 342, 530, 532, 583, 787, 819, 996, 998], "resolv": 314, "tm": [314, 731], "456000": [314, 787], "101000": 314, "456": [314, 731, 787, 1019, 1041], "07": [314, 318, 338, 340, 341, 348, 350, 530, 581, 589, 619, 731, 787, 791, 817, 827, 996], "101": [314, 519, 985, 1049], "d1": 314, "d2": 314, "d3": 314, "europ": [315, 320, 340, 788, 793, 817], "london": [315, 320, 340, 788, 793, 817], "gmt": [315, 320, 340, 788, 793, 817], "bst": [315, 320, 340, 788, 793, 817], "weekdai": [318, 338], "day_of_month": [318, 338, 350], "ordinal_dai": [318, 350], "day_of_year": [318, 338, 350], "days_diff": 319, "base_utc_offset": [320, 793], "26": [320, 793], "0m": [320, 793], "epochtimeunit": [321, 589, 794], "unix": [321, 589, 794], "epoch_n": [321, 794], "epoch_": [321, 794], "978307200000000": [321, 346, 794, 823], "978307200": [321, 794], "978393600000000": [321, 346, 794, 823], "978393600": [321, 794], "978480000000000": [321, 346, 794, 823], "978480000": [321, 794], "hours_diff": 323, "leap": [324, 337, 581, 797, 814], "2002": [324, 325, 337, 339, 352, 797, 814, 829], "iso": [325, 349, 350, 798, 826, 827], "2006": [325, 337, 814], "2004": [325, 337, 814], "2005": [325, 337, 814], "1_001": [326, 327, 329, 336], "002": [326, 327, 329, 336, 583, 803, 805, 813], "003": [326, 327, 329, 336], "3000": 326, "997": [326, 327, 329, 336], "997000": 326, "998": [326, 327, 329, 336], "998000": 326, "999": [326, 327, 329, 336, 731, 1049], "999000": [326, 731], "microseconds_diff": 327, "milliseconds_diff": 329, "minutes_diff": 331, "1440": [331, 808], "think": [333, 334, 810, 811], "vectoris": [333, 334, 810, 811], "tseri": [333, 334, 810, 811], "monthend": [333, 810], "rollforward": [333, 810], "monthbegin": [334, 811], "rollback": [334, 811], "nanoseconds_diff": 336, "1000000": [336, 538, 813], "minu": [337, 814], "dictat": [337, 814], "date_plus_1i": [337, 814], "1y2mo": [337, 814], "date_min": 337, "1998": [337, 814], "1999": [337, 731, 814], "2003": [337, 589, 814], "ordin": [338, 469, 630, 815, 930, 1041], "366": [338, 815], "use_earliest": [340, 817], "convert_time_zon": [340, 817], "ambigu": [340, 817], "sai": [340, 817], "earliest": [340, 817], "london_timezon": [340, 817], "amsterdam": [340, 817], "london_to_amsterdam": [340, 817], "cet": [340, 817], "cest": [340, 817], "dst": [340, 817], "ts_local": [340, 817], "brussel": [340, 817], "half": [341, 356, 357, 358, 630, 818, 833, 834, 835, 1041], "225": [341, 348], "10m": [341, 348, 818, 825], "milli": [342, 819], "micro": [342, 819], "456789": [342, 731], "654321": 342, "111110": 342, "765431": 342, "sec": [342, 1049], "11111": 342, "seconds_diff": 343, "to_str": [344, 821], "datetime_str": [344, 347], "timestamp_n": [346, 823], "timestamp_m": 346, "978307200000": 346, "978393600000": 346, "978480000000": 346, "strftime": [347, 824], "53": [349, 826], "time_unit_u": [351, 828], "32971": [351, 828], "32974": [351, 828], "32976": [351, 828], "718281828459045": [353, 428, 630, 831, 907, 1041], "pk": [353, 630, 831, 1041], "probabl": [353, 466, 630, 831, 1041], "459148": [353, 630], "754888": [353, 630], "eq": [355, 630, 1041], "span": [356, 357, 358, 630, 833, 834, 835, 1041], "half_lif": [356, 357, 358, 630, 833, 834, 835, 1041], "adjust": [356, 357, 358, 498, 630, 833, 834, 835, 964, 1041], "ignore_nul": [356, 357, 358, 630, 833, 834, 835, 1031, 1041], "exponenti": [356, 357, 358, 360, 463, 630, 833, 834, 835, 836, 1041], "weight": [356, 357, 358, 477, 478, 479, 480, 481, 482, 484, 485, 486, 498, 630, 833, 834, 835, 938, 939, 940, 941, 942, 943, 945, 946, 947, 964, 1041], "decai": [356, 357, 358, 630, 833, 834, 835, 1041], "term": [356, 357, 358, 515, 518, 630, 833, 834, 835, 981, 984, 1041], "mass": [356, 357, 358, 630, 833, 834, 835, 1041], "gamma": [356, 357, 358, 630, 833, 834, 835, 1041], "foral": [356, 357, 358, 630, 833, 834, 835, 1041], "geq": [356, 357, 358, 630, 833, 834, 835, 1041], "theta": [356, 357, 358, 630, 833, 834, 835, 1041], "life": [356, 357, 358, 630, 833, 834, 835, 1041], "exp": [356, 357, 358, 630, 833, 834, 835, 1041], "ln": [356, 357, 358, 630, 833, 834, 835, 1041], "smooth": [356, 357, 358, 630, 833, 834, 835, 1041], "factor": [356, 357, 358, 549, 630, 833, 834, 835, 1024, 1041], "leq": [356, 357, 358, 630, 833, 834, 835, 1041], "imbal": [356, 357, 358, 630, 833, 834, 835, 1041], "ew": [356, 357, 358, 630, 833, 834, 835, 1041], "w_i": [356, 357, 358, 630, 833, 834, 835, 1041], "recurs": [356, 357, 358, 630, 833, 834, 835, 1041], "y_0": [356, 357, 358, 630, 833, 834, 835, 1041], "x_0": [356, 357, 358, 630, 833, 834, 835, 1041], "y_t": [356, 357, 358, 630, 833, 834, 835, 1041], "y_": [356, 357, 358, 630, 833, 834, 835, 1041], "x_t": [356, 357, 358, 630, 833, 834, 835, 1041], "x_2": [356, 357, 358, 630, 833, 834, 835, 1041], "428571": [356, 630], "bia": [357, 358, 392, 483, 498, 630, 834, 835, 872, 944, 964, 1041], "unbias": [357, 358, 630, 834, 835, 1041], "963624": [357, 630, 834, 1041], "928571": [358, 630, 835, 1041], "wildcard": [359, 570, 576, 577, 587, 607, 630], "regex": [359, 441, 505, 506, 509, 511, 512, 520, 521, 528, 585, 615, 630, 731, 971, 972, 975, 977, 978, 986, 987, 994], "aa": [359, 505, 585, 630, 971], "ba": [359, 585, 630, 731], "cc": [359, 585, 630], "718282": [360, 630], "389056": [360, 630], "54": [360, 630, 1049], "59815": [360, 630], "expand": [361, 440, 441, 472, 630, 837, 1041], "pythonliter": [362, 598, 602, 630, 838, 912, 915, 1041], "extrem": [362, 630, 838, 1041], "group_col": [365, 557, 630], "g1": [365, 557, 630], "g2": [365, 557, 630], "lt": [365, 557, 630, 1041], "gte": [365, 557, 630], "exprlistnamespac": [367, 630], "divis": [369, 551, 630], "truediv": [369, 630], "9774092659964970114": [374, 630], "13614470193936745724": [374, 630], "1101441246220388612": [374, 630], "11638928888656214026": [374, 630], "13382926553367784577": [374, 630], "cumsum": [377, 541, 579, 630, 665, 728, 871, 1041], "interpolationmethod": [378, 630, 851, 1041], "regrid": [378, 630], "grid": [378, 630], "df_original_grid": [378, 630], "grid_point": [378, 630], "df_new_grid": [378, 630], "conflat": [379, 630], "finit": [381, 551, 573, 630, 856, 1041], "primit": [383, 630, 1022, 1041], "optional_memb": [383, 630, 859, 1041], "infinit": [384, 551, 630, 860, 1041], "_isnan": [385, 630], "b_isnan": [385, 630], "negat": [386, 630], "_is_not_nan": [387, 630], "b_is_not_nan": [387, 630], "_not_nul": [388, 630], "a_not_nul": [388, 630], "b_not_nul": [388, 630], "_isnul": [389, 630], "a_isnul": [389, 630], "b_isnul": [389, 630], "undo": [391, 447, 630], "duplicateerror": [391, 630, 641], "occurr": [391, 630, 848, 1041], "333333": [391, 630, 924, 947, 1041], "fisher": [392, 498, 630, 872, 964, 1041], "fourth": [392, 630, 872, 1041], "subtract": [392, 541, 630, 872, 1041], "distribut": [392, 498, 630, 872, 964, 1041], "elimin": [392, 630, 872, 1041], "bias": [392, 498, 630, 872, 964, 1041], "scipi": [392, 498, 630, 872, 964, 1041], "stat": [392, 498, 630, 872, 964, 1041], "153061": [392, 630], "sublist": [399, 400, 402, 404, 405, 408, 409, 410, 412, 413, 420, 423, 424, 425, 859, 878, 879, 881, 883, 884, 887, 888, 889, 891, 892, 899, 902, 903, 904, 1041], "membership": [402, 881], "listcol": 403, "number_of_two": 403, "blindli": [406, 885], "worth": [406, 885], "enough": [406, 498, 630, 885, 964, 1041], "concat_list": [406, 584, 885], "rank": [406, 573, 584, 630, 885, 1041], "exprnamespac": 407, "flat": [407, 473, 630, 886, 934, 1041], "taken": [420, 524, 545, 630, 899, 990], "null_on_oob": [424, 903], "cheaper": [424, 903], "n_field_strategi": [425, 904], "tostructstrategi": [425, 904], "first_non_nul": [425, 904], "max_width": [425, 904], "field_0": [425, 904], "field_1": [425, 904], "field_n": [425, 904], "pre": [425, 605, 608, 622], "n0": 425, "n1": 425, "logarithm": [428, 429, 430, 630, 907, 908, 909, 1041], "584963": [428, 630], "30103": [429, 630], "60206": [429, 630], "natur": [430, 630, 909, 1041], "plu": [430, 630, 909, 1041], "693147": [430, 630], "098612": [430, 630], "386294": [430, 630], "lowest": [431, 630], "9223372036854775808": [431, 630], "agg_list": [433, 630], "elementwis": [433, 477, 478, 479, 481, 485, 630, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1041], "third": [433, 619, 630], "parti": [433, 630], "book": [433, 630], "map_dict": [433, 630, 1041], "argmax": [433, 630], "_revers": [434, 474, 542, 630], "rsplit": [434, 630], "b_revers": [434, 474, 542, 630], "remap": [435, 630, 911, 1041], "lookup": [435, 630, 911, 1041], "country_code_dict": [435, 630], "ca": [435, 630], "canada": [435, 630], "de": [435, 630], "germani": [435, 630], "fr": [435, 630], "franc": [435, 630], "country_cod": [435, 630], "rest": [435, 630], "exprmetanamespac": [439, 442], "computeerror": [443, 519, 641, 985], "tree": 446, "keep_nam": [447, 630], "modulu": [450, 630], "xlog2": [452, 463, 630], "poison": [454, 455, 630, 920, 921, 1041], "nanmax": [454, 455, 630, 920, 921, 1041], "wherea": [454, 455, 581, 630, 664, 671, 728, 920, 921, 1041], "inequ": [456, 630], "ne": [457, 630, 1041], "more_expr": [460, 559, 561, 566, 569, 571, 572, 578, 598, 602, 615, 630], "mapping_strategi": [460, 630], "windowmappingstrategi": [460, 630], "group_to_row": [460, 630], "outcom": [460, 630], "group_dtyp": [460, 630], "warn": [460, 630], "flatten": [460, 630], "_max": [460, 630], "c_max": [460, 630], "_min": [460, 630], "c_min": [460, 630], "percent": [461, 630, 924, 1041], "090909": [461, 630], "extract_numb": [462, 630], "digit": [462, 487, 512, 538, 630, 948, 972, 978, 1004, 1041, 1049], "scale_negative_even": [462, 630], "expon": [463, 630, 1041], "reverse_": [464, 630], "reverse_a": [464, 630], "reverse_fruit": [464, 630], "reverse_b": [464, 630], "reverse_car": [464, 630], "allow_dupl": [466, 630, 928, 1041], "lo": [466, 630], "566371": [468, 630], "424778": [468, 630], "283185": [468, 630], "141593": [468, 630, 739, 1041], "rankmethod": [469, 630, 930, 1041], "ti": [469, 630, 930, 1041], "competit": [469, 630, 930, 1041], "highest": [469, 554, 573, 630, 728, 930, 1041], "immedi": [469, 565, 567, 581, 593, 594, 605, 608, 614, 619, 622, 630, 930, 1041], "64bit": [471, 630, 932, 1041], "safe": [471, 530, 532, 630, 932, 996, 998, 1022, 1041], "fruits_revers": [474, 542, 630], "cars_revers": [474, 542, 630], "rle": [476, 630, 937, 1041], "themselv": [476, 630, 937, 1041], "a_r": [476, 630], "ab_r": [476, 630], "window_s": [477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 609, 610, 630, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 1041], "rolling_min": [477, 630, 938, 1041], "rolling_max": [477, 630, 938, 1041], "rolling_mean": [477, 630, 938, 1041], "rolling_sum": [477, 630, 938, 1041], "multipli": [477, 478, 479, 481, 484, 485, 486, 630, 938, 939, 940, 941, 942, 943, 945, 946, 947, 1041], "358899": [477, 630], "041452": [477, 630], "567764": [477, 630], "travers": [478, 479, 481, 485, 630, 939, 940, 942, 945, 946, 947, 1041], "vector": [478, 479, 481, 485, 630, 939, 940, 942, 945, 946, 947, 1041], "5h": [478, 479, 480, 481, 482, 484, 485, 486, 630], "df_tempor": [478, 479, 481, 484, 485, 486, 630], "closur": [478, 479, 484, 485, 486, 630], "rolling_row_max": [478, 630], "2h": [478, 479, 481, 484, 485, 486, 630], "rolling_row_mean": [479, 630], "contribut": [480, 482, 484, 486, 630], "rolling_row_min": [481, 630], "625": [482, 630], "skew": [483, 630, 944, 1041], "381802": [483, 630, 944, 1041], "47033": [483, 630, 944, 1041], "38180177416060584": [483, 630, 944, 1041], "47033046033698594": [483, 630, 944, 1041], "433013": [484, 630, 696, 728], "rolling_row_std": [484, 630], "rolling_row_sum": [485, 630], "39": [485, 589, 630], "63": [485, 630], "69": [485, 630], "1875": [486, 630, 704, 728], "rolling_row_var": [486, 630], "fixed_se": [488, 494, 630], "increment": [488, 494, 630], "schedul": [488, 494, 630], "searchsortedsid": [489, 630, 950, 1041], "leftmost": [489, 630, 950, 1041], "rightmost": [489, 630, 950, 1041], "six": [489, 630], "extrema": [493, 630, 958, 1041], "112": [493, 630, 1049], "129": [493, 630], "i8": [493, 605, 608, 622, 630, 780, 935, 1028, 1041], "8589934592": [493, 630], "1073741824": [493, 630], "175201": [497, 630, 963, 1041], "about": [498, 505, 511, 512, 520, 630, 964, 971, 977, 978, 986, 1041, 1049], "unimod": [498, 630, 964, 1041], "skewtest": [498, 630, 964, 1041], "speak": [498, 630, 964, 1041], "g_1": [498, 630, 964, 1041], "m_3": [498, 630, 964, 1041], "m_2": [498, 630, 964, 1041], "m_i": [498, 630, 964, 1041], "sum_": [498, 630, 964, 1041], "texttt": [498, 630, 964, 1041], "k_3": [498, 630, 964, 1041], "k_2": [498, 630, 964, 1041], "sqrt": [498, 630, 964, 1041], "343622": [498, 630], "value1": [501, 630], "value2": [501, 630], "attain": [501, 630], "414214": [502, 630, 967, 1041], "sensit": [505, 512, 520, 971, 978, 986], "ilmsuxu": [505, 511, 512, 520, 971, 977, 978, 986], "default_match": 505, "insensitive_match": 505, "section": [505, 511, 512, 520, 971, 977, 978, 986], "crab": [505, 971], "dog": [505, 534, 537, 572, 971, 1000, 1003], "rab": [505, 971], "success": [506, 512, 972, 978], "overlap": [506, 512, 972, 978], "captur": [506, 511, 512, 972, 977, 978], "123": [506, 512, 521, 731, 972, 978, 987, 1019, 1041], "bla": [506, 512, 972, 978], "asd": [506, 512, 972, 978], "678": [506, 512, 972, 978], "910t": [506, 512, 972, 978], "count_digit": 506, "666f6f": [508, 974], "626172": [508, 974], "mango": [509, 528, 975, 994], "go": [509, 975], "has_suffix": 509, "group_index": [511, 977], "nthose": [511, 977], "nodd": [511, 977], "nthe": [511, 977], "url": [511, 977], "vote": [511, 977], "ballon_dor": [511, 977], "404": [511, 977], "ref": [511, 977], "candid": [511, 977], "messi": [511, 977], "ronaldo": [511, 977], "email": [512, 978], "real": [512, 978], "some_account": [512, 978], "somewher": [512, 978], "net": [512, 978], "jkl": [512, 978], "uvw": [512, 978], "co": [512, 630, 978, 1041], "uk": [512, 978], "address": 512, "xi": [512, 978], "insensit": [512, 520, 731, 971, 978, 986], "quantifi": [512, 978], "email_part": [512, 978], "extracted_nr": 512, "910": [512, 978], "json_path_match": [513, 979], "jsonpath": [513, 514, 979, 980], "json_path": [514, 980], "json_val": [514, 980], "n_char": [515, 981], "caf\u00e9": [515, 518, 981, 984], "345": [515, 518, 981, 984], "\u6771\u4eac": [515, 518, 981, 984], "nchar": [515, 518], "fill_char": [516, 522, 982, 988], "justifi": [516, 522, 982, 988], "pad": [516, 522, 538, 982, 988, 1004], "cow": [516, 522, 982, 988], "monkei": [516, 522, 982, 988], "hippopotamu": [516, 522, 982, 988], "strip": [517, 523, 983, 989], "tworld": [517, 983, 995], "wod": [517, 983], "rld": [517, 529, 983], "radix": [519, 985], "parseerror": [519, 985], "becom": [519, 985], "silent": [519, 985], "110": [519, 985], "010": [519, 985], "fa1e": [519, 985], "ff00": [519, 985], "cafe": [519, 985], "64030": [519, 985], "65280": [519, 985], "51966": [519, 985], "replace_al": [520, 986], "citi": 520, "philadelphia": 520, "season": 520, "spring": 520, "summer": 520, "autumn": 520, "winter": 520, "weather": [520, 986], "raini": [520, 986], "sunni": [520, 986], "cloudi": 520, "snowi": 520, "foggi": [520, 986], "123abc": [520, 986], "abc456": [520, 986], "abcabc": [521, 987], "123a123": [521, 987], "bc": [521, 615, 987], "trail": [523, 529, 989, 995], "oldw": 523, "he": 523, "subslic": [524, 990], "pear": [524, 990], "papaya": [524, 990], "dragonfruit": [524, 990], "s_slice": 524, "ear": [524, 990], "aya": [524, 990], "uit": [524, 990], "ya": [524, 990], "onf": [524, 990], "a_1": [526, 992, 1018, 1041], "d_4": [526, 992], "rename_field": [526, 527, 992, 993], "first_part": [526, 527, 992, 993], "second_part": [526, 527, 992, 993], "remaind": [527, 993], "app": [528, 994], "has_prefix": 528, "nworld": 529, "ow": 529, "hell": [529, 995], "polarstemporaltyp": [530, 996], "introduc": [530, 531, 532, 996, 997, 998], "penalti": [530, 531, 532, 996, 997, 998], "clean": [530, 531, 532, 996, 997, 998], "beforehand": [530, 531, 532, 996, 997, 998], "certainli": [530, 531, 532, 996, 997, 998], "deprec": [530, 532, 559, 561, 565, 578, 581, 598, 602, 608, 615, 619, 996, 998], "3f": [530, 532, 996, 998], "00z": [530, 532, 996, 998], "sun": [530, 996], "jul": [530, 996], "34": [530, 996], "inference_length": [533, 999], "3420": [533, 999], "120134": [533, 999], "3212": [533, 999], "143": [533, 999, 1049], "lowercas": [534, 1000], "variant": [534, 536, 537], "titlecas": [536, 1002], "sing": [536, 1002], "welcom": [536, 1002], "THERE": [536, 1002], "NO": [536, 731, 1002], "There": [536, 1002], "uppercas": [537, 1003], "100000": 538, "0010": 538, "0001": 538, "00000": 538, "00001": 538, "cd": [539, 540], "struct_col": [539, 540], "www": 540, "xxx": 540, "yyi": 540, "zzz": 540, "obvious": 540, "structfieldnotfounderror": [540, 641], "761594": [548, 630, 1015, 1041], "replic": [549, 630, 1024, 1041], "vals_phys": [549, 630], "floordiv": [551, 630], "ieee": [551, 630], "754": [551, 630], "mathemat": [551, 584, 630], "undefin": [551, 630], "On": [551, 630], "operand": [551, 630], "infin": [551, 630], "value_count": [553, 630, 1041], "9223372036854775807": [554, 630], "multithread": [555, 630], "binary_str": [558, 630], "zfill": [558, 630], "250": [558, 630, 940, 1041, 1049], "bin_x": [558, 630], "bin_i": [558, 630], "xor_xi": [558, 630], "bin_xor_xi": [558, 630], "00001010": [558, 630], "00000001": [558, 630], "00001011": [558, 630], "00001000": [558, 630], "00000010": [558, 630], "11111010": [558, 630], "00000011": [558, 630], "249": [558, 630], "11111001": [558, 630], "01000010": [558, 630], "00000100": [558, 630], "70": [558, 630], "01000110": [558, 630], "bitwis": [559, 560, 561, 562], "AND": [559, 560, 731], "any_horizont": 561, "returns_scalar": 563, "product_a": 563, "49": 563, "arg_tru": [567, 630, 1041], "more_nam": 570, "hamburg": 570, "lag": 571, "mimic": 571, "a_lag_": 571, "a_rol": 571, "swim": 572, "walk": 572, "full_sent": 572, "correlationmethod": 573, "propagate_nan": 573, "spearman": 573, "larger": [573, 692, 693, 728], "544705": 573, "covari": [575, 610], "acc": [576, 577, 587, 607], "include_init": 576, "accumul": [576, 577, 587, 607], "fn": [576, 577, 587, 607], "new_valu": [576, 577, 587, 607], "cumreduc": 576, "cumsum_horizont": 578, "further": [581, 1023, 1041], "granular": 581, "finer": 581, "permut": 581, "februari": 581, "febrari": 581, "28th": 581, "march": 581, "31st": 581, "approach": 581, "prior": 581, "began": 581, "januari": 581, "1mo_satur": 581, "month_end": 581, "routin": 581, "1985": 581, "america": 581, "new_york": 581, "est": 581, "999999": [582, 618, 619, 731], "tbl_width_char": 583, "120": 583, "add_week": 583, "add_dai": 583, "add_second": 583, "add_milli": 583, "add_hour": 583, "a_b_doubl": 584, "f_string": 588, "placehold": 588, "hello_": 588, "_world": 588, "foo_": 588, "_bar_": 588, "foo_a_bar_1": 588, "foo_b_bar_2": 588, "foo_c_bar_3": 588, "epoch": 589, "timestep": 589, "1666683077": 589, "1666683099": 589, "12345": [589, 764, 843, 948, 1041], "12346": 589, "agg_group": [590, 630], "polarsintegertyp": [593, 594], "allow_object": 596, "valueexcept": 596, "test_func": 597, "max_horizont": 598, "min_horizont": [602, 611], "polarsexprtyp": [605, 608, 622], "power": [612, 1041], "a_a": 612, "a_txt": 612, "605551": 613, "605551275463989": 613, "my_struct": 614, "1h30m25": 619, "lf": [619, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 707, 708, 709, 728, 1048, 1049], "6h": 619, "5h59m": 619, "1h29m": 619, "58": 619, "57": [619, 948, 1041, 1049], "chain": 621, "isn": 621, "thens": 621, "elif": 621, "pick": 621, "arr": [623, 1022, 1033, 1041], "sometim": 629, "and_": 630, "approx_uniqu": [630, 728], "arcco": [630, 1041], "arccosh": [630, 1041], "arcsin": [630, 1041], "arcsinh": [630, 1041], "arctan": [630, 1041], "arctanh": [630, 1041], "arg_max": [630, 1041], "arg_min": [630, 1041], "arg_sort": [630, 1041], "arg_uniqu": [630, 1041], "backward_fil": 630, "clip_max": [630, 1041], "clip_min": [630, 1041], "cosh": [630, 1041], "cumcount": 630, "cummax": [630, 1041], "cummin": [630, 1041], "cumulative_ev": [630, 1041], "cut": [630, 1041], "entropi": [630, 1041], "eq_miss": [630, 1041], "ewm_mean": [630, 1041], "ewm_std": [630, 1041], "ewm_var": [630, 1041], "extend_const": [630, 1041], "from_json": [630, 683, 728], "ge": [630, 1041], "gt": [630, 1041], "implod": [630, 1041], "inspect": [630, 728], "is_between": [630, 1041], "is_finit": [630, 1041], "is_first": [630, 1041], "is_in": [630, 1041], "is_infinit": [630, 1041], "is_nan": [630, 1041], "is_not_nan": [630, 1041], "is_not_nul": [630, 1041], "kurtosi": [630, 1041], "le": [630, 1041], "log10": [630, 1041], "log1p": [630, 1041], "mod": 630, "mul": 630, "nan_max": [630, 1041], "nan_min": [630, 1041], "ne_miss": [630, 1041], "or_": 630, "pct_chang": [630, 1041], "pow": [630, 1041], "qcut": [630, 1041], "reinterpret": [630, 1041], "repeat_bi": 630, "rle_id": [630, 1041], "rolling_appli": [630, 1041], "rolling_median": [630, 1041], "rolling_quantil": [630, 1041], "rolling_skew": [630, 1041], "rolling_std": [630, 1041], "rolling_var": [630, 1041], "search_sort": [630, 1041], "shrink_dtyp": [630, 1041], "sin": [630, 1041], "sinh": [630, 1041], "sort_bi": 630, "tan": [630, 1041], "to_phys": [630, 1041], "unique_count": [630, 1041], "xor": 630, "expos": 641, "miscellan": 641, "arrowerror": 641, "columnnotfounderror": 641, "invalidoperationerror": 641, "nodataerror": 641, "polarspanicerror": 641, "schemaerror": 641, "schemafieldnotfounderror": 641, "shapeerror": 641, "parametr": 641, "build_info": 641, "get_index_typ": 641, "show_vers": 641, "threadpool_s": 641, "sqlcontext": [641, 1048], "hit": [645, 728], "node": [645, 665, 672, 676, 681, 684, 728], "huge": [648, 728], "saver": [648, 728], "purpos": [655, 728], "influenc": [655, 672, 728], "read_json": [660, 709, 728], "lazygroupbi": [661, 662, 663, 728], "other_lf": [667, 728], "validate_output_schema": [672, 728], "streamabl": [672, 676, 728], "past": [672, 728], "paramount": [672, 728], "elig": [672, 728], "invari": [672, 728], "upheld": [672, 728], "prune": [672, 728], "show_plot": [681, 728], "truncate_nod": [681, 728], "figsiz": [681, 691, 728], "gantt": [681, 728], "plot": [681, 691, 728], "groupby_partit": [681, 728], "470": [681, 728], "475": [681, 728], "1964": [681, 728], "swap": [684, 728], "output_path": [691, 728], "raw_output": [691, 728], "figur": [691, 728], "ram": [692, 693, 728], "slightli": [692, 693, 728], "my_larger_than_ram_fil": [692, 693, 728], "data_pagesize_limit": [693, 728], "290994": [696, 728], "118034": [696, 728], "extern": [707, 728], "lf_other": [707, 728], "afoo": [707, 728], "cfoo": [707, 728], "train_lf": [707, 728], "feature_0": [707, 728], "feature_1": [707, 728], "test_lf": [707, 728], "_train": [707, 728], "feature_0_train": [707, 728], "dataframescan": [709, 728], "output_schema": [709, 728], "opaqu": 712, "idiomat": 712, "my_column": 712, "lf5": 728, "lf6": 728, "explain": 728, "sink_ipc": 728, "sink_parquet": 728, "with_context": 728, "intuit": 731, "relat": 731, "broadcast": 731, "emploi": 731, "complement": 731, "plenti": 731, "cde": 731, "fgg": 731, "jjk": 731, "lmn": 731, "opp": 731, "qqr": 731, "by_dtyp": 731, "as_expr": 731, "dispatch": 731, "2024": 731, "1_234_500": 731, "5_000_555": 731, "1234500": 731, "5000555": 731, "2010": 731, "4_500_000": 731, "4500000": 731, "3265500": 731, "by_nam": 731, "zap": 731, "tstamp_tokyo": 731, "987654": 731, "123465": 731, "tstamp_utc": 731, "2025": 731, "666000": 731, "tstamp": 731, "600000": 731, "123000": 731, "666": 731, "td1": 731, "123456": 731, "987000": 731, "td2": 731, "td3": 731, "2m": [731, 807], "456m": 731, "7d": 731, "456789\u00b5": 731, "18d": 731, "999999\u00b5": 731, "23h": 731, "987m": 731, "14d": 731, "16h": 731, "39m": 731, "21d": 731, "456001\u00b5": 731, "is_selector": 731, "obj": 731, "selector_column_nam": 731, "colz": [731, 1049], "include_categor": 731, "set_ord": 731, "2345": 731, "3456": 731, "new_aliased_sr": [734, 1041], "append_chunk": [737, 1041], "super": [737, 1041], "292432": [740, 1041], "549306": [744, 1041], "catnamespac": 761, "56789": [764, 843, 948, 1041], "901234": [764, 843, 948, 1041], "1232e": [771, 1041], "break_point_label": [778, 928, 1041], "break_point": [778, 848, 928, 1041], "category_label": [778, 928, 1041], "breakpoint": [778, 928, 1041], "quick": [779, 1041, 1049], "series_num": [779, 1041], "581139": [779, 1041], "series_str": [779, 1041], "datetimenamespac": 784, "ser": [785, 789, 790, 793, 822], "kathmandu": [789, 790, 822], "0545": [789, 790, 822], "500m": [802, 804, 812, 819], "500000": 802, "500000000": 812, "date_minus_1y_2mon": 814, "165": [818, 825], "series_equ": [818, 825, 1041], "timestamp_u": 823, "978307200000000000": 823, "978393600000000000": 823, "978480000000000000": 823, "005": [831, 1041], "06293300616044681": [831, 1041], "65": [831, 1041], "8568409950394724": [831, 1041], "4000000": [832, 1041], "814697265625": [832, 1041], "bitmask": [845, 1041], "swiftli": [845, 1041], "10734580197236529959": [846, 1041], "3022416320763508302": [846, 1041], "13756996518000038261": [846, 1041], "bin_count": [848, 1041], "a_count": [848, 1041], "listnamespac": 875, "field_2": 904, "n00": 904, "n01": 904, "n02": 904, "2147483648": [910, 1041], "iso3166": [911, 1041], "tur": [911, 1002, 1041], "jpn": [911, 1041], "nld": [911, 1041], "country_lookup": [911, 1041], "japan": [911, 1041], "t\u00fcrkiy": [911, 1041], "netherland": [911, 1041], "unrecognis": [911, 1041], "unspecifi": [911, 1041], "country_nam": [911, 1041], "166667": [924, 1041], "142857": [924, 1041], "peak": [925, 926, 1041], "nanstd": [938, 1041], "858612": [938, 1041], "200": [939, 940, 942, 1041], "150": [940, 1041], "350": [940, 1041], "450": [940, 1041], "dev": [945, 1041], "527525": [945, 1041], "frequent": [952, 953, 1041], "mutat": [953, 1041], "2246e": [962, 1014, 1041], "stringnamespac": 969, "orld": 989, "6331e16": [1014, 1041], "lib": [1017, 1041], "int64arrai": [1017, 1041], "a_2": [1018, 1041], "a_3": [1018, 1041], "s_from_str_repr": [1020, 1041], "zero_copy_onli": [1022, 1041], "writabl": [1022, 1041], "complet": [1022, 1041], "presenc": [1022, 1041], "immut": [1022, 1041], "127": [1028, 1041], "seriesview": [1031, 1041], "arraylik": 1041, "dtype_if_empti": 1041, "position": 1041, "scenario": 1041, "chunk_length": 1041, "get_chunk": 1041, "has_valid": 1041, "hist": 1041, "is_boolean": 1041, "is_float": 1041, "is_integ": 1041, "is_numer": [1041, 1049], "is_sort": 1041, "is_tempor": 1041, "is_utf8": 1041, "new_from_index": 1041, "peak_max": 1041, "peak_min": 1041, "set_at_idx": 1041, "two_a": 1048, "__enter__": 1048, "__exit__": 1048, "exc_typ": 1048, "baseexcept": 1048, "exc_val": 1048, "exc_tb": 1048, "tracebacktyp": 1048, "guid": 1049, "easi": 1049, "approxim": 1049, "own": 1049, "machin": 1049, "xdist": 1049, "significantli": 1049, "hardwar": 1049, "setup": 1049, "numeric_dtyp": 1049, "null_probabililti": 1049, "test_numer": 1049, "col0": 1049, "col4": 1049, "29096": 1049, "485": 1049, "2147483647": 1049, "8257e14": 1049, "7508": 1049, "37338": 1049, "7264": 1049, "321": 1049, "16996": 1049, "121": 1049, "361": 1049, "63204": 1049, "1443e235": 1049, "conform": 1049, "ascii_lett": 1049, "id_char": 1049, "alphabet": 1049, "price": 1049, "min_valu": 1049, "max_valu": 1049, "test_price_calcul": 1049, "a101": 1049, "8nin": 1049, "qhoo": 1049, "714": 1049, "544": 1049, "i0e0": 1049, "0000": 1049, "test_miscellan": 1049, "235": 1049, "87": 1049, "186": 1049, "174": 1049, "179": 1049, "213": 1049, "221": 1049, "86": 1049, "255": 1049}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1048, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [559, 4, 1, "", "all"], [560, 4, 1, "", "all_horizontal"], [561, 4, 1, "", "any"], [562, 4, 1, "", "any_horizontal"], [563, 4, 1, "", "apply"], [564, 4, 1, "", "approx_unique"], [565, 4, 1, "", "arange"], [566, 4, 1, "", "arg_sort_by"], [567, 4, 1, "", "arg_where"], [568, 4, 1, "", "avg"], [70, 4, 1, "", "build_info"], [569, 4, 1, "", "coalesce"], [570, 4, 1, "", "col"], [71, 4, 1, "", "collect_all"], [72, 4, 1, "", "concat"], [571, 4, 1, "", "concat_list"], [572, 4, 1, "", "concat_str"], [573, 4, 1, "", "corr"], [574, 4, 1, "", "count"], [575, 4, 1, "", "cov"], [576, 4, 1, "", "cumfold"], [577, 4, 1, "", "cumreduce"], [578, 4, 1, "", "cumsum"], [579, 4, 1, "", "cumsum_horizontal"], [580, 4, 1, "", "date"], [581, 4, 1, "", "date_range"], [582, 4, 1, "", "datetime"], [583, 4, 1, "", "duration"], [584, 4, 1, "", "element"], [73, 4, 1, "", "enable_string_cache"], [585, 4, 1, "", "exclude"], [586, 4, 1, "", "first"], [587, 4, 1, "", "fold"], [588, 4, 1, "", "format"], [88, 4, 1, "", "from_arrow"], [89, 4, 1, "", "from_dataframe"], [90, 4, 1, "", "from_dict"], [91, 4, 1, "", "from_dicts"], [589, 4, 1, "", "from_epoch"], [92, 4, 1, "", "from_numpy"], [93, 4, 1, "", "from_pandas"], [94, 4, 1, "", "from_records"], [95, 4, 1, "", "from_repr"], [96, 4, 1, "", "get_index_type"], [590, 4, 1, "", "groups"], [591, 4, 1, "", "head"], [592, 4, 1, "", "implode"], [593, 4, 1, "", "int_range"], [594, 4, 1, "", "int_ranges"], [595, 4, 1, "", "last"], [596, 4, 1, "", "lit"], [597, 4, 1, "", "map"], [598, 4, 1, "", "max"], [599, 4, 1, "", "max_horizontal"], [600, 4, 1, "", "mean"], [601, 4, 1, "", "median"], [602, 4, 1, "", "min"], [603, 4, 1, "", "min_horizontal"], [604, 4, 1, "", "n_unique"], [605, 4, 1, "", "ones"], [606, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [607, 4, 1, "", "reduce"], [608, 4, 1, "", "repeat"], [609, 4, 1, "", "rolling_corr"], [610, 4, 1, "", "rolling_cov"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [611, 4, 1, "", "select"], [731, 6, 0, "-", "selectors"], [116, 4, 1, "", "show_versions"], [612, 4, 1, "", "sql_expr"], [613, 4, 1, "", "std"], [614, 4, 1, "", "struct"], [615, 4, 1, "", "sum"], [616, 4, 1, "", "sum_horizontal"], [617, 4, 1, "", "tail"], [126, 4, 1, "", "threadpool_size"], [618, 4, 1, "", "time"], [619, 4, 1, "", "time_range"], [127, 4, 1, "", "using_string_cache"], [620, 4, 1, "", "var"], [621, 4, 1, "", "when"], [622, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[130, 1, 1, "", "__dataframe__"], [131, 1, 1, "", "apply"], [132, 1, 1, "", "bottom_k"], [133, 1, 1, "", "clear"], [134, 1, 1, "", "clone"], [135, 2, 1, "", "columns"], [136, 1, 1, "", "corr"], [137, 1, 1, "", "describe"], [138, 1, 1, "", "drop"], [139, 1, 1, "", "drop_in_place"], [140, 1, 1, "", "drop_nulls"], [141, 2, 1, "", "dtypes"], [142, 1, 1, "", "estimated_size"], [143, 1, 1, "", "explode"], [144, 1, 1, "", "extend"], [145, 1, 1, "", "fill_nan"], [146, 1, 1, "", "fill_null"], [147, 1, 1, "", "filter"], [148, 1, 1, "", "find_idx_by_name"], [149, 1, 1, "", "fold"], [150, 1, 1, "", "frame_equal"], [151, 1, 1, "", "get_column"], [152, 1, 1, "", "get_columns"], [153, 1, 1, "", "glimpse"], [154, 1, 1, "", "groupby"], [155, 1, 1, "", "groupby_dynamic"], [156, 1, 1, "", "groupby_rolling"], [157, 1, 1, "", "hash_rows"], [158, 1, 1, "", "head"], [159, 2, 1, "", "height"], [160, 1, 1, "", "hstack"], [161, 1, 1, "", "insert_at_idx"], [162, 1, 1, "", "interpolate"], [163, 1, 1, "", "is_duplicated"], [164, 1, 1, "", "is_empty"], [165, 1, 1, "", "is_unique"], [166, 1, 1, "", "item"], [167, 1, 1, "", "iter_rows"], [168, 1, 1, "", "iter_slices"], [169, 1, 1, "", "join"], [170, 1, 1, "", "join_asof"], [171, 1, 1, "", "lazy"], [172, 1, 1, "", "limit"], [173, 1, 1, "", "max"], [174, 1, 1, "", "mean"], [175, 1, 1, "", "median"], [176, 1, 1, "", "melt"], [177, 1, 1, "", "merge_sorted"], [178, 1, 1, "", "min"], [179, 1, 1, "", "n_chunks"], [180, 1, 1, "", "n_unique"], [181, 1, 1, "", "null_count"], [182, 1, 1, "", "partition_by"], [183, 1, 1, "", "pipe"], [184, 1, 1, "", "pivot"], [185, 1, 1, "", "product"], [186, 1, 1, "", "quantile"], [187, 1, 1, "", "rechunk"], [188, 1, 1, "", "rename"], [189, 1, 1, "", "replace"], [190, 1, 1, "", "replace_at_idx"], [191, 1, 1, "", "reverse"], [192, 1, 1, "", "row"], [193, 1, 1, "", "rows"], [194, 1, 1, "", "rows_by_key"], [195, 1, 1, "", "sample"], [196, 2, 1, "", "schema"], [197, 1, 1, "", "select"], [198, 1, 1, "", "set_sorted"], [199, 2, 1, "", "shape"], [200, 1, 1, "", "shift"], [201, 1, 1, "", "shift_and_fill"], [202, 1, 1, "", "shrink_to_fit"], [203, 1, 1, "", "slice"], [204, 1, 1, "", "sort"], [205, 1, 1, "", "std"], [206, 1, 1, "", "sum"], [207, 1, 1, "", "tail"], [208, 1, 1, "", "take_every"], [209, 1, 1, "", "to_arrow"], [210, 1, 1, "", "to_dict"], [211, 1, 1, "", "to_dicts"], [212, 1, 1, "", "to_dummies"], [213, 1, 1, "", "to_init_repr"], [214, 1, 1, "", "to_numpy"], [215, 1, 1, "", "to_pandas"], [216, 1, 1, "", "to_series"], [217, 1, 1, "", "to_struct"], [218, 1, 1, "", "top_k"], [219, 1, 1, "", "transpose"], [220, 1, 1, "", "unique"], [221, 1, 1, "", "unnest"], [222, 1, 1, "", "unstack"], [223, 1, 1, "", "update"], [224, 1, 1, "", "upsample"], [225, 1, 1, "", "var"], [226, 1, 1, "", "vstack"], [227, 2, 1, "", "width"], [228, 1, 1, "", "with_columns"], [229, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[257, 1, 1, "", "abs"], [258, 1, 1, "", "add"], [259, 1, 1, "", "agg_groups"], [260, 1, 1, "", "alias"], [261, 1, 1, "", "all"], [262, 1, 1, "", "and_"], [263, 1, 1, "", "any"], [264, 1, 1, "", "append"], [265, 1, 1, "", "apply"], [266, 1, 1, "", "approx_unique"], [267, 1, 1, "", "arccos"], [268, 1, 1, "", "arccosh"], [269, 1, 1, "", "arcsin"], [270, 1, 1, "", "arcsinh"], [271, 1, 1, "", "arctan"], [272, 1, 1, "", "arctanh"], [273, 1, 1, "", "arg_max"], [274, 1, 1, "", "arg_min"], [275, 1, 1, "", "arg_sort"], [276, 1, 1, "", "arg_true"], [277, 1, 1, "", "arg_unique"], [282, 1, 1, "", "backward_fill"], [288, 1, 1, "", "bottom_k"], [289, 1, 1, "", "cache"], [290, 1, 1, "", "cast"], [293, 1, 1, "", "ceil"], [294, 1, 1, "", "clip"], [295, 1, 1, "", "clip_max"], [296, 1, 1, "", "clip_min"], [297, 1, 1, "", "cos"], [298, 1, 1, "", "cosh"], [299, 1, 1, "", "count"], [300, 1, 1, "", "cumcount"], [301, 1, 1, "", "cummax"], [302, 1, 1, "", "cummin"], [303, 1, 1, "", "cumprod"], [304, 1, 1, "", "cumsum"], [305, 1, 1, "", "cumulative_eval"], [306, 1, 1, "", "cut"], [307, 1, 1, "", "degrees"], [308, 1, 1, "", "diff"], [309, 1, 1, "", "dot"], [310, 1, 1, "", "drop_nans"], [311, 1, 1, "", "drop_nulls"], [353, 1, 1, "", "entropy"], [354, 1, 1, "", "eq"], [355, 1, 1, "", "eq_missing"], [356, 1, 1, "", "ewm_mean"], [357, 1, 1, "", "ewm_std"], [358, 1, 1, "", "ewm_var"], [359, 1, 1, "", "exclude"], [360, 1, 1, "", "exp"], [361, 1, 1, "", "explode"], [362, 1, 1, "", "extend_constant"], [363, 1, 1, "", "fill_nan"], [364, 1, 1, "", "fill_null"], [365, 1, 1, "", "filter"], [366, 1, 1, "", "first"], [367, 1, 1, "", "flatten"], [368, 1, 1, "", "floor"], [369, 1, 1, "", "floordiv"], [370, 1, 1, "", "forward_fill"], [371, 1, 1, "", "from_json"], [372, 1, 1, "", "ge"], [373, 1, 1, "", "gt"], [374, 1, 1, "", "hash"], [375, 1, 1, "", "head"], [376, 1, 1, "", "implode"], [377, 1, 1, "", "inspect"], [378, 1, 1, "", "interpolate"], [379, 1, 1, "", "is_between"], [380, 1, 1, "", "is_duplicated"], [381, 1, 1, "", "is_finite"], [382, 1, 1, "", "is_first"], [383, 1, 1, "", "is_in"], [384, 1, 1, "", "is_infinite"], [385, 1, 1, "", "is_nan"], [386, 1, 1, "", "is_not"], [387, 1, 1, "", "is_not_nan"], [388, 1, 1, "", "is_not_null"], [389, 1, 1, "", "is_null"], [390, 1, 1, "", "is_unique"], [391, 1, 1, "", "keep_name"], [392, 1, 1, "", "kurtosis"], [393, 1, 1, "", "last"], [394, 1, 1, "", "le"], [395, 1, 1, "", "len"], [396, 1, 1, "", "limit"], [428, 1, 1, "", "log"], [429, 1, 1, "", "log10"], [430, 1, 1, "", "log1p"], [431, 1, 1, "", "lower_bound"], [432, 1, 1, "", "lt"], [433, 1, 1, "", "map"], [434, 1, 1, "", "map_alias"], [435, 1, 1, "", "map_dict"], [436, 1, 1, "", "max"], [437, 1, 1, "", "mean"], [438, 1, 1, "", "median"], [449, 1, 1, "", "min"], [450, 1, 1, "", "mod"], [451, 1, 1, "", "mode"], [452, 1, 1, "", "mul"], [453, 1, 1, "", "n_unique"], [454, 1, 1, "", "nan_max"], [455, 1, 1, "", "nan_min"], [456, 1, 1, "", "ne"], [457, 1, 1, "", "ne_missing"], [458, 1, 1, "", "null_count"], [459, 1, 1, "", "or_"], [460, 1, 1, "", "over"], [461, 1, 1, "", "pct_change"], [462, 1, 1, "", "pipe"], [463, 1, 1, "", "pow"], [464, 1, 1, "", "prefix"], [465, 1, 1, "", "product"], [466, 1, 1, "", "qcut"], [467, 1, 1, "", "quantile"], [468, 1, 1, "", "radians"], [469, 1, 1, "", "rank"], [470, 1, 1, "", "rechunk"], [471, 1, 1, "", "reinterpret"], [472, 1, 1, "", "repeat_by"], [473, 1, 1, "", "reshape"], [474, 1, 1, "", "reverse"], [475, 1, 1, "", "rle"], [476, 1, 1, "", "rle_id"], [477, 1, 1, "", "rolling_apply"], [478, 1, 1, "", "rolling_max"], [479, 1, 1, "", "rolling_mean"], [480, 1, 1, "", "rolling_median"], [481, 1, 1, "", "rolling_min"], [482, 1, 1, "", "rolling_quantile"], [483, 1, 1, "", "rolling_skew"], [484, 1, 1, "", "rolling_std"], [485, 1, 1, "", "rolling_sum"], [486, 1, 1, "", "rolling_var"], [487, 1, 1, "", "round"], [488, 1, 1, "", "sample"], [489, 1, 1, "", "search_sorted"], [490, 1, 1, "", "set_sorted"], [491, 1, 1, "", "shift"], [492, 1, 1, "", "shift_and_fill"], [493, 1, 1, "", "shrink_dtype"], [494, 1, 1, "", "shuffle"], [495, 1, 1, "", "sign"], [496, 1, 1, "", "sin"], [497, 1, 1, "", "sinh"], [498, 1, 1, "", "skew"], [499, 1, 1, "", "slice"], [500, 1, 1, "", "sort"], [501, 1, 1, "", "sort_by"], [502, 1, 1, "", "sqrt"], [503, 1, 1, "", "std"], [541, 1, 1, "", "sub"], [542, 1, 1, "", "suffix"], [543, 1, 1, "", "sum"], [544, 1, 1, "", "tail"], [545, 1, 1, "", "take"], [546, 1, 1, "", "take_every"], [547, 1, 1, "", "tan"], [548, 1, 1, "", "tanh"], [549, 1, 1, "", "to_physical"], [550, 1, 1, "", "top_k"], [551, 1, 1, "", "truediv"], [552, 1, 1, "", "unique"], [553, 1, 1, "", "unique_counts"], [554, 1, 1, "", "upper_bound"], [555, 1, 1, "", "value_counts"], [556, 1, 1, "", "var"], [557, 1, 1, "", "where"], [558, 1, 1, "", "xor"]], "polars.Expr.arr": [[278, 1, 1, "", "max"], [279, 1, 1, "", "min"], [280, 1, 1, "", "sum"], [281, 1, 1, "", "unique"]], "polars.Expr.bin": [[283, 1, 1, "", "contains"], [284, 1, 1, "", "decode"], [285, 1, 1, "", "encode"], [286, 1, 1, "", "ends_with"], [287, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[291, 1, 1, "", "get_categories"], [292, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[312, 1, 1, "", "base_utc_offset"], [313, 1, 1, "", "cast_time_unit"], [314, 1, 1, "", "combine"], [315, 1, 1, "", "convert_time_zone"], [316, 1, 1, "", "date"], [317, 1, 1, "", "datetime"], [318, 1, 1, "", "day"], [319, 1, 1, "", "days"], [320, 1, 1, "", "dst_offset"], [321, 1, 1, "", "epoch"], [322, 1, 1, "", "hour"], [323, 1, 1, "", "hours"], [324, 1, 1, "", "is_leap_year"], [325, 1, 1, "", "iso_year"], [326, 1, 1, "", "microsecond"], [327, 1, 1, "", "microseconds"], [328, 1, 1, "", "millisecond"], [329, 1, 1, "", "milliseconds"], [330, 1, 1, "", "minute"], [331, 1, 1, "", "minutes"], [332, 1, 1, "", "month"], [333, 1, 1, "", "month_end"], [334, 1, 1, "", "month_start"], [335, 1, 1, "", "nanosecond"], [336, 1, 1, "", "nanoseconds"], [337, 1, 1, "", "offset_by"], [338, 1, 1, "", "ordinal_day"], [339, 1, 1, "", "quarter"], [340, 1, 1, "", "replace_time_zone"], [341, 1, 1, "", "round"], [342, 1, 1, "", "second"], [343, 1, 1, "", "seconds"], [344, 1, 1, "", "strftime"], [345, 1, 1, "", "time"], [346, 1, 1, "", "timestamp"], [347, 1, 1, "", "to_string"], [348, 1, 1, "", "truncate"], [349, 1, 1, "", "week"], [350, 1, 1, "", "weekday"], [351, 1, 1, "", "with_time_unit"], [352, 1, 1, "", "year"]], "polars.Expr.list": [[397, 1, 1, "", "all"], [398, 1, 1, "", "any"], [399, 1, 1, "", "arg_max"], [400, 1, 1, "", "arg_min"], [401, 1, 1, "", "concat"], [402, 1, 1, "", "contains"], [403, 1, 1, "", "count_match"], [404, 1, 1, "", "diff"], [405, 1, 1, "", "difference"], [406, 1, 1, "", "eval"], [407, 1, 1, "", "explode"], [408, 1, 1, "", "first"], [409, 1, 1, "", "get"], [410, 1, 1, "", "head"], [411, 1, 1, "", "intersection"], [412, 1, 1, "", "join"], [413, 1, 1, "", "last"], [414, 1, 1, "", "lengths"], [415, 1, 1, "", "max"], [416, 1, 1, "", "mean"], [417, 1, 1, "", "min"], [418, 1, 1, "", "reverse"], [419, 1, 1, "", "shift"], [420, 1, 1, "", "slice"], [421, 1, 1, "", "sort"], [422, 1, 1, "", "sum"], [423, 1, 1, "", "tail"], [424, 1, 1, "", "take"], [425, 1, 1, "", "to_struct"], [426, 1, 1, "", "union"], [427, 1, 1, "", "unique"]], "polars.Expr.meta": [[439, 1, 1, "", "eq"], [440, 1, 1, "", "has_multiple_outputs"], [441, 1, 1, "", "is_regex_projection"], [442, 1, 1, "", "ne"], [443, 1, 1, "", "output_name"], [444, 1, 1, "", "pop"], [445, 1, 1, "", "root_names"], [446, 1, 1, "", "tree_format"], [447, 1, 1, "", "undo_aliases"], [448, 1, 1, "", "write_json"]], "polars.Expr.str": [[504, 1, 1, "", "concat"], [505, 1, 1, "", "contains"], [506, 1, 1, "", "count_match"], [507, 1, 1, "", "decode"], [508, 1, 1, "", "encode"], [509, 1, 1, "", "ends_with"], [510, 1, 1, "", "explode"], [511, 1, 1, "", "extract"], [512, 1, 1, "", "extract_all"], [513, 1, 1, "", "json_extract"], [514, 1, 1, "", "json_path_match"], [515, 1, 1, "", "lengths"], [516, 1, 1, "", "ljust"], [517, 1, 1, "", "lstrip"], [518, 1, 1, "", "n_chars"], [519, 1, 1, "", "parse_int"], [520, 1, 1, "", "replace"], [521, 1, 1, "", "replace_all"], [522, 1, 1, "", "rjust"], [523, 1, 1, "", "rstrip"], [524, 1, 1, "", "slice"], [525, 1, 1, "", "split"], [526, 1, 1, "", "split_exact"], [527, 1, 1, "", "splitn"], [528, 1, 1, "", "starts_with"], [529, 1, 1, "", "strip"], [530, 1, 1, "", "strptime"], [531, 1, 1, "", "to_date"], [532, 1, 1, "", "to_datetime"], [533, 1, 1, "", "to_decimal"], [534, 1, 1, "", "to_lowercase"], [535, 1, 1, "", "to_time"], [536, 1, 1, "", "to_titlecase"], [537, 1, 1, "", "to_uppercase"], [538, 1, 1, "", "zfill"]], "polars.Expr.struct": [[539, 1, 1, "", "field"], [540, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[644, 1, 1, "", "bottom_k"], [645, 1, 1, "", "cache"], [646, 1, 1, "", "clear"], [647, 1, 1, "", "clone"], [648, 1, 1, "", "collect"], [649, 2, 1, "", "columns"], [650, 1, 1, "", "drop"], [651, 1, 1, "", "drop_nulls"], [652, 2, 1, "", "dtypes"], [653, 1, 1, "", "explain"], [654, 1, 1, "", "explode"], [655, 1, 1, "", "fetch"], [656, 1, 1, "", "fill_nan"], [657, 1, 1, "", "fill_null"], [658, 1, 1, "", "filter"], [659, 1, 1, "", "first"], [660, 1, 1, "", "from_json"], [661, 1, 1, "", "groupby"], [662, 1, 1, "", "groupby_dynamic"], [663, 1, 1, "", "groupby_rolling"], [664, 1, 1, "", "head"], [665, 1, 1, "", "inspect"], [666, 1, 1, "", "interpolate"], [667, 1, 1, "", "join"], [668, 1, 1, "", "join_asof"], [669, 1, 1, "", "last"], [670, 1, 1, "", "lazy"], [671, 1, 1, "", "limit"], [672, 1, 1, "", "map"], [673, 1, 1, "", "max"], [674, 1, 1, "", "mean"], [675, 1, 1, "", "median"], [676, 1, 1, "", "melt"], [677, 1, 1, "", "merge_sorted"], [678, 1, 1, "", "min"], [679, 1, 1, "", "null_count"], [680, 1, 1, "", "pipe"], [681, 1, 1, "", "profile"], [682, 1, 1, "", "quantile"], [683, 1, 1, "", "read_json"], [684, 1, 1, "", "rename"], [685, 1, 1, "", "reverse"], [686, 2, 1, "", "schema"], [687, 1, 1, "", "select"], [688, 1, 1, "", "set_sorted"], [689, 1, 1, "", "shift"], [690, 1, 1, "", "shift_and_fill"], [691, 1, 1, "", "show_graph"], [692, 1, 1, "", "sink_ipc"], [693, 1, 1, "", "sink_parquet"], [694, 1, 1, "", "slice"], [695, 1, 1, "", "sort"], [696, 1, 1, "", "std"], [697, 1, 1, "", "sum"], [698, 1, 1, "", "tail"], [699, 1, 1, "", "take_every"], [700, 1, 1, "", "top_k"], [701, 1, 1, "", "unique"], [702, 1, 1, "", "unnest"], [703, 1, 1, "", "update"], [704, 1, 1, "", "var"], [705, 2, 1, "", "width"], [706, 1, 1, "", "with_columns"], [707, 1, 1, "", "with_context"], [708, 1, 1, "", "with_row_count"], [709, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1048, 1, 1, "", "__enter__"], [1048, 1, 1, "", "__exit__"], [1048, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[733, 1, 1, "", "abs"], [734, 1, 1, "", "alias"], [735, 1, 1, "", "all"], [736, 1, 1, "", "any"], [737, 1, 1, "", "append"], [738, 1, 1, "", "apply"], [739, 1, 1, "", "arccos"], [740, 1, 1, "", "arccosh"], [741, 1, 1, "", "arcsin"], [742, 1, 1, "", "arcsinh"], [743, 1, 1, "", "arctan"], [744, 1, 1, "", "arctanh"], [745, 1, 1, "", "arg_max"], [746, 1, 1, "", "arg_min"], [747, 1, 1, "", "arg_sort"], [748, 1, 1, "", "arg_true"], [749, 1, 1, "", "arg_unique"], [759, 1, 1, "", "bottom_k"], [760, 1, 1, "", "cast"], [761, 3, 1, "", "cat"], [764, 1, 1, "", "ceil"], [765, 1, 1, "", "chunk_lengths"], [766, 1, 1, "", "clear"], [767, 1, 1, "", "clip"], [768, 1, 1, "", "clip_max"], [769, 1, 1, "", "clip_min"], [770, 1, 1, "", "clone"], [771, 1, 1, "", "cos"], [772, 1, 1, "", "cosh"], [773, 1, 1, "", "cummax"], [774, 1, 1, "", "cummin"], [775, 1, 1, "", "cumprod"], [776, 1, 1, "", "cumsum"], [777, 1, 1, "", "cumulative_eval"], [778, 1, 1, "", "cut"], [779, 1, 1, "", "describe"], [780, 1, 1, "", "diff"], [781, 1, 1, "", "dot"], [782, 1, 1, "", "drop_nans"], [783, 1, 1, "", "drop_nulls"], [784, 3, 1, "", "dt"], [830, 3, 1, "", "dtype"], [831, 1, 1, "", "entropy"], [832, 1, 1, "", "estimated_size"], [833, 1, 1, "", "ewm_mean"], [834, 1, 1, "", "ewm_std"], [835, 1, 1, "", "ewm_var"], [836, 1, 1, "", "exp"], [837, 1, 1, "", "explode"], [838, 1, 1, "", "extend_constant"], [839, 1, 1, "", "fill_nan"], [840, 1, 1, "", "fill_null"], [841, 1, 1, "", "filter"], [842, 3, 1, "", "flags"], [843, 1, 1, "", "floor"], [844, 1, 1, "", "get_chunks"], [845, 1, 1, "", "has_validity"], [846, 1, 1, "", "hash"], [847, 1, 1, "", "head"], [848, 1, 1, "", "hist"], [849, 1, 1, "", "implode"], [850, 3, 1, "", "inner_dtype"], [851, 1, 1, "", "interpolate"], [852, 1, 1, "", "is_between"], [853, 1, 1, "", "is_boolean"], [854, 1, 1, "", "is_duplicated"], [855, 1, 1, "", "is_empty"], [856, 1, 1, "", "is_finite"], [857, 1, 1, "", "is_first"], [858, 1, 1, "", "is_float"], [859, 1, 1, "", "is_in"], [860, 1, 1, "", "is_infinite"], [861, 1, 1, "", "is_integer"], [862, 1, 1, "", "is_nan"], [863, 1, 1, "", "is_not_nan"], [864, 1, 1, "", "is_not_null"], [865, 1, 1, "", "is_null"], [866, 1, 1, "", "is_numeric"], [867, 1, 1, "", "is_sorted"], [868, 1, 1, "", "is_temporal"], [869, 1, 1, "", "is_unique"], [870, 1, 1, "", "is_utf8"], [871, 1, 1, "", "item"], [872, 1, 1, "", "kurtosis"], [873, 1, 1, "", "len"], [874, 1, 1, "", "limit"], [875, 3, 1, "", "list"], [907, 1, 1, "", "log"], [908, 1, 1, "", "log10"], [909, 1, 1, "", "log1p"], [910, 1, 1, "", "lower_bound"], [911, 1, 1, "", "map_dict"], [912, 1, 1, "", "max"], [913, 1, 1, "", "mean"], [914, 1, 1, "", "median"], [915, 1, 1, "", "min"], [916, 1, 1, "", "mode"], [917, 1, 1, "", "n_chunks"], [918, 1, 1, "", "n_unique"], [919, 3, 1, "", "name"], [920, 1, 1, "", "nan_max"], [921, 1, 1, "", "nan_min"], [922, 1, 1, "", "new_from_index"], [923, 1, 1, "", "null_count"], [924, 1, 1, "", "pct_change"], [925, 1, 1, "", "peak_max"], [926, 1, 1, "", "peak_min"], [927, 1, 1, "", "product"], [928, 1, 1, "", "qcut"], [929, 1, 1, "", "quantile"], [930, 1, 1, "", "rank"], [931, 1, 1, "", "rechunk"], [932, 1, 1, "", "reinterpret"], [933, 1, 1, "", "rename"], [934, 1, 1, "", "reshape"], [935, 1, 1, "", "reverse"], [936, 1, 1, "", "rle"], [937, 1, 1, "", "rle_id"], [938, 1, 1, "", "rolling_apply"], [939, 1, 1, "", "rolling_max"], [940, 1, 1, "", "rolling_mean"], [941, 1, 1, "", "rolling_median"], [942, 1, 1, "", "rolling_min"], [943, 1, 1, "", "rolling_quantile"], [944, 1, 1, "", "rolling_skew"], [945, 1, 1, "", "rolling_std"], [946, 1, 1, "", "rolling_sum"], [947, 1, 1, "", "rolling_var"], [948, 1, 1, "", "round"], [949, 1, 1, "", "sample"], [950, 1, 1, "", "search_sorted"], [951, 1, 1, "", "series_equal"], [952, 1, 1, "", "set"], [953, 1, 1, "", "set_at_idx"], [954, 1, 1, "", "set_sorted"], [955, 3, 1, "", "shape"], [956, 1, 1, "", "shift"], [957, 1, 1, "", "shift_and_fill"], [958, 1, 1, "", "shrink_dtype"], [959, 1, 1, "", "shrink_to_fit"], [960, 1, 1, "", "shuffle"], [961, 1, 1, "", "sign"], [962, 1, 1, "", "sin"], [963, 1, 1, "", "sinh"], [964, 1, 1, "", "skew"], [965, 1, 1, "", "slice"], [966, 1, 1, "", "sort"], [967, 1, 1, "", "sqrt"], [968, 1, 1, "", "std"], [969, 3, 1, "", "str"], [1010, 1, 1, "", "sum"], [1011, 1, 1, "", "tail"], [1012, 1, 1, "", "take"], [1013, 1, 1, "", "take_every"], [1014, 1, 1, "", "tan"], [1015, 1, 1, "", "tanh"], [1016, 3, 1, "", "time_unit"], [1017, 1, 1, "", "to_arrow"], [1018, 1, 1, "", "to_dummies"], [1019, 1, 1, "", "to_frame"], [1020, 1, 1, "", "to_init_repr"], [1021, 1, 1, "", "to_list"], [1022, 1, 1, "", "to_numpy"], [1023, 1, 1, "", "to_pandas"], [1024, 1, 1, "", "to_physical"], [1025, 1, 1, "", "top_k"], [1026, 1, 1, "", "unique"], [1027, 1, 1, "", "unique_counts"], [1028, 1, 1, "", "upper_bound"], [1029, 1, 1, "", "value_counts"], [1030, 1, 1, "", "var"], [1031, 1, 1, "", "view"], [1032, 1, 1, "", "zip_with"]], "polars.Series.arr": [[750, 1, 1, "", "max"], [751, 1, 1, "", "min"], [752, 1, 1, "", "sum"], [753, 1, 1, "", "unique"]], "polars.Series.bin": [[754, 1, 1, "", "contains"], [755, 1, 1, "", "decode"], [756, 1, 1, "", "encode"], [757, 1, 1, "", "ends_with"], [758, 1, 1, "", "starts_with"]], "polars.Series.cat": [[762, 1, 1, "", "get_categories"], [763, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[785, 1, 1, "", "base_utc_offset"], [786, 1, 1, "", "cast_time_unit"], [787, 1, 1, "", "combine"], [788, 1, 1, "", "convert_time_zone"], [789, 1, 1, "", "date"], [790, 1, 1, "", "datetime"], [791, 1, 1, "", "day"], [792, 1, 1, "", "days"], [793, 1, 1, "", "dst_offset"], [794, 1, 1, "", "epoch"], [795, 1, 1, "", "hour"], [796, 1, 1, "", "hours"], [797, 1, 1, "", "is_leap_year"], [798, 1, 1, "", "iso_year"], [799, 1, 1, "", "max"], [800, 1, 1, "", "mean"], [801, 1, 1, "", "median"], [802, 1, 1, "", "microsecond"], [803, 1, 1, "", "microseconds"], [804, 1, 1, "", "millisecond"], [805, 1, 1, "", "milliseconds"], [806, 1, 1, "", "min"], [807, 1, 1, "", "minute"], [808, 1, 1, "", "minutes"], [809, 1, 1, "", "month"], [810, 1, 1, "", "month_end"], [811, 1, 1, "", "month_start"], [812, 1, 1, "", "nanosecond"], [813, 1, 1, "", "nanoseconds"], [814, 1, 1, "", "offset_by"], [815, 1, 1, "", "ordinal_day"], [816, 1, 1, "", "quarter"], [817, 1, 1, "", "replace_time_zone"], [818, 1, 1, "", "round"], [819, 1, 1, "", "second"], [820, 1, 1, "", "seconds"], [821, 1, 1, "", "strftime"], [822, 1, 1, "", "time"], [823, 1, 1, "", "timestamp"], [824, 1, 1, "", "to_string"], [825, 1, 1, "", "truncate"], [826, 1, 1, "", "week"], [827, 1, 1, "", "weekday"], [828, 1, 1, "", "with_time_unit"], [829, 1, 1, "", "year"]], "polars.Series.list": [[876, 1, 1, "", "all"], [877, 1, 1, "", "any"], [878, 1, 1, "", "arg_max"], [879, 1, 1, "", "arg_min"], [880, 1, 1, "", "concat"], [881, 1, 1, "", "contains"], [882, 1, 1, "", "count_match"], [883, 1, 1, "", "diff"], [884, 1, 1, "", "difference"], [885, 1, 1, "", "eval"], [886, 1, 1, "", "explode"], [887, 1, 1, "", "first"], [888, 1, 1, "", "get"], [889, 1, 1, "", "head"], [890, 1, 1, "", "intersection"], [891, 1, 1, "", "join"], [892, 1, 1, "", "last"], [893, 1, 1, "", "lengths"], [894, 1, 1, "", "max"], [895, 1, 1, "", "mean"], [896, 1, 1, "", "min"], [897, 1, 1, "", "reverse"], [898, 1, 1, "", "shift"], [899, 1, 1, "", "slice"], [900, 1, 1, "", "sort"], [901, 1, 1, "", "sum"], [902, 1, 1, "", "tail"], [903, 1, 1, "", "take"], [904, 1, 1, "", "to_struct"], [905, 1, 1, "", "union"], [906, 1, 1, "", "unique"]], "polars.Series.str": [[970, 1, 1, "", "concat"], [971, 1, 1, "", "contains"], [972, 1, 1, "", "count_match"], [973, 1, 1, "", "decode"], [974, 1, 1, "", "encode"], [975, 1, 1, "", "ends_with"], [976, 1, 1, "", "explode"], [977, 1, 1, "", "extract"], [978, 1, 1, "", "extract_all"], [979, 1, 1, "", "json_extract"], [980, 1, 1, "", "json_path_match"], [981, 1, 1, "", "lengths"], [982, 1, 1, "", "ljust"], [983, 1, 1, "", "lstrip"], [984, 1, 1, "", "n_chars"], [985, 1, 1, "", "parse_int"], [986, 1, 1, "", "replace"], [987, 1, 1, "", "replace_all"], [988, 1, 1, "", "rjust"], [989, 1, 1, "", "rstrip"], [990, 1, 1, "", "slice"], [991, 1, 1, "", "split"], [992, 1, 1, "", "split_exact"], [993, 1, 1, "", "splitn"], [994, 1, 1, "", "starts_with"], [995, 1, 1, "", "strip"], [996, 1, 1, "", "strptime"], [997, 1, 1, "", "to_date"], [998, 1, 1, "", "to_datetime"], [999, 1, 1, "", "to_decimal"], [1000, 1, 1, "", "to_lowercase"], [1001, 1, 1, "", "to_time"], [1002, 1, 1, "", "to_titlecase"], [1003, 1, 1, "", "to_uppercase"], [1004, 1, 1, "", "zfill"]], "polars.Series.struct": [[1005, 1, 1, "", "field"], [1006, 3, 1, "", "fields"], [1007, 1, 1, "", "rename_fields"], [1008, 3, 1, "", "schema"], [1009, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[230, 1, 1, "", "__iter__"], [231, 1, 1, "", "agg"], [232, 1, 1, "", "all"], [233, 1, 1, "", "apply"], [234, 1, 1, "", "count"], [235, 1, 1, "", "first"], [236, 1, 1, "", "head"], [237, 1, 1, "", "last"], [238, 1, 1, "", "max"], [239, 1, 1, "", "mean"], [240, 1, 1, "", "median"], [241, 1, 1, "", "min"], [242, 1, 1, "", "n_unique"], [243, 1, 1, "", "quantile"], [244, 1, 1, "", "sum"], [245, 1, 1, "", "tail"]], "polars.exceptions": [[74, 5, 1, "", "ArrowError"], [75, 5, 1, "", "ColumnNotFoundError"], [76, 5, 1, "", "ComputeError"], [77, 5, 1, "", "DuplicateError"], [78, 5, 1, "", "InvalidOperationError"], [79, 5, 1, "", "NoDataError"], [80, 5, 1, "", "NoRowsReturnedError"], [81, 5, 1, "", "PolarsPanicError"], [82, 5, 1, "", "RowsError"], [83, 5, 1, "", "SchemaError"], [84, 5, 1, "", "SchemaFieldNotFoundError"], [85, 5, 1, "", "ShapeError"], [86, 5, 1, "", "StructFieldNotFoundError"], [87, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[97, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[710, 1, 1, "", "agg"], [711, 1, 1, "", "all"], [712, 1, 1, "", "apply"], [713, 1, 1, "", "count"], [714, 1, 1, "", "first"], [715, 1, 1, "", "head"], [716, 1, 1, "", "last"], [717, 1, 1, "", "max"], [718, 1, 1, "", "mean"], [719, 1, 1, "", "median"], [720, 1, 1, "", "min"], [721, 1, 1, "", "n_unique"], [722, 1, 1, "", "quantile"], [723, 1, 1, "", "sum"], [724, 1, 1, "", "tail"]], "polars.selectors": [[731, 4, 1, "", "all"], [731, 4, 1, "", "by_dtype"], [731, 4, 1, "", "by_name"], [731, 4, 1, "", "contains"], [731, 4, 1, "", "datetime"], [731, 4, 1, "", "duration"], [731, 4, 1, "", "ends_with"], [731, 4, 1, "", "first"], [731, 4, 1, "", "float"], [731, 4, 1, "", "integer"], [731, 4, 1, "", "is_selector"], [731, 4, 1, "", "last"], [731, 4, 1, "", "matches"], [731, 4, 1, "", "numeric"], [731, 4, 1, "", "selector_column_names"], [731, 4, 1, "", "starts_with"], [731, 4, 1, "", "string"], [731, 4, 1, "", "temporal"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "create_list_strategy"], [122, 4, 1, "", "dataframes"], [123, 4, 1, "", "load_profile"], [124, 4, 1, "", "series"], [125, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 144], "api": [1, 66, 67, 68, 69, 641], "provid": 1, "new": 1, "function": [1, 128, 629, 640, 731], "avail": 1, "registr": 1, "exampl": [1, 731, 1049], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1049], "arrai": [2, 623, 1033], "binari": [3, 624, 635, 1035], "boolean": [4, 625, 1036], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 128], "activate_decim": 6, "load": [7, 128], "restore_default": 8, "save": [9, 128], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 128], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 448, 709], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 316, 580, 789], "datetim": [38, 317, 582, 790], "decim": 39, "durat": [40, 583], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 631, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 1042], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 640], "struct": [57, 539, 540, 614, 637, 1005, 1006, 1007, 1008, 1009, 1046], "time": [58, 345, 618, 822], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "build_info": 70, "collect_al": 71, "concat": [72, 401, 504, 880, 970], "enable_string_cach": 73, "except": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 255], "arrowerror": 74, "columnnotfounderror": 75, "computeerror": 76, "duplicateerror": 77, "invalidoperationerror": 78, "nodataerror": 79, "norowsreturnederror": 80, "polarspanicerror": 81, "rowserror": 82, "schemaerror": 83, "schemafieldnotfounderror": 84, "shapeerror": 85, "structfieldnotfounderror": 86, "toomanyrowsreturnederror": 87, "from_arrow": 88, "from_datafram": 89, "from_dict": [90, 91], "from_numpi": 92, "from_panda": 93, "from_record": 94, "from_repr": 95, "get_index_typ": 96, "io": 97, "csv": [97, 642], "batched_read": 97, "batchedcsvread": [97, 642], "next_batch": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 683], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 123, 124, 125, 1049], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122, 123, 124, 125, 1049], "column": [119, 120, 135, 627, 649], "create_list_strategi": 121, "load_profil": 123, "seri": [124, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1041], "set_profil": 125, "threadpool_s": 126, "using_string_cach": 127, "option": 128, "current": 128, "us": 128, "context": 128, "manag": 128, "decor": 128, "aggreg": [129, 256, 643, 732], "__dataframe__": 130, "appli": [131, 233, 265, 563, 712, 738], "bottom_k": [132, 288, 644, 759], "clear": [133, 646, 766], "clone": [134, 647, 770], "corr": [136, 573], "describ": [137, 779], "drop": [138, 650], "drop_in_plac": 139, "drop_nul": [140, 311, 651, 783], "dtype": [141, 652, 830], "estimated_s": [142, 832], "explod": [143, 361, 407, 510, 654, 837, 886, 976], "fill_nan": [145, 363, 656, 839], "fill_nul": [146, 364, 657, 840], "filter": [147, 365, 658, 841], "find_idx_by_nam": 148, "fold": [149, 587], "frame_equ": 150, "get_column": [151, 152], "glimps": 153, "groupbi": [154, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 661, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727], "groupby_dynam": [155, 662], "groupby_rol": [156, 663], "hash_row": 157, "head": [158, 236, 375, 410, 591, 664, 715, 847, 889], "height": 159, "hstack": 160, "insert_at_idx": 161, "interpol": [162, 378, 666, 851], "is_dupl": [163, 380, 854], "is_empti": [164, 855], "is_uniqu": [165, 390, 869], "item": [166, 871], "iter_row": 167, "iter_slic": 168, "join": [169, 412, 667, 891], "join_asof": [170, 668], "lazi": [171, 670], "limit": [172, 396, 671, 874], "max": [173, 238, 278, 415, 436, 598, 673, 717, 750, 799, 894, 912], "mean": [174, 239, 416, 437, 600, 674, 718, 800, 895, 913], "median": [175, 240, 438, 601, 675, 719, 801, 914], "melt": [176, 676], "merge_sort": [177, 677], "min": [178, 241, 279, 417, 449, 602, 678, 720, 751, 806, 896, 915], "n_chunk": [179, 917], "n_uniqu": [180, 242, 453, 604, 721, 918], "null_count": [181, 458, 679, 923], "partition_bi": 182, "pipe": [183, 462, 680], "pivot": 184, "product": [185, 465, 927], "quantil": [186, 243, 467, 606, 682, 722, 929], "rechunk": [187, 470, 931], "renam": [188, 684, 933], "replac": [189, 520, 986], "replace_at_idx": 190, "revers": [191, 418, 474, 685, 897, 935], "row": [192, 193], "rows_by_kei": 194, "sampl": [195, 488, 949], "schema": [196, 686, 1008], "select": [197, 253, 611, 634, 687, 730, 1044], "set_sort": [198, 490, 688, 954], "shape": [199, 955], "shift": [200, 419, 491, 689, 898, 956], "shift_and_fil": [201, 492, 690, 957], "shrink_to_fit": [202, 959], "slice": [203, 420, 499, 524, 694, 899, 965, 990], "sort": [204, 421, 500, 695, 900, 966], "std": [205, 503, 613, 696, 968], "sum": [206, 244, 280, 422, 543, 615, 697, 723, 752, 901, 1010], "tail": [207, 245, 423, 544, 617, 698, 724, 902, 1011], "take_everi": [208, 546, 699, 1013], "to_arrow": [209, 1017], "to_dict": [210, 211], "to_dummi": [212, 1018], "to_init_repr": [213, 1020], "to_numpi": [214, 1022], "to_panda": [215, 1023], "to_seri": 216, "to_struct": [217, 425, 904], "top_k": [218, 550, 700, 1025], "transpos": 219, "uniqu": [220, 281, 427, 552, 701, 753, 906, 1026], "unnest": [221, 702, 1009], "unstack": 222, "updat": [223, 703], "upsampl": 224, "var": [225, 556, 620, 704, 1030], "vstack": 226, "width": [227, 705], "with_column": [228, 706], "with_row_count": [229, 708], "__iter__": 230, "agg": [231, 710], "all": [232, 261, 397, 559, 711, 735, 876], "count": [234, 299, 574, 713], "first": [235, 366, 408, 586, 659, 714, 887], "last": [237, 393, 413, 595, 669, 716, 892], "attribut": [246, 725, 1034], "comput": [247, 628, 1038], "descript": [248, 726, 1039], "export": [249, 1040], "miscellan": [252, 633, 640, 729, 1043], "manipul": [253, 634, 730, 1044], "data": 254, "type": 254, "numer": [254, 635], "tempor": [254, 638, 1047], "nest": 254, "other": 254, "expr": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558], "ab": [257, 733], "add": 258, "agg_group": 259, "alia": [260, 734], "and_": 262, "ani": [263, 398, 561, 736, 877], "append": [264, 737], "approx_uniqu": [266, 564], "arcco": [267, 739], "arccosh": [268, 740], "arcsin": [269, 741], "arcsinh": [270, 742], "arctan": [271, 743], "arctanh": [272, 744], "arg_max": [273, 399, 745, 878], "arg_min": [274, 400, 746, 879], "arg_sort": [275, 747], "arg_tru": [276, 748], "arg_uniqu": [277, 749], "arr": [278, 279, 280, 281, 750, 751, 752, 753], "backward_fil": 282, "bin": [283, 284, 285, 286, 287, 754, 755, 756, 757, 758], "contain": [283, 402, 505, 754, 881, 971], "decod": [284, 507, 755, 973], "encod": [285, 508, 756, 974], "ends_with": [286, 509, 757, 975], "starts_with": [287, 528, 758, 994], "cach": [289, 645], "cast": [290, 760], "cat": [291, 292, 761, 762, 763], "get_categori": [291, 762], "set_ord": [292, 763], "ceil": [293, 764], "clip": [294, 767], "clip_max": [295, 768], "clip_min": [296, 769], "co": [297, 771], "cosh": [298, 772], "cumcount": 300, "cummax": [301, 773], "cummin": [302, 774], "cumprod": [303, 775], "cumsum": [304, 578, 776], "cumulative_ev": [305, 777], "cut": [306, 778], "degre": 307, "diff": [308, 404, 780, 883], "dot": [309, 781], "drop_nan": [310, 782], "dt": [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829], "base_utc_offset": [312, 785], "cast_time_unit": [313, 786], "combin": [314, 787], "convert_time_zon": [315, 788], "dai": [318, 319, 791, 792], "dst_offset": [320, 793], "epoch": [321, 794], "hour": [322, 323, 795, 796], "is_leap_year": [324, 797], "iso_year": [325, 798], "microsecond": [326, 327, 802, 803], "millisecond": [328, 329, 804, 805], "minut": [330, 331, 807, 808], "month": [332, 809], "month_end": [333, 810], "month_start": [334, 811], "nanosecond": [335, 336, 812, 813], "offset_bi": [337, 814], "ordinal_dai": [338, 815], "quarter": [339, 816], "replace_time_zon": [340, 817], "round": [341, 487, 818, 948], "second": [342, 343, 819, 820], "strftime": [344, 821], "timestamp": [346, 823], "to_str": [347, 824], "truncat": [348, 825], "week": [349, 826], "weekdai": [350, 827], "with_time_unit": [351, 828], "year": [352, 829], "entropi": [353, 831], "eq": [354, 439], "eq_miss": 355, "ewm_mean": [356, 833], "ewm_std": [357, 834], "ewm_var": [358, 835], "exclud": [359, 585], "exp": [360, 836], "extend_const": [362, 838], "flatten": 367, "floor": [368, 843], "floordiv": 369, "forward_fil": 370, "from_json": [371, 660], "ge": 372, "gt": 373, "hash": [374, 846], "implod": [376, 592, 849], "inspect": [377, 665], "is_between": [379, 852], "is_finit": [381, 856], "is_first": [382, 857], "is_in": [383, 859], "is_infinit": [384, 860], "is_nan": [385, 862], "is_not": 386, "is_not_nan": [387, 863], "is_not_nul": [388, 864], "is_nul": [389, 865], "keep_nam": 391, "kurtosi": [392, 872], "le": 394, "len": [395, 873], "count_match": [403, 506, 882, 972], "differ": [405, 884], "eval": [406, 885], "get": [409, 888], "intersect": [411, 890], "length": [414, 515, 893, 981], "take": [424, 545, 903, 1012], "union": [426, 905], "log": [428, 907], "log10": [429, 908], "log1p": [430, 909], "lower_bound": [431, 910], "lt": 432, "map": [433, 597, 672], "map_alia": 434, "map_dict": [435, 911], "meta": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 632], "has_multiple_output": 440, "is_regex_project": 441, "ne": [442, 456], "output_nam": 443, "pop": 444, "root_nam": 445, "tree_format": 446, "undo_alias": 447, "mod": 450, "mode": [451, 916], "mul": 452, "nan_max": [454, 920], "nan_min": [455, 921], "ne_miss": 457, "or_": 459, "over": 460, "pct_chang": [461, 924], "pow": 463, "prefix": 464, "qcut": [466, 928], "radian": 468, "rank": [469, 930], "reinterpret": [471, 932], "repeat_bi": 472, "reshap": [473, 934], "rle": [475, 936], "rle_id": [476, 937], "rolling_appli": [477, 938], "rolling_max": [478, 939], "rolling_mean": [479, 940], "rolling_median": [480, 941], "rolling_min": [481, 942], "rolling_quantil": [482, 943], "rolling_skew": [483, 944], "rolling_std": [484, 945], "rolling_sum": [485, 946], "rolling_var": [486, 947], "search_sort": [489, 950], "shrink_dtyp": [493, 958], "shuffl": [494, 960], "sign": [495, 961], "sin": [496, 962], "sinh": [497, 963], "skew": [498, 964], "sort_bi": 501, "sqrt": [502, 967], "str": [504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004], "extract": [511, 977], "extract_al": [512, 978], "json_extract": [513, 979], "json_path_match": [514, 980], "ljust": [516, 982], "lstrip": [517, 983], "n_char": [518, 984], "parse_int": [519, 985], "replace_al": [521, 987], "rjust": [522, 988], "rstrip": [523, 989], "split": [525, 991], "split_exact": [526, 992], "splitn": [527, 993], "strip": [529, 995], "strptime": [530, 996], "to_dat": [531, 997], "to_datetim": [532, 998], "to_decim": [533, 999], "to_lowercas": [534, 1000], "to_tim": [535, 1001], "to_titlecas": [536, 1002], "to_uppercas": [537, 1003], "zfill": [538, 1004], "field": [539, 1005, 1006], "rename_field": [540, 1007], "sub": 541, "suffix": 542, "tan": [547, 1014], "tanh": [548, 1015], "to_phys": [549, 1024], "truediv": 551, "unique_count": [553, 1027], "upper_bound": [554, 1028], "value_count": [555, 1029], "where": 557, "xor": 558, "all_horizont": 560, "any_horizont": 562, "arang": 565, "arg_sort_bi": 566, "arg_wher": 567, "avg": 568, "coalesc": 569, "col": 570, "concat_list": 571, "concat_str": 572, "cov": 575, "cumfold": 576, "cumreduc": 577, "cumsum_horizont": 579, "date_rang": 581, "element": 584, "format": 588, "from_epoch": 589, "group": 590, "int_rang": [593, 594], "lit": 596, "max_horizont": 599, "min_horizont": 603, "ones": 605, "reduc": 607, "repeat": 608, "rolling_corr": 609, "rolling_cov": 610, "sql_expr": 612, "sum_horizont": 616, "time_rang": 619, "when": 621, "zero": 622, "categori": [626, 1037], "name": [627, 919], "express": 630, "oper": [635, 731], "conjunct": 635, "comparison": 635, "string": [636, 1045], "window": 639, "convers": 640, "parallel": 640, "refer": 641, "input": 642, "output": 642, "feather": 642, "ipc": 642, "parquet": 642, "databas": 642, "json": 642, "avro": 642, "excel": 642, "delta": 642, "lake": 642, "dataset": 642, "lazyfram": [644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 728], "collect": 648, "explain": 653, "fetch": 655, "profil": [681, 1049], "show_graph": 691, "sink_ipc": 692, "sink_parquet": 693, "with_context": 707, "lazygroupbi": [710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "read": 729, "write": 729, "logic": 729, "plan": 729, "selector": 731, "import": 731, "set": [731, 952], "chunk_length": 765, "flag": 842, "get_chunk": 844, "has_valid": 845, "hist": 848, "inner_dtyp": 850, "is_boolean": 853, "is_float": 858, "is_integ": 861, "is_numer": 866, "is_sort": 867, "is_tempor": 868, "is_utf8": 870, "new_from_index": 922, "peak_max": 925, "peak_min": 926, "series_equ": 951, "set_at_idx": 953, "time_unit": 1016, "to_fram": 1019, "to_list": 1021, "view": 1031, "zip_with": 1032, "sql": 1048, "method": 1048, "assert": 1049, "primit": 1049, "strategi": 1049, "helper": 1049, "util": 1050}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.read_parquet": [[108, "polars-read-parquet"]], "polars.testing.parametric.series": [[124, "polars-testing-parametric-series"]], "polars.from_pandas": [[93, "polars-from-pandas"]], "polars.exceptions.RowsError": [[82, "polars-exceptions-rowserror"]], "polars.exceptions.StructFieldNotFoundError": [[86, "polars-exceptions-structfieldnotfounderror"]], "polars.from_numpy": [[92, "polars-from-numpy"]], "polars.exceptions.SchemaFieldNotFoundError": [[84, "polars-exceptions-schemafieldnotfounderror"]], "polars.get_index_type": [[96, "polars-get-index-type"]], "polars.from_dict": [[90, "polars-from-dict"]], "polars.testing.parametric.dataframes": [[122, "polars-testing-parametric-dataframes"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.from_records": [[94, "polars-from-records"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.testing.parametric.set_profile": [[125, "polars-testing-parametric-set-profile"]], "polars.DataFrame.drop": [[138, "polars-dataframe-drop"]], "polars.exceptions.ShapeError": [[85, "polars-exceptions-shapeerror"]], "polars.exceptions.PolarsPanicError": [[81, "polars-exceptions-polarspanicerror"]], "polars.DataFrame.bottom_k": [[132, "polars-dataframe-bottom-k"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "Config": [[128, "config"]], "Config options": [[128, "config-options"]], "Config load, save, and current state": [[128, "config-load-save-and-current-state"]], "Use as a context manager": [[128, "use-as-a-context-manager"]], "Use as a function decorator": [[128, "use-as-a-function-decorator"]], "polars.DataFrame.__dataframe__": [[130, "polars-dataframe-dataframe"]], "polars.using_string_cache": [[127, "polars-using-string-cache"]], "polars.read_json": [[106, "polars-read-json"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[97, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.SchemaError": [[83, "polars-exceptions-schemaerror"]], "polars.read_database": [[101, "polars-read-database"]], "polars.from_dicts": [[91, "polars-from-dicts"]], "polars.DataFrame.describe": [[137, "polars-dataframe-describe"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.DataFrame.explode": [[143, "polars-dataframe-explode"]], "polars.DataFrame.clone": [[134, "polars-dataframe-clone"]], "polars.DataFrame.drop_in_place": [[139, "polars-dataframe-drop-in-place"]], "polars.enable_string_cache": [[73, "polars-enable-string-cache"]], "polars.from_dataframe": [[89, "polars-from-dataframe"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.threadpool_size": [[126, "polars-threadpool-size"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.show_versions": [[116, "polars-show-versions"]], "polars.exceptions.ColumnNotFoundError": [[75, "polars-exceptions-columnnotfounderror"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.from_repr": [[95, "polars-from-repr"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.testing.parametric.load_profile": [[123, "polars-testing-parametric-load-profile"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.exceptions.ComputeError": [[76, "polars-exceptions-computeerror"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.exceptions.NoDataError": [[79, "polars-exceptions-nodataerror"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.DataFrame.drop_nulls": [[140, "polars-dataframe-drop-nulls"]], "polars.DataFrame.estimated_size": [[142, "polars-dataframe-estimated-size"]], "polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "Aggregation": [[129, "aggregation"], [732, "aggregation"], [643, "aggregation"], [256, "aggregation"]], "polars.DataFrame.columns": [[135, "polars-dataframe-columns"]], "polars.DataFrame.apply": [[131, "polars-dataframe-apply"]], "polars.exceptions.InvalidOperationError": [[78, "polars-exceptions-invalidoperationerror"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.exceptions.TooManyRowsReturnedError": [[87, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.NoRowsReturnedError": [[80, "polars-exceptions-norowsreturnederror"]], "polars.testing.parametric.create_list_strategy": [[121, "polars-testing-parametric-create-list-strategy"]], "polars.exceptions.DuplicateError": [[77, "polars-exceptions-duplicateerror"]], "polars.DataFrame.dtypes": [[141, "polars-dataframe-dtypes"]], "polars.concat": [[72, "polars-concat"]], "polars.exceptions.ArrowError": [[74, "polars-exceptions-arrowerror"]], "polars.DataFrame.corr": [[136, "polars-dataframe-corr"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.DataFrame.clear": [[133, "polars-dataframe-clear"]], "polars.from_arrow": [[88, "polars-from-arrow"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Int64": [[45, "polars-int64"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Null": [[48, "polars-null"]], "polars.Time": [[58, "polars-time"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.build_info": [[70, "polars-build-info"]], "polars.Float64": [[42, "polars-float64"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1049, "examples"], [731, "examples"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Object": [[49, "polars-object"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.Duration": [[40, "polars-duration"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.Array": [[2, "polars-array"]], "polars.List": [[47, "polars-list"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.collect_all": [[71, "polars-collect-all"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Int8": [[46, "polars-int8"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Float32": [[41, "polars-float32"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.Date": [[37, "polars-date"]], "polars.Struct": [[57, "polars-struct"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Binary": [[3, "polars-binary"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Int16": [[43, "polars-int16"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.Int32": [[44, "polars-int32"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.Series.rolling_min": [[942, "polars-series-rolling-min"]], "polars.Series.shift": [[956, "polars-series-shift"]], "polars.Series.str.concat": [[970, "polars-series-str-concat"]], "polars.Series.str.ljust": [[982, "polars-series-str-ljust"]], "polars.Series.str.lengths": [[981, "polars-series-str-lengths"]], "polars.Series.str.split_exact": [[992, "polars-series-str-split-exact"]], "polars.Series.str.to_titlecase": [[1002, "polars-series-str-to-titlecase"]], "polars.Series.str.zfill": [[1004, "polars-series-str-zfill"]], "polars.Series.set_at_idx": [[953, "polars-series-set-at-idx"]], "polars.Series.rolling_std": [[945, "polars-series-rolling-std"]], "polars.Series.str.count_match": [[972, "polars-series-str-count-match"]], "polars.Series.str.rjust": [[988, "polars-series-str-rjust"]], "polars.Series.str.extract_all": [[978, "polars-series-str-extract-all"]], "polars.Series.sample": [[949, "polars-series-sample"]], "polars.Series.str.split": [[991, "polars-series-str-split"]], "polars.Series.str.contains": [[971, "polars-series-str-contains"]], "polars.Series.rolling_sum": [[946, "polars-series-rolling-sum"]], "polars.Series.struct.fields": [[1006, "polars-series-struct-fields"]], "polars.Series.skew": [[964, "polars-series-skew"]], "polars.Series.str.explode": [[976, "polars-series-str-explode"]], "polars.Series.series_equal": [[951, "polars-series-series-equal"]], "polars.Series.str.slice": [[990, "polars-series-str-slice"]], "polars.Series.str.strip": [[995, "polars-series-str-strip"]], "polars.Series.str.to_time": [[1001, "polars-series-str-to-time"]], "polars.Series.str.lstrip": [[983, "polars-series-str-lstrip"]], "polars.Series.str.json_extract": [[979, "polars-series-str-json-extract"]], "polars.Series.str.extract": [[977, "polars-series-str-extract"]], "polars.Series.str.to_decimal": [[999, "polars-series-str-to-decimal"]], "polars.Series.str.to_datetime": [[998, "polars-series-str-to-datetime"]], "polars.Series.rle": [[936, "polars-series-rle"]], "polars.Series.slice": [[965, "polars-series-slice"]], "polars.Series.sqrt": [[967, "polars-series-sqrt"]], "polars.Series.str.strptime": [[996, "polars-series-str-strptime"]], "polars.Series.str.json_path_match": [[980, "polars-series-str-json-path-match"]], "polars.Series.str.decode": [[973, "polars-series-str-decode"]], "polars.Series.shuffle": [[960, "polars-series-shuffle"]], "polars.Series.str.to_lowercase": [[1000, "polars-series-str-to-lowercase"]], "polars.Series.round": [[948, "polars-series-round"]], "polars.Series.shift_and_fill": [[957, "polars-series-shift-and-fill"]], "polars.Series.str.n_chars": [[984, "polars-series-str-n-chars"]], "polars.Series.sin": [[962, "polars-series-sin"]], "polars.Series.rle_id": [[937, "polars-series-rle-id"]], "polars.Series.shrink_dtype": [[958, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[959, "polars-series-shrink-to-fit"]], "polars.Series.rolling_max": [[939, "polars-series-rolling-max"]], "polars.Series.set": [[952, "polars-series-set"]], "polars.Series.rolling_var": [[947, "polars-series-rolling-var"]], "polars.Series.str.ends_with": [[975, "polars-series-str-ends-with"]], "polars.Series.search_sorted": [[950, "polars-series-search-sorted"]], "polars.Series.sort": [[966, "polars-series-sort"]], "polars.Series.std": [[968, "polars-series-std"]], "polars.Series.rolling_mean": [[940, "polars-series-rolling-mean"]], "polars.Series.sign": [[961, "polars-series-sign"]], "polars.Series.str.starts_with": [[994, "polars-series-str-starts-with"]], "polars.Series.struct.rename_fields": [[1007, "polars-series-struct-rename-fields"]], "polars.Series.str.encode": [[974, "polars-series-str-encode"]], "polars.Series.str.rstrip": [[989, "polars-series-str-rstrip"]], "polars.Series.str.parse_int": [[985, "polars-series-str-parse-int"]], "polars.Series.rolling_median": [[941, "polars-series-rolling-median"]], "polars.Series.str.to_uppercase": [[1003, "polars-series-str-to-uppercase"]], "polars.Series.set_sorted": [[954, "polars-series-set-sorted"]], "polars.Series.rolling_apply": [[938, "polars-series-rolling-apply"]], "polars.Series.struct.field": [[1005, "polars-series-struct-field"]], "polars.Series.shape": [[955, "polars-series-shape"]], "polars.Series.str.to_date": [[997, "polars-series-str-to-date"]], "polars.Series.str.replace": [[986, "polars-series-str-replace"]], "polars.Series.str": [[969, "polars-series-str"]], "polars.Series.rolling_quantile": [[943, "polars-series-rolling-quantile"]], "polars.Series.rolling_skew": [[944, "polars-series-rolling-skew"]], "polars.Series.str.splitn": [[993, "polars-series-str-splitn"]], "polars.Series.sinh": [[963, "polars-series-sinh"]], "polars.Series.str.replace_all": [[987, "polars-series-str-replace-all"]], "polars.Series.list.take": [[903, "polars-series-list-take"]], "polars.Series.list.contains": [[881, "polars-series-list-contains"]], "polars.Series.n_chunks": [[917, "polars-series-n-chunks"]], "polars.Series.nan_max": [[920, "polars-series-nan-max"]], "polars.Series.rename": [[933, "polars-series-rename"]], "polars.Series.mean": [[913, "polars-series-mean"]], "polars.Series.rechunk": [[931, "polars-series-rechunk"]], "polars.Series.list.arg_min": [[879, "polars-series-list-arg-min"]], "polars.Series.list.to_struct": [[904, "polars-series-list-to-struct"]], "polars.Series.list.tail": [[902, "polars-series-list-tail"]], "polars.Series.list.get": [[888, "polars-series-list-get"]], "polars.Series.log": [[907, "polars-series-log"]], "polars.Series.list.sort": [[900, "polars-series-list-sort"]], "polars.Series.lower_bound": [[910, "polars-series-lower-bound"]], "polars.Series.list.all": [[876, "polars-series-list-all"]], "polars.Series.reshape": [[934, "polars-series-reshape"]], "polars.Series.product": [[927, "polars-series-product"]], "polars.Series.kurtosis": [[872, "polars-series-kurtosis"]], "polars.Series.list.diff": [[883, "polars-series-list-diff"]], "polars.Series.list.last": [[892, "polars-series-list-last"]], "polars.Series.list.max": [[894, "polars-series-list-max"]], "polars.Series.name": [[919, "polars-series-name"]], "polars.Series.is_temporal": [[868, "polars-series-is-temporal"]], "polars.Series.list.union": [[905, "polars-series-list-union"]], "polars.Series.reinterpret": [[932, "polars-series-reinterpret"]], "polars.Series.list.slice": [[899, "polars-series-list-slice"]], "polars.Series.item": [[871, "polars-series-item"]], "polars.Series.limit": [[874, "polars-series-limit"]], "polars.Series.min": [[915, "polars-series-min"]], "polars.Series.is_null": [[865, "polars-series-is-null"]], "polars.Series.list.shift": [[898, "polars-series-list-shift"]], "polars.Series.list.eval": [[885, "polars-series-list-eval"]], "polars.Series.list": [[875, "polars-series-list"]], "polars.Series.list.min": [[896, "polars-series-list-min"]], "polars.Series.pct_change": [[924, "polars-series-pct-change"]], "polars.Series.reverse": [[935, "polars-series-reverse"]], "polars.Series.max": [[912, "polars-series-max"]], "polars.Series.list.explode": [[886, "polars-series-list-explode"]], "polars.Series.list.first": [[887, "polars-series-list-first"]], "polars.Series.log1p": [[909, "polars-series-log1p"]], "polars.Series.list.count_match": [[882, "polars-series-list-count-match"]], "polars.Series.list.arg_max": [[878, "polars-series-list-arg-max"]], "polars.Series.is_utf8": [[870, "polars-series-is-utf8"]], "polars.Series.mode": [[916, "polars-series-mode"]], "polars.Series.is_numeric": [[866, "polars-series-is-numeric"]], "polars.Series.list.mean": [[895, "polars-series-list-mean"]], "polars.Series.n_unique": [[918, "polars-series-n-unique"]], "polars.Series.qcut": [[928, "polars-series-qcut"]], "polars.Series.median": [[914, "polars-series-median"]], "polars.Series.rank": [[930, "polars-series-rank"]], "polars.Series.is_sorted": [[867, "polars-series-is-sorted"]], "polars.Series.peak_min": [[926, "polars-series-peak-min"]], "polars.Series.list.unique": [[906, "polars-series-list-unique"]], "polars.Series.is_unique": [[869, "polars-series-is-unique"]], "polars.Series.list.any": [[877, "polars-series-list-any"]], "polars.Series.list.sum": [[901, "polars-series-list-sum"]], "polars.Series.log10": [[908, "polars-series-log10"]], "polars.Series.nan_min": [[921, "polars-series-nan-min"]], "polars.Series.list.difference": [[884, "polars-series-list-difference"]], "polars.Series.list.concat": [[880, "polars-series-list-concat"]], "polars.Series.is_not_null": [[864, "polars-series-is-not-null"]], "polars.Series.new_from_index": [[922, "polars-series-new-from-index"]], "polars.Series.list.join": [[891, "polars-series-list-join"]], "polars.Series.quantile": [[929, "polars-series-quantile"]], "polars.Series.len": [[873, "polars-series-len"]], "polars.Series.null_count": [[923, "polars-series-null-count"]], "polars.Series.list.lengths": [[893, "polars-series-list-lengths"]], "polars.Series.list.head": [[889, "polars-series-list-head"]], "polars.Series.list.reverse": [[897, "polars-series-list-reverse"]], "polars.Series.peak_max": [[925, "polars-series-peak-max"]], "polars.Series.list.intersection": [[890, "polars-series-list-intersection"]], "polars.Series.map_dict": [[911, "polars-series-map-dict"]], "polars.Series.ewm_std": [[834, "polars-series-ewm-std"]], "polars.Series.dt.nanoseconds": [[813, "polars-series-dt-nanoseconds"]], "polars.Series.dt.epoch": [[794, "polars-series-dt-epoch"]], "polars.Series.dt.round": [[818, "polars-series-dt-round"]], "polars.Series.hash": [[846, "polars-series-hash"]], "polars.Series.dt.second": [[819, "polars-series-dt-second"]], "polars.Series.dt.min": [[806, "polars-series-dt-min"]], "polars.Series.dt.hours": [[796, "polars-series-dt-hours"]], "polars.Series.dt.month": [[809, "polars-series-dt-month"]], "polars.Series.dt.week": [[826, "polars-series-dt-week"]], "polars.Series.floor": [[843, "polars-series-floor"]], "polars.Series.hist": [[848, "polars-series-hist"]], "polars.Series.is_first": [[857, "polars-series-is-first"]], "polars.Series.dt.to_string": [[824, "polars-series-dt-to-string"]], "polars.Series.dt.nanosecond": [[812, "polars-series-dt-nanosecond"]], "polars.Series.dt.iso_year": [[798, "polars-series-dt-iso-year"]], "polars.Series.dt.mean": [[800, "polars-series-dt-mean"]], "polars.Series.dt.is_leap_year": [[797, "polars-series-dt-is-leap-year"]], "polars.Series.is_infinite": [[860, "polars-series-is-infinite"]], "polars.Series.dt.milliseconds": [[805, "polars-series-dt-milliseconds"]], "polars.Series.is_float": [[858, "polars-series-is-float"]], "polars.Series.dt.month_end": [[810, "polars-series-dt-month-end"]], "polars.Series.dt.month_start": [[811, "polars-series-dt-month-start"]], "polars.Series.dt.quarter": [[816, "polars-series-dt-quarter"]], "polars.Series.explode": [[837, "polars-series-explode"]], "polars.Series.is_nan": [[862, "polars-series-is-nan"]], "polars.Series.dt.replace_time_zone": [[817, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.timestamp": [[823, "polars-series-dt-timestamp"]], "polars.Series.dt.max": [[799, "polars-series-dt-max"]], "polars.Series.dt.minutes": [[808, "polars-series-dt-minutes"]], "polars.Series.dt.microseconds": [[803, "polars-series-dt-microseconds"]], "polars.Series.fill_nan": [[839, "polars-series-fill-nan"]], "polars.Series.dt.microsecond": [[802, "polars-series-dt-microsecond"]], "polars.Series.is_integer": [[861, "polars-series-is-integer"]], "polars.Series.dt.days": [[792, "polars-series-dt-days"]], "polars.Series.dt.strftime": [[821, "polars-series-dt-strftime"]], "polars.Series.inner_dtype": [[850, "polars-series-inner-dtype"]], "polars.Series.entropy": [[831, "polars-series-entropy"]], "polars.Series.dt.truncate": [[825, "polars-series-dt-truncate"]], "polars.Series.implode": [[849, "polars-series-implode"]], "polars.Series.is_duplicated": [[854, "polars-series-is-duplicated"]], "polars.Series.is_not_nan": [[863, "polars-series-is-not-nan"]], "polars.Series.dt.ordinal_day": [[815, "polars-series-dt-ordinal-day"]], "polars.Series.dt.minute": [[807, "polars-series-dt-minute"]], "polars.Series.dt.time": [[822, "polars-series-dt-time"]], "polars.Series.ewm_mean": [[833, "polars-series-ewm-mean"]], "polars.Series.flags": [[842, "polars-series-flags"]], "polars.Series.dt.weekday": [[827, "polars-series-dt-weekday"]], "polars.Series.dt.year": [[829, "polars-series-dt-year"]], "polars.Series.dt.dst_offset": [[793, "polars-series-dt-dst-offset"]], "polars.Series.get_chunks": [[844, "polars-series-get-chunks"]], "polars.Series.dt.median": [[801, "polars-series-dt-median"]], "polars.Series.dt.offset_by": [[814, "polars-series-dt-offset-by"]], "polars.Series.dtype": [[830, "polars-series-dtype"]], "polars.Series.has_validity": [[845, "polars-series-has-validity"]], "polars.Series.head": [[847, "polars-series-head"]], "polars.Series.dt.with_time_unit": [[828, "polars-series-dt-with-time-unit"]], "polars.Series.is_boolean": [[853, "polars-series-is-boolean"]], "polars.Series.interpolate": [[851, "polars-series-interpolate"]], "polars.Series.is_finite": [[856, "polars-series-is-finite"]], "polars.Series.is_in": [[859, "polars-series-is-in"]], "polars.Series.dt.seconds": [[820, "polars-series-dt-seconds"]], "polars.Series.exp": [[836, "polars-series-exp"]], "polars.Series.filter": [[841, "polars-series-filter"]], "polars.Series.estimated_size": [[832, "polars-series-estimated-size"]], "polars.Series.is_empty": [[855, "polars-series-is-empty"]], "polars.Series.is_between": [[852, "polars-series-is-between"]], "polars.Series.ewm_var": [[835, "polars-series-ewm-var"]], "polars.Series.fill_null": [[840, "polars-series-fill-null"]], "polars.Series.dt.millisecond": [[804, "polars-series-dt-millisecond"]], "polars.Series.dt.hour": [[795, "polars-series-dt-hour"]], "polars.Series.extend_constant": [[838, "polars-series-extend-constant"]], "polars.Series.var": [[1030, "polars-series-var"]], "Series": [[1041, "series"]], "polars.Series.tanh": [[1015, "polars-series-tanh"]], "polars.Series.to_frame": [[1019, "polars-series-to-frame"]], "polars.Series.to_pandas": [[1023, "polars-series-to-pandas"]], "Temporal": [[1047, "temporal"], [638, "temporal"], [254, "temporal"]], "polars.Series.to_list": [[1021, "polars-series-to-list"]], "polars.Series.time_unit": [[1016, "polars-series-time-unit"]], "Manipulation/selection": [[1044, "manipulation-selection"], [730, "manipulation-selection"], [634, "manipulation-selection"], [253, "manipulation-selection"]], "Struct": [[1046, "struct"], [637, "struct"]], "Array": [[1033, "array"], [623, "array"]], "polars.Series.tan": [[1014, "polars-series-tan"]], "polars.Series.struct.unnest": [[1009, "polars-series-struct-unnest"]], "polars.Series.zip_with": [[1032, "polars-series-zip-with"]], "SQL": [[1048, "sql"]], "Methods": [[1048, "methods"]], "polars.Series.unique": [[1026, "polars-series-unique"]], "Binary": [[1035, "binary"], [624, "binary"], [635, "binary"]], "Utils": [[1050, "utils"]], "Miscellaneous": [[1043, "miscellaneous"], [729, "miscellaneous"], [633, "miscellaneous"], [640, "miscellaneous"], [252, "miscellaneous"]], "List": [[1042, "list"], [631, "list"]], "polars.Series.unique_counts": [[1027, "polars-series-unique-counts"]], "polars.Series.take_every": [[1013, "polars-series-take-every"]], "polars.Series.take": [[1012, "polars-series-take"]], "Boolean": [[1036, "boolean"], [625, "boolean"]], "Computation": [[1038, "computation"], [628, "computation"], [247, "computation"]], "polars.Series.view": [[1031, "polars-series-view"]], "polars.Series.value_counts": [[1029, "polars-series-value-counts"]], "polars.Series.top_k": [[1025, "polars-series-top-k"]], "polars.Series.tail": [[1011, "polars-series-tail"]], "polars.Series.upper_bound": [[1028, "polars-series-upper-bound"]], "polars.Series.to_init_repr": [[1020, "polars-series-to-init-repr"]], "Attributes": [[1034, "attributes"], [725, "attributes"], [246, "attributes"]], "polars.Series.sum": [[1010, "polars-series-sum"]], "polars.Series.to_dummies": [[1018, "polars-series-to-dummies"]], "Descriptive": [[1039, "descriptive"], [726, "descriptive"], [248, "descriptive"]], "Export": [[1040, "export"], [249, "export"]], "polars.Series.to_arrow": [[1017, "polars-series-to-arrow"]], "polars.Series.struct.schema": [[1008, "polars-series-struct-schema"]], "Categories": [[1037, "categories"], [626, "categories"]], "polars.Series.to_numpy": [[1022, "polars-series-to-numpy"]], "Testing": [[1049, "testing"]], "Asserts": [[1049, "asserts"]], "Parametric testing": [[1049, "parametric-testing"]], "Polars primitives": [[1049, "polars-primitives"]], "Strategy helpers": [[1049, "strategy-helpers"]], "Profiles": [[1049, "profiles"]], "String": [[1045, "string"], [636, "string"]], "polars.Series.to_physical": [[1024, "polars-series-to-physical"]], "polars.LazyFrame.fill_null": [[657, "polars-lazyframe-fill-null"]], "polars.LazyFrame.quantile": [[682, "polars-lazyframe-quantile"]], "polars.LazyFrame.melt": [[676, "polars-lazyframe-melt"]], "polars.LazyFrame.with_context": [[707, "polars-lazyframe-with-context"]], "polars.LazyFrame.null_count": [[679, "polars-lazyframe-null-count"]], "polars.LazyFrame.max": [[673, "polars-lazyframe-max"]], "polars.LazyFrame.first": [[659, "polars-lazyframe-first"]], "polars.LazyFrame.map": [[672, "polars-lazyframe-map"]], "polars.LazyFrame.profile": [[681, "polars-lazyframe-profile"]], "polars.LazyFrame.top_k": [[700, "polars-lazyframe-top-k"]], "polars.LazyFrame.with_columns": [[706, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[711, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[718, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.read_json": [[683, "polars-lazyframe-read-json"]], "polars.LazyFrame.head": [[664, "polars-lazyframe-head"]], "polars.LazyFrame.join": [[667, "polars-lazyframe-join"]], "polars.LazyFrame.show_graph": [[691, "polars-lazyframe-show-graph"]], "polars.LazyFrame.columns": [[649, "polars-lazyframe-columns"]], "polars.LazyFrame.interpolate": [[666, "polars-lazyframe-interpolate"]], "polars.LazyFrame.set_sorted": [[688, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.last": [[669, "polars-lazyframe-last"]], "polars.LazyFrame.min": [[678, "polars-lazyframe-min"]], "polars.LazyFrame.unnest": [[702, "polars-lazyframe-unnest"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[716, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.shift_and_fill": [[690, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fetch": [[655, "polars-lazyframe-fetch"]], "polars.LazyFrame.filter": [[658, "polars-lazyframe-filter"]], "polars.LazyFrame.schema": [[686, "polars-lazyframe-schema"]], "polars.LazyFrame.explain": [[653, "polars-lazyframe-explain"]], "polars.LazyFrame.fill_nan": [[656, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.groupby_rolling": [[663, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.lazy": [[670, "polars-lazyframe-lazy"]], "polars.LazyFrame.explode": [[654, "polars-lazyframe-explode"]], "polars.LazyFrame.var": [[704, "polars-lazyframe-var"]], "polars.LazyFrame.median": [[675, "polars-lazyframe-median"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[713, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[714, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.join_asof": [[668, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sum": [[697, "polars-lazyframe-sum"]], "polars.LazyFrame.rename": [[684, "polars-lazyframe-rename"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[719, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[710, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[712, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.slice": [[694, "polars-lazyframe-slice"]], "polars.LazyFrame.sink_parquet": [[693, "polars-lazyframe-sink-parquet"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[717, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.inspect": [[665, "polars-lazyframe-inspect"]], "polars.LazyFrame.update": [[703, "polars-lazyframe-update"]], "polars.LazyFrame.std": [[696, "polars-lazyframe-std"]], "polars.LazyFrame.groupby_dynamic": [[662, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.reverse": [[685, "polars-lazyframe-reverse"]], "polars.LazyFrame.tail": [[698, "polars-lazyframe-tail"]], "polars.LazyFrame.sort": [[695, "polars-lazyframe-sort"]], "polars.LazyFrame.sink_ipc": [[692, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.limit": [[671, "polars-lazyframe-limit"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[715, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.dtypes": [[652, "polars-lazyframe-dtypes"]], "polars.LazyFrame.from_json": [[660, "polars-lazyframe-from-json"]], "polars.LazyFrame.drop_nulls": [[651, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.pipe": [[680, "polars-lazyframe-pipe"]], "polars.LazyFrame.merge_sorted": [[677, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.drop": [[650, "polars-lazyframe-drop"]], "polars.LazyFrame.collect": [[648, "polars-lazyframe-collect"]], "polars.LazyFrame.select": [[687, "polars-lazyframe-select"]], "polars.LazyFrame.shift": [[689, "polars-lazyframe-shift"]], "polars.LazyFrame.take_every": [[699, "polars-lazyframe-take-every"]], "polars.LazyFrame.mean": [[674, "polars-lazyframe-mean"]], "polars.LazyFrame.width": [[705, "polars-lazyframe-width"]], "polars.LazyFrame.with_row_count": [[708, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.write_json": [[709, "polars-lazyframe-write-json"]], "polars.LazyFrame.groupby": [[661, "polars-lazyframe-groupby"]], "polars.LazyFrame.unique": [[701, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[724, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[721, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.Series.dt.date": [[789, "polars-series-dt-date"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[722, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.bin.decode": [[755, "polars-series-bin-decode"]], "polars.Series.dt.datetime": [[790, "polars-series-dt-datetime"]], "polars.Series.arr.max": [[750, "polars-series-arr-max"]], "polars.Series.arg_sort": [[747, "polars-series-arg-sort"]], "polars.Series.all": [[735, "polars-series-all"]], "polars.Series.arg_unique": [[749, "polars-series-arg-unique"]], "polars.Series.cat.set_ordering": [[763, "polars-series-cat-set-ordering"]], "polars.Series.cummin": [[774, "polars-series-cummin"]], "polars.Series.arccos": [[739, "polars-series-arccos"]], "polars.Series.arctanh": [[744, "polars-series-arctanh"]], "polars.Series.bin.encode": [[756, "polars-series-bin-encode"]], "polars.Series.chunk_lengths": [[765, "polars-series-chunk-lengths"]], "polars.Series.cosh": [[772, "polars-series-cosh"]], "polars.Series.dt.day": [[791, "polars-series-dt-day"]], "Read/write logical plan": [[729, "read-write-logical-plan"]], "polars.Series.ceil": [[764, "polars-series-ceil"]], "polars.Series.bottom_k": [[759, "polars-series-bottom-k"]], "polars.Series.dt.cast_time_unit": [[786, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.combine": [[787, "polars-series-dt-combine"]], "polars.Series.arcsin": [[741, "polars-series-arcsin"]], "polars.Series.arg_true": [[748, "polars-series-arg-true"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[723, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.cut": [[778, "polars-series-cut"]], "polars.Series.abs": [[733, "polars-series-abs"]], "polars.Series.describe": [[779, "polars-series-describe"]], "polars.Series.arg_min": [[746, "polars-series-arg-min"]], "LazyFrame": [[728, "lazyframe"]], "polars.Series.clip_min": [[769, "polars-series-clip-min"]], "polars.Series.arcsinh": [[742, "polars-series-arcsinh"]], "polars.Series.dt.base_utc_offset": [[785, "polars-series-dt-base-utc-offset"]], "polars.Series.cat.get_categories": [[762, "polars-series-cat-get-categories"]], "polars.Series.bin.ends_with": [[757, "polars-series-bin-ends-with"]], "polars.Series.cumprod": [[775, "polars-series-cumprod"]], "polars.Series.apply": [[738, "polars-series-apply"]], "polars.Series.drop_nulls": [[783, "polars-series-drop-nulls"]], "Selectors": [[731, "selectors"]], "Importing": [[731, "importing"]], "Set operations": [[731, "set-operations"]], "Functions": [[731, "functions"], [629, "functions"], [640, "functions"]], "polars.Series.arctan": [[743, "polars-series-arctan"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[720, "polars-lazyframe-groupby-lazygroupby-min"]], "GroupBy": [[727, "groupby"], [250, "groupby"]], "polars.Series.diff": [[780, "polars-series-diff"]], "polars.Series.arr.min": [[751, "polars-series-arr-min"]], "polars.Series.cat": [[761, "polars-series-cat"]], "polars.Series.clip": [[767, "polars-series-clip"]], "polars.Series.cummax": [[773, "polars-series-cummax"]], "polars.Series.cumulative_eval": [[777, "polars-series-cumulative-eval"]], "polars.Series.cos": [[771, "polars-series-cos"]], "polars.Series.arccosh": [[740, "polars-series-arccosh"]], "polars.Series.clone": [[770, "polars-series-clone"]], "polars.Series.dot": [[781, "polars-series-dot"]], "polars.Series.alias": [[734, "polars-series-alias"]], "polars.Series.arg_max": [[745, "polars-series-arg-max"]], "polars.Series.clip_max": [[768, "polars-series-clip-max"]], "polars.Series.drop_nans": [[782, "polars-series-drop-nans"]], "polars.Series.arr.sum": [[752, "polars-series-arr-sum"]], "polars.Series.any": [[736, "polars-series-any"]], "polars.Series.append": [[737, "polars-series-append"]], "polars.Series.cast": [[760, "polars-series-cast"]], "polars.Series.clear": [[766, "polars-series-clear"]], "polars.Series.cumsum": [[776, "polars-series-cumsum"]], "polars.Series.dt": [[784, "polars-series-dt"]], "polars.Series.dt.convert_time_zone": [[788, "polars-series-dt-convert-time-zone"]], "polars.Series.arr.unique": [[753, "polars-series-arr-unique"]], "polars.Series.bin.starts_with": [[758, "polars-series-bin-starts-with"]], "polars.Series.bin.contains": [[754, "polars-series-bin-contains"]], "polars.Expr.str.split": [[525, "polars-expr-str-split"]], "polars.Expr.str.splitn": [[527, "polars-expr-str-splitn"]], "polars.Expr.str.strptime": [[530, "polars-expr-str-strptime"]], "polars.Expr.tanh": [[548, "polars-expr-tanh"]], "polars.Expr.upper_bound": [[554, "polars-expr-upper-bound"]], "polars.coalesce": [[569, "polars-coalesce"]], "polars.Expr.str.replace": [[520, "polars-expr-str-replace"]], "polars.any_horizontal": [[562, "polars-any-horizontal"]], "polars.concat_list": [[571, "polars-concat-list"]], "polars.arange": [[565, "polars-arange"]], "polars.count": [[574, "polars-count"]], "polars.Expr.var": [[556, "polars-expr-var"]], "polars.Expr.str.to_lowercase": [[534, "polars-expr-str-to-lowercase"]], "polars.Expr.struct.field": [[539, "polars-expr-struct-field"]], "polars.Expr.str.rjust": [[522, "polars-expr-str-rjust"]], "polars.any": [[561, "polars-any"]], "polars.Expr.sub": [[541, "polars-expr-sub"]], "polars.Expr.to_physical": [[549, "polars-expr-to-physical"]], "polars.Expr.str.ends_with": [[509, "polars-expr-str-ends-with"]], "polars.Expr.unique": [[552, "polars-expr-unique"]], "polars.Expr.str.replace_all": [[521, "polars-expr-str-replace-all"]], "polars.Expr.top_k": [[550, "polars-expr-top-k"]], "polars.concat_str": [[572, "polars-concat-str"]], "polars.Expr.str.starts_with": [[528, "polars-expr-str-starts-with"]], "polars.Expr.value_counts": [[555, "polars-expr-value-counts"]], "polars.Expr.struct.rename_fields": [[540, "polars-expr-struct-rename-fields"]], "polars.Expr.str.to_date": [[531, "polars-expr-str-to-date"]], "polars.Expr.str.encode": [[508, "polars-expr-str-encode"]], "polars.Expr.str.json_extract": [[513, "polars-expr-str-json-extract"]], "polars.all_horizontal": [[560, "polars-all-horizontal"]], "polars.arg_where": [[567, "polars-arg-where"]], "polars.Expr.str.extract_all": [[512, "polars-expr-str-extract-all"]], "polars.Expr.tan": [[547, "polars-expr-tan"]], "polars.approx_unique": [[564, "polars-approx-unique"]], "polars.Expr.str.explode": [[510, "polars-expr-str-explode"]], "polars.Expr.str.lengths": [[515, "polars-expr-str-lengths"]], "polars.Expr.truediv": [[551, "polars-expr-truediv"]], "polars.Expr.str.extract": [[511, "polars-expr-str-extract"]], "polars.Expr.str.to_time": [[535, "polars-expr-str-to-time"]], "polars.Expr.str.strip": [[529, "polars-expr-str-strip"]], "polars.Expr.take_every": [[546, "polars-expr-take-every"]], "polars.Expr.str.count_match": [[506, "polars-expr-str-count-match"]], "polars.avg": [[568, "polars-avg"]], "polars.Expr.str.slice": [[524, "polars-expr-str-slice"]], "polars.Expr.suffix": [[542, "polars-expr-suffix"]], "polars.Expr.str.to_titlecase": [[536, "polars-expr-str-to-titlecase"]], "polars.Expr.sum": [[543, "polars-expr-sum"]], "polars.all": [[559, "polars-all"]], "polars.Expr.str.contains": [[505, "polars-expr-str-contains"]], "polars.Expr.str.split_exact": [[526, "polars-expr-str-split-exact"]], "polars.Expr.str.to_uppercase": [[537, "polars-expr-str-to-uppercase"]], "polars.Expr.unique_counts": [[553, "polars-expr-unique-counts"]], "polars.Expr.tail": [[544, "polars-expr-tail"]], "polars.Expr.str.decode": [[507, "polars-expr-str-decode"]], "polars.Expr.str.lstrip": [[517, "polars-expr-str-lstrip"]], "polars.Expr.str.to_decimal": [[533, "polars-expr-str-to-decimal"]], "polars.Expr.str.concat": [[504, "polars-expr-str-concat"]], "polars.Expr.str.to_datetime": [[532, "polars-expr-str-to-datetime"]], "polars.Expr.str.zfill": [[538, "polars-expr-str-zfill"]], "polars.Expr.where": [[557, "polars-expr-where"]], "polars.apply": [[563, "polars-apply"]], "polars.Expr.str.parse_int": [[519, "polars-expr-str-parse-int"]], "polars.Expr.str.n_chars": [[518, "polars-expr-str-n-chars"]], "polars.Expr.str.json_path_match": [[514, "polars-expr-str-json-path-match"]], "polars.Expr.xor": [[558, "polars-expr-xor"]], "polars.arg_sort_by": [[566, "polars-arg-sort-by"]], "polars.corr": [[573, "polars-corr"]], "polars.cov": [[575, "polars-cov"]], "polars.col": [[570, "polars-col"]], "polars.Expr.str.rstrip": [[523, "polars-expr-str-rstrip"]], "polars.Expr.take": [[545, "polars-expr-take"]], "polars.Expr.str.ljust": [[516, "polars-expr-str-ljust"]], "polars.Expr.median": [[438, "polars-expr-median"]], "polars.Expr.meta.tree_format": [[446, "polars-expr-meta-tree-format"]], "polars.Expr.meta.has_multiple_outputs": [[440, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.radians": [[468, "polars-expr-radians"]], "polars.Expr.set_sorted": [[490, "polars-expr-set-sorted"]], "polars.Expr.map_alias": [[434, "polars-expr-map-alias"]], "polars.Expr.rolling_mean": [[479, "polars-expr-rolling-mean"]], "polars.Expr.sqrt": [[502, "polars-expr-sqrt"]], "polars.Expr.reverse": [[474, "polars-expr-reverse"]], "polars.Expr.rle": [[475, "polars-expr-rle"]], "polars.Expr.sinh": [[497, "polars-expr-sinh"]], "polars.Expr.repeat_by": [[472, "polars-expr-repeat-by"]], "polars.Expr.sign": [[495, "polars-expr-sign"]], "polars.Expr.or_": [[459, "polars-expr-or"]], "polars.Expr.over": [[460, "polars-expr-over"]], "polars.Expr.shuffle": [[494, "polars-expr-shuffle"]], "polars.Expr.nan_max": [[454, "polars-expr-nan-max"]], "polars.Expr.rolling_apply": [[477, "polars-expr-rolling-apply"]], "polars.Expr.rolling_quantile": [[482, "polars-expr-rolling-quantile"]], "polars.Expr.shift_and_fill": [[492, "polars-expr-shift-and-fill"]], "polars.Expr.min": [[449, "polars-expr-min"]], "polars.Expr.rolling_max": [[478, "polars-expr-rolling-max"]], "polars.Expr.meta.is_regex_projection": [[441, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.ne": [[442, "polars-expr-meta-ne"]], "polars.Expr.pow": [[463, "polars-expr-pow"]], "polars.Expr.null_count": [[458, "polars-expr-null-count"]], "polars.Expr.shrink_dtype": [[493, "polars-expr-shrink-dtype"]], "polars.Expr.round": [[487, "polars-expr-round"]], "polars.Expr.map": [[433, "polars-expr-map"]], "polars.Expr.rle_id": [[476, "polars-expr-rle-id"]], "polars.Expr.sin": [[496, "polars-expr-sin"]], "polars.Expr.skew": [[498, "polars-expr-skew"]], "polars.Expr.rolling_sum": [[485, "polars-expr-rolling-sum"]], "polars.Expr.search_sorted": [[489, "polars-expr-search-sorted"]], "polars.Expr.mod": [[450, "polars-expr-mod"]], "polars.Expr.mode": [[451, "polars-expr-mode"]], "polars.Expr.quantile": [[467, "polars-expr-quantile"]], "polars.Expr.pipe": [[462, "polars-expr-pipe"]], "polars.Expr.prefix": [[464, "polars-expr-prefix"]], "polars.Expr.map_dict": [[435, "polars-expr-map-dict"]], "polars.Expr.product": [[465, "polars-expr-product"]], "polars.Expr.sort": [[500, "polars-expr-sort"]], "polars.Expr.nan_min": [[455, "polars-expr-nan-min"]], "polars.Expr.sort_by": [[501, "polars-expr-sort-by"]], "polars.Expr.rolling_min": [[481, "polars-expr-rolling-min"]], "polars.Expr.pct_change": [[461, "polars-expr-pct-change"]], "polars.Expr.rechunk": [[470, "polars-expr-rechunk"]], "polars.Expr.std": [[503, "polars-expr-std"]], "polars.Expr.rolling_var": [[486, "polars-expr-rolling-var"]], "polars.Expr.reshape": [[473, "polars-expr-reshape"]], "polars.Expr.rolling_median": [[480, "polars-expr-rolling-median"]], "polars.Expr.max": [[436, "polars-expr-max"]], "polars.Expr.meta.eq": [[439, "polars-expr-meta-eq"]], "polars.Expr.ne_missing": [[457, "polars-expr-ne-missing"]], "polars.Expr.meta.write_json": [[448, "polars-expr-meta-write-json"]], "polars.Expr.qcut": [[466, "polars-expr-qcut"]], "polars.Expr.rolling_std": [[484, "polars-expr-rolling-std"]], "polars.Expr.slice": [[499, "polars-expr-slice"]], "polars.Expr.shift": [[491, "polars-expr-shift"]], "polars.Expr.meta.root_names": [[445, "polars-expr-meta-root-names"]], "polars.Expr.reinterpret": [[471, "polars-expr-reinterpret"]], "polars.Expr.ne": [[456, "polars-expr-ne"]], "polars.Expr.rolling_skew": [[483, "polars-expr-rolling-skew"]], "polars.Expr.sample": [[488, "polars-expr-sample"]], "polars.Expr.meta.undo_aliases": [[447, "polars-expr-meta-undo-aliases"]], "polars.Expr.rank": [[469, "polars-expr-rank"]], "polars.Expr.lt": [[432, "polars-expr-lt"]], "polars.Expr.meta.pop": [[444, "polars-expr-meta-pop"]], "polars.Expr.mean": [[437, "polars-expr-mean"]], "polars.Expr.n_unique": [[453, "polars-expr-n-unique"]], "polars.Expr.mul": [[452, "polars-expr-mul"]], "polars.Expr.meta.output_name": [[443, "polars-expr-meta-output-name"]], "polars.Expr.is_not": [[386, "polars-expr-is-not"]], "polars.Expr.limit": [[396, "polars-expr-limit"]], "polars.Expr.len": [[395, "polars-expr-len"]], "polars.Expr.list.join": [[412, "polars-expr-list-join"]], "polars.Expr.list.slice": [[420, "polars-expr-list-slice"]], "polars.Expr.last": [[393, "polars-expr-last"]], "polars.Expr.implode": [[376, "polars-expr-implode"]], "polars.Expr.list.to_struct": [[425, "polars-expr-list-to-struct"]], "polars.Expr.is_duplicated": [[380, "polars-expr-is-duplicated"]], "polars.Expr.is_in": [[383, "polars-expr-is-in"]], "polars.Expr.inspect": [[377, "polars-expr-inspect"]], "polars.Expr.is_null": [[389, "polars-expr-is-null"]], "polars.Expr.is_unique": [[390, "polars-expr-is-unique"]], "polars.Expr.from_json": [[371, "polars-expr-from-json"]], "polars.Expr.list.diff": [[404, "polars-expr-list-diff"]], "polars.Expr.list.reverse": [[418, "polars-expr-list-reverse"]], "polars.Expr.list.arg_min": [[400, "polars-expr-list-arg-min"]], "polars.Expr.list.all": [[397, "polars-expr-list-all"]], "polars.Expr.list.arg_max": [[399, "polars-expr-list-arg-max"]], "polars.Expr.is_not_null": [[388, "polars-expr-is-not-null"]], "polars.Expr.extend_constant": [[362, "polars-expr-extend-constant"]], "polars.Expr.list.explode": [[407, "polars-expr-list-explode"]], "polars.Expr.floordiv": [[369, "polars-expr-floordiv"]], "polars.Expr.forward_fill": [[370, "polars-expr-forward-fill"]], "polars.Expr.is_infinite": [[384, "polars-expr-is-infinite"]], "polars.Expr.fill_null": [[364, "polars-expr-fill-null"]], "polars.Expr.list.any": [[398, "polars-expr-list-any"]], "polars.Expr.is_between": [[379, "polars-expr-is-between"]], "polars.Expr.list.difference": [[405, "polars-expr-list-difference"]], "polars.Expr.is_first": [[382, "polars-expr-is-first"]], "polars.Expr.filter": [[365, "polars-expr-filter"]], "polars.Expr.ge": [[372, "polars-expr-ge"]], "polars.Expr.list.first": [[408, "polars-expr-list-first"]], "polars.Expr.first": [[366, "polars-expr-first"]], "polars.Expr.list.contains": [[402, "polars-expr-list-contains"]], "polars.Expr.list.mean": [[416, "polars-expr-list-mean"]], "polars.Expr.list.head": [[410, "polars-expr-list-head"]], "polars.Expr.list.min": [[417, "polars-expr-list-min"]], "polars.Expr.list.get": [[409, "polars-expr-list-get"]], "polars.Expr.list.intersection": [[411, "polars-expr-list-intersection"]], "polars.Expr.list.eval": [[406, "polars-expr-list-eval"]], "polars.Expr.explode": [[361, "polars-expr-explode"]], "polars.Expr.head": [[375, "polars-expr-head"]], "polars.Expr.log": [[428, "polars-expr-log"]], "polars.Expr.list.tail": [[423, "polars-expr-list-tail"]], "polars.Expr.is_finite": [[381, "polars-expr-is-finite"]], "polars.Expr.flatten": [[367, "polars-expr-flatten"]], "polars.Expr.log1p": [[430, "polars-expr-log1p"]], "polars.Expr.is_nan": [[385, "polars-expr-is-nan"]], "polars.Expr.is_not_nan": [[387, "polars-expr-is-not-nan"]], "polars.Expr.list.count_match": [[403, "polars-expr-list-count-match"]], "polars.Expr.list.shift": [[419, "polars-expr-list-shift"]], "polars.Expr.log10": [[429, "polars-expr-log10"]], "polars.Expr.list.last": [[413, "polars-expr-list-last"]], "polars.Expr.exp": [[360, "polars-expr-exp"]], "polars.Expr.list.lengths": [[414, "polars-expr-list-lengths"]], "polars.Expr.list.sort": [[421, "polars-expr-list-sort"]], "polars.Expr.lower_bound": [[431, "polars-expr-lower-bound"]], "polars.Expr.keep_name": [[391, "polars-expr-keep-name"]], "polars.Expr.list.union": [[426, "polars-expr-list-union"]], "polars.Expr.kurtosis": [[392, "polars-expr-kurtosis"]], "polars.Expr.list.sum": [[422, "polars-expr-list-sum"]], "polars.Expr.list.max": [[415, "polars-expr-list-max"]], "polars.Expr.floor": [[368, "polars-expr-floor"]], "polars.Expr.interpolate": [[378, "polars-expr-interpolate"]], "polars.Expr.list.concat": [[401, "polars-expr-list-concat"]], "polars.Expr.le": [[394, "polars-expr-le"]], "polars.Expr.fill_nan": [[363, "polars-expr-fill-nan"]], "polars.Expr.hash": [[374, "polars-expr-hash"]], "polars.Expr.list.take": [[424, "polars-expr-list-take"]], "polars.Expr.list.unique": [[427, "polars-expr-list-unique"]], "polars.Expr.gt": [[373, "polars-expr-gt"]], "polars.Expr.dt.datetime": [[317, "polars-expr-dt-datetime"]], "polars.Expr.dt.millisecond": [[328, "polars-expr-dt-millisecond"]], "polars.Expr.diff": [[308, "polars-expr-diff"]], "polars.Expr.entropy": [[353, "polars-expr-entropy"]], "polars.Expr.dt.microseconds": [[327, "polars-expr-dt-microseconds"]], "polars.Expr.dt.month_end": [[333, "polars-expr-dt-month-end"]], "polars.Expr.cumulative_eval": [[305, "polars-expr-cumulative-eval"]], "polars.Expr.dt.second": [[342, "polars-expr-dt-second"]], "polars.Expr.dt.is_leap_year": [[324, "polars-expr-dt-is-leap-year"]], "polars.Expr.dot": [[309, "polars-expr-dot"]], "polars.Expr.dt.dst_offset": [[320, "polars-expr-dt-dst-offset"]], "polars.Expr.cumcount": [[300, "polars-expr-cumcount"]], "polars.Expr.cast": [[290, "polars-expr-cast"]], "polars.Expr.drop_nulls": [[311, "polars-expr-drop-nulls"]], "polars.Expr.eq": [[354, "polars-expr-eq"]], "polars.Expr.cosh": [[298, "polars-expr-cosh"]], "polars.Expr.dt.hour": [[322, "polars-expr-dt-hour"]], "polars.Expr.dt.round": [[341, "polars-expr-dt-round"]], "polars.Expr.dt.strftime": [[344, "polars-expr-dt-strftime"]], "polars.Expr.cummin": [[302, "polars-expr-cummin"]], "polars.Expr.dt.iso_year": [[325, "polars-expr-dt-iso-year"]], "polars.Expr.dt.year": [[352, "polars-expr-dt-year"]], "polars.Expr.cache": [[289, "polars-expr-cache"]], "polars.Expr.cumsum": [[304, "polars-expr-cumsum"]], "polars.Expr.clip_max": [[295, "polars-expr-clip-max"]], "polars.Expr.cummax": [[301, "polars-expr-cummax"]], "polars.Expr.cat.set_ordering": [[292, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.day": [[318, "polars-expr-dt-day"]], "polars.Expr.dt.seconds": [[343, "polars-expr-dt-seconds"]], "polars.Expr.dt.timestamp": [[346, "polars-expr-dt-timestamp"]], "polars.Expr.dt.ordinal_day": [[338, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.microsecond": [[326, "polars-expr-dt-microsecond"]], "polars.Expr.bottom_k": [[288, "polars-expr-bottom-k"]], "polars.Expr.cat.get_categories": [[291, "polars-expr-cat-get-categories"]], "polars.Expr.dt.base_utc_offset": [[312, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.nanosecond": [[335, "polars-expr-dt-nanosecond"]], "polars.Expr.count": [[299, "polars-expr-count"]], "polars.Expr.dt.offset_by": [[337, "polars-expr-dt-offset-by"]], "polars.Expr.dt.truncate": [[348, "polars-expr-dt-truncate"]], "polars.Expr.cos": [[297, "polars-expr-cos"]], "polars.Expr.cut": [[306, "polars-expr-cut"]], "polars.Expr.dt.combine": [[314, "polars-expr-dt-combine"]], "polars.Expr.eq_missing": [[355, "polars-expr-eq-missing"]], "polars.Expr.ewm_var": [[358, "polars-expr-ewm-var"]], "polars.Expr.cumprod": [[303, "polars-expr-cumprod"]], "polars.Expr.dt.epoch": [[321, "polars-expr-dt-epoch"]], "polars.Expr.drop_nans": [[310, "polars-expr-drop-nans"]], "polars.Expr.dt.weekday": [[350, "polars-expr-dt-weekday"]], "polars.Expr.ewm_mean": [[356, "polars-expr-ewm-mean"]], "polars.Expr.dt.with_time_unit": [[351, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.to_string": [[347, "polars-expr-dt-to-string"]], "polars.Expr.dt.quarter": [[339, "polars-expr-dt-quarter"]], "polars.Expr.exclude": [[359, "polars-expr-exclude"]], "polars.Expr.dt.milliseconds": [[329, "polars-expr-dt-milliseconds"]], "polars.Expr.clip_min": [[296, "polars-expr-clip-min"]], "polars.Expr.ewm_std": [[357, "polars-expr-ewm-std"]], "polars.Expr.dt.days": [[319, "polars-expr-dt-days"]], "polars.Expr.dt.hours": [[323, "polars-expr-dt-hours"]], "polars.Expr.dt.convert_time_zone": [[315, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.month": [[332, "polars-expr-dt-month"]], "polars.Expr.dt.date": [[316, "polars-expr-dt-date"]], "polars.Expr.dt.month_start": [[334, "polars-expr-dt-month-start"]], "polars.Expr.dt.minute": [[330, "polars-expr-dt-minute"]], "polars.Expr.dt.nanoseconds": [[336, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.replace_time_zone": [[340, "polars-expr-dt-replace-time-zone"]], "polars.Expr.clip": [[294, "polars-expr-clip"]], "polars.Expr.degrees": [[307, "polars-expr-degrees"]], "polars.Expr.dt.cast_time_unit": [[313, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.time": [[345, "polars-expr-dt-time"]], "polars.Expr.ceil": [[293, "polars-expr-ceil"]], "polars.Expr.dt.minutes": [[331, "polars-expr-dt-minutes"]], "polars.Expr.dt.week": [[349, "polars-expr-dt-week"]], "polars.repeat": [[608, "polars-repeat"]], "polars.time": [[618, "polars-time"]], "polars.cumfold": [[576, "polars-cumfold"]], "polars.head": [[591, "polars-head"]], "Input/output": [[642, "input-output"]], "CSV": [[642, "csv"]], "Feather/ IPC": [[642, "feather-ipc"]], "Parquet": [[642, "parquet"]], "Database": [[642, "database"]], "JSON": [[642, "json"]], "AVRO": [[642, "avro"]], "Excel": [[642, "excel"]], "Delta Lake": [[642, "delta-lake"]], "Datasets": [[642, "datasets"]], "BatchedCsvReader": [[642, "batchedcsvreader"]], "polars.median": [[601, "polars-median"]], "polars.fold": [[587, "polars-fold"]], "polars.datetime": [[582, "polars-datetime"]], "polars.mean": [[600, "polars-mean"]], "polars.n_unique": [[604, "polars-n-unique"]], "polars.select": [[611, "polars-select"]], "polars.zeros": [[622, "polars-zeros"]], "polars.groups": [[590, "polars-groups"]], "polars.cumsum_horizontal": [[579, "polars-cumsum-horizontal"]], "polars.LazyFrame.clone": [[647, "polars-lazyframe-clone"]], "Window": [[639, "window"]], "polars.when": [[621, "polars-when"]], "polars.rolling_corr": [[609, "polars-rolling-corr"]], "polars.min_horizontal": [[603, "polars-min-horizontal"]], "polars.reduce": [[607, "polars-reduce"]], "API reference": [[641, "api-reference"]], "polars.lit": [[596, "polars-lit"]], "polars.max_horizontal": [[599, "polars-max-horizontal"]], "polars.sum_horizontal": [[616, "polars-sum-horizontal"]], "polars.int_ranges": [[594, "polars-int-ranges"]], "Operators": [[635, "operators"]], "Conjunction": [[635, "conjunction"]], "Comparison": [[635, "comparison"]], "Numeric": [[635, "numeric"], [254, "numeric"]], "polars.LazyFrame.bottom_k": [[644, "polars-lazyframe-bottom-k"]], "polars.duration": [[583, "polars-duration"]], "polars.quantile": [[606, "polars-quantile"]], "Columns / names": [[627, "columns-names"]], "polars.tail": [[617, "polars-tail"]], "polars.cumreduce": [[577, "polars-cumreduce"]], "polars.last": [[595, "polars-last"]], "polars.sql_expr": [[612, "polars-sql-expr"]], "polars.LazyFrame.cache": [[645, "polars-lazyframe-cache"]], "polars.first": [[586, "polars-first"]], "polars.date": [[580, "polars-date"]], "polars.max": [[598, "polars-max"]], "polars.implode": [[592, "polars-implode"]], "polars.time_range": [[619, "polars-time-range"]], "polars.var": [[620, "polars-var"]], "polars.ones": [[605, "polars-ones"]], "polars.map": [[597, "polars-map"]], "polars.LazyFrame.clear": [[646, "polars-lazyframe-clear"]], "polars.sum": [[615, "polars-sum"]], "polars.rolling_cov": [[610, "polars-rolling-cov"]], "polars.element": [[584, "polars-element"]], "polars.exclude": [[585, "polars-exclude"]], "polars.int_range": [[593, "polars-int-range"]], "polars.cumsum": [[578, "polars-cumsum"]], "Expressions": [[630, "expressions"]], "Meta": [[632, "meta"]], "polars.std": [[613, "polars-std"]], "polars.format": [[588, "polars-format"]], "polars.min": [[602, "polars-min"]], "polars.struct": [[614, "polars-struct"]], "Conversion": [[640, "conversion"]], "Parallelization": [[640, "parallelization"]], "StringCache": [[640, "stringcache"]], "polars.date_range": [[581, "polars-date-range"]], "polars.from_epoch": [[589, "polars-from-epoch"]], "polars.DataFrame.glimpse": [[153, "polars-dataframe-glimpse"]], "polars.DataFrame.fill_null": [[146, "polars-dataframe-fill-null"]], "polars.DataFrame.hstack": [[160, "polars-dataframe-hstack"]], "polars.DataFrame.lazy": [[171, "polars-dataframe-lazy"]], "polars.DataFrame.filter": [[147, "polars-dataframe-filter"]], "polars.DataFrame.get_columns": [[152, "polars-dataframe-get-columns"]], "polars.DataFrame.rechunk": [[187, "polars-dataframe-rechunk"]], "polars.DataFrame.to_pandas": [[215, "polars-dataframe-to-pandas"]], "polars.DataFrame.is_empty": [[164, "polars-dataframe-is-empty"]], "polars.DataFrame.is_unique": [[165, "polars-dataframe-is-unique"]], "polars.DataFrame.product": [[185, "polars-dataframe-product"]], "polars.DataFrame.min": [[178, "polars-dataframe-min"]], "polars.DataFrame.n_unique": [[180, "polars-dataframe-n-unique"]], "polars.DataFrame.rows": [[193, "polars-dataframe-rows"]], "polars.DataFrame.to_dicts": [[211, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dict": [[210, "polars-dataframe-to-dict"]], "polars.DataFrame.row": [[192, "polars-dataframe-row"]], "polars.DataFrame.replace": [[189, "polars-dataframe-replace"]], "polars.DataFrame.median": [[175, "polars-dataframe-median"]], "polars.DataFrame.interpolate": [[162, "polars-dataframe-interpolate"]], "polars.DataFrame.hash_rows": [[157, "polars-dataframe-hash-rows"]], "polars.DataFrame.melt": [[176, "polars-dataframe-melt"]], "polars.DataFrame.sum": [[206, "polars-dataframe-sum"]], "polars.DataFrame.replace_at_idx": [[190, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.sort": [[204, "polars-dataframe-sort"]], "polars.DataFrame.reverse": [[191, "polars-dataframe-reverse"]], "polars.DataFrame.pivot": [[184, "polars-dataframe-pivot"]], "polars.DataFrame.fold": [[149, "polars-dataframe-fold"]], "polars.DataFrame.pipe": [[183, "polars-dataframe-pipe"]], "polars.DataFrame.groupby": [[154, "polars-dataframe-groupby"]], "polars.DataFrame.item": [[166, "polars-dataframe-item"]], "polars.DataFrame.groupby_rolling": [[156, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.slice": [[203, "polars-dataframe-slice"]], "polars.DataFrame.to_dummies": [[212, "polars-dataframe-to-dummies"]], "polars.DataFrame.frame_equal": [[150, "polars-dataframe-frame-equal"]], "polars.DataFrame.fill_nan": [[145, "polars-dataframe-fill-nan"]], "polars.DataFrame.insert_at_idx": [[161, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.rows_by_key": [[194, "polars-dataframe-rows-by-key"]], "polars.DataFrame.is_duplicated": [[163, "polars-dataframe-is-duplicated"]], "polars.DataFrame.max": [[173, "polars-dataframe-max"]], "polars.DataFrame.height": [[159, "polars-dataframe-height"]], "polars.DataFrame.shift": [[200, "polars-dataframe-shift"]], "polars.DataFrame.tail": [[207, "polars-dataframe-tail"]], "polars.DataFrame.mean": [[174, "polars-dataframe-mean"]], "polars.DataFrame.find_idx_by_name": [[148, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.select": [[197, "polars-dataframe-select"]], "polars.DataFrame.rename": [[188, "polars-dataframe-rename"]], "polars.DataFrame.to_arrow": [[209, "polars-dataframe-to-arrow"]], "polars.DataFrame.partition_by": [[182, "polars-dataframe-partition-by"]], "polars.DataFrame.n_chunks": [[179, "polars-dataframe-n-chunks"]], "polars.DataFrame.extend": [[144, "polars-dataframe-extend"]], "polars.DataFrame.to_numpy": [[214, "polars-dataframe-to-numpy"]], "polars.DataFrame.head": [[158, "polars-dataframe-head"]], "polars.DataFrame.limit": [[172, "polars-dataframe-limit"]], "polars.DataFrame.shift_and_fill": [[201, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.shape": [[199, "polars-dataframe-shape"]], "polars.DataFrame.join_asof": [[170, "polars-dataframe-join-asof"]], "polars.DataFrame.get_column": [[151, "polars-dataframe-get-column"]], "polars.DataFrame.merge_sorted": [[177, "polars-dataframe-merge-sorted"]], "polars.DataFrame.sample": [[195, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[196, "polars-dataframe-schema"]], "polars.DataFrame.set_sorted": [[198, "polars-dataframe-set-sorted"]], "polars.DataFrame.groupby_dynamic": [[155, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.null_count": [[181, "polars-dataframe-null-count"]], "polars.DataFrame.std": [[205, "polars-dataframe-std"]], "polars.DataFrame.shrink_to_fit": [[202, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.iter_slices": [[168, "polars-dataframe-iter-slices"]], "polars.DataFrame.to_init_repr": [[213, "polars-dataframe-to-init-repr"]], "polars.DataFrame.iter_rows": [[167, "polars-dataframe-iter-rows"]], "polars.DataFrame.join": [[169, "polars-dataframe-join"]], "polars.DataFrame.quantile": [[186, "polars-dataframe-quantile"]], "polars.DataFrame.take_every": [[208, "polars-dataframe-take-every"]], "polars.dataframe.groupby.GroupBy.n_unique": [[242, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.count": [[234, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.and_": [[262, "polars-expr-and"]], "polars.DataFrame.vstack": [[226, "polars-dataframe-vstack"]], "polars.DataFrame.to_series": [[216, "polars-dataframe-to-series"]], "polars.Expr.arcsinh": [[270, "polars-expr-arcsinh"]], "polars.Expr.add": [[258, "polars-expr-add"]], "polars.Expr.alias": [[260, "polars-expr-alias"]], "polars.Expr.arctanh": [[272, "polars-expr-arctanh"]], "polars.dataframe.groupby.GroupBy.sum": [[244, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.bin.contains": [[283, "polars-expr-bin-contains"]], "polars.Expr.all": [[261, "polars-expr-all"]], "polars.DataFrame.unique": [[220, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.agg": [[231, "polars-dataframe-groupby-groupby-agg"]], "polars.Expr.arr.max": [[278, "polars-expr-arr-max"]], "polars.Expr.arr.min": [[279, "polars-expr-arr-min"]], "polars.Expr.bin.starts_with": [[287, "polars-expr-bin-starts-with"]], "polars.DataFrame.to_struct": [[217, "polars-dataframe-to-struct"]], "polars.DataFrame.with_columns": [[228, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.first": [[235, "polars-dataframe-groupby-groupby-first"]], "polars.dataframe.groupby.GroupBy.median": [[240, "polars-dataframe-groupby-groupby-median"]], "polars.dataframe.groupby.GroupBy.head": [[236, "polars-dataframe-groupby-groupby-head"]], "DataFrame": [[251, "dataframe"]], "polars.Expr.backward_fill": [[282, "polars-expr-backward-fill"]], "polars.Expr.bin.encode": [[285, "polars-expr-bin-encode"]], "polars.Expr.arccosh": [[268, "polars-expr-arccosh"]], "polars.dataframe.groupby.GroupBy.last": [[237, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.arctan": [[271, "polars-expr-arctan"]], "polars.Expr.approx_unique": [[266, "polars-expr-approx-unique"]], "polars.dataframe.groupby.GroupBy.mean": [[239, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.top_k": [[218, "polars-dataframe-top-k"]], "polars.Expr.bin.decode": [[284, "polars-expr-bin-decode"]], "polars.DataFrame.var": [[225, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.min": [[241, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.transpose": [[219, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.max": [[238, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.agg_groups": [[259, "polars-expr-agg-groups"]], "polars.Expr.arg_sort": [[275, "polars-expr-arg-sort"]], "polars.Expr.bin.ends_with": [[286, "polars-expr-bin-ends-with"]], "polars.DataFrame.unnest": [[221, "polars-dataframe-unnest"]], "polars.Expr.any": [[263, "polars-expr-any"]], "polars.DataFrame.unstack": [[222, "polars-dataframe-unstack"]], "polars.Expr.abs": [[257, "polars-expr-abs"]], "polars.Expr.arcsin": [[269, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.tail": [[245, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.apply": [[265, "polars-expr-apply"]], "polars.dataframe.groupby.GroupBy.all": [[232, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.apply": [[233, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.arr.sum": [[280, "polars-expr-arr-sum"]], "polars.Expr.arr.unique": [[281, "polars-expr-arr-unique"]], "polars.Expr.append": [[264, "polars-expr-append"]], "polars.Expr.arg_unique": [[277, "polars-expr-arg-unique"]], "polars.dataframe.groupby.GroupBy.quantile": [[243, "polars-dataframe-groupby-groupby-quantile"]], "Data types": [[254, "data-types"]], "Nested": [[254, "nested"]], "Other": [[254, "other"]], "polars.DataFrame.with_row_count": [[229, "polars-dataframe-with-row-count"]], "polars.DataFrame.update": [[223, "polars-dataframe-update"]], "polars.Expr.arg_max": [[273, "polars-expr-arg-max"]], "polars.DataFrame.width": [[227, "polars-dataframe-width"]], "polars.DataFrame.upsample": [[224, "polars-dataframe-upsample"]], "polars.Expr.arg_true": [[276, "polars-expr-arg-true"]], "polars.Expr.arg_min": [[274, "polars-expr-arg-min"]], "Exceptions": [[255, "exceptions"]], "polars.dataframe.groupby.GroupBy.__iter__": [[230, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arccos": [[267, "polars-expr-arccos"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[70, "polars.build_info"]], "collect_all() (in module polars)": [[71, "polars.collect_all"]], "concat() (in module polars)": [[72, "polars.concat"]], "enable_string_cache() (in module polars)": [[73, "polars.enable_string_cache"]], "arrowerror": [[74, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[75, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[76, "polars.exceptions.ComputeError"]], "duplicateerror": [[77, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[78, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[79, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[80, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[81, "polars.exceptions.PolarsPanicError"]], "rowserror": [[82, "polars.exceptions.RowsError"]], "schemaerror": [[83, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[84, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[85, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[86, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[87, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[88, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[89, "polars.from_dataframe"]], "from_dict() (in module polars)": [[90, "polars.from_dict"]], "from_dicts() (in module polars)": [[91, "polars.from_dicts"]], "from_numpy() (in module polars)": [[92, "polars.from_numpy"]], "from_pandas() (in module polars)": [[93, "polars.from_pandas"]], "from_records() (in module polars)": [[94, "polars.from_records"]], "from_repr() (in module polars)": [[95, "polars.from_repr"]], "get_index_type() (in module polars)": [[96, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[97, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[126, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[127, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[130, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[131, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[132, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[133, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[134, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[135, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[136, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[137, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[138, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[139, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[140, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[141, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[142, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[143, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[144, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[145, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[146, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[147, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[148, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[149, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[150, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[151, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[152, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[153, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[154, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[155, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[157, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[158, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[159, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[160, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[161, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[162, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[163, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[164, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[165, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[166, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[167, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[168, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[169, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[170, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[171, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[172, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[173, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[174, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[175, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[176, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[177, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[178, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[179, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[181, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[182, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[183, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[184, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[185, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[186, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[187, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[188, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[189, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[191, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[192, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[193, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[194, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[195, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[196, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[197, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[198, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[199, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[200, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[201, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[202, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[203, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[204, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[205, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[206, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[207, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[208, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[209, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[210, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[211, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[212, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[213, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[214, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[215, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[216, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[217, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[218, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[219, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[220, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[221, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[222, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[223, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[224, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[225, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[226, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[227, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[228, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[229, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[257, "polars.Expr.abs"]], "add() (polars.expr method)": [[258, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[259, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[260, "polars.Expr.alias"]], "all() (polars.expr method)": [[261, "polars.Expr.all"]], "and_() (polars.expr method)": [[262, "polars.Expr.and_"]], "any() (polars.expr method)": [[263, "polars.Expr.any"]], "append() (polars.expr method)": [[264, "polars.Expr.append"]], "apply() (polars.expr method)": [[265, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[266, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[267, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[268, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[269, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[270, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[271, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[272, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[273, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[274, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[275, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[276, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[277, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[278, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[279, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[280, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[281, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[282, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[283, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[284, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[285, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[286, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[287, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[288, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[289, "polars.Expr.cache"]], "cast() (polars.expr method)": [[290, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[291, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[292, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[293, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[294, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[295, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[296, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[297, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[298, "polars.Expr.cosh"]], "count() (polars.expr method)": [[299, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[300, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[301, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[302, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[303, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[304, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[305, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[306, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[307, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[308, "polars.Expr.diff"]], "dot() (polars.expr method)": [[309, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[310, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[311, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[312, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[313, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[314, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[315, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[316, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[317, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[318, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[319, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[320, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[321, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[322, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[323, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[324, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[325, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[328, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[329, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[330, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[331, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[332, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[333, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[334, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[335, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[336, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[337, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[338, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[339, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[340, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[341, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[342, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[343, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[344, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[345, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[346, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[347, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[348, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[349, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[350, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[351, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[352, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[353, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[354, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[355, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[356, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[357, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[358, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[359, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[360, "polars.Expr.exp"]], "explode() (polars.expr method)": [[361, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[362, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[363, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[364, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[365, "polars.Expr.filter"]], "first() (polars.expr method)": [[366, "polars.Expr.first"]], "flatten() (polars.expr method)": [[367, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[368, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[369, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[370, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[371, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[372, "polars.Expr.ge"]], "gt() (polars.expr method)": [[373, "polars.Expr.gt"]], "hash() (polars.expr method)": [[374, "polars.Expr.hash"]], "head() (polars.expr method)": [[375, "polars.Expr.head"]], "implode() (polars.expr method)": [[376, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[377, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[378, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[379, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[380, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[381, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[382, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[383, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[384, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[385, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[386, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[387, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[388, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[389, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[390, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[391, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[392, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[393, "polars.Expr.last"]], "le() (polars.expr method)": [[394, "polars.Expr.le"]], "len() (polars.expr method)": [[395, "polars.Expr.len"]], "limit() (polars.expr method)": [[396, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[397, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[398, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[399, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[400, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[401, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[402, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[403, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[404, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[405, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[406, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[407, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[408, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[409, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[410, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[411, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[412, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[413, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[414, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[415, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[416, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[417, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[418, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[419, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[420, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[421, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[422, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[423, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[424, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[425, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[426, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[427, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[428, "polars.Expr.log"]], "log10() (polars.expr method)": [[429, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[430, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[431, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[432, "polars.Expr.lt"]], "map() (polars.expr method)": [[433, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[434, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[435, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[436, "polars.Expr.max"]], "mean() (polars.expr method)": [[437, "polars.Expr.mean"]], "median() (polars.expr method)": [[438, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[439, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[440, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[441, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[442, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[443, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[444, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[445, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[446, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[447, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[448, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[449, "polars.Expr.min"]], "mod() (polars.expr method)": [[450, "polars.Expr.mod"]], "mode() (polars.expr method)": [[451, "polars.Expr.mode"]], "mul() (polars.expr method)": [[452, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[453, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[454, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[455, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[456, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[457, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[458, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[459, "polars.Expr.or_"]], "over() (polars.expr method)": [[460, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[461, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[462, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[463, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[464, "polars.Expr.prefix"]], "product() (polars.expr method)": [[465, "polars.Expr.product"]], "qcut() (polars.expr method)": [[466, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[467, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[468, "polars.Expr.radians"]], "rank() (polars.expr method)": [[469, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[470, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[471, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[472, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[473, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[474, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[475, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[476, "polars.Expr.rle_id"]], "rolling_apply() (polars.expr method)": [[477, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[478, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[479, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[480, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[481, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[482, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[483, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[484, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[485, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[486, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[487, "polars.Expr.round"]], "sample() (polars.expr method)": [[488, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[489, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[490, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[491, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[492, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[493, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[494, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[495, "polars.Expr.sign"]], "sin() (polars.expr method)": [[496, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[497, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[498, "polars.Expr.skew"]], "slice() (polars.expr method)": [[499, "polars.Expr.slice"]], "sort() (polars.expr method)": [[500, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[501, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[502, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[503, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[504, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[505, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[506, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[507, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[508, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[509, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[510, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[511, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[512, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[513, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[514, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[515, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[516, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[517, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[518, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[519, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[520, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[521, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[522, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[523, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[524, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[525, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[526, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[527, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[528, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[529, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[530, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[531, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[532, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[533, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[534, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[535, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[536, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[537, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[538, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[539, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[540, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[541, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[542, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[543, "polars.Expr.sum"]], "tail() (polars.expr method)": [[544, "polars.Expr.tail"]], "take() (polars.expr method)": [[545, "polars.Expr.take"]], "take_every() (polars.expr method)": [[546, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[547, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[548, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[549, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[550, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[551, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[552, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[553, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[554, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[555, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[556, "polars.Expr.var"]], "where() (polars.expr method)": [[557, "polars.Expr.where"]], "xor() (polars.expr method)": [[558, "polars.Expr.xor"]], "all() (in module polars)": [[559, "polars.all"]], "all_horizontal() (in module polars)": [[560, "polars.all_horizontal"]], "any() (in module polars)": [[561, "polars.any"]], "any_horizontal() (in module polars)": [[562, "polars.any_horizontal"]], "apply() (in module polars)": [[563, "polars.apply"]], "approx_unique() (in module polars)": [[564, "polars.approx_unique"]], "arange() (in module polars)": [[565, "polars.arange"]], "arg_sort_by() (in module polars)": [[566, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[567, "polars.arg_where"]], "avg() (in module polars)": [[568, "polars.avg"]], "coalesce() (in module polars)": [[569, "polars.coalesce"]], "col() (in module polars)": [[570, "polars.col"]], "concat_list() (in module polars)": [[571, "polars.concat_list"]], "concat_str() (in module polars)": [[572, "polars.concat_str"]], "corr() (in module polars)": [[573, "polars.corr"]], "count() (in module polars)": [[574, "polars.count"]], "cov() (in module polars)": [[575, "polars.cov"]], "cumfold() (in module polars)": [[576, "polars.cumfold"]], "cumreduce() (in module polars)": [[577, "polars.cumreduce"]], "cumsum() (in module polars)": [[578, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[579, "polars.cumsum_horizontal"]], "date() (in module polars)": [[580, "polars.date"]], "date_range() (in module polars)": [[581, "polars.date_range"]], "datetime() (in module polars)": [[582, "polars.datetime"]], "duration() (in module polars)": [[583, "polars.duration"]], "element() (in module polars)": [[584, "polars.element"]], "exclude() (in module polars)": [[585, "polars.exclude"]], "first() (in module polars)": [[586, "polars.first"]], "fold() (in module polars)": [[587, "polars.fold"]], "format() (in module polars)": [[588, "polars.format"]], "from_epoch() (in module polars)": [[589, "polars.from_epoch"]], "groups() (in module polars)": [[590, "polars.groups"]], "head() (in module polars)": [[591, "polars.head"]], "implode() (in module polars)": [[592, "polars.implode"]], "int_range() (in module polars)": [[593, "polars.int_range"]], "int_ranges() (in module polars)": [[594, "polars.int_ranges"]], "last() (in module polars)": [[595, "polars.last"]], "lit() (in module polars)": [[596, "polars.lit"]], "map() (in module polars)": [[597, "polars.map"]], "max() (in module polars)": [[598, "polars.max"]], "max_horizontal() (in module polars)": [[599, "polars.max_horizontal"]], "mean() (in module polars)": [[600, "polars.mean"]], "median() (in module polars)": [[601, "polars.median"]], "min() (in module polars)": [[602, "polars.min"]], "min_horizontal() (in module polars)": [[603, "polars.min_horizontal"]], "n_unique() (in module polars)": [[604, "polars.n_unique"]], "ones() (in module polars)": [[605, "polars.ones"]], "quantile() (in module polars)": [[606, "polars.quantile"]], "reduce() (in module polars)": [[607, "polars.reduce"]], "repeat() (in module polars)": [[608, "polars.repeat"]], "rolling_corr() (in module polars)": [[609, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[610, "polars.rolling_cov"]], "select() (in module polars)": [[611, "polars.select"]], "sql_expr() (in module polars)": [[612, "polars.sql_expr"]], "std() (in module polars)": [[613, "polars.std"]], "struct() (in module polars)": [[614, "polars.struct"]], "sum() (in module polars)": [[615, "polars.sum"]], "sum_horizontal() (in module polars)": [[616, "polars.sum_horizontal"]], "tail() (in module polars)": [[617, "polars.tail"]], "time() (in module polars)": [[618, "polars.time"]], "time_range() (in module polars)": [[619, "polars.time_range"]], "var() (in module polars)": [[620, "polars.var"]], "when() (in module polars)": [[621, "polars.when"]], "zeros() (in module polars)": [[622, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[644, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[645, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[646, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[647, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[648, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[649, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[650, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[651, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[652, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[653, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[654, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[655, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[656, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[657, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[658, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[659, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[660, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[661, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[662, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[663, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[664, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[665, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[666, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[667, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[668, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[669, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[670, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[671, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[672, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[673, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[674, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[675, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[676, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[677, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[678, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[679, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[680, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[681, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[682, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[683, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[684, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[685, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[686, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[687, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[688, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[689, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[690, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[691, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[692, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[693, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[694, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[695, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[696, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[697, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[698, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[699, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[700, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[701, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[702, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[703, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[704, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[705, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[706, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[707, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[708, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[709, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[710, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[711, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[712, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[713, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[714, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[715, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[716, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[717, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[718, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[719, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[720, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[721, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[722, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[723, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[724, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[731, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[731, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[731, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[731, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[731, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[731, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[731, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[731, "polars.selectors.first"]], "float() (in module polars.selectors)": [[731, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[731, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[731, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[731, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[731, "polars.selectors.matches"]], "module": [[731, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[731, "polars.selectors.numeric"]], "polars.selectors": [[731, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[731, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[731, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[731, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[731, "polars.selectors.temporal"]], "abs() (polars.series method)": [[733, "polars.Series.abs"]], "alias() (polars.series method)": [[734, "polars.Series.alias"]], "all() (polars.series method)": [[735, "polars.Series.all"]], "any() (polars.series method)": [[736, "polars.Series.any"]], "append() (polars.series method)": [[737, "polars.Series.append"]], "apply() (polars.series method)": [[738, "polars.Series.apply"]], "arccos() (polars.series method)": [[739, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[740, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[741, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[742, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[743, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[744, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[745, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[746, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[747, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[748, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[749, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[750, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[751, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[752, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[753, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[754, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[755, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[756, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[757, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[758, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[759, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[760, "polars.Series.cast"]], "cat (polars.series attribute)": [[761, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[762, "polars.Series.cat.get_categories"]], "set_ordering() (polars.series.cat method)": [[763, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[764, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[765, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[766, "polars.Series.clear"]], "clip() (polars.series method)": [[767, "polars.Series.clip"]], "clip_max() (polars.series method)": [[768, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[769, "polars.Series.clip_min"]], "clone() (polars.series method)": [[770, "polars.Series.clone"]], "cos() (polars.series method)": [[771, "polars.Series.cos"]], "cosh() (polars.series method)": [[772, "polars.Series.cosh"]], "cummax() (polars.series method)": [[773, "polars.Series.cummax"]], "cummin() (polars.series method)": [[774, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[775, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[776, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[777, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[778, "polars.Series.cut"]], "describe() (polars.series method)": [[779, "polars.Series.describe"]], "diff() (polars.series method)": [[780, "polars.Series.diff"]], "dot() (polars.series method)": [[781, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[782, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[783, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[784, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[785, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[786, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[787, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[788, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[789, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[790, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[791, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[792, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[793, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[794, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[795, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[796, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[797, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[798, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[799, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[800, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[801, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[802, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[803, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[804, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[805, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[806, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[807, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[808, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[809, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[810, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[811, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[812, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[813, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[814, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[815, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[816, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[817, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[818, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[819, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[820, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[821, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[822, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[823, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[824, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[825, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[826, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[827, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[828, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[829, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[830, "polars.Series.dtype"]], "entropy() (polars.series method)": [[831, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[832, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[833, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[834, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[835, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[836, "polars.Series.exp"]], "explode() (polars.series method)": [[837, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[838, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[839, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[840, "polars.Series.fill_null"]], "filter() (polars.series method)": [[841, "polars.Series.filter"]], "flags (polars.series attribute)": [[842, "polars.Series.flags"]], "floor() (polars.series method)": [[843, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[844, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[845, "polars.Series.has_validity"]], "hash() (polars.series method)": [[846, "polars.Series.hash"]], "head() (polars.series method)": [[847, "polars.Series.head"]], "hist() (polars.series method)": [[848, "polars.Series.hist"]], "implode() (polars.series method)": [[849, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[850, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[851, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[852, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[853, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[854, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[855, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[856, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[857, "polars.Series.is_first"]], "is_float() (polars.series method)": [[858, "polars.Series.is_float"]], "is_in() (polars.series method)": [[859, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[860, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[861, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[862, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[863, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[864, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[865, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[866, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[867, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[868, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[869, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[870, "polars.Series.is_utf8"]], "item() (polars.series method)": [[871, "polars.Series.item"]], "kurtosis() (polars.series method)": [[872, "polars.Series.kurtosis"]], "len() (polars.series method)": [[873, "polars.Series.len"]], "limit() (polars.series method)": [[874, "polars.Series.limit"]], "list (polars.series attribute)": [[875, "polars.Series.list"]], "all() (polars.series.list method)": [[876, "polars.Series.list.all"]], "any() (polars.series.list method)": [[877, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[878, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[879, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[880, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[881, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[882, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[883, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[884, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[885, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[886, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[887, "polars.Series.list.first"]], "get() (polars.series.list method)": [[888, "polars.Series.list.get"]], "head() (polars.series.list method)": [[889, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[890, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[891, "polars.Series.list.join"]], "last() (polars.series.list method)": [[892, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[893, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[894, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[895, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[896, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[897, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[898, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[899, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[900, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[901, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[902, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[903, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[904, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[905, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[906, "polars.Series.list.unique"]], "log() (polars.series method)": [[907, "polars.Series.log"]], "log10() (polars.series method)": [[908, "polars.Series.log10"]], "log1p() (polars.series method)": [[909, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[910, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[911, "polars.Series.map_dict"]], "max() (polars.series method)": [[912, "polars.Series.max"]], "mean() (polars.series method)": [[913, "polars.Series.mean"]], "median() (polars.series method)": [[914, "polars.Series.median"]], "min() (polars.series method)": [[915, "polars.Series.min"]], "mode() (polars.series method)": [[916, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[917, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[918, "polars.Series.n_unique"]], "name (polars.series attribute)": [[919, "polars.Series.name"]], "nan_max() (polars.series method)": [[920, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[921, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[922, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[923, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[924, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[925, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[926, "polars.Series.peak_min"]], "product() (polars.series method)": [[927, "polars.Series.product"]], "qcut() (polars.series method)": [[928, "polars.Series.qcut"]], "quantile() (polars.series method)": [[929, "polars.Series.quantile"]], "rank() (polars.series method)": [[930, "polars.Series.rank"]], "rechunk() (polars.series method)": [[931, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[932, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[933, "polars.Series.rename"]], "reshape() (polars.series method)": [[934, "polars.Series.reshape"]], "reverse() (polars.series method)": [[935, "polars.Series.reverse"]], "rle() (polars.series method)": [[936, "polars.Series.rle"]], "rle_id() (polars.series method)": [[937, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[938, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[939, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[940, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[941, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[942, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[943, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[944, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[945, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[946, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[947, "polars.Series.rolling_var"]], "round() (polars.series method)": [[948, "polars.Series.round"]], "sample() (polars.series method)": [[949, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[950, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[951, "polars.Series.series_equal"]], "set() (polars.series method)": [[952, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[953, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[954, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[955, "polars.Series.shape"]], "shift() (polars.series method)": [[956, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[957, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[958, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[959, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[960, "polars.Series.shuffle"]], "sign() (polars.series method)": [[961, "polars.Series.sign"]], "sin() (polars.series method)": [[962, "polars.Series.sin"]], "sinh() (polars.series method)": [[963, "polars.Series.sinh"]], "skew() (polars.series method)": [[964, "polars.Series.skew"]], "slice() (polars.series method)": [[965, "polars.Series.slice"]], "sort() (polars.series method)": [[966, "polars.Series.sort"]], "sqrt() (polars.series method)": [[967, "polars.Series.sqrt"]], "std() (polars.series method)": [[968, "polars.Series.std"]], "str (polars.series attribute)": [[969, "polars.Series.str"]], "concat() (polars.series.str method)": [[970, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[971, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[972, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[973, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[974, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[975, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[976, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[977, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[978, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[979, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[980, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[981, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[982, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[983, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[984, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[985, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[986, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[987, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[988, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[989, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[990, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[991, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[992, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[993, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[994, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[995, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[996, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[997, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[998, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[999, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[1000, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1001, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1002, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1003, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1004, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1005, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1006, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[1007, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1008, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1009, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1010, "polars.Series.sum"]], "tail() (polars.series method)": [[1011, "polars.Series.tail"]], "take() (polars.series method)": [[1012, "polars.Series.take"]], "take_every() (polars.series method)": [[1013, "polars.Series.take_every"]], "tan() (polars.series method)": [[1014, "polars.Series.tan"]], "tanh() (polars.series method)": [[1015, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[1016, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[1017, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1018, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1019, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1020, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1021, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1022, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1023, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1024, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1025, "polars.Series.top_k"]], "unique() (polars.series method)": [[1026, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1027, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1028, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1029, "polars.Series.value_counts"]], "var() (polars.series method)": [[1030, "polars.Series.var"]], "view() (polars.series method)": [[1031, "polars.Series.view"]], "zip_with() (polars.series method)": [[1032, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1048, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1048, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1048, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1048, "polars.SQLContext.__init__"]]}})