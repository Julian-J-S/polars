Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.using_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.using_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.using_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 118, 135, 136, 237, 255, 269, 612, 720, 1018], "refer": [0, 31, 102, 103, 106, 141, 255, 346, 349, 435, 467, 507, 526, 527, 528, 531, 612, 802, 805, 909, 973, 974, 975, 978, 1018], "input": [0, 65, 93, 102, 103, 106, 136, 137, 148, 159, 187, 201, 208, 222, 232, 235, 255, 262, 269, 361, 381, 429, 444, 459, 497, 554, 555, 556, 557, 559, 560, 562, 563, 564, 565, 571, 576, 577, 585, 586, 589, 596, 599, 600, 612, 623, 626, 636, 643, 669, 677, 682, 688, 692, 710, 720, 833, 887, 888, 890, 1018], "output": [0, 26, 28, 31, 32, 33, 34, 74, 106, 130, 136, 160, 161, 172, 182, 189, 198, 201, 228, 232, 255, 264, 269, 433, 434, 443, 476, 478, 480, 482, 551, 557, 566, 585, 612, 623, 644, 645, 654, 658, 659, 669, 688, 691, 694, 710, 720, 1006, 1018], "seri": [0, 1, 2, 23, 57, 66, 67, 68, 69, 70, 73, 74, 90, 92, 95, 97, 100, 121, 125, 130, 132, 136, 144, 152, 154, 156, 157, 161, 162, 165, 166, 168, 170, 178, 179, 183, 194, 195, 210, 214, 217, 220, 221, 236, 255, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 287, 295, 296, 300, 301, 309, 315, 317, 321, 325, 329, 331, 333, 338, 342, 343, 345, 350, 353, 363, 364, 370, 379, 381, 383, 384, 385, 386, 387, 389, 390, 391, 399, 400, 401, 407, 410, 412, 419, 420, 423, 424, 425, 431, 433, 462, 466, 467, 468, 469, 470, 471, 473, 479, 485, 486, 489, 492, 493, 500, 515, 520, 526, 527, 528, 531, 535, 541, 542, 543, 544, 550, 555, 556, 557, 558, 559, 561, 567, 569, 570, 571, 577, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 598, 599, 600, 601, 603, 612, 623, 640, 645, 693, 710, 1010, 1012, 1014, 1017, 1019, 1022, 1023, 1024, 1026], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 133, 253, 254, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 582, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 599, 600, 601, 603, 604, 612, 623, 630, 632, 636, 637, 641, 644, 649, 650, 651, 652, 654, 658, 659, 663, 667, 674, 675, 676, 677, 683, 684, 685, 688, 689, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 719, 720, 734, 735, 744, 759, 760, 798, 829, 864, 907, 957, 969, 970, 986, 995, 996, 1006, 1018, 1025, 1026], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 113, 114, 115, 116, 117, 118, 120, 125, 130, 176, 188, 255, 367, 425, 612, 623, 709, 713, 1025, 1026], "express": [0, 70, 72, 74, 100, 122, 125, 127, 130, 132, 136, 137, 148, 150, 152, 159, 185, 189, 197, 201, 208, 222, 232, 235, 237, 255, 262, 264, 265, 266, 268, 269, 280, 293, 297, 298, 299, 302, 308, 311, 314, 316, 322, 335, 336, 339, 346, 356, 357, 361, 364, 366, 367, 371, 373, 374, 375, 379, 381, 385, 388, 393, 396, 397, 403, 406, 425, 431, 432, 433, 434, 435, 439, 440, 441, 442, 443, 444, 447, 449, 451, 455, 456, 458, 459, 461, 462, 463, 464, 470, 484, 485, 486, 488, 490, 495, 497, 501, 502, 507, 508, 509, 510, 516, 517, 537, 538, 541, 547, 548, 550, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 584, 585, 586, 589, 592, 593, 594, 595, 596, 597, 599, 600, 602, 604, 611, 623, 626, 630, 635, 636, 637, 640, 643, 663, 669, 672, 673, 674, 675, 677, 682, 688, 689, 692, 694, 710, 713, 720, 748, 749, 750, 758, 768, 795, 819, 833, 861, 864, 927, 934, 948, 949, 954, 955, 956, 957, 963, 964, 1018], "selector": [0, 600, 623], "extend": [0, 93, 255, 364, 612, 623, 719, 819, 1018], "function": [0, 31, 65, 66, 67, 68, 69, 91, 97, 102, 103, 106, 113, 123, 136, 141, 147, 154, 181, 188, 189, 219, 223, 226, 227, 237, 255, 265, 269, 308, 343, 358, 359, 360, 425, 433, 434, 459, 461, 473, 474, 475, 476, 477, 478, 480, 481, 482, 494, 545, 555, 556, 557, 569, 570, 571, 577, 578, 580, 585, 586, 589, 592, 600, 612, 623, 654, 658, 662, 685, 694, 710, 720, 758, 799, 813, 814, 815, 816, 829, 883, 907, 915, 929, 930, 936, 941, 1000, 1018, 1026], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 132, 135, 136, 139, 149, 158, 159, 160, 161, 172, 173, 174, 176, 187, 188, 192, 197, 198, 206, 213, 218, 219, 232, 234, 253, 255, 266, 269, 282, 283, 284, 285, 289, 294, 315, 344, 353, 356, 357, 374, 375, 380, 387, 389, 396, 427, 432, 455, 456, 458, 459, 467, 483, 484, 494, 507, 508, 526, 527, 528, 531, 545, 547, 548, 554, 559, 563, 584, 593, 612, 623, 628, 629, 637, 643, 644, 645, 662, 674, 675, 688, 710, 719, 720, 734, 735, 742, 747, 751, 764, 767, 809, 829, 885, 909, 925, 926, 936, 941, 973, 974, 975, 978, 998, 999, 1000, 1001, 1003, 1008, 1017, 1018, 1025], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 80, 90, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 132, 136, 154, 158, 160, 161, 162, 173, 174, 213, 219, 221, 224, 255, 269, 294, 295, 297, 298, 299, 317, 321, 325, 329, 331, 333, 338, 342, 345, 361, 376, 383, 385, 386, 412, 425, 435, 470, 521, 522, 523, 526, 545, 557, 559, 563, 572, 573, 574, 576, 577, 584, 593, 602, 612, 623, 630, 635, 637, 644, 645, 649, 663, 673, 674, 675, 683, 710, 742, 744, 748, 749, 750, 769, 773, 777, 784, 786, 789, 794, 798, 801, 827, 870, 883, 936, 968, 969, 970, 973, 998, 999, 1001, 1009, 1018, 1025], "config": [0, 65, 201, 232, 255, 574, 623, 669, 688, 710], "except": [0, 163, 175, 177, 211, 255, 576, 623, 650, 710, 713, 828, 855, 988, 999, 1008, 1018], "test": [0, 106, 623, 646, 653, 710], "util": [0, 97, 580, 623, 637, 710], "sql": [0, 29, 50, 54, 104, 174, 255, 597, 623], "These": [1, 31, 133, 255, 350, 611, 799, 806], "allow": [1, 30, 31, 56, 80, 91, 113, 115, 116, 117, 118, 125, 127, 135, 172, 175, 176, 197, 198, 199, 218, 219, 224, 234, 255, 269, 339, 346, 349, 433, 469, 484, 526, 527, 528, 612, 649, 650, 654, 658, 674, 675, 683, 689, 710, 713, 720, 795, 802, 805, 911, 926, 928, 973, 974, 975, 1000, 1018, 1026], "you": [1, 13, 31, 35, 55, 65, 73, 90, 92, 93, 94, 96, 100, 102, 103, 106, 107, 111, 113, 120, 132, 133, 136, 145, 149, 160, 161, 172, 185, 197, 198, 215, 218, 223, 237, 255, 269, 297, 298, 299, 335, 336, 342, 346, 349, 367, 381, 406, 425, 433, 435, 469, 474, 475, 476, 477, 478, 480, 481, 482, 511, 514, 526, 528, 559, 569, 578, 593, 612, 630, 633, 644, 645, 646, 650, 653, 673, 675, 710, 713, 719, 720, 748, 749, 750, 791, 792, 798, 802, 805, 833, 864, 911, 958, 961, 973, 975, 999, 1008, 1018, 1026], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 126, 128, 1025], "custom": [1, 31, 66, 67, 68, 69, 126, 127, 128, 136, 237, 255, 269, 346, 349, 425, 433, 473, 557, 585, 612, 654, 694, 710, 720, 802, 805, 883, 915, 1018, 1026], "dedic": [1, 91, 172, 198, 255], "namespac": [1, 254, 611, 623, 709], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 111, 122, 125, 127, 149, 172, 173, 198, 213, 255, 288, 315, 316, 320, 324, 326, 327, 328, 330, 332, 334, 337, 340, 341, 342, 344, 351, 352, 353, 354, 469, 483, 501, 503, 612, 710, 713, 719, 737, 767, 768, 772, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 798, 800, 807, 808, 809, 810, 911, 925, 936, 948, 950, 994, 999, 1018], "polar": [1, 255, 611, 612, 617, 623, 710, 713, 1018, 1025], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 95, 122, 123, 219, 255, 612, 617, 623, 710, 998, 999, 1018, 1025], "without": [1, 6, 97, 105, 108, 112, 114, 118, 226, 227, 255, 269, 308, 343, 474, 475, 476, 477, 478, 480, 481, 482, 596, 612, 685, 710, 758, 764, 799, 829, 907, 1018], "requir": [1, 30, 31, 35, 65, 95, 120, 121, 141, 197, 219, 255, 285, 358, 359, 360, 427, 489, 526, 527, 528, 548, 593, 612, 675, 710, 735, 814, 815, 816, 885, 935, 973, 974, 975, 999, 1000, 1003, 1018], "subclass": [1, 255], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 70, 74, 100, 130, 132, 148, 150, 152, 174, 175, 185, 189, 197, 201, 232, 255, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 612, 613, 614, 617, 618, 619, 620, 636, 638, 640, 649, 650, 664, 669, 672, 688, 710, 713, 758, 768, 820, 861, 864, 868, 878, 881, 934, 948, 952, 971, 989, 1018], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 73, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 133, 135, 136, 137, 141, 145, 147, 150, 154, 159, 160, 161, 172, 174, 175, 176, 181, 182, 187, 189, 197, 198, 201, 202, 208, 214, 219, 222, 227, 228, 232, 235, 255, 265, 304, 306, 307, 312, 313, 343, 350, 355, 357, 358, 359, 360, 381, 383, 385, 386, 387, 389, 390, 391, 394, 425, 435, 456, 459, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 491, 494, 496, 497, 509, 511, 514, 515, 526, 528, 539, 555, 556, 559, 560, 562, 564, 565, 566, 571, 586, 589, 596, 599, 600, 604, 605, 606, 608, 611, 612, 613, 614, 617, 618, 619, 620, 623, 626, 633, 638, 643, 644, 645, 646, 649, 650, 653, 654, 658, 659, 663, 666, 669, 670, 674, 675, 677, 682, 685, 688, 689, 692, 710, 713, 717, 719, 756, 757, 799, 806, 812, 813, 814, 815, 816, 826, 833, 837, 840, 841, 843, 844, 845, 846, 853, 883, 909, 913, 915, 921, 938, 941, 956, 958, 961, 962, 973, 975, 987, 999, 1000, 1008, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1026], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 74, 90, 93, 95, 96, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 142, 145, 151, 163, 168, 170, 172, 173, 176, 177, 181, 184, 185, 192, 197, 198, 207, 211, 216, 218, 224, 226, 228, 255, 266, 267, 268, 286, 302, 308, 313, 314, 361, 366, 372, 376, 378, 380, 383, 386, 390, 391, 393, 397, 406, 412, 422, 425, 433, 434, 450, 457, 463, 467, 472, 489, 495, 497, 502, 508, 509, 510, 513, 516, 517, 519, 525, 538, 551, 563, 571, 576, 578, 583, 592, 599, 600, 604, 612, 617, 623, 630, 633, 635, 637, 639, 654, 658, 663, 673, 676, 683, 689, 710, 713, 758, 760, 764, 766, 828, 835, 850, 855, 864, 870, 880, 883, 909, 942, 949, 955, 956, 957, 960, 963, 964, 966, 972, 988, 1018, 1025, 1026], "support": [1, 30, 31, 35, 73, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 114, 122, 127, 133, 135, 172, 173, 174, 198, 207, 208, 215, 219, 255, 420, 459, 495, 497, 520, 563, 612, 617, 649, 676, 677, 710, 713, 878, 942, 967, 1000, 1018, 1025], "target": [1, 30, 31, 71, 74, 255, 507, 526, 527, 528, 954, 973, 974, 975], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 141, 145, 146, 147, 149, 154, 159, 160, 161, 162, 166, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 197, 198, 199, 201, 205, 207, 209, 210, 213, 215, 218, 219, 223, 224, 226, 227, 228, 229, 230, 232, 233, 237, 238, 254, 255, 265, 268, 269, 270, 279, 285, 292, 293, 295, 302, 308, 314, 315, 327, 335, 336, 339, 342, 343, 346, 349, 353, 357, 363, 379, 380, 381, 385, 397, 405, 406, 407, 411, 412, 421, 425, 426, 427, 430, 431, 433, 439, 440, 441, 442, 443, 444, 453, 454, 456, 459, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 486, 488, 489, 490, 495, 496, 497, 507, 512, 513, 518, 519, 525, 526, 528, 529, 534, 546, 548, 549, 550, 551, 555, 556, 558, 559, 564, 567, 569, 571, 577, 578, 580, 586, 589, 593, 596, 600, 612, 623, 624, 627, 630, 633, 635, 637, 643, 644, 645, 647, 649, 650, 654, 658, 659, 663, 666, 669, 672, 673, 674, 675, 676, 683, 685, 688, 689, 690, 691, 694, 695, 709, 710, 713, 719, 720, 729, 735, 741, 744, 758, 764, 766, 767, 768, 779, 791, 792, 795, 798, 799, 802, 805, 809, 813, 818, 825, 826, 829, 834, 839, 840, 842, 847, 849, 851, 852, 854, 863, 864, 865, 869, 870, 879, 884, 885, 889, 891, 892, 893, 894, 896, 897, 899, 900, 902, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 919, 922, 923, 924, 926, 929, 930, 931, 934, 935, 936, 937, 942, 943, 945, 954, 959, 960, 965, 966, 972, 973, 975, 976, 981, 982, 986, 987, 994, 996, 998, 999, 1000, 1002, 1003, 1005, 1007, 1008, 1018, 1025, 1026], "featur": [1, 35, 39, 56, 71, 255], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 135, 136, 145, 147, 155, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 187, 188, 189, 197, 198, 199, 207, 208, 209, 210, 211, 213, 218, 219, 223, 224, 226, 227, 228, 229, 237, 238, 254, 255, 262, 265, 267, 268, 269, 270, 280, 293, 302, 308, 314, 316, 326, 339, 343, 346, 350, 358, 359, 360, 363, 376, 379, 381, 394, 406, 409, 420, 424, 425, 430, 433, 435, 439, 442, 444, 459, 467, 469, 471, 474, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 490, 491, 494, 495, 496, 497, 499, 501, 502, 507, 508, 510, 512, 513, 515, 516, 518, 519, 520, 523, 525, 526, 527, 528, 531, 534, 551, 552, 555, 556, 558, 559, 563, 564, 566, 567, 569, 570, 571, 578, 584, 586, 589, 593, 594, 595, 596, 598, 600, 603, 604, 612, 630, 633, 635, 637, 643, 644, 645, 648, 649, 650, 652, 654, 658, 659, 663, 673, 674, 675, 676, 677, 678, 683, 685, 686, 691, 694, 695, 710, 713, 718, 719, 720, 758, 766, 768, 778, 795, 799, 802, 806, 813, 814, 815, 816, 818, 826, 827, 828, 829, 832, 834, 836, 842, 847, 848, 849, 851, 852, 853, 855, 864, 867, 878, 882, 883, 907, 909, 911, 913, 922, 924, 926, 927, 928, 929, 930, 931, 937, 938, 941, 942, 945, 948, 949, 954, 955, 957, 959, 960, 962, 963, 965, 966, 967, 970, 972, 973, 974, 975, 978, 981, 988, 994, 999, 1000, 1006, 1007, 1008, 1018, 1025, 1026], "primarili": 1, "intend": [1, 74], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 91, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 143, 145, 150, 151, 154, 159, 160, 161, 168, 170, 172, 173, 175, 179, 181, 184, 185, 188, 189, 197, 198, 199, 201, 208, 209, 210, 216, 217, 218, 219, 223, 224, 226, 227, 228, 229, 232, 235, 237, 255, 263, 269, 270, 280, 288, 289, 293, 295, 308, 312, 313, 342, 346, 349, 353, 355, 358, 359, 360, 366, 367, 380, 381, 394, 406, 425, 433, 435, 438, 459, 467, 469, 471, 474, 475, 476, 477, 478, 480, 481, 482, 484, 486, 489, 490, 494, 496, 497, 499, 501, 503, 504, 505, 507, 508, 509, 511, 512, 516, 518, 520, 522, 524, 526, 527, 528, 531, 552, 555, 556, 557, 558, 559, 563, 565, 566, 569, 571, 578, 580, 584, 586, 589, 593, 594, 595, 596, 598, 599, 600, 603, 611, 612, 622, 623, 630, 632, 633, 638, 639, 643, 644, 645, 646, 650, 652, 653, 658, 669, 675, 677, 678, 683, 685, 686, 688, 692, 694, 710, 713, 720, 737, 738, 744, 758, 798, 802, 805, 809, 812, 814, 815, 816, 820, 821, 826, 829, 833, 853, 864, 883, 890, 909, 911, 913, 926, 929, 930, 931, 935, 937, 941, 945, 948, 950, 951, 954, 955, 956, 958, 959, 963, 965, 967, 969, 973, 974, 975, 978, 989, 995, 997, 998, 999, 1000, 1007, 1008, 1018, 1025, 1026], "librari": [1, 76, 83, 433, 612, 1026], "author": 1, "domain": [1, 508, 955], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 102, 104, 105, 114, 124, 125, 172, 255, 346, 349, 473, 526, 527, 528, 531, 612, 710, 802, 805, 915, 973, 974, 975, 978, 1018, 1026], "capabl": [1, 31, 255], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 93, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 137, 145, 149, 160, 161, 175, 218, 222, 224, 228, 255, 265, 339, 343, 346, 350, 364, 381, 383, 386, 387, 389, 390, 391, 425, 444, 474, 475, 476, 477, 478, 480, 481, 482, 515, 604, 612, 626, 633, 635, 644, 645, 650, 674, 675, 682, 683, 691, 710, 719, 795, 799, 802, 806, 819, 833, 837, 841, 843, 844, 845, 846, 883, 929, 962, 1018, 1026], "mai": [1, 30, 39, 73, 74, 90, 92, 93, 94, 96, 102, 105, 107, 114, 115, 118, 136, 147, 149, 160, 161, 175, 204, 205, 219, 226, 227, 228, 255, 269, 308, 314, 315, 327, 339, 343, 350, 419, 424, 425, 433, 443, 474, 475, 476, 477, 478, 480, 481, 482, 487, 488, 526, 528, 569, 570, 578, 592, 612, 644, 645, 650, 654, 671, 672, 675, 685, 690, 694, 710, 719, 720, 758, 766, 767, 779, 795, 799, 806, 813, 829, 877, 882, 907, 933, 934, 973, 975, 1018, 1026], "exist": [1, 29, 30, 31, 65, 105, 114, 125, 232, 255, 287, 290, 291, 316, 688, 710, 768], "belong": [1, 160, 255, 644, 710], "core": [1, 219, 255, 1026], "cannot": [1, 91, 102, 103, 106, 107, 120, 129, 136, 199, 237, 255, 288, 435, 484, 503, 522, 536, 612, 673, 710, 720, 737, 926, 950, 969, 1018], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 102, 122, 123, 127, 129, 255, 435, 612, 710, 890, 1018], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 90, 92, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 133, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 168, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 269, 287, 289, 290, 291, 311, 317, 339, 342, 343, 346, 349, 350, 361, 363, 367, 369, 373, 379, 381, 388, 401, 402, 409, 410, 412, 420, 423, 425, 434, 435, 443, 445, 447, 459, 461, 463, 470, 472, 474, 475, 476, 477, 478, 480, 481, 482, 488, 489, 496, 497, 535, 536, 538, 541, 553, 554, 555, 557, 558, 561, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 585, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 602, 603, 612, 618, 626, 630, 631, 632, 633, 635, 636, 637, 640, 642, 643, 644, 645, 647, 649, 650, 658, 659, 663, 665, 666, 667, 670, 672, 673, 674, 675, 676, 677, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 716, 742, 759, 760, 769, 795, 798, 799, 802, 805, 806, 818, 821, 860, 861, 870, 883, 890, 899, 900, 907, 912, 929, 930, 982, 984, 995, 996, 997, 1018, 1022, 1025, 1026], "dt": [1, 65, 74, 161, 255, 574, 620, 645, 710, 713, 1024], "attempt": [1, 74, 218, 255], "do": [1, 31, 65, 72, 73, 100, 113, 132, 149, 160, 161, 175, 189, 213, 223, 226, 255, 308, 406, 459, 513, 519, 525, 593, 612, 630, 635, 644, 645, 650, 654, 663, 673, 674, 675, 710, 713, 719, 758, 864, 960, 966, 972, 999, 1008, 1018], "so": [1, 56, 104, 113, 129, 158, 160, 161, 189, 255, 280, 293, 381, 409, 425, 513, 519, 525, 612, 644, 645, 710, 867, 960, 966, 972], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 121, 189, 197, 255, 288, 342, 424, 443, 501, 503, 515, 526, 527, 528, 531, 584, 737, 798, 882, 948, 950, 962, 973, 974, 975, 978, 999, 1008, 1018], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 74, 76, 80, 81, 83, 90, 100, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 132, 136, 138, 139, 147, 150, 152, 154, 160, 161, 172, 173, 175, 185, 189, 195, 197, 213, 218, 226, 232, 237, 255, 264, 265, 269, 288, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 316, 342, 346, 353, 364, 366, 367, 373, 393, 403, 406, 409, 424, 425, 433, 434, 444, 464, 473, 474, 475, 476, 477, 478, 480, 481, 482, 501, 503, 508, 526, 527, 528, 531, 541, 547, 555, 556, 559, 563, 571, 575, 580, 584, 586, 589, 592, 593, 596, 599, 600, 604, 612, 623, 628, 629, 630, 635, 637, 640, 644, 645, 650, 654, 663, 673, 688, 689, 694, 710, 713, 720, 737, 742, 747, 748, 749, 750, 751, 754, 755, 756, 757, 758, 768, 798, 802, 809, 813, 819, 842, 861, 864, 867, 882, 915, 916, 917, 918, 919, 920, 922, 923, 924, 929, 930, 948, 950, 955, 973, 974, 975, 978, 999, 1008, 1018, 1025], "attributeerror": 1, "howev": [1, 74, 93, 147, 218, 255, 813, 1018], "can": [1, 13, 31, 55, 65, 74, 81, 93, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 133, 136, 137, 138, 146, 154, 160, 161, 168, 170, 185, 189, 201, 208, 218, 222, 223, 226, 232, 237, 255, 269, 293, 304, 307, 308, 335, 336, 339, 342, 350, 364, 380, 381, 406, 425, 443, 450, 459, 469, 474, 475, 476, 477, 478, 480, 481, 482, 486, 489, 491, 494, 497, 510, 513, 519, 525, 526, 528, 551, 559, 560, 563, 578, 580, 604, 611, 612, 622, 626, 630, 635, 644, 645, 669, 677, 682, 688, 690, 710, 713, 720, 758, 791, 792, 795, 798, 799, 806, 819, 833, 864, 883, 895, 911, 929, 930, 931, 935, 938, 941, 957, 960, 966, 972, 973, 975, 1018, 1025], "other": [1, 18, 31, 55, 74, 102, 103, 106, 113, 120, 121, 145, 149, 155, 174, 175, 181, 182, 197, 201, 227, 232, 253, 255, 262, 266, 268, 280, 297, 298, 299, 311, 356, 357, 371, 374, 375, 381, 385, 396, 401, 405, 411, 426, 432, 435, 439, 442, 449, 451, 455, 456, 458, 497, 537, 545, 547, 554, 555, 556, 562, 564, 565, 571, 586, 589, 596, 599, 600, 612, 623, 633, 649, 650, 658, 659, 669, 685, 688, 689, 710, 713, 719, 748, 749, 750, 762, 840, 859, 863, 869, 884, 928, 1001, 1009, 1017, 1018], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 133, 136, 145, 160, 161, 172, 174, 175, 179, 198, 210, 215, 217, 218, 228, 255, 263, 269, 280, 293, 296, 297, 298, 299, 339, 361, 370, 459, 469, 474, 475, 476, 477, 478, 480, 481, 482, 549, 612, 630, 633, 644, 645, 646, 649, 650, 653, 710, 745, 748, 749, 750, 795, 824, 842, 911, 994, 997, 1018, 1025, 1026], "gener": [1, 74, 104, 122, 123, 124, 125, 127, 130, 141, 189, 199, 216, 218, 223, 255, 484, 490, 559, 593, 612, 710, 926, 937, 995, 1018, 1026], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 624, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 862, 863, 864, 865, 868, 869, 870, 872, 877, 878, 879, 881, 883, 884, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 937, 938, 939, 940, 942, 943, 944, 945, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1025, 1026], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 123, 124, 125, 127, 133, 188, 223, 255, 262, 461, 508, 554, 585, 612, 662, 710, 713, 955, 1026], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 122, 1025], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 138, 139, 142, 149, 163, 165, 166, 177, 178, 179, 180, 181, 183, 186, 187, 189, 191, 192, 194, 195, 199, 204, 206, 207, 209, 210, 211, 216, 223, 225, 228, 229, 230, 233, 234, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 612, 626, 627, 629, 630, 632, 633, 635, 636, 637, 638, 639, 640, 641, 642, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 710, 719, 720, 742, 751, 822, 830, 889, 890, 901, 904, 905, 910, 929, 930, 931, 943, 1005, 1009, 1018], "_expr": [1, 67], "hello": [1, 18, 51, 54, 513, 519, 525, 555, 870, 960, 966, 972], "return": [1, 9, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 132, 136, 137, 138, 141, 144, 145, 146, 147, 148, 150, 151, 154, 158, 159, 160, 161, 163, 165, 171, 172, 173, 174, 176, 177, 184, 185, 187, 188, 189, 197, 198, 199, 211, 212, 218, 219, 222, 223, 224, 228, 232, 234, 237, 240, 244, 249, 255, 265, 267, 271, 272, 273, 274, 275, 276, 279, 280, 287, 289, 290, 291, 292, 300, 301, 309, 314, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 348, 350, 351, 352, 354, 363, 377, 381, 383, 384, 385, 386, 387, 389, 390, 391, 398, 399, 400, 402, 407, 409, 410, 412, 423, 424, 431, 435, 444, 450, 461, 466, 470, 471, 484, 485, 491, 492, 493, 500, 502, 504, 506, 507, 508, 510, 511, 512, 514, 515, 518, 520, 521, 522, 523, 534, 540, 541, 542, 543, 544, 546, 547, 549, 550, 551, 554, 555, 556, 557, 559, 560, 563, 572, 573, 574, 580, 582, 584, 585, 593, 596, 599, 601, 602, 604, 612, 626, 628, 630, 633, 634, 635, 637, 644, 645, 646, 652, 653, 654, 662, 663, 673, 674, 675, 680, 681, 682, 683, 688, 691, 697, 701, 706, 710, 713, 716, 717, 718, 720, 727, 728, 730, 731, 736, 738, 741, 747, 759, 760, 766, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 804, 806, 807, 808, 810, 813, 818, 826, 828, 829, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 852, 855, 857, 858, 860, 865, 867, 868, 870, 881, 882, 889, 890, 895, 907, 913, 914, 926, 927, 928, 930, 938, 947, 948, 949, 951, 953, 954, 955, 957, 958, 959, 961, 962, 965, 967, 968, 969, 970, 981, 988, 990, 1002, 1004, 1005, 1009, 1018, 1025, 1026], "lit": [1, 100, 132, 381, 393, 569, 578, 593, 604, 612, 821, 1018], "alia": [1, 12, 65, 67, 69, 74, 130, 160, 161, 177, 225, 232, 255, 262, 266, 269, 287, 289, 290, 291, 292, 297, 298, 299, 303, 304, 305, 306, 307, 310, 314, 315, 316, 317, 320, 321, 322, 323, 325, 327, 328, 329, 331, 333, 338, 339, 340, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 356, 357, 367, 369, 371, 374, 375, 379, 381, 384, 385, 393, 396, 397, 398, 403, 405, 406, 411, 426, 432, 434, 435, 446, 449, 451, 455, 456, 458, 460, 462, 463, 467, 469, 485, 501, 502, 505, 507, 508, 511, 514, 520, 522, 523, 524, 535, 536, 537, 538, 545, 546, 547, 553, 554, 555, 556, 557, 561, 562, 564, 565, 569, 570, 571, 574, 575, 578, 579, 585, 586, 589, 592, 593, 599, 600, 604, 612, 644, 645, 647, 653, 684, 688, 710, 767, 769, 775, 795, 798, 802, 804, 809, 855, 864, 890, 954, 955, 969, 970, 1018], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 513, 519, 525, 532, 870, 960, 966, 972, 979], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 74, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 136, 171, 175, 185, 188, 197, 207, 220, 225, 228, 255, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 358, 359, 360, 361, 362, 363, 364, 368, 370, 372, 376, 378, 379, 380, 382, 383, 385, 386, 388, 392, 393, 394, 395, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 448, 450, 452, 453, 454, 457, 458, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 479, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 506, 507, 508, 509, 510, 512, 513, 515, 518, 519, 521, 522, 523, 525, 526, 529, 530, 532, 533, 535, 536, 538, 539, 542, 543, 544, 546, 548, 549, 550, 551, 552, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 574, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 590, 592, 593, 597, 598, 599, 600, 601, 603, 612, 631, 647, 650, 662, 676, 684, 689, 691, 710, 713, 734, 735, 798, 864, 929, 930, 942, 957, 973, 989, 1018, 1025], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 47, 50, 51, 52, 54, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 174, 175, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 582, 585, 586, 587, 588, 589, 590, 592, 593, 596, 597, 598, 599, 600, 601, 603, 604, 612, 626, 628, 630, 632, 633, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 669, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 719, 720, 721, 722, 723, 724, 725, 726, 729, 730, 731, 732, 733, 734, 735, 741, 742, 744, 745, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 840, 841, 843, 844, 845, 846, 850, 852, 862, 863, 864, 865, 868, 869, 870, 872, 877, 878, 879, 881, 883, 884, 889, 890, 895, 903, 904, 905, 907, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 929, 930, 933, 937, 938, 939, 940, 942, 943, 944, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 986, 988, 989, 990, 991, 992, 995, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1009, 1018, 1025], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 265, 269, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 315, 316, 317, 320, 321, 323, 324, 326, 332, 334, 340, 341, 342, 343, 344, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 393, 394, 396, 397, 398, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 449, 450, 451, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 496, 497, 498, 501, 504, 505, 507, 508, 509, 511, 514, 516, 520, 521, 522, 523, 524, 527, 531, 535, 536, 537, 538, 540, 541, 542, 546, 549, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 577, 578, 579, 582, 584, 585, 586, 587, 588, 589, 592, 593, 596, 598, 599, 600, 601, 603, 604, 612, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 716, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 768, 769, 772, 773, 775, 776, 778, 780, 781, 782, 784, 786, 787, 788, 790, 794, 796, 798, 799, 800, 802, 804, 805, 806, 808, 809, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 853, 854, 862, 863, 864, 865, 868, 869, 872, 877, 878, 879, 881, 883, 884, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 937, 939, 940, 941, 942, 943, 945, 951, 952, 954, 955, 956, 958, 961, 963, 967, 971, 974, 978, 986, 987, 988, 989, 990, 991, 992, 994, 995, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1018, 1025, 1026], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 612, 626, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 744, 745, 746, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 852, 854, 862, 863, 864, 865, 867, 868, 869, 872, 877, 878, 879, 881, 883, 884, 889, 891, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 954, 956, 957, 963, 969, 970, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1025, 1026], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 266, 267, 268, 269, 270, 277, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 310, 311, 314, 316, 317, 321, 322, 324, 325, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 349, 350, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 495, 496, 497, 498, 500, 502, 505, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 528, 529, 530, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 599, 600, 601, 603, 604, 612, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 716, 719, 720, 722, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 744, 745, 746, 747, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 766, 768, 770, 771, 774, 776, 781, 782, 788, 790, 791, 792, 797, 798, 799, 800, 803, 806, 808, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 835, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 854, 862, 863, 864, 865, 868, 869, 870, 872, 877, 878, 879, 881, 883, 884, 886, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 937, 939, 941, 942, 943, 944, 945, 947, 949, 954, 955, 956, 957, 960, 961, 962, 963, 964, 966, 969, 970, 972, 973, 975, 976, 977, 979, 980, 986, 987, 988, 989, 990, 991, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1018, 1025, 1026], "column_0": [1, 136, 223, 255], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 173, 255, 522, 523, 969, 970], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 66, 67, 70, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 529, 530, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 582, 585, 586, 587, 588, 589, 590, 592, 596, 597, 598, 599, 600, 601, 603, 604, 612, 644, 645, 684, 685, 691, 694, 697, 706, 710, 713, 734, 735, 744, 798, 864, 957, 964, 969, 970, 996, 1018, 1026], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 90, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 140, 143, 146, 147, 148, 152, 157, 159, 160, 165, 172, 184, 187, 197, 198, 201, 208, 214, 215, 223, 224, 225, 226, 232, 235, 236, 255, 263, 285, 363, 369, 378, 433, 444, 445, 459, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 496, 497, 508, 521, 535, 536, 541, 545, 559, 560, 563, 564, 571, 575, 583, 584, 599, 600, 612, 631, 632, 634, 636, 640, 643, 644, 658, 669, 677, 683, 684, 688, 689, 692, 693, 710, 735, 746, 759, 813, 818, 822, 825, 829, 830, 840, 907, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 927, 955, 968, 989, 998, 1001, 1018, 1026], "with_row_count": [1, 255, 435, 474, 475, 477, 480, 481, 482, 612, 710, 930, 1018], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 79, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 136, 137, 140, 143, 144, 145, 148, 153, 156, 158, 159, 171, 172, 174, 175, 181, 187, 189, 193, 197, 198, 200, 201, 208, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 255, 264, 269, 287, 289, 290, 291, 361, 381, 393, 425, 434, 443, 445, 459, 463, 497, 508, 535, 536, 538, 555, 556, 558, 560, 562, 563, 564, 565, 566, 568, 571, 576, 582, 583, 586, 589, 591, 593, 594, 595, 596, 599, 600, 601, 612, 626, 631, 632, 633, 636, 643, 649, 650, 658, 666, 668, 669, 677, 682, 683, 684, 685, 688, 690, 691, 692, 710, 713, 716, 747, 759, 883, 907, 912, 954, 955, 963, 982, 984, 995, 996, 1000, 1018, 1025, 1026], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 74, 99, 100, 102, 103, 113, 132, 136, 138, 149, 160, 163, 172, 173, 177, 198, 199, 209, 211, 212, 215, 217, 229, 240, 249, 255, 292, 308, 310, 315, 316, 323, 348, 353, 364, 377, 398, 404, 405, 410, 423, 425, 460, 461, 470, 480, 482, 484, 494, 499, 516, 519, 522, 523, 525, 528, 540, 542, 546, 547, 552, 554, 566, 580, 582, 593, 594, 595, 598, 601, 603, 612, 628, 630, 644, 646, 653, 678, 680, 681, 686, 697, 706, 710, 713, 719, 741, 747, 758, 761, 767, 768, 775, 804, 809, 819, 828, 855, 862, 863, 868, 881, 883, 903, 922, 924, 926, 941, 945, 963, 969, 970, 975, 988, 990, 997, 1002, 1007, 1018, 1025, 1026], "filter": [1, 66, 105, 113, 114, 118, 145, 168, 169, 170, 237, 255, 505, 524, 553, 578, 612, 633, 637, 647, 694, 710, 929, 1018], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 94, 96, 113, 123, 125, 136, 148, 152, 159, 160, 161, 169, 171, 176, 185, 188, 197, 201, 208, 225, 232, 235, 255, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 379, 380, 381, 382, 384, 385, 387, 388, 389, 392, 393, 394, 395, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 532, 533, 534, 535, 536, 537, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 562, 564, 565, 569, 570, 571, 574, 577, 578, 579, 580, 581, 586, 589, 591, 592, 600, 604, 612, 629, 636, 640, 643, 644, 645, 647, 652, 662, 669, 677, 684, 688, 689, 692, 710, 713, 734, 735, 744, 795, 798, 864, 913, 929, 930, 957, 973, 1018, 1026], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 47, 50, 55, 65, 66, 67, 69, 70, 74, 100, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 132, 136, 138, 139, 141, 142, 143, 146, 150, 151, 154, 155, 157, 158, 159, 160, 162, 166, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 195, 198, 199, 200, 201, 205, 207, 208, 209, 210, 216, 217, 218, 219, 220, 223, 226, 228, 229, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 261, 263, 266, 271, 272, 273, 274, 275, 276, 279, 280, 281, 294, 296, 298, 299, 300, 301, 303, 308, 309, 312, 313, 324, 328, 329, 331, 332, 338, 344, 345, 356, 357, 358, 359, 360, 362, 364, 365, 366, 370, 371, 374, 375, 376, 380, 383, 386, 387, 389, 390, 391, 393, 394, 396, 399, 400, 403, 406, 409, 416, 425, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 448, 449, 451, 453, 454, 455, 456, 457, 458, 460, 461, 462, 465, 466, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 489, 491, 492, 493, 494, 498, 499, 507, 508, 526, 528, 534, 537, 539, 543, 544, 545, 547, 552, 559, 560, 561, 562, 564, 566, 568, 569, 573, 575, 578, 587, 588, 591, 592, 593, 602, 603, 604, 612, 628, 629, 632, 634, 638, 639, 643, 644, 649, 652, 657, 661, 663, 664, 668, 669, 672, 673, 675, 677, 678, 686, 688, 689, 690, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 713, 721, 722, 723, 724, 725, 726, 727, 729, 731, 742, 745, 747, 752, 753, 758, 759, 760, 762, 776, 780, 781, 782, 783, 784, 785, 786, 787, 788, 793, 794, 800, 801, 812, 814, 815, 816, 820, 824, 827, 829, 837, 839, 841, 843, 844, 845, 846, 852, 853, 864, 867, 883, 889, 892, 893, 903, 907, 908, 909, 915, 917, 918, 920, 921, 922, 924, 925, 926, 938, 939, 940, 944, 945, 947, 954, 955, 957, 973, 975, 981, 991, 992, 995, 1000, 1001, 1005, 1007, 1008, 1018, 1026], "drop": [1, 93, 136, 144, 145, 224, 232, 255, 310, 312, 313, 404, 612, 633, 683, 688, 710, 761, 763, 764, 862, 1018], "aaa": [1, 31, 255, 501, 535, 536, 948], "bbb": [1, 31, 255, 535, 536, 713], "ccc": [1, 31, 255, 535, 536], "ddd": [1, 31, 255, 535, 536], "eee": [1, 31, 255, 713], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 132, 135, 136, 137, 143, 144, 145, 146, 148, 153, 156, 158, 159, 160, 161, 165, 166, 171, 172, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 208, 209, 210, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 255, 265, 267, 269, 279, 316, 320, 324, 326, 327, 328, 330, 332, 334, 337, 340, 341, 344, 346, 349, 351, 352, 354, 361, 363, 367, 369, 381, 393, 401, 407, 421, 424, 425, 435, 441, 443, 445, 459, 463, 468, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 489, 496, 497, 506, 522, 523, 526, 527, 528, 529, 531, 538, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 612, 626, 632, 633, 634, 636, 643, 644, 645, 649, 650, 654, 655, 656, 657, 658, 660, 661, 662, 664, 666, 668, 669, 670, 677, 678, 679, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 710, 713, 717, 718, 759, 770, 771, 772, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 802, 803, 805, 807, 808, 810, 818, 859, 865, 879, 882, 907, 913, 935, 953, 969, 970, 973, 974, 975, 976, 978, 986, 995, 996, 1018, 1026], "txt": [1, 12, 113], "utf8": [1, 10, 18, 56, 75, 93, 97, 102, 103, 113, 122, 124, 127, 146, 147, 148, 154, 200, 218, 255, 346, 349, 412, 435, 500, 504, 507, 508, 510, 511, 520, 521, 522, 523, 526, 527, 528, 529, 531, 563, 565, 612, 634, 636, 668, 710, 713, 802, 805, 851, 870, 947, 951, 954, 955, 957, 958, 967, 968, 969, 970, 973, 974, 975, 976, 978, 1018], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 692, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 130, 161, 188, 255, 262, 269, 280, 289, 294, 295, 297, 298, 299, 304, 307, 310, 314, 322, 342, 346, 349, 356, 357, 365, 366, 371, 374, 375, 376, 380, 381, 384, 387, 389, 390, 391, 393, 396, 405, 406, 411, 426, 432, 434, 435, 449, 451, 455, 456, 459, 460, 461, 462, 467, 474, 475, 476, 477, 478, 480, 481, 482, 501, 505, 508, 511, 514, 516, 517, 520, 522, 523, 524, 534, 537, 545, 547, 554, 557, 559, 562, 565, 571, 575, 585, 600, 604, 612, 645, 662, 710, 713, 744, 798, 864], "tp": [1, 68], "cast": [1, 67, 68, 75, 90, 154, 160, 161, 188, 219, 232, 255, 268, 295, 306, 307, 315, 346, 349, 435, 458, 461, 469, 509, 510, 534, 539, 545, 565, 612, 644, 645, 662, 688, 710, 713, 744, 756, 757, 767, 802, 805, 911, 956, 957, 987, 996, 1001, 1018], "int64": [1, 2, 31, 33, 67, 68, 97, 102, 146, 154, 160, 161, 176, 188, 200, 213, 219, 255, 282, 283, 284, 285, 306, 307, 321, 325, 329, 331, 333, 338, 345, 361, 461, 469, 509, 539, 545, 559, 563, 576, 584, 593, 599, 612, 629, 634, 644, 645, 647, 652, 662, 668, 691, 710, 732, 733, 734, 735, 756, 757, 773, 777, 784, 786, 789, 794, 801, 911, 928, 987, 999, 1000, 1001, 1018], "int8": [1, 68, 100, 132, 154, 255, 306, 307, 539, 593, 612, 756, 757, 761, 890, 914, 987, 1005, 1018], "int16": [1, 68, 306, 307, 539, 612, 713, 756, 757, 890, 987, 997, 1018], "int32": [1, 68, 90, 93, 97, 124, 125, 160, 161, 173, 255, 294, 327, 354, 545, 593, 612, 644, 645, 710, 713, 779, 810, 889, 1001, 1018], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 68, 73, 75, 90, 92, 93, 94, 95, 96, 97, 106, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 264, 268, 269, 281, 286, 287, 289, 290, 291, 294, 295, 302, 311, 312, 313, 361, 363, 365, 366, 367, 369, 372, 376, 378, 380, 381, 383, 386, 387, 388, 389, 390, 391, 393, 397, 401, 405, 406, 411, 412, 414, 426, 434, 450, 457, 459, 461, 463, 467, 472, 489, 495, 497, 506, 509, 516, 538, 549, 551, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 575, 576, 577, 578, 579, 582, 585, 586, 587, 588, 589, 590, 592, 594, 595, 598, 599, 600, 601, 603, 612, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 688, 689, 690, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 719, 744, 760, 762, 812, 813, 821, 833, 840, 851, 863, 864, 869, 884, 912, 928, 953, 956, 963, 986, 1000, 1004, 1018, 1025], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 136, 137, 138, 139, 142, 145, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 184, 185, 187, 188, 189, 190, 194, 198, 203, 208, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 266, 268, 269, 281, 282, 283, 284, 286, 292, 294, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 320, 325, 332, 333, 334, 340, 341, 343, 344, 345, 346, 349, 350, 351, 352, 354, 356, 357, 362, 363, 365, 366, 369, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 390, 391, 393, 396, 397, 398, 403, 404, 405, 406, 407, 410, 411, 419, 420, 423, 426, 429, 432, 434, 435, 449, 451, 455, 456, 458, 459, 461, 462, 463, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 487, 488, 491, 495, 496, 497, 498, 501, 511, 512, 514, 515, 516, 518, 520, 522, 523, 526, 535, 536, 537, 538, 540, 541, 542, 545, 546, 547, 554, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 575, 577, 578, 582, 584, 585, 586, 587, 588, 589, 590, 598, 599, 600, 601, 603, 604, 612, 626, 628, 629, 630, 633, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 719, 722, 729, 732, 733, 734, 741, 745, 746, 748, 758, 760, 762, 776, 777, 783, 785, 788, 789, 790, 791, 792, 793, 797, 799, 800, 801, 802, 805, 806, 807, 808, 820, 821, 828, 829, 832, 833, 835, 840, 843, 844, 845, 846, 850, 862, 863, 864, 865, 868, 869, 877, 878, 881, 884, 890, 896, 903, 904, 905, 907, 909, 913, 918, 920, 921, 922, 923, 924, 926, 928, 938, 942, 943, 948, 958, 959, 961, 962, 965, 967, 969, 970, 973, 986, 988, 989, 990, 997, 1000, 1001, 1002, 1009, 1018, 1026], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 66, 68, 73, 75, 93, 95, 97, 106, 113, 123, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 152, 153, 154, 155, 157, 158, 159, 160, 163, 165, 166, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 232, 235, 238, 239, 240, 241, 242, 243, 245, 248, 249, 255, 262, 269, 286, 381, 393, 401, 412, 414, 459, 461, 489, 522, 526, 549, 551, 555, 556, 558, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 577, 578, 579, 582, 585, 586, 587, 588, 589, 590, 598, 600, 601, 603, 612, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 640, 643, 644, 649, 652, 658, 661, 663, 666, 667, 668, 669, 673, 676, 677, 682, 685, 688, 689, 692, 695, 696, 697, 698, 699, 700, 702, 705, 706, 710, 713, 760, 833, 851, 969, 973, 1004, 1018], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 57, 65, 66, 68, 69, 70, 73, 74, 90, 93, 94, 95, 96, 97, 99, 103, 119, 125, 136, 138, 139, 142, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 172, 175, 176, 177, 179, 181, 184, 185, 187, 189, 190, 191, 194, 203, 208, 211, 212, 213, 214, 215, 218, 221, 226, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 266, 287, 290, 291, 292, 294, 295, 296, 297, 298, 299, 308, 309, 310, 311, 316, 317, 321, 342, 344, 345, 346, 349, 351, 357, 360, 361, 364, 366, 370, 371, 374, 375, 377, 378, 381, 384, 387, 389, 390, 391, 393, 396, 398, 403, 405, 406, 407, 410, 411, 416, 422, 423, 426, 449, 451, 456, 458, 459, 460, 461, 463, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 485, 491, 497, 502, 510, 511, 514, 515, 534, 537, 538, 540, 542, 546, 547, 557, 558, 561, 562, 564, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 582, 584, 585, 586, 587, 588, 589, 590, 592, 598, 600, 601, 603, 612, 628, 629, 630, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 648, 650, 651, 652, 653, 656, 657, 658, 663, 671, 672, 673, 676, 677, 678, 679, 680, 681, 687, 688, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 719, 722, 726, 729, 741, 744, 746, 748, 754, 758, 759, 760, 761, 762, 768, 769, 770, 771, 772, 773, 798, 800, 801, 802, 803, 805, 807, 808, 816, 819, 828, 829, 832, 833, 863, 864, 865, 868, 869, 872, 881, 884, 889, 890, 896, 903, 904, 905, 907, 908, 909, 913, 915, 916, 917, 919, 920, 923, 926, 928, 938, 944, 949, 957, 958, 962, 988, 1002, 1005, 1009, 1018, 1026], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 57, 66, 68, 73, 90, 93, 94, 95, 96, 136, 140, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 158, 160, 161, 163, 165, 166, 167, 169, 171, 172, 174, 178, 179, 180, 181, 183, 186, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 240, 248, 249, 255, 262, 266, 269, 286, 294, 306, 307, 311, 316, 339, 341, 344, 355, 357, 365, 366, 372, 377, 378, 380, 398, 405, 407, 411, 426, 456, 458, 464, 466, 467, 468, 471, 474, 475, 476, 477, 478, 480, 481, 482, 485, 497, 502, 506, 511, 514, 515, 537, 540, 542, 554, 555, 557, 569, 570, 571, 575, 578, 585, 600, 612, 630, 631, 632, 633, 634, 635, 636, 637, 640, 641, 644, 645, 646, 648, 649, 651, 653, 654, 658, 661, 663, 666, 668, 669, 671, 672, 673, 676, 677, 680, 681, 684, 685, 687, 688, 690, 691, 697, 705, 706, 710, 713, 719, 746, 752, 756, 757, 762, 795, 808, 829, 863, 865, 869, 884, 896, 909, 913, 918, 920, 922, 924, 928, 949, 953, 958, 962, 987, 1018, 1025, 1026], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 74, 119, 140, 141, 142, 143, 144, 146, 148, 152, 153, 155, 160, 161, 163, 165, 167, 174, 178, 179, 180, 183, 186, 189, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 228, 229, 230, 255, 262, 266, 284, 307, 316, 320, 340, 342, 343, 350, 352, 354, 362, 377, 380, 398, 405, 411, 426, 435, 458, 467, 471, 481, 497, 529, 540, 542, 557, 569, 570, 578, 585, 600, 612, 631, 632, 634, 636, 640, 644, 645, 646, 648, 649, 653, 661, 664, 666, 668, 669, 680, 681, 685, 691, 710, 713, 726, 734, 768, 772, 779, 798, 799, 806, 808, 852, 863, 869, 884, 890, 913, 923, 976, 1018, 1026], "float32": [1, 28, 68, 154, 217, 218, 255, 584, 710, 713, 836, 889, 1018], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 100, 113, 125, 132, 175, 188, 255, 269, 580, 593, 612, 623, 649, 650, 689, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 1025, 1026], "i16": [1, 68, 489, 612, 713, 890, 997, 1018, 1026], "i32": [1, 68, 90, 93, 97, 124, 125, 201, 255, 294, 327, 354, 489, 515, 604, 612, 669, 710, 779, 810, 889, 962, 1018, 1026], "f32": [1, 68, 145, 217, 255, 406, 467, 489, 566, 575, 612, 633, 710, 713, 864, 889, 909, 1018], "i64": [1, 2, 15, 19, 47, 50, 52, 66, 67, 68, 69, 73, 90, 92, 93, 94, 95, 96, 97, 113, 136, 137, 138, 139, 140, 143, 145, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 178, 181, 183, 187, 188, 189, 190, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 210, 211, 212, 214, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 248, 249, 255, 262, 264, 268, 269, 282, 283, 284, 285, 286, 292, 295, 297, 298, 299, 304, 305, 306, 307, 310, 311, 321, 323, 325, 329, 331, 333, 338, 345, 348, 361, 363, 364, 366, 367, 368, 369, 371, 372, 377, 378, 379, 380, 381, 384, 387, 389, 390, 391, 393, 395, 398, 404, 405, 406, 407, 408, 409, 410, 411, 413, 415, 417, 418, 419, 420, 421, 422, 423, 426, 427, 431, 433, 434, 449, 450, 451, 459, 460, 461, 462, 463, 464, 467, 468, 469, 471, 472, 484, 486, 487, 489, 490, 491, 495, 496, 497, 516, 517, 535, 536, 537, 538, 539, 540, 541, 542, 546, 547, 548, 550, 553, 555, 557, 559, 562, 563, 565, 569, 570, 571, 574, 575, 576, 577, 578, 582, 584, 585, 586, 589, 592, 596, 597, 600, 601, 604, 612, 626, 628, 630, 632, 633, 636, 637, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 658, 660, 662, 663, 666, 667, 669, 671, 672, 676, 677, 679, 680, 681, 682, 683, 684, 685, 688, 690, 692, 693, 694, 696, 697, 698, 699, 702, 705, 706, 710, 713, 719, 720, 732, 733, 734, 735, 741, 744, 748, 751, 754, 755, 756, 757, 760, 773, 775, 777, 784, 786, 789, 794, 801, 804, 819, 821, 822, 828, 832, 840, 862, 863, 864, 865, 868, 869, 877, 878, 879, 881, 883, 884, 895, 912, 913, 916, 919, 923, 926, 929, 930, 933, 937, 938, 942, 943, 986, 988, 989, 990, 996, 1002, 1003, 1006, 1009, 1018, 1025, 1026], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 309, 612, 752, 939, 991, 1018], "mathshortcut": [1, 69], "": [1, 2, 28, 31, 50, 53, 57, 69, 90, 97, 102, 103, 114, 127, 137, 143, 145, 147, 148, 159, 160, 166, 174, 175, 187, 189, 194, 195, 201, 208, 212, 216, 222, 224, 225, 226, 232, 255, 269, 323, 346, 349, 361, 394, 410, 412, 419, 420, 423, 433, 444, 450, 453, 454, 459, 460, 469, 473, 497, 501, 507, 508, 511, 512, 514, 516, 518, 520, 521, 523, 526, 527, 528, 531, 532, 534, 535, 536, 555, 556, 560, 563, 566, 571, 576, 579, 580, 586, 589, 596, 599, 600, 612, 626, 632, 633, 636, 643, 644, 650, 669, 677, 682, 683, 684, 688, 694, 710, 713, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 741, 742, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 761, 762, 768, 775, 791, 792, 799, 802, 805, 806, 813, 815, 816, 819, 820, 821, 822, 824, 827, 828, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 862, 865, 868, 870, 872, 877, 878, 879, 881, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 903, 904, 905, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 937, 938, 939, 940, 942, 943, 945, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 965, 966, 967, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1018], "_": [1, 65, 69, 189, 216, 255, 508, 522, 955, 969, 995, 1018], "squar": [1, 69, 237, 394, 498, 612, 694, 853, 944, 1018], "cube": [1, 69, 462, 612], "s2": [1, 121, 154, 255, 719, 746, 762, 840, 852, 883, 896, 928, 1000, 1009, 1018], "renam": [1, 93, 102, 103, 201, 232, 235, 255, 264, 434, 446, 536, 596, 599, 612, 669, 688, 692, 710, 766, 774, 984, 996, 1018], "n2": [1, 425], "in_plac": [1, 165, 206, 230, 255, 910, 912, 936, 943, 1018], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 74, 75, 90, 91, 95, 97, 99, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 132, 133, 135, 137, 138, 139, 142, 151, 154, 155, 157, 158, 159, 160, 161, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 201, 208, 214, 218, 219, 222, 223, 224, 225, 226, 228, 232, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 265, 266, 267, 268, 269, 280, 287, 288, 290, 291, 294, 303, 304, 305, 306, 307, 315, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 402, 421, 424, 425, 432, 455, 456, 458, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 489, 494, 496, 497, 501, 503, 505, 509, 510, 515, 521, 522, 524, 526, 527, 528, 531, 535, 536, 541, 548, 551, 554, 555, 556, 557, 559, 560, 566, 567, 578, 593, 599, 604, 612, 626, 628, 629, 630, 635, 637, 639, 643, 644, 645, 649, 650, 652, 654, 658, 663, 669, 673, 674, 675, 677, 682, 683, 684, 688, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 713, 717, 718, 719, 720, 730, 737, 742, 746, 747, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 812, 814, 815, 816, 822, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 853, 879, 882, 896, 904, 905, 911, 921, 928, 941, 943, 948, 950, 952, 956, 957, 962, 968, 969, 971, 973, 974, 975, 978, 999, 1000, 1008, 1009, 1018, 1025, 1026], "s3": [1, 30, 105, 114, 118, 255, 883, 1018], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 119, 123, 136, 140, 141, 142, 143, 144, 145, 146, 148, 152, 153, 155, 158, 163, 165, 174, 178, 179, 180, 183, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 229, 230, 232, 255, 266, 268, 281, 302, 304, 307, 308, 312, 313, 316, 380, 397, 404, 405, 406, 411, 426, 451, 458, 462, 463, 471, 472, 489, 495, 497, 512, 518, 526, 538, 542, 554, 558, 561, 566, 567, 568, 570, 571, 575, 577, 582, 585, 586, 587, 588, 589, 590, 598, 600, 601, 603, 612, 631, 632, 633, 634, 636, 640, 646, 649, 653, 654, 663, 666, 668, 669, 680, 681, 685, 688, 691, 710, 713, 758, 779, 829, 852, 862, 863, 864, 869, 884, 903, 907, 913, 915, 918, 920, 922, 924, 959, 965, 973, 1018, 1026], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 136, 141, 142, 154, 161, 163, 167, 198, 201, 211, 226, 227, 230, 232, 248, 255, 262, 266, 268, 281, 302, 304, 307, 309, 312, 313, 316, 320, 340, 351, 352, 380, 385, 393, 397, 404, 418, 421, 458, 466, 471, 473, 479, 481, 491, 495, 508, 529, 542, 557, 564, 569, 570, 612, 645, 646, 648, 653, 669, 680, 685, 688, 705, 710, 760, 772, 783, 785, 793, 799, 800, 806, 807, 840, 852, 862, 879, 913, 915, 921, 923, 925, 938, 955, 976, 1018], "27": [1, 69, 248, 307, 327, 341, 354, 612, 705, 1018, 1026], "16": [1, 31, 43, 59, 67, 160, 161, 232, 255, 304, 307, 380, 451, 462, 515, 557, 569, 574, 575, 578, 612, 644, 645, 673, 688, 710, 713, 799, 806, 903, 939, 962, 991, 1018], "64": [1, 42, 45, 61, 67, 69, 451, 462, 612, 675, 710, 903, 1018], "25": [1, 31, 69, 74, 97, 125, 130, 142, 160, 161, 175, 228, 232, 255, 310, 322, 327, 343, 350, 354, 474, 475, 476, 477, 478, 480, 481, 482, 547, 580, 612, 644, 645, 650, 656, 686, 688, 710, 713, 760, 761, 774, 799, 806, 812, 829, 903, 907, 1018], "125": [1, 31, 69, 255, 262, 612, 903, 1018], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 188, 219, 255, 461, 560, 579, 612, 662, 710, 720, 999, 1000, 1018], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 133, 136, 141, 145, 149, 151, 152, 154, 171, 172, 173, 187, 188, 197, 198, 214, 215, 218, 219, 224, 226, 255, 262, 266, 269, 294, 344, 356, 357, 366, 371, 374, 375, 385, 396, 401, 406, 432, 433, 435, 446, 449, 451, 455, 456, 458, 459, 461, 471, 473, 485, 515, 526, 527, 528, 531, 537, 541, 547, 554, 555, 557, 566, 577, 584, 604, 612, 633, 639, 662, 683, 710, 713, 719, 720, 762, 800, 821, 840, 852, 859, 864, 890, 913, 915, 927, 930, 962, 973, 974, 975, 978, 989, 998, 999, 1000, 1018, 1025, 1026], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 141, 188, 219, 255, 461, 612, 662, 710, 1000, 1018, 1025], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 612, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1025], "width": [2, 24, 31, 102, 103, 255, 282, 283, 284, 285, 512, 518, 534, 710, 732, 733, 734, 735, 959, 965, 981], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 132, 136, 137, 138, 147, 150, 151, 153, 162, 163, 164, 166, 171, 172, 173, 175, 177, 178, 179, 183, 184, 185, 195, 197, 199, 203, 204, 205, 207, 209, 210, 211, 212, 217, 220, 222, 226, 229, 231, 233, 240, 249, 255, 262, 286, 292, 297, 298, 299, 308, 310, 358, 359, 360, 364, 365, 366, 372, 376, 377, 398, 402, 404, 409, 410, 419, 420, 423, 424, 425, 458, 460, 461, 462, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 488, 490, 495, 499, 507, 509, 512, 515, 516, 518, 520, 522, 523, 529, 534, 540, 541, 542, 546, 552, 554, 559, 566, 567, 572, 573, 574, 580, 582, 588, 590, 593, 594, 595, 598, 599, 600, 601, 602, 603, 612, 626, 628, 637, 638, 639, 646, 650, 653, 663, 671, 672, 675, 676, 678, 680, 681, 682, 686, 687, 690, 697, 706, 710, 727, 728, 741, 742, 746, 747, 748, 749, 750, 758, 761, 813, 814, 815, 816, 819, 820, 821, 827, 828, 829, 852, 854, 855, 860, 861, 862, 867, 868, 877, 878, 881, 882, 883, 892, 896, 897, 899, 900, 901, 902, 903, 906, 909, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 933, 934, 937, 942, 945, 954, 956, 959, 962, 963, 965, 967, 969, 970, 976, 981, 987, 988, 989, 990, 997, 1002, 1007, 1018, 1025, 1026], "inner": [2, 47, 56, 75, 124, 174, 227, 255, 282, 283, 284, 285, 311, 412, 545, 612, 649, 685, 691, 710, 732, 733, 734, 735, 762, 870, 1001, 1018], "polarsdatatyp": [2, 47, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 132, 136, 146, 255, 269, 294, 361, 433, 435, 509, 557, 559, 563, 576, 584, 585, 593, 612, 634, 710, 713, 720, 742, 890, 956, 1018], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 93, 102, 103, 113, 118, 135, 137, 138, 142, 145, 151, 154, 155, 167, 174, 179, 180, 186, 189, 191, 204, 205, 208, 209, 210, 214, 219, 222, 225, 227, 229, 232, 238, 255, 264, 268, 269, 279, 286, 288, 297, 298, 299, 302, 304, 307, 310, 312, 313, 321, 325, 329, 331, 333, 338, 345, 357, 358, 359, 360, 361, 364, 365, 366, 367, 372, 380, 387, 388, 389, 390, 391, 397, 404, 405, 408, 409, 411, 413, 419, 424, 425, 426, 435, 456, 457, 460, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 491, 496, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 518, 520, 522, 523, 524, 534, 535, 536, 545, 553, 555, 562, 564, 565, 567, 576, 584, 594, 595, 599, 604, 612, 626, 628, 633, 639, 648, 649, 661, 671, 672, 677, 682, 684, 685, 688, 689, 691, 695, 710, 720, 729, 737, 747, 748, 761, 764, 773, 777, 784, 786, 789, 794, 801, 814, 815, 816, 819, 821, 826, 845, 846, 862, 869, 877, 882, 883, 884, 902, 903, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 928, 933, 934, 938, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 965, 967, 969, 970, 971, 997, 999, 1000, 1001, 1008, 1018, 1025, 1026], "nest": [2, 47, 56, 97, 147, 255, 623, 813, 1018, 1025, 1026], "fix": [2, 106, 123, 125, 353, 474, 475, 476, 477, 478, 480, 481, 482, 612, 809], "length": [2, 12, 47, 73, 100, 113, 123, 132, 160, 161, 207, 255, 308, 343, 350, 420, 425, 444, 473, 474, 475, 476, 477, 478, 480, 481, 482, 495, 512, 514, 518, 520, 534, 559, 593, 594, 595, 612, 644, 645, 663, 676, 710, 746, 758, 759, 768, 799, 806, 854, 878, 883, 901, 907, 915, 916, 917, 918, 919, 920, 922, 923, 924, 942, 959, 961, 965, 967, 981, 1018], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 237, 240, 247, 249, 255, 262, 264, 266, 268, 269, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 310, 311, 315, 316, 317, 323, 339, 342, 343, 344, 346, 348, 349, 350, 353, 355, 356, 357, 358, 359, 360, 361, 364, 366, 367, 371, 372, 373, 374, 375, 376, 377, 380, 381, 385, 394, 396, 398, 401, 402, 403, 404, 405, 406, 409, 410, 411, 412, 419, 420, 421, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 449, 451, 455, 456, 458, 459, 460, 461, 462, 463, 465, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 534, 535, 536, 537, 538, 540, 541, 546, 547, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 579, 580, 582, 583, 584, 585, 586, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 612, 626, 628, 630, 632, 633, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 649, 650, 653, 654, 658, 659, 662, 663, 664, 665, 666, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 686, 688, 689, 690, 691, 692, 694, 697, 704, 706, 710, 713, 716, 719, 720, 729, 735, 736, 737, 738, 739, 740, 741, 742, 744, 747, 748, 749, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 767, 768, 769, 775, 795, 798, 799, 800, 802, 804, 805, 806, 809, 812, 813, 814, 815, 816, 819, 820, 821, 822, 827, 828, 829, 832, 833, 842, 848, 849, 853, 855, 859, 860, 861, 862, 863, 864, 867, 868, 869, 870, 877, 878, 879, 881, 882, 883, 884, 885, 890, 903, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 933, 934, 937, 941, 942, 943, 945, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 978, 981, 982, 984, 988, 989, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1009, 1018, 1025], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 90, 92, 93, 94, 96, 99, 102, 104, 111, 113, 129, 136, 144, 146, 158, 159, 160, 161, 162, 167, 172, 175, 182, 187, 197, 198, 201, 218, 225, 228, 232, 235, 237, 255, 286, 287, 288, 289, 320, 334, 339, 340, 343, 346, 350, 351, 361, 364, 372, 376, 424, 433, 459, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 491, 494, 500, 503, 504, 509, 511, 512, 513, 518, 519, 525, 526, 534, 563, 576, 580, 594, 595, 596, 599, 604, 605, 606, 608, 612, 613, 614, 618, 619, 620, 644, 645, 646, 648, 650, 653, 654, 659, 663, 669, 675, 684, 688, 692, 694, 710, 720, 736, 737, 738, 747, 772, 790, 795, 796, 799, 802, 806, 807, 819, 827, 832, 882, 909, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 938, 941, 947, 950, 951, 956, 958, 959, 960, 965, 966, 972, 973, 981, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1026], "size": [2, 13, 35, 102, 103, 123, 124, 125, 127, 129, 147, 160, 226, 255, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 559, 594, 595, 612, 644, 675, 710, 813, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 1018, 1026], "datatyp": [2, 28, 33, 47, 63, 90, 92, 93, 94, 96, 98, 106, 108, 112, 127, 146, 148, 154, 200, 255, 294, 361, 407, 489, 506, 545, 563, 576, 584, 612, 623, 636, 668, 691, 710, 720, 742, 760, 842, 847, 849, 851, 865, 935, 953, 1001, 1018], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 75, 93, 95, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 142, 145, 149, 150, 151, 155, 158, 160, 161, 162, 163, 167, 171, 172, 175, 177, 178, 179, 180, 181, 183, 185, 187, 189, 190, 191, 193, 197, 198, 199, 204, 205, 208, 209, 210, 211, 214, 215, 219, 222, 226, 227, 228, 229, 238, 239, 241, 242, 243, 245, 246, 255, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 310, 312, 313, 316, 320, 334, 340, 351, 356, 357, 358, 359, 360, 362, 363, 364, 365, 366, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 386, 387, 389, 390, 391, 392, 395, 396, 397, 399, 400, 403, 404, 408, 409, 410, 413, 415, 416, 417, 419, 422, 423, 427, 429, 431, 432, 433, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 465, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 487, 488, 491, 492, 493, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 516, 517, 520, 522, 523, 524, 534, 537, 539, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 554, 556, 558, 562, 565, 567, 569, 570, 571, 577, 578, 583, 584, 586, 587, 588, 589, 590, 592, 593, 594, 595, 600, 604, 612, 626, 633, 638, 639, 644, 645, 647, 648, 650, 655, 656, 657, 658, 660, 661, 664, 666, 671, 672, 677, 678, 679, 682, 685, 686, 691, 695, 696, 698, 699, 700, 702, 703, 710, 713, 715, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 735, 737, 738, 739, 740, 744, 745, 748, 749, 750, 752, 753, 758, 759, 760, 761, 763, 764, 768, 772, 790, 796, 807, 813, 814, 815, 816, 819, 820, 821, 824, 826, 827, 828, 829, 830, 832, 833, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 855, 857, 858, 861, 862, 866, 867, 868, 871, 873, 874, 875, 877, 881, 885, 890, 891, 892, 894, 895, 897, 899, 900, 901, 902, 903, 906, 907, 908, 909, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 933, 934, 938, 939, 940, 941, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 961, 963, 964, 967, 969, 970, 971, 981, 987, 988, 989, 990, 991, 992, 1000, 1001, 1004, 1006, 1008, 1009, 1018, 1026], "within": [2, 47, 120, 121, 160, 161, 175, 228, 255, 467, 497, 612, 644, 645, 650, 710, 1025], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 577, 578, 579, 580, 582, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 597, 598, 599, 600, 601, 603, 604, 612, 623, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 716, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 824, 827, 828, 829, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 854, 862, 863, 864, 865, 868, 869, 870, 872, 877, 878, 879, 881, 883, 884, 889, 890, 891, 892, 893, 894, 895, 896, 897, 903, 904, 905, 907, 908, 909, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 933, 937, 938, 939, 940, 942, 943, 945, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 986, 987, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018, 1025], "dtype": [2, 31, 68, 73, 75, 90, 92, 94, 96, 97, 100, 102, 103, 113, 122, 123, 124, 125, 127, 132, 135, 160, 161, 175, 217, 218, 219, 255, 269, 271, 272, 273, 274, 275, 276, 279, 294, 297, 298, 299, 300, 301, 306, 307, 309, 321, 325, 329, 331, 333, 338, 345, 353, 361, 363, 399, 400, 401, 412, 424, 431, 433, 435, 466, 469, 470, 474, 475, 476, 477, 478, 480, 481, 482, 489, 492, 493, 500, 509, 520, 526, 539, 541, 543, 544, 545, 550, 551, 557, 559, 567, 576, 580, 584, 585, 593, 599, 612, 644, 645, 650, 710, 713, 732, 733, 742, 747, 748, 749, 750, 756, 757, 760, 761, 773, 777, 784, 786, 789, 794, 801, 809, 813, 818, 836, 842, 849, 857, 858, 859, 870, 882, 889, 890, 914, 928, 935, 947, 956, 967, 973, 987, 997, 999, 1000, 1001, 1005, 1018, 1026], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 74, 91, 102, 103, 106, 122, 130, 133, 145, 159, 167, 172, 185, 191, 197, 198, 224, 232, 247, 255, 262, 265, 266, 346, 349, 356, 357, 364, 371, 374, 375, 380, 396, 432, 449, 451, 455, 456, 458, 462, 465, 467, 474, 475, 476, 477, 478, 480, 481, 482, 529, 537, 547, 549, 554, 566, 591, 593, 605, 606, 608, 612, 613, 614, 617, 618, 619, 620, 623, 633, 648, 664, 683, 688, 704, 710, 720, 802, 805, 819, 832, 908, 909, 920, 976, 1001, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1024], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 122, 255, 605, 606, 608, 613, 614, 618, 619, 620, 710, 1010, 1012, 1014, 1019, 1022, 1023, 1024], "A": [5, 28, 31, 50, 53, 72, 74, 97, 102, 103, 104, 111, 113, 129, 130, 154, 160, 175, 189, 198, 214, 226, 227, 228, 232, 255, 261, 316, 321, 325, 329, 331, 333, 338, 345, 356, 357, 364, 374, 375, 383, 386, 387, 389, 396, 425, 432, 433, 434, 444, 455, 456, 463, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 501, 502, 507, 508, 510, 516, 517, 534, 538, 564, 575, 579, 612, 644, 650, 666, 685, 688, 710, 713, 768, 773, 777, 784, 786, 789, 794, 801, 819, 915, 916, 917, 919, 922, 923, 924, 948, 949, 954, 955, 957, 963, 964, 981, 1018, 1025], "encod": [5, 64, 102, 103, 113, 216, 255, 287, 288, 290, 291, 373, 503, 612, 737, 950], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 74, 91, 93, 96, 100, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 140, 145, 159, 160, 161, 162, 172, 175, 181, 199, 201, 207, 216, 218, 223, 224, 226, 232, 255, 269, 353, 376, 385, 405, 411, 420, 424, 425, 426, 435, 461, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 490, 494, 495, 513, 519, 520, 525, 526, 527, 528, 531, 559, 593, 594, 595, 599, 604, 612, 623, 633, 635, 643, 644, 645, 649, 650, 654, 658, 669, 674, 675, 676, 683, 688, 691, 694, 710, 719, 720, 809, 827, 840, 863, 869, 878, 882, 883, 884, 890, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 930, 937, 941, 942, 960, 966, 967, 972, 973, 974, 975, 978, 999, 1018, 1026], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 74, 75, 97, 102, 103, 113, 122, 123, 124, 127, 130, 131, 137, 154, 158, 159, 160, 161, 175, 189, 201, 208, 217, 222, 226, 228, 232, 235, 255, 262, 290, 295, 339, 343, 346, 349, 350, 363, 369, 373, 381, 412, 435, 459, 461, 474, 475, 476, 477, 478, 480, 481, 482, 497, 500, 501, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 534, 555, 556, 560, 562, 564, 565, 571, 579, 586, 589, 596, 599, 600, 612, 626, 635, 642, 643, 644, 645, 650, 669, 677, 682, 688, 691, 692, 710, 713, 739, 744, 795, 799, 802, 805, 806, 818, 833, 870, 946, 947, 948, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 997, 1018, 1026], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 373, 612, 642, 665, 710], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 406, 508, 864, 955], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 74, 75, 90, 91, 95, 97, 100, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 135, 137, 138, 139, 151, 152, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 175, 187, 189, 199, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 225, 228, 230, 232, 239, 241, 242, 245, 255, 265, 266, 267, 268, 269, 279, 285, 287, 288, 290, 291, 294, 303, 304, 305, 306, 307, 308, 326, 342, 344, 355, 356, 357, 358, 359, 360, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 402, 406, 421, 424, 427, 432, 433, 439, 440, 441, 442, 455, 456, 458, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 489, 494, 496, 497, 501, 503, 505, 515, 516, 517, 521, 522, 524, 526, 527, 528, 531, 536, 548, 551, 554, 555, 556, 557, 559, 560, 566, 569, 584, 593, 599, 612, 626, 628, 630, 635, 637, 639, 640, 643, 644, 645, 649, 650, 654, 658, 663, 670, 673, 674, 675, 677, 682, 683, 684, 688, 696, 698, 699, 702, 710, 713, 717, 718, 719, 720, 729, 735, 737, 742, 747, 754, 755, 756, 757, 758, 759, 778, 798, 800, 812, 814, 815, 816, 822, 826, 833, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 860, 861, 864, 879, 882, 885, 904, 905, 907, 909, 910, 911, 912, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 930, 931, 936, 941, 943, 948, 950, 952, 962, 963, 964, 968, 969, 971, 973, 974, 975, 978, 998, 999, 1000, 1003, 1006, 1008, 1018, 1025], "decim": [6, 28, 31, 255, 483, 529, 612, 925, 976, 1018], "temporari": 6, "remov": [6, 8, 143, 216, 227, 255, 269, 361, 434, 513, 519, 525, 526, 528, 576, 612, 632, 685, 710, 960, 966, 972, 973, 975], "later": [6, 74], "onc": [6, 53, 102, 103, 106, 129, 135, 136, 198, 199, 235, 255, 269, 293, 484, 612, 627, 692, 710, 720, 926, 1018], "stabil": 6, "happen": 6, "being": [6, 102, 103, 113, 118, 216, 226, 227, 255, 269, 308, 343, 474, 475, 476, 477, 478, 480, 481, 482, 575, 612, 685, 710, 758, 799, 829, 907, 1018, 1026], "consid": [6, 102, 103, 113, 118, 136, 145, 155, 181, 198, 224, 226, 227, 255, 269, 297, 298, 299, 308, 343, 433, 474, 475, 476, 477, 478, 480, 481, 482, 569, 578, 612, 633, 646, 653, 658, 683, 685, 694, 710, 720, 748, 749, 750, 758, 799, 829, 842, 907, 928, 929, 930, 1018], "break": [6, 118, 226, 227, 255, 269, 308, 343, 474, 475, 476, 477, 478, 480, 481, 482, 612, 685, 710, 758, 799, 829, 907, 1018], "chang": [6, 26, 65, 102, 103, 118, 226, 227, 228, 255, 269, 308, 310, 343, 460, 474, 475, 476, 477, 478, 480, 481, 482, 612, 685, 710, 758, 799, 829, 903, 907, 936, 1018], "current": [6, 9, 26, 52, 91, 97, 104, 131, 135, 138, 139, 174, 255, 322, 343, 425, 460, 612, 623, 628, 629, 649, 710, 713, 747, 751, 766, 774, 799, 903, 1018, 1025], "alpha": [6, 72, 269, 358, 359, 360, 612, 630, 635, 637, 663, 673, 710, 814, 815, 816, 1018], "state": [6, 8, 72, 83, 131, 569, 623, 630, 635, 637, 663, 673, 710], "cfg": [7, 8, 9, 15, 133], "path": [7, 9, 27, 28, 30, 31, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 255, 447, 486, 510, 612, 665, 674, 675, 691, 710, 931, 957, 1018], "previous": 7, "save": [7, 160, 161, 175, 228, 255, 314, 322, 339, 342, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 623, 644, 645, 650, 710, 774, 795, 798, 799, 806], "share": [7, 56, 147, 255, 813, 1018], "option": [7, 8, 9, 26, 30, 31, 39, 65, 74, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 171, 175, 181, 214, 218, 223, 255, 394, 473, 474, 475, 476, 477, 478, 480, 481, 482, 494, 520, 584, 599, 604, 612, 623, 649, 650, 658, 710, 713, 849, 853, 915, 916, 917, 918, 919, 920, 922, 923, 924, 941, 967, 996, 1018], "from": [7, 8, 28, 31, 50, 51, 52, 65, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 142, 143, 147, 149, 158, 160, 161, 172, 173, 175, 176, 181, 189, 193, 197, 199, 201, 216, 223, 224, 226, 228, 255, 303, 309, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 357, 361, 373, 380, 394, 425, 453, 454, 456, 460, 461, 466, 474, 475, 477, 480, 481, 482, 484, 497, 507, 508, 509, 515, 526, 527, 528, 531, 549, 551, 562, 572, 573, 574, 593, 598, 602, 611, 612, 632, 637, 642, 644, 645, 650, 658, 665, 666, 669, 683, 689, 710, 713, 719, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 813, 849, 853, 883, 899, 900, 901, 903, 926, 954, 955, 956, 962, 973, 974, 975, 978, 1006, 1009, 1018, 1025, 1026], "json": [7, 9, 33, 34, 109, 110, 116, 255, 373, 447, 509, 510, 612, 623, 642, 665, 691, 710, 956, 957], "file": [7, 9, 27, 28, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 447, 637, 665, 674, 675, 691, 710, 719, 1018], "produc": [7, 74, 124, 125, 127, 403, 443, 585, 654, 710, 861], "filepath": [7, 9], "same": [7, 18, 30, 31, 54, 56, 65, 72, 73, 74, 75, 107, 113, 123, 133, 136, 143, 159, 208, 224, 232, 235, 237, 255, 261, 268, 363, 439, 442, 459, 473, 474, 475, 476, 477, 478, 480, 481, 482, 497, 536, 563, 612, 632, 643, 654, 677, 683, 688, 692, 710, 715, 719, 720, 768, 818, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1009, 1018], "reset": [8, 133], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 74, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 132, 145, 147, 159, 161, 162, 172, 174, 175, 181, 187, 189, 197, 198, 199, 209, 216, 224, 226, 229, 233, 255, 295, 342, 355, 357, 358, 359, 360, 376, 420, 424, 425, 428, 435, 453, 454, 456, 460, 467, 474, 475, 476, 477, 478, 480, 481, 482, 484, 490, 499, 507, 513, 515, 519, 520, 525, 526, 527, 528, 531, 552, 559, 566, 580, 584, 593, 598, 599, 603, 612, 633, 635, 643, 645, 649, 650, 658, 675, 678, 683, 686, 691, 710, 744, 798, 812, 813, 814, 815, 816, 827, 878, 882, 883, 890, 899, 900, 903, 909, 926, 937, 945, 948, 954, 960, 962, 966, 967, 972, 973, 974, 975, 978, 1007, 1018, 1026], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 74, 90, 91, 92, 94, 96, 97, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 132, 133, 135, 136, 141, 150, 160, 161, 171, 172, 174, 175, 185, 188, 197, 198, 215, 218, 223, 227, 228, 232, 255, 269, 306, 307, 312, 313, 335, 336, 339, 343, 350, 381, 387, 389, 406, 424, 474, 475, 476, 477, 478, 479, 480, 481, 482, 494, 501, 507, 508, 511, 513, 514, 516, 519, 525, 526, 539, 547, 569, 578, 592, 593, 604, 612, 622, 630, 637, 638, 644, 645, 646, 650, 653, 666, 673, 685, 688, 710, 720, 756, 757, 791, 792, 795, 806, 864, 882, 921, 929, 930, 936, 941, 948, 954, 955, 958, 960, 961, 963, 966, 972, 973, 987, 1018, 1025], "oper": [8, 31, 56, 73, 80, 81, 90, 92, 93, 94, 95, 96, 102, 111, 136, 149, 154, 159, 166, 176, 182, 185, 187, 188, 192, 213, 218, 219, 223, 226, 234, 235, 255, 262, 263, 266, 303, 304, 305, 306, 307, 308, 356, 357, 371, 374, 375, 393, 396, 405, 411, 425, 426, 432, 446, 449, 451, 455, 456, 458, 462, 469, 537, 547, 554, 555, 556, 564, 565, 575, 612, 623, 637, 643, 646, 649, 653, 658, 659, 692, 710, 719, 754, 755, 756, 757, 758, 863, 869, 884, 911, 994, 998, 999, 1000, 1008, 1018], "environ": [8, 26, 126, 129], "local": [8, 30, 105, 114, 127, 255, 342, 770, 771, 798, 803, 904, 905, 1018], "non": [8, 31, 39, 65, 74, 95, 161, 173, 181, 201, 227, 232, 255, 381, 425, 460, 473, 474, 475, 476, 477, 478, 480, 481, 482, 502, 508, 555, 556, 562, 564, 565, 571, 586, 589, 594, 595, 596, 599, 600, 612, 645, 658, 669, 685, 688, 710, 833, 883, 903, 915, 916, 917, 918, 919, 920, 922, 923, 924, 949, 955, 999, 1018], "env": [8, 128], "back": [8, 65, 149, 219, 255, 459, 532, 612, 719, 979, 1000, 1018], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 133, 136, 138, 142, 145, 150, 151, 158, 160, 161, 162, 167, 171, 174, 175, 176, 179, 181, 185, 186, 189, 197, 199, 205, 207, 208, 214, 216, 219, 223, 224, 225, 226, 227, 228, 255, 264, 268, 269, 281, 286, 297, 298, 299, 302, 304, 307, 312, 313, 342, 343, 350, 357, 358, 359, 360, 361, 364, 365, 366, 372, 376, 380, 381, 387, 388, 389, 390, 391, 397, 405, 409, 411, 420, 425, 426, 433, 435, 447, 456, 457, 460, 467, 468, 473, 474, 475, 476, 477, 478, 480, 481, 482, 484, 488, 489, 490, 491, 495, 496, 500, 501, 504, 505, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 531, 534, 535, 536, 545, 555, 557, 559, 562, 565, 567, 573, 574, 576, 577, 584, 585, 586, 589, 593, 594, 595, 598, 599, 602, 603, 604, 612, 628, 629, 633, 638, 639, 644, 645, 648, 649, 650, 652, 654, 658, 661, 672, 673, 674, 675, 676, 677, 683, 684, 685, 689, 691, 694, 710, 713, 720, 727, 728, 747, 748, 759, 760, 762, 780, 781, 782, 787, 798, 799, 806, 811, 812, 814, 815, 816, 819, 820, 821, 823, 826, 827, 829, 831, 832, 833, 842, 845, 846, 849, 852, 853, 863, 867, 869, 878, 883, 884, 890, 891, 892, 893, 894, 898, 907, 908, 909, 912, 915, 916, 917, 918, 919, 920, 922, 923, 924, 926, 930, 932, 934, 937, 938, 941, 942, 945, 947, 948, 951, 952, 956, 957, 958, 959, 960, 961, 962, 965, 966, 967, 969, 970, 971, 972, 973, 974, 975, 978, 993, 996, 997, 1000, 1001, 1007, 1008, 1018, 1025], "written": [9, 27, 28, 31, 32, 33, 34, 35, 255, 674, 675, 691, 710], "contain": [9, 31, 65, 71, 92, 95, 97, 105, 114, 120, 124, 137, 145, 160, 173, 185, 189, 222, 255, 269, 290, 291, 385, 435, 502, 505, 507, 508, 510, 523, 524, 612, 626, 633, 644, 663, 682, 710, 713, 890, 896, 949, 952, 954, 955, 957, 970, 971, 994, 1018], "where": [9, 31, 50, 65, 70, 104, 124, 145, 149, 172, 181, 198, 209, 229, 255, 280, 352, 355, 357, 456, 485, 494, 497, 499, 552, 566, 594, 595, 598, 603, 604, 612, 658, 678, 686, 710, 719, 730, 808, 812, 927, 941, 945, 1007, 1009, 1018, 1025], "ascii": [10, 18, 512, 514, 518, 534, 959, 961, 965, 981], "charact": [10, 12, 18, 24, 28, 102, 103, 113, 255, 339, 506, 508, 511, 512, 513, 518, 519, 521, 522, 525, 534, 663, 710, 713, 795, 953, 955, 958, 959, 960, 965, 966, 968, 969, 972, 981], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 255], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 90, 97, 102, 103, 105, 113, 114, 189, 213, 219, 226, 227, 255, 685, 710, 1000, 1018, 1025], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 74, 91, 95, 97, 100, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 142, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 228, 230, 232, 238, 239, 241, 242, 243, 245, 248, 255, 265, 266, 267, 269, 279, 285, 287, 290, 291, 303, 304, 305, 306, 307, 308, 326, 342, 344, 355, 356, 357, 358, 359, 360, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 402, 406, 421, 424, 427, 432, 433, 455, 456, 458, 467, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 489, 494, 496, 497, 501, 505, 509, 515, 516, 517, 521, 522, 524, 526, 527, 528, 548, 551, 554, 555, 556, 559, 560, 566, 569, 584, 593, 599, 604, 612, 626, 628, 629, 630, 635, 637, 643, 644, 645, 649, 650, 652, 654, 663, 670, 673, 674, 675, 677, 682, 683, 688, 695, 696, 698, 699, 700, 702, 705, 710, 713, 719, 729, 735, 742, 746, 747, 754, 755, 756, 757, 758, 759, 778, 798, 800, 812, 814, 815, 816, 822, 833, 834, 835, 837, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 853, 864, 879, 882, 885, 896, 904, 905, 907, 909, 910, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 928, 931, 936, 941, 943, 948, 952, 956, 962, 963, 964, 968, 969, 971, 973, 974, 975, 998, 999, 1000, 1003, 1006, 1008, 1009, 1018, 1025], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 508, 516, 612, 713, 955, 963], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 502, 508, 612, 949, 955, 996, 1018], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 47, 50, 65, 67, 69, 93, 118, 125, 138, 139, 141, 142, 143, 146, 150, 151, 154, 157, 158, 159, 166, 174, 175, 179, 180, 189, 190, 191, 207, 208, 209, 229, 232, 235, 239, 241, 242, 243, 244, 245, 247, 248, 255, 261, 271, 272, 273, 274, 275, 276, 294, 296, 300, 301, 308, 309, 312, 313, 344, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 370, 371, 374, 375, 380, 387, 389, 390, 391, 393, 394, 396, 416, 428, 429, 430, 432, 436, 437, 438, 448, 451, 453, 454, 455, 456, 460, 462, 465, 466, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 492, 493, 494, 498, 499, 543, 544, 547, 552, 561, 562, 564, 566, 568, 576, 587, 588, 598, 603, 612, 628, 632, 638, 639, 643, 649, 650, 656, 657, 664, 677, 678, 686, 688, 689, 692, 696, 698, 699, 700, 701, 702, 704, 705, 710, 713, 721, 722, 723, 724, 725, 726, 745, 752, 753, 758, 759, 760, 800, 815, 816, 820, 824, 829, 903, 907, 915, 917, 918, 920, 921, 922, 924, 925, 939, 940, 944, 991, 992, 1005, 1018, 1026], "fmt": [11, 379, 579, 612, 647, 710], "floatfmt": 11, "mix": [11, 526, 528, 760, 973, 975, 1018], "control": [11, 31, 55, 73, 123, 255, 635, 710], "how": [11, 30, 31, 56, 65, 73, 75, 93, 96, 104, 145, 174, 226, 227, 255, 295, 310, 380, 403, 404, 459, 470, 479, 509, 604, 612, 633, 649, 685, 710, 744, 761, 861, 862, 921, 956, 1018], "float": [11, 31, 41, 42, 118, 120, 121, 122, 125, 127, 142, 147, 150, 175, 191, 199, 205, 247, 255, 296, 297, 298, 299, 312, 313, 344, 355, 356, 357, 358, 359, 360, 365, 370, 374, 375, 380, 383, 386, 387, 389, 390, 391, 396, 402, 428, 432, 436, 448, 453, 454, 455, 456, 462, 465, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 547, 561, 587, 588, 591, 593, 598, 600, 603, 612, 638, 650, 664, 672, 673, 704, 710, 713, 742, 745, 748, 749, 750, 759, 760, 762, 800, 812, 813, 814, 815, 816, 820, 824, 829, 839, 853, 860, 861, 886, 892, 893, 899, 900, 906, 907, 908, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 929, 930, 941, 945, 987, 1007, 1018, 1026], "point": [11, 31, 41, 42, 74, 125, 127, 150, 160, 176, 255, 296, 312, 313, 344, 365, 370, 387, 389, 483, 484, 612, 638, 644, 654, 666, 710, 745, 800, 820, 824, 839, 925, 926, 1018], "full": [11, 38, 65, 71, 73, 102, 103, 105, 113, 114, 160, 161, 255, 526, 527, 528, 531, 644, 645, 654, 710, 973, 974, 975, 978], "format": [11, 14, 18, 28, 31, 101, 102, 103, 113, 118, 148, 158, 172, 181, 198, 215, 253, 255, 343, 346, 349, 515, 526, 527, 528, 531, 556, 636, 642, 658, 691, 710, 802, 805, 962, 973, 974, 975, 978, 1017], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 74, 84, 90, 92, 94, 96, 99, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 137, 138, 147, 148, 150, 151, 163, 172, 173, 176, 177, 184, 185, 199, 204, 205, 209, 211, 222, 226, 229, 238, 240, 249, 255, 280, 286, 292, 302, 308, 310, 324, 327, 332, 334, 344, 351, 352, 354, 358, 359, 360, 364, 366, 372, 377, 387, 389, 397, 398, 404, 410, 419, 423, 425, 461, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 487, 488, 490, 499, 511, 514, 516, 522, 523, 529, 540, 546, 552, 566, 567, 582, 594, 595, 598, 601, 603, 612, 626, 628, 636, 637, 638, 639, 646, 653, 663, 671, 672, 675, 678, 680, 682, 686, 695, 697, 706, 710, 741, 747, 758, 761, 776, 779, 788, 790, 800, 807, 808, 810, 813, 814, 815, 816, 819, 821, 828, 839, 855, 862, 868, 877, 881, 883, 896, 897, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 933, 934, 937, 945, 958, 961, 963, 969, 970, 976, 988, 1002, 1007, 1018, 1026], "plai": [12, 565], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 106, 255, 710], "time": [12, 30, 38, 40, 50, 55, 71, 72, 74, 113, 130, 149, 160, 161, 175, 228, 255, 292, 314, 315, 316, 317, 322, 323, 339, 342, 343, 346, 348, 349, 350, 353, 401, 402, 425, 474, 475, 476, 477, 478, 480, 481, 482, 526, 528, 531, 545, 546, 564, 565, 574, 580, 612, 630, 644, 645, 650, 663, 710, 713, 719, 741, 766, 767, 768, 769, 774, 775, 795, 798, 799, 802, 804, 805, 806, 809, 859, 861, 973, 975, 978, 1001, 1002, 1018, 1026], "goe": 12, "By": [12, 13, 65, 102, 103, 106, 113, 160, 161, 175, 209, 228, 229, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 499, 515, 552, 566, 584, 598, 603, 612, 644, 645, 650, 678, 686, 710, 795, 799, 806, 945, 962, 999, 1007, 1018], "begin": [12, 74, 358, 359, 360, 507, 612, 814, 815, 816, 954, 1018], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 173, 255, 303, 471, 512, 518, 534, 612, 759, 907, 913, 959, 965, 981, 1018], "u32": [12, 50, 70, 160, 186, 233, 238, 246, 248, 255, 263, 270, 277, 278, 279, 280, 281, 302, 303, 320, 324, 328, 332, 334, 340, 341, 344, 351, 352, 397, 399, 400, 403, 414, 435, 452, 457, 467, 474, 475, 477, 480, 481, 482, 485, 502, 511, 514, 545, 549, 558, 560, 567, 590, 612, 644, 661, 690, 695, 703, 705, 710, 729, 730, 731, 742, 772, 776, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 829, 872, 909, 949, 958, 961, 1001, 1004, 1006, 1018], "37": 12, "beaut": 12, "48": [12, 161, 255, 645, 710], "fmt_str_length": 12, "50": [12, 31, 149, 255, 297, 298, 299, 343, 350, 612, 748, 806, 1018], "print": [12, 15, 17, 18, 23, 103, 119, 146, 158, 159, 173, 176, 217, 234, 255, 379, 574, 612, 647, 710, 840, 915, 997, 1018, 1026], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 102, 103, 113, 135, 255, 637, 710], "chunk": [13, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 149, 173, 184, 255, 268, 468, 612, 675, 710, 719, 746, 825, 896, 910, 994, 1018], "stream": [13, 32, 72, 159, 174, 224, 255, 630, 635, 637, 643, 649, 654, 658, 663, 673, 674, 675, 683, 710], "engin": [13, 29, 104, 129, 136, 159, 174, 224, 237, 255, 643, 649, 654, 658, 683, 694, 710, 720, 1018], "determin": [13, 31, 63, 65, 73, 93, 96, 100, 102, 103, 106, 111, 113, 117, 132, 136, 154, 160, 161, 172, 173, 223, 228, 255, 295, 326, 342, 425, 435, 443, 470, 474, 475, 476, 477, 478, 480, 481, 482, 494, 509, 529, 593, 612, 644, 645, 710, 744, 778, 798, 829, 883, 890, 941, 956, 976, 1018], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 102, 103, 108, 112, 113, 116, 123, 125, 136, 138, 139, 146, 147, 182, 185, 218, 255, 282, 283, 284, 425, 443, 509, 554, 599, 612, 628, 629, 634, 654, 659, 691, 694, 710, 713, 734, 751, 956, 1018], "thread": [13, 28, 99, 102, 103, 104, 129, 255, 269, 406, 612, 864], "pool": [13, 129], "For": [13, 30, 31, 74, 104, 105, 106, 114, 149, 161, 174, 175, 237, 255, 294, 358, 359, 360, 425, 444, 469, 494, 501, 507, 508, 516, 569, 578, 579, 612, 645, 650, 694, 710, 719, 814, 815, 816, 911, 941, 948, 954, 955, 963, 999, 1018], "some": [13, 26, 30, 31, 93, 102, 103, 113, 145, 255, 633, 710, 840, 1018, 1026], "dataset": [13, 102, 103, 113, 118, 174, 255, 394, 612, 623, 649, 654, 710, 853, 1018], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 136, 137, 146, 147, 149, 151, 154, 160, 161, 174, 188, 197, 201, 208, 216, 218, 222, 224, 255, 297, 298, 299, 342, 358, 359, 360, 366, 425, 433, 435, 444, 461, 496, 497, 513, 519, 525, 526, 560, 569, 578, 612, 626, 639, 644, 645, 649, 654, 669, 675, 677, 682, 683, 710, 719, 748, 749, 750, 798, 813, 814, 815, 816, 821, 890, 929, 930, 960, 966, 972, 973, 995, 1018], "have": [13, 26, 31, 65, 74, 75, 91, 102, 103, 106, 125, 127, 149, 161, 172, 192, 198, 215, 255, 293, 308, 358, 359, 360, 444, 467, 526, 528, 612, 645, 658, 673, 690, 710, 713, 719, 758, 814, 815, 816, 826, 909, 973, 975, 1018, 1026], "larg": [13, 65, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "element": [13, 23, 124, 127, 137, 171, 189, 197, 209, 222, 229, 255, 269, 271, 272, 273, 274, 275, 276, 292, 300, 301, 303, 304, 305, 306, 307, 308, 362, 376, 385, 403, 405, 406, 407, 411, 426, 429, 430, 459, 460, 467, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 491, 492, 493, 498, 499, 522, 523, 529, 543, 544, 546, 552, 566, 594, 595, 598, 603, 612, 626, 678, 682, 686, 710, 720, 721, 722, 723, 724, 725, 726, 741, 747, 752, 753, 754, 755, 756, 757, 758, 817, 822, 828, 840, 852, 855, 861, 863, 864, 865, 869, 884, 887, 888, 903, 909, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 938, 939, 940, 944, 945, 969, 970, 976, 988, 991, 992, 997, 1002, 1003, 1007, 1018], "too": [13, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "optimist": 13, "lead": [13, 97, 118, 160, 161, 255, 269, 433, 486, 513, 525, 534, 541, 551, 566, 612, 644, 645, 654, 694, 710, 720, 931, 960, 972, 981, 1018], "out": [13, 97, 119, 161, 255, 288, 383, 386, 409, 424, 501, 503, 604, 612, 645, 674, 675, 710, 737, 867, 882, 948, 950], "memori": [13, 73, 90, 91, 94, 95, 96, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 149, 206, 237, 255, 459, 468, 489, 612, 675, 710, 719, 720, 910, 935, 936, 1018], "error": [13, 30, 76, 102, 103, 113, 160, 161, 175, 189, 197, 228, 255, 288, 294, 339, 343, 350, 393, 412, 424, 474, 475, 476, 477, 478, 480, 481, 482, 501, 503, 507, 509, 510, 526, 527, 528, 531, 612, 644, 645, 650, 694, 710, 737, 742, 795, 799, 806, 870, 882, 948, 950, 954, 956, 957, 973, 974, 975, 978, 1018], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 82, 84, 89, 93, 94, 96, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 136, 137, 138, 145, 149, 152, 154, 158, 160, 162, 163, 168, 170, 171, 172, 173, 175, 176, 177, 181, 185, 199, 207, 211, 212, 215, 217, 222, 224, 226, 227, 233, 237, 240, 249, 255, 269, 280, 363, 377, 398, 407, 425, 459, 460, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 495, 497, 506, 509, 540, 559, 560, 569, 570, 578, 582, 586, 589, 592, 594, 595, 601, 604, 612, 626, 628, 630, 633, 637, 640, 641, 644, 646, 650, 651, 653, 654, 658, 675, 676, 680, 681, 682, 683, 685, 690, 694, 697, 706, 710, 719, 818, 828, 852, 865, 903, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 942, 953, 956, 988, 1018, 1026], "per": [13, 28, 31, 123, 125, 137, 158, 185, 186, 208, 222, 244, 246, 247, 255, 269, 293, 406, 409, 424, 497, 560, 612, 626, 677, 682, 701, 703, 704, 710, 864, 867, 882], "everi": [13, 102, 103, 113, 160, 212, 215, 228, 255, 303, 304, 305, 306, 307, 308, 343, 350, 363, 399, 400, 404, 405, 407, 409, 410, 420, 423, 506, 542, 569, 570, 612, 637, 644, 681, 710, 754, 755, 756, 757, 758, 799, 806, 818, 857, 858, 862, 863, 865, 867, 868, 878, 881, 953, 990, 1018], "process": [13, 28, 129, 255, 674, 675, 710], "liter": [14, 18, 30, 50, 70, 74, 100, 106, 125, 126, 127, 128, 130, 132, 158, 172, 178, 179, 183, 184, 187, 197, 198, 201, 210, 214, 227, 232, 255, 265, 267, 287, 316, 356, 357, 364, 371, 374, 375, 381, 393, 396, 432, 449, 451, 455, 456, 462, 501, 516, 517, 537, 547, 555, 556, 559, 562, 564, 565, 571, 572, 573, 584, 586, 589, 593, 596, 599, 600, 602, 612, 639, 669, 685, 688, 710, 713, 717, 718, 736, 768, 819, 833, 929, 930, 948, 963, 964, 1018, 1025], "left": [14, 52, 65, 74, 120, 121, 130, 160, 161, 174, 175, 227, 255, 358, 359, 360, 380, 381, 474, 475, 476, 477, 478, 480, 481, 482, 485, 512, 534, 545, 562, 569, 570, 578, 592, 604, 612, 644, 645, 649, 650, 685, 710, 814, 815, 816, 833, 927, 959, 981, 1001, 1018], "center": [14, 31, 255, 358, 359, 360, 473, 474, 475, 476, 477, 478, 480, 481, 482, 612, 814, 815, 816, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1018], "right": [14, 16, 31, 74, 102, 103, 120, 121, 130, 160, 161, 174, 175, 255, 358, 359, 360, 381, 405, 411, 426, 474, 475, 476, 477, 478, 480, 481, 482, 485, 494, 518, 562, 612, 644, 645, 649, 650, 710, 814, 815, 816, 833, 863, 869, 884, 927, 941, 965, 1018], "cell": 14, "align": [14, 31, 65, 73, 255, 534, 981], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 147, 255, 813, 1018], "eg": [15, 23, 31, 255, 343, 526, 528, 547, 612, 973, 975], "low": [15, 129], "rang": [15, 31, 74, 104, 130, 142, 147, 160, 173, 255, 309, 320, 334, 340, 341, 343, 350, 351, 380, 559, 564, 572, 573, 602, 612, 644, 710, 759, 760, 772, 790, 796, 797, 799, 806, 807, 813, 903, 907, 1018], "100": [15, 31, 93, 96, 102, 103, 113, 116, 255, 509, 529, 534, 710, 916, 917, 919, 956, 976, 1018, 1026], "98": [15, 166, 255, 292, 496, 529, 541, 546, 612, 976], "99": [15, 31, 150, 151, 166, 169, 255, 263, 292, 364, 366, 496, 541, 546, 612, 638, 639, 710, 812, 819, 1018], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 97, 104, 113, 125, 127, 130, 139, 149, 157, 160, 161, 163, 165, 166, 167, 184, 188, 190, 194, 195, 201, 211, 232, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 268, 277, 278, 279, 281, 297, 302, 304, 307, 310, 312, 313, 314, 316, 322, 335, 336, 342, 343, 350, 353, 376, 377, 380, 385, 393, 397, 398, 404, 410, 419, 420, 423, 429, 460, 461, 495, 534, 540, 554, 562, 569, 575, 578, 580, 582, 584, 585, 601, 612, 630, 644, 645, 646, 648, 653, 662, 663, 669, 675, 679, 680, 688, 692, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 713, 720, 748, 759, 761, 766, 768, 774, 798, 806, 809, 812, 828, 840, 855, 862, 868, 877, 878, 881, 887, 903, 929, 930, 988, 1018, 1026], "95": [15, 263, 612], "96": [15, 263, 612], "97": [15, 166, 255, 263, 612], "move": [16, 255, 358, 359, 360, 474, 475, 477, 481, 612, 814, 815, 816, 916, 917, 919, 923, 1018], "inlin": [16, 255, 501, 507, 508, 516, 948, 954, 955, 963], "parenthes": 16, "below": [17, 31, 74, 105, 114, 145, 255, 366, 380, 604, 612, 633, 710], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 502, 507, 510, 949, 954, 957], "rounded_corn": 18, "style": [18, 31, 189, 255], "border": 18, "line": [18, 31, 102, 103, 106, 113, 158, 168, 170, 255, 507, 954], "includ": [18, 26, 28, 30, 31, 71, 105, 114, 125, 137, 142, 147, 160, 222, 223, 226, 255, 344, 381, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 519, 521, 522, 525, 569, 594, 595, 612, 626, 644, 682, 710, 760, 800, 813, 833, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 968, 969, 972, 1008, 1018], "divid": [18, 343, 350, 358, 359, 360, 394, 612, 799, 806, 814, 815, 816, 853, 1018], "dens": [18, 158, 255, 467, 612, 909, 1018], "space": [18, 160, 255, 644, 710], "horizont": [18, 73, 154, 165, 226, 255, 555, 556, 564, 565, 569, 570, 571, 575, 578, 586, 589, 592, 600], "markdown": 18, "compat": [18, 31, 35, 104, 255, 501, 502, 507, 508, 516, 517, 675, 710, 713, 948, 949, 954, 955, 963, 964], "No": [18, 532, 979], "appli": [18, 28, 31, 50, 73, 113, 122, 125, 127, 154, 188, 255, 320, 324, 326, 327, 328, 330, 332, 334, 337, 340, 341, 344, 351, 352, 354, 359, 360, 433, 461, 473, 474, 475, 477, 481, 516, 526, 527, 528, 531, 554, 569, 570, 578, 585, 592, 612, 646, 653, 654, 662, 710, 770, 771, 772, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 803, 807, 808, 810, 815, 816, 915, 916, 917, 919, 923, 963, 973, 974, 975, 978, 1018], "round": [18, 31, 67, 97, 255, 296, 370, 543, 612, 745, 824, 1018], "corner": [18, 97], "op": [18, 127, 255, 470, 526, 528, 612, 710, 973, 975, 1018], "one": [18, 29, 31, 55, 65, 74, 82, 90, 92, 93, 94, 95, 96, 126, 127, 128, 133, 151, 152, 158, 159, 160, 161, 172, 181, 189, 197, 198, 202, 218, 221, 236, 255, 263, 366, 393, 425, 430, 473, 496, 508, 541, 600, 604, 612, 639, 640, 643, 644, 645, 658, 670, 689, 693, 710, 719, 821, 849, 883, 888, 915, 955, 982, 1018], "more": [18, 31, 33, 35, 55, 65, 73, 89, 90, 91, 92, 93, 94, 95, 96, 105, 111, 114, 125, 127, 133, 136, 141, 142, 172, 176, 181, 185, 197, 198, 199, 218, 224, 237, 255, 266, 269, 285, 297, 298, 299, 393, 394, 427, 430, 433, 458, 484, 494, 508, 526, 527, 528, 548, 600, 604, 612, 658, 675, 683, 710, 713, 720, 735, 748, 749, 750, 760, 849, 853, 885, 926, 941, 955, 973, 974, 975, 1003, 1018, 1026], "semigraph": 18, "box": [18, 136, 255], "draw": [18, 23, 24, 124, 1026], "found": [18, 28, 52, 77, 86, 88, 93, 97, 146, 227, 255, 485, 510, 526, 528, 612, 685, 710, 927, 957, 973, 975, 1018, 1025], "unicod": 18, "block": [18, 159, 224, 255, 643, 666, 683, 690, 694, 710, 929, 930, 1018], "http": [18, 31, 91, 104, 135, 141, 255, 507, 954], "en": [18, 31, 255], "wikipedia": 18, "org": [18, 91, 104, 135, 141, 255], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 255], "etc": [19, 30, 31, 102, 105, 107, 111, 114, 115, 117, 255, 559, 713, 929, 930, 1018], "inform": [21, 71, 74, 105, 114, 141, 255, 297, 298, 299, 394, 494, 501, 507, 508, 516, 612, 663, 710, 748, 749, 750, 853, 941, 948, 954, 955, 963, 1018], "separ": [22, 28, 99, 102, 103, 113, 187, 189, 216, 223, 225, 255, 269, 407, 412, 506, 565, 569, 570, 612, 684, 710, 865, 870, 953, 986, 995, 1018], "between": [22, 73, 122, 123, 125, 127, 191, 247, 255, 294, 311, 381, 405, 411, 412, 426, 460, 465, 478, 500, 566, 568, 591, 594, 595, 612, 664, 704, 710, 742, 762, 833, 863, 869, 870, 884, 903, 908, 920, 947, 1018], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 129, 142, 151, 159, 160, 161, 189, 255, 297, 298, 304, 366, 425, 459, 467, 474, 486, 523, 597, 612, 639, 643, 644, 645, 675, 710, 748, 749, 754, 760, 821, 883, 909, 916, 931, 970, 1018], "both": [23, 28, 56, 74, 104, 130, 160, 161, 174, 175, 182, 197, 255, 268, 381, 474, 475, 476, 477, 478, 480, 481, 482, 612, 622, 644, 645, 649, 650, 659, 710, 833, 842, 1018], "tbl_row": 23, "char": [24, 56, 75, 508, 514, 955, 961], "enabl": [25, 75, 131, 201, 232, 255, 486, 612, 669, 688, 710, 931, 1018], "addit": [25, 30, 31, 93, 105, 114, 123, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 262, 322, 361, 364, 459, 497, 501, 507, 508, 516, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 596, 599, 600, 612, 632, 636, 643, 669, 670, 677, 684, 688, 692, 710, 766, 774, 819, 948, 954, 955, 963, 1018], "verbos": [25, 133, 508, 955], "debug": [25, 630, 637, 654, 710, 1026], "log": [25, 67, 292, 355, 430, 451, 462, 546, 612, 741, 812, 1002, 1018], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 90, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 172, 187, 193, 197, 198, 200, 214, 215, 255, 435, 612, 666, 668, 710, 890, 1018], "show": [26, 31, 54, 145, 158, 176, 186, 255, 633, 663, 673, 710], "variabl": [26, 47, 52, 126, 129, 181, 216, 255, 658, 710, 995, 1018, 1025], "restrict": [26, 74, 523, 970], "dictionari": [26, 31, 90, 92, 93, 94, 96, 102, 103, 108, 112, 113, 172, 187, 197, 198, 214, 215, 255, 435, 612, 710, 760, 890, 1018], "those": [26, 31, 102, 255, 467, 507, 612, 713, 909, 954, 1018], "been": [26, 31, 255, 467, 474, 475, 476, 477, 478, 480, 481, 482, 612, 909, 1018], "set_fmt_float": 26, "directli": [26, 52, 125, 127, 133, 255, 358, 359, 360, 593, 612, 710, 814, 815, 816, 1018, 1026], "via": [26, 102, 103, 106, 113, 115, 116, 117, 172, 198, 255, 269, 612], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 101, 102, 106, 107, 108, 111, 112, 255], "bytesio": [27, 28, 31, 32, 35, 101, 102, 103, 106, 107, 111, 255], "compress": [27, 32, 35, 255, 674, 675, 710], "avrocompress": [27, 255], "uncompress": [27, 32, 35, 107, 115, 255, 675, 710], "write": [27, 28, 29, 30, 31, 32, 33, 35, 103, 107, 133, 255, 297, 298, 299, 447, 612, 652, 673, 675, 691, 710, 748, 749, 750, 1018], "apach": [27, 35, 101, 104, 255], "avro": [27, 101, 255, 623], "should": [27, 28, 31, 32, 33, 34, 35, 73, 90, 92, 94, 96, 105, 113, 122, 123, 127, 135, 136, 143, 160, 161, 172, 175, 197, 198, 215, 216, 225, 228, 237, 255, 263, 269, 295, 308, 339, 343, 350, 353, 361, 387, 389, 406, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 494, 563, 576, 583, 584, 594, 595, 604, 612, 632, 644, 645, 649, 650, 654, 673, 674, 675, 684, 691, 710, 713, 720, 744, 758, 795, 799, 806, 809, 864, 915, 916, 917, 918, 919, 920, 922, 923, 924, 927, 941, 1018], "snappi": [27, 35, 255, 675, 710], "deflat": [27, 255], "import": [27, 28, 31, 32, 35, 38, 65, 74, 90, 94, 95, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 158, 160, 173, 175, 218, 219, 226, 228, 255, 309, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 574, 612, 623, 644, 650, 654, 710, 752, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 837, 841, 843, 844, 849, 915, 939, 991, 1018, 1026], "pathlib": [27, 28, 32, 35, 113, 255], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 231, 234, 255, 264, 297, 298, 299, 339, 377, 379, 398, 402, 408, 409, 413, 414, 471, 487, 488, 500, 502, 504, 506, 508, 513, 519, 521, 523, 525, 530, 533, 540, 542, 555, 558, 561, 563, 566, 567, 568, 577, 581, 582, 586, 587, 588, 589, 590, 591, 596, 598, 601, 603, 604, 612, 631, 632, 633, 634, 640, 647, 648, 649, 661, 666, 668, 669, 683, 684, 687, 689, 691, 710, 713, 748, 795, 870, 913, 949, 951, 953, 955, 970, 977, 980, 1018], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 163, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 224, 225, 229, 230, 234, 255, 264, 379, 414, 494, 504, 506, 521, 523, 555, 558, 561, 563, 566, 567, 568, 577, 582, 586, 587, 588, 589, 590, 596, 598, 601, 603, 604, 612, 631, 632, 633, 634, 640, 647, 648, 649, 661, 666, 668, 669, 683, 684, 687, 691, 710, 713, 870, 941, 951, 953, 970, 1018], "ham": [27, 28, 30, 32, 35, 140, 141, 143, 144, 145, 146, 152, 153, 155, 162, 163, 165, 174, 178, 179, 180, 183, 186, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 216, 217, 218, 219, 220, 224, 229, 230, 255, 563, 631, 632, 633, 634, 640, 649, 661, 666, 668, 669, 683, 689, 710], "d": [27, 28, 30, 32, 35, 56, 75, 93, 118, 142, 158, 160, 162, 163, 166, 174, 211, 213, 226, 230, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 262, 323, 346, 349, 381, 461, 489, 502, 508, 522, 526, 527, 528, 562, 580, 612, 644, 649, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 775, 802, 805, 833, 949, 955, 969, 973, 974, 975, 1018], "e": [27, 28, 30, 32, 35, 56, 75, 91, 102, 103, 106, 107, 111, 115, 117, 142, 158, 160, 161, 163, 175, 211, 213, 218, 226, 228, 255, 262, 269, 339, 343, 350, 355, 361, 381, 428, 435, 474, 475, 476, 477, 478, 480, 481, 482, 489, 494, 576, 604, 612, 644, 645, 650, 652, 666, 710, 713, 795, 799, 806, 812, 833, 928, 941, 999, 1018], "dirpath": [27, 28, 32, 35, 113, 255], "new_fil": [27, 28, 32, 35, 255], "has_head": [28, 31, 102, 103, 106, 113, 255], "quot": [28, 102, 103, 113, 255], "batch_siz": [28, 102, 103, 116, 255], "1024": [28, 102, 103, 116, 255, 675, 710], "datetime_format": [28, 255], "date_format": [28, 255], "time_format": [28, 255], "float_precis": [28, 31, 255], "null_valu": [28, 102, 103, 113, 255], "textiowrapp": [28, 255], "comma": [28, 255], "csv": [28, 102, 103, 106, 113, 255, 623, 674, 675, 710], "result": [28, 33, 34, 65, 73, 74, 94, 96, 100, 104, 105, 113, 115, 117, 118, 127, 132, 149, 160, 161, 174, 185, 205, 219, 228, 235, 255, 269, 346, 349, 358, 359, 360, 364, 394, 425, 433, 459, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 486, 488, 521, 522, 528, 547, 559, 569, 570, 585, 593, 594, 595, 612, 627, 644, 645, 649, 654, 663, 672, 674, 675, 691, 692, 710, 719, 720, 802, 805, 814, 815, 816, 853, 913, 915, 916, 917, 918, 919, 920, 922, 923, 924, 931, 934, 968, 969, 975, 999, 1018, 1025, 1026], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 132, 135, 136, 137, 145, 149, 158, 160, 161, 163, 171, 172, 175, 177, 181, 185, 198, 199, 207, 211, 215, 216, 218, 222, 223, 224, 226, 227, 255, 269, 297, 298, 299, 316, 335, 336, 342, 367, 394, 420, 425, 433, 435, 459, 467, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 490, 494, 495, 509, 511, 513, 514, 519, 520, 521, 522, 523, 525, 526, 527, 528, 531, 555, 556, 557, 559, 566, 567, 569, 571, 578, 584, 586, 589, 593, 594, 595, 599, 600, 604, 612, 626, 633, 635, 644, 645, 649, 650, 654, 658, 666, 675, 676, 682, 683, 685, 691, 694, 710, 713, 719, 720, 748, 749, 750, 759, 768, 791, 792, 798, 826, 828, 829, 852, 853, 855, 878, 883, 907, 909, 911, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 926, 927, 931, 937, 941, 942, 956, 958, 960, 961, 966, 967, 968, 969, 970, 972, 973, 974, 975, 978, 988, 994, 999, 1008, 1018, 1025], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 74, 100, 102, 111, 125, 130, 132, 136, 160, 161, 172, 175, 185, 187, 197, 198, 201, 219, 228, 232, 255, 279, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 511, 513, 519, 525, 559, 586, 589, 593, 599, 612, 638, 644, 645, 650, 669, 688, 691, 710, 713, 729, 795, 799, 806, 929, 930, 958, 960, 966, 972, 1000, 1018, 1025], "whether": [28, 74, 94, 96, 127, 130, 202, 255, 326, 342, 344, 440, 441, 486, 612, 654, 670, 710, 713, 778, 798, 800, 1025], "header": [28, 31, 35, 97, 102, 103, 106, 113, 146, 189, 223, 255, 675, 710], "field": [28, 57, 86, 88, 93, 218, 225, 255, 425, 435, 508, 509, 522, 523, 536, 569, 570, 585, 599, 612, 684, 710, 883, 969, 970, 984, 986], "symbol": [28, 255], "byte": [28, 102, 103, 106, 107, 108, 111, 112, 113, 147, 255, 287, 290, 291, 511, 514, 675, 710, 736, 739, 740, 813, 958, 961, 1018], "specifi": [28, 31, 65, 74, 77, 86, 88, 106, 125, 137, 143, 147, 148, 151, 159, 160, 161, 174, 187, 197, 201, 202, 208, 222, 225, 232, 235, 255, 358, 359, 360, 361, 366, 435, 459, 470, 474, 475, 476, 477, 478, 480, 481, 482, 497, 512, 518, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 596, 599, 600, 612, 626, 632, 636, 639, 643, 644, 645, 649, 669, 670, 677, 682, 684, 688, 692, 710, 813, 814, 815, 816, 821, 959, 965, 1018], "defin": [28, 31, 38, 74, 122, 123, 125, 130, 136, 160, 161, 185, 188, 237, 255, 269, 381, 424, 461, 474, 475, 476, 477, 478, 480, 481, 482, 557, 584, 599, 612, 644, 645, 662, 694, 710, 720, 833, 882, 1018], "chrono": [28, 255, 346, 349, 526, 527, 528, 531, 802, 805, 973, 974, 975, 978], "rust": [28, 35, 83, 107, 111, 136, 237, 255, 720, 1018], "crate": [28, 255, 501, 502, 507, 508, 516, 517, 526, 527, 528, 531, 713, 948, 949, 954, 955, 963, 964, 973, 974, 975, 978], "fraction": [28, 120, 121, 199, 255, 344, 460, 484, 526, 528, 612, 800, 903, 926, 973, 975, 1018], "second": [28, 74, 124, 130, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 526, 528, 573, 574, 602, 604, 612, 644, 645, 650, 710, 795, 799, 806, 973, 975, 1026], "precis": [28, 31, 39, 172, 198, 215, 255, 315, 529, 713, 767, 976], "infer": [28, 90, 92, 93, 94, 95, 96, 102, 103, 106, 113, 116, 136, 255, 471, 509, 526, 527, 528, 529, 531, 593, 612, 710, 913, 956, 973, 974, 975, 976, 978, 1018], "maximum": [28, 102, 103, 113, 123, 124, 125, 127, 178, 255, 399, 436, 453, 467, 586, 612, 655, 710, 748, 780, 857, 891, 899, 904, 909, 1018], "timeunit": [28, 38, 40, 74, 255, 315, 316, 348, 353, 528, 713, 767, 768, 804, 809, 975], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 93, 120, 125, 136, 138, 172, 173, 182, 185, 188, 197, 198, 219, 226, 255, 628, 659, 662, 710, 713, 747, 1018, 1025, 1026], "datetim": [28, 31, 65, 74, 97, 125, 130, 142, 158, 160, 161, 173, 175, 228, 255, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 402, 474, 475, 476, 477, 478, 480, 481, 482, 526, 528, 545, 574, 580, 584, 612, 644, 645, 650, 710, 713, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 849, 860, 861, 899, 900, 930, 973, 975, 1001, 1018], "place": [28, 137, 144, 165, 166, 189, 194, 204, 205, 208, 222, 230, 255, 279, 412, 419, 487, 488, 496, 612, 626, 671, 672, 677, 682, 710, 729, 870, 877, 910, 912, 933, 934, 943, 1018], "float64": [28, 31, 93, 100, 102, 125, 132, 146, 147, 154, 200, 219, 232, 255, 271, 272, 273, 274, 275, 276, 294, 300, 301, 309, 344, 361, 387, 389, 466, 492, 493, 543, 544, 563, 576, 593, 612, 634, 668, 688, 710, 713, 800, 1000, 1005, 1018], "repres": [28, 48, 63, 74, 90, 92, 94, 95, 96, 130, 209, 229, 255, 387, 389, 499, 552, 555, 563, 566, 576, 584, 594, 595, 598, 603, 612, 678, 686, 710, 930, 945, 1007, 1018], "empti": [28, 81, 93, 102, 103, 106, 113, 138, 139, 160, 169, 181, 255, 584, 596, 628, 629, 644, 658, 710, 713, 747, 751, 836, 1018], "table_nam": [29, 31, 255], "connection_uri": [29, 104, 255], "if_exist": [29, 255], "dbwritemod": [29, 255], "fail": [29, 30, 91, 105, 107, 114, 135, 224, 255, 280, 425, 526, 527, 528, 531, 612, 683, 710, 720, 973, 974, 975, 978, 1018], "dbwriteengin": [29, 255], "sqlalchemi": [29, 255], "databas": [29, 104, 255, 623], "append": [29, 30, 74, 125, 149, 174, 175, 255, 468, 604, 612, 649, 650, 710, 1018], "creat": [29, 31, 74, 90, 94, 96, 114, 123, 124, 125, 126, 127, 128, 130, 138, 139, 160, 161, 186, 189, 228, 232, 255, 316, 343, 350, 425, 468, 474, 475, 477, 480, 481, 482, 520, 551, 564, 572, 573, 574, 602, 612, 628, 629, 635, 644, 645, 688, 710, 747, 751, 759, 764, 768, 799, 806, 901, 907, 910, 967, 999, 1018, 1025, 1026], "connect": [29, 102, 104, 107, 111, 115, 117, 118, 255, 624], "uri": [29, 30, 104, 105, 114, 255], "postgresql": [29, 104, 255, 459, 612], "usernam": [29, 102, 104, 107, 111, 115, 117, 255], "password": [29, 102, 104, 107, 111, 115, 117, 255], "server": [29, 104, 255], "port": [29, 102, 104, 107, 111, 115, 117, 255], "replac": [29, 30, 102, 103, 113, 150, 151, 195, 223, 232, 255, 316, 342, 435, 517, 612, 638, 688, 710, 768, 798, 890, 929, 930, 964, 1018], "insert": [29, 102, 103, 107, 111, 113, 115, 116, 117, 166, 194, 223, 225, 255, 485, 500, 534, 612, 684, 710, 927, 947, 981, 1018], "mode": [29, 30, 50, 100, 132, 255, 508, 593, 612, 710, 955, 1018, 1025], "new": [29, 30, 31, 113, 133, 136, 145, 165, 166, 185, 186, 193, 194, 212, 225, 226, 232, 255, 264, 316, 363, 380, 434, 516, 517, 522, 523, 535, 536, 542, 612, 623, 633, 666, 681, 684, 688, 694, 710, 716, 764, 768, 818, 901, 912, 963, 964, 969, 970, 982, 984, 990, 996, 1009, 1018, 1025], "alreadi": [29, 30, 255, 308, 406, 612, 758, 864, 1018], "adbc": [29, 104, 255], "deltalak": [30, 105, 114, 119, 255], "deltat": [30, 255], "ignor": [30, 124, 125, 127, 179, 210, 255, 310, 342, 358, 359, 360, 404, 453, 454, 612, 761, 798, 814, 815, 816, 862, 899, 900, 1018], "overwrite_schema": [30, 255], "storage_opt": [30, 102, 105, 107, 111, 114, 115, 117, 255], "delta_write_opt": [30, 255], "delta": [30, 40, 105, 114, 209, 229, 255, 480, 482, 499, 552, 566, 594, 595, 598, 603, 612, 623, 678, 686, 710, 922, 924, 945, 1007, 1018], "like": [30, 74, 91, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 168, 170, 174, 218, 255, 314, 406, 446, 467, 507, 600, 612, 637, 665, 710, 766, 864, 909, 954, 1018], "categor": [30, 56, 75, 174, 216, 217, 255, 295, 435, 545, 612, 713, 743, 744, 1001, 1018], "protocol": [30, 91, 104, 135, 255], "object": [30, 31, 32, 35, 55, 73, 74, 91, 92, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 135, 159, 160, 161, 176, 218, 219, 255, 584, 623, 644, 645, 665, 710, 713, 743, 765, 856, 946, 994, 1018], "handl": [30, 73, 97, 102, 103, 113, 118, 255, 310, 404, 534, 612, 761, 862, 981, 1018], "throw": [30, 91, 255, 294, 509, 510, 612, 742, 956, 957, 1018], "add": [30, 31, 103, 136, 149, 160, 232, 233, 255, 463, 538, 574, 578, 604, 612, 644, 649, 688, 689, 690, 710, 719, 1018], "anyth": [30, 197, 255, 508, 955], "updat": [30, 255, 710], "extra": [30, 35, 102, 105, 106, 107, 111, 114, 115, 117, 149, 160, 255, 644, 675, 710, 719, 1018], "storag": [30, 102, 105, 107, 111, 114, 115, 117, 255], "backend": [30, 104, 105, 114, 255], "cloud": [30, 105, 114, 118, 255], "configur": [30, 105, 114, 255], "authent": [30, 105, 114, 255], "see": [30, 31, 74, 104, 105, 106, 114, 120, 121, 125, 127, 141, 174, 188, 255, 297, 298, 299, 366, 380, 394, 433, 494, 501, 507, 508, 516, 592, 612, 748, 749, 750, 853, 941, 948, 954, 955, 963, 1018, 1026], "here": [30, 31, 90, 92, 93, 94, 96, 104, 105, 114, 123, 125, 127, 255, 510, 710, 957], "gc": [30, 105, 114, 255], "azur": [30, 105, 114, 255], "keyword": [30, 53, 105, 111, 114, 141, 188, 197, 201, 232, 235, 255, 461, 596, 599, 612, 662, 669, 688, 692, 710, 1018], "argument": [30, 35, 74, 102, 105, 111, 114, 130, 141, 143, 148, 159, 160, 161, 179, 187, 188, 189, 201, 202, 208, 210, 219, 225, 228, 232, 235, 255, 343, 350, 361, 381, 459, 461, 474, 475, 476, 477, 478, 480, 481, 482, 497, 513, 519, 525, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 593, 596, 599, 600, 612, 632, 636, 643, 644, 645, 662, 669, 670, 677, 684, 688, 692, 710, 799, 806, 833, 960, 966, 972, 1000, 1018], "while": [30, 103, 105, 106, 114, 125, 127, 172, 181, 223, 255, 658, 710], "lake": [30, 105, 114, 255, 623], "instanti": [30, 31, 201, 232, 255, 669, 688, 710], "basic": [30, 31, 255, 1026], "filesystem": [30, 105, 114, 255], "table_path": [30, 105, 114, 255], "doe": [30, 65, 73, 74, 84, 90, 92, 93, 94, 96, 97, 102, 103, 105, 106, 113, 114, 118, 120, 121, 149, 173, 174, 197, 198, 224, 232, 255, 353, 425, 435, 549, 577, 612, 637, 649, 654, 683, 688, 710, 719, 809, 826, 890, 936, 1008, 1018], "match": [30, 31, 73, 84, 90, 92, 93, 94, 96, 120, 121, 151, 175, 197, 255, 441, 479, 501, 502, 505, 507, 508, 509, 510, 516, 517, 524, 526, 527, 528, 563, 612, 639, 650, 710, 713, 842, 849, 921, 948, 949, 952, 954, 955, 956, 957, 963, 964, 971, 973, 974, 975, 1018], "version": [30, 71, 74, 105, 114, 119, 130, 255, 335, 336, 526, 528, 592, 593, 791, 792, 973, 975], "old": [30, 193, 255, 666, 710], "existing_table_path": [30, 255], "store": [30, 102, 111, 149, 172, 198, 255, 719, 1018], "bucket": [30, 105, 114, 255, 343, 350, 799, 806, 829, 1018], "prefix": [30, 133, 255, 264, 291, 434, 524, 534, 538, 612, 713, 740, 971, 981], "aws_region": [30, 114, 255], "the_aws_region": [30, 255], "aws_access_key_id": [30, 105, 114, 255], "the_aws_access_key_id": [30, 105, 114, 255], "aws_secret_access_kei": [30, 105, 114, 255], "the_aws_secret_access_kei": [30, 105, 114, 255], "workbook": [31, 255], "worksheet": [31, 255], "posit": [31, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 358, 359, 360, 361, 459, 497, 515, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 596, 599, 600, 612, 632, 636, 643, 669, 670, 677, 684, 688, 692, 710, 814, 815, 816, 962, 1018], "tupl": [31, 104, 136, 172, 197, 198, 203, 234, 255, 471, 612, 663, 673, 710, 713, 913, 1018], "a1": [31, 66, 68, 255], "table_styl": [31, 255], "column_format": [31, 255], "dtype_format": [31, 255], "oneormoredatatyp": [31, 123, 255, 849, 1018], "conditional_format": [31, 255], "conditionalformatdict": [31, 255], "column_tot": [31, 255], "columntotalsdefinit": [31, 255], "column_width": [31, 255], "row_tot": [31, 255], "rowtotalsdefinit": [31, 255], "row_height": [31, 255], "sparklin": [31, 255], "sequenc": [31, 57, 65, 72, 90, 92, 93, 94, 96, 99, 102, 103, 113, 123, 124, 125, 137, 142, 148, 149, 174, 175, 181, 185, 188, 189, 208, 216, 222, 224, 225, 226, 227, 228, 255, 385, 425, 433, 461, 497, 536, 557, 560, 569, 570, 578, 580, 585, 592, 612, 626, 636, 649, 650, 662, 677, 682, 683, 684, 685, 710, 719, 760, 762, 883, 930, 984, 1018], "formula": [31, 255, 355, 612, 812, 1018], "autofilt": [31, 255], "autofit": [31, 255], "hidden_column": [31, 255], "hide_gridlin": [31, 255], "sheet_zoom": [31, 255], "excel": [31, 106, 255, 623], "open": [31, 102, 103, 106, 107, 111, 115, 117, 255], "xlsxwriter": [31, 119, 255], "ha": [31, 65, 113, 135, 160, 161, 228, 255, 269, 292, 308, 393, 444, 474, 475, 476, 477, 478, 480, 481, 482, 546, 557, 612, 644, 645, 694, 710, 741, 747, 758, 760, 826, 839, 1002, 1018], "close": [31, 74, 130, 160, 161, 255, 381, 430, 474, 475, 476, 477, 478, 480, 481, 482, 494, 612, 644, 645, 710, 833, 941, 1018], "xlsx": [31, 106, 255], "work": [31, 39, 103, 106, 194, 255, 269, 285, 296, 297, 298, 299, 361, 370, 406, 427, 459, 514, 548, 612, 735, 745, 748, 749, 750, 824, 864, 885, 961, 1003, 1018], "directori": [31, 111, 255], "sheet1": [31, 255], "valid": [31, 50, 74, 107, 111, 127, 133, 147, 174, 255, 308, 501, 502, 507, 508, 510, 516, 517, 612, 649, 710, 713, 758, 813, 826, 948, 949, 954, 955, 957, 963, 964, 1018], "notat": [31, 255], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 123, 125, 126, 128, 160, 161, 255, 296, 344, 370, 371, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 515, 554, 559, 580, 593, 612, 644, 645, 710, 713, 727, 728, 745, 800, 824, 842, 911, 921, 930, 962, 1018, 1025, 1026], "medium": [31, 255], "kei": [31, 65, 71, 73, 160, 172, 174, 175, 182, 187, 189, 193, 196, 198, 255, 599, 644, 649, 650, 659, 666, 667, 710], "follow": [31, 71, 74, 102, 103, 105, 113, 114, 136, 160, 161, 175, 188, 228, 255, 269, 339, 343, 350, 461, 467, 474, 475, 476, 477, 478, 479, 480, 481, 482, 536, 547, 557, 604, 605, 606, 608, 612, 613, 614, 618, 619, 620, 644, 645, 650, 662, 710, 795, 799, 806, 909, 929, 930, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1024, 1026], "first_column": [31, 255], "last_column": [31, 255], "banded_column": [31, 255], "banded_row": [31, 255], "sheet": [31, 106, 255], "chart": [31, 255, 663, 710], "subsequ": [31, 55, 192, 219, 255, 425, 635, 710], "colnam": [31, 113, 125, 146, 255, 634, 710], "given": [31, 50, 51, 65, 74, 90, 92, 93, 94, 96, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 136, 137, 147, 148, 160, 161, 171, 187, 188, 197, 204, 205, 208, 222, 227, 255, 269, 314, 317, 346, 348, 349, 355, 381, 402, 419, 425, 428, 459, 461, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 508, 526, 528, 536, 576, 593, 594, 595, 612, 626, 636, 644, 645, 654, 662, 671, 672, 677, 682, 685, 694, 710, 713, 720, 759, 766, 769, 802, 804, 805, 812, 813, 829, 833, 852, 860, 877, 883, 886, 889, 901, 907, 909, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 927, 933, 934, 955, 973, 975, 1005, 1009, 1018, 1025, 1026], "dd": [31, 255], "mm": [31, 255], "yyyi": [31, 255], "00": [31, 74, 125, 130, 160, 175, 228, 255, 314, 315, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 526, 528, 531, 574, 612, 644, 650, 710, 713, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 973, 975, 978], "overridden": [31, 90, 92, 94, 96, 129, 255, 710], "basi": [31, 125, 255], "param": [31, 90, 92, 93, 94, 96, 102, 103, 113, 124, 125, 127, 197, 255, 710], "It": [31, 74, 136, 182, 188, 237, 255, 269, 293, 443, 612, 654, 659, 694, 710, 929, 930, 1018], "also": [31, 55, 74, 93, 113, 123, 124, 125, 126, 127, 133, 146, 159, 160, 161, 182, 185, 198, 201, 208, 232, 255, 304, 307, 342, 380, 381, 467, 474, 475, 476, 477, 478, 480, 481, 482, 497, 519, 525, 569, 570, 578, 580, 592, 604, 611, 612, 617, 643, 644, 645, 659, 669, 677, 688, 689, 710, 713, 798, 833, 909, 972, 1018], "group": [31, 35, 50, 103, 159, 160, 161, 173, 185, 187, 189, 226, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 263, 269, 363, 369, 406, 459, 467, 496, 497, 501, 507, 508, 516, 541, 557, 612, 643, 644, 645, 675, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710, 713, 864, 948, 954, 955, 963], "float_dtyp": [31, 255], "simplifi": [31, 72, 255, 630, 635, 637, 663, 673, 674, 675, 710], "uniform": [31, 255], "condit": [31, 70, 145, 152, 197, 255, 505, 524, 578, 604, 633, 640, 710], "suppli": [31, 90, 92, 93, 94, 96, 197, 255, 461, 612, 710], "typenam": [31, 255], "3_color_scal": [31, 255], "data_bar": [31, 255], "make": [31, 57, 73, 90, 95, 102, 103, 104, 107, 111, 115, 117, 182, 185, 192, 228, 255, 359, 360, 435, 459, 470, 522, 534, 612, 659, 710, 815, 816, 829, 890, 969, 981, 1018, 1026], "icon": [31, 255], "multipl": [31, 53, 72, 73, 102, 103, 113, 115, 116, 117, 123, 127, 137, 143, 147, 149, 152, 159, 160, 165, 173, 187, 189, 201, 202, 208, 222, 232, 235, 255, 424, 440, 444, 450, 451, 459, 471, 474, 475, 476, 477, 478, 480, 481, 482, 497, 555, 556, 560, 563, 569, 570, 571, 578, 585, 586, 589, 592, 600, 604, 612, 626, 632, 640, 643, 644, 669, 670, 677, 682, 688, 692, 694, 710, 719, 813, 882, 895, 913, 1018], "singl": [31, 51, 65, 73, 102, 103, 104, 111, 113, 123, 143, 144, 145, 149, 156, 171, 174, 187, 197, 208, 255, 269, 339, 367, 403, 424, 433, 468, 471, 497, 500, 553, 555, 556, 557, 559, 560, 563, 564, 565, 571, 585, 586, 589, 600, 612, 632, 633, 649, 677, 710, 719, 795, 861, 882, 910, 913, 947, 994, 1018], "across": [31, 65, 255, 555, 556, 571, 586, 589, 600], "effect": [31, 135, 154, 160, 218, 255, 269, 322, 612, 644, 690, 710, 766, 774], "heatmap": [31, 255], "min": [31, 35, 130, 142, 151, 160, 161, 189, 255, 297, 299, 305, 366, 459, 467, 477, 596, 612, 639, 644, 645, 675, 710, 748, 750, 755, 760, 821, 909, 919, 1018, 1026], "entir": [31, 255], "final": [31, 65, 117, 255, 358, 359, 360, 612, 637, 710, 814, 815, 816, 1018], "made": [31, 130, 255, 999, 1018], "up": [31, 57, 104, 172, 175, 198, 215, 255, 269, 296, 534, 612, 649, 650, 654, 710, 713, 745, 981, 1018], "abov": [31, 255, 604], "order": [31, 50, 52, 65, 93, 120, 136, 137, 159, 160, 161, 187, 188, 189, 199, 202, 208, 218, 222, 224, 228, 255, 269, 279, 285, 295, 421, 427, 467, 484, 485, 486, 496, 497, 536, 548, 549, 560, 612, 622, 626, 643, 644, 645, 658, 670, 674, 675, 677, 682, 683, 710, 720, 729, 735, 744, 759, 848, 879, 885, 907, 909, 914, 926, 927, 931, 943, 984, 1003, 1004, 1018], "than": [31, 74, 89, 94, 96, 102, 103, 113, 118, 125, 127, 136, 138, 158, 159, 172, 175, 187, 197, 198, 199, 226, 237, 255, 269, 374, 375, 393, 396, 432, 484, 494, 512, 518, 523, 534, 566, 600, 612, 643, 650, 674, 675, 710, 720, 926, 941, 959, 965, 970, 981, 1018, 1026], "total": [31, 147, 255, 813, 1018], "export": [31, 172, 173, 198, 215, 218, 255], "numer": [31, 175, 255, 262, 297, 298, 299, 371, 381, 430, 449, 451, 462, 470, 489, 537, 547, 612, 623, 650, 710, 713, 748, 749, 750, 760, 833, 847, 928, 935, 1018, 1026], "associ": [31, 51, 53, 65, 124, 255], "sum": [31, 50, 65, 147, 154, 159, 160, 161, 171, 189, 235, 255, 269, 306, 307, 355, 367, 425, 474, 477, 481, 553, 555, 569, 571, 578, 592, 612, 630, 635, 637, 643, 644, 645, 661, 663, 673, 692, 710, 713, 756, 757, 812, 813, 916, 917, 919, 922, 923, 924, 1018], "pass": [31, 35, 53, 65, 74, 92, 106, 113, 123, 125, 127, 137, 141, 143, 159, 160, 161, 163, 177, 187, 188, 201, 208, 211, 222, 228, 232, 235, 255, 269, 323, 342, 364, 379, 459, 461, 474, 475, 476, 477, 478, 480, 481, 482, 497, 513, 519, 525, 555, 556, 560, 563, 571, 580, 586, 589, 599, 600, 612, 626, 632, 643, 644, 645, 647, 654, 662, 669, 673, 677, 682, 688, 692, 694, 710, 720, 775, 798, 819, 828, 855, 960, 966, 972, 988, 1018], "must": [31, 91, 92, 105, 114, 142, 148, 160, 161, 175, 182, 197, 255, 425, 433, 474, 475, 476, 477, 478, 480, 481, 482, 612, 636, 644, 645, 650, 654, 659, 710, 759, 760, 907, 1018], "funcnam": [31, 255], "averag": [31, 255, 358, 359, 360, 467, 612, 814, 815, 816, 909, 1018], "count_num": [31, 255], "count": [31, 50, 102, 103, 107, 111, 113, 115, 116, 117, 142, 160, 161, 175, 185, 186, 189, 223, 227, 228, 233, 237, 246, 255, 270, 303, 339, 397, 403, 452, 457, 474, 475, 476, 477, 478, 480, 481, 482, 502, 549, 551, 558, 590, 612, 644, 645, 650, 661, 685, 690, 694, 703, 710, 760, 795, 829, 861, 897, 902, 949, 1004, 1006, 1018], "std_dev": [31, 255], "var": [31, 128, 255, 482, 612, 710, 1018], "pixel": [31, 255], "unit": [31, 38, 40, 74, 125, 127, 147, 255, 315, 316, 323, 348, 353, 431, 444, 526, 528, 550, 580, 612, 663, 710, 767, 768, 775, 804, 809, 813, 889, 973, 975, 1005, 1018, 1026], "hand": [31, 102, 103, 113, 255, 405, 411, 426, 863, 869, 884], "side": [31, 160, 161, 255, 381, 405, 411, 426, 474, 475, 476, 477, 478, 480, 481, 482, 485, 612, 644, 645, 710, 833, 863, 869, 884, 927, 1018], "call": [31, 54, 103, 125, 127, 133, 136, 159, 160, 161, 176, 254, 255, 269, 304, 307, 586, 589, 612, 624, 643, 644, 645, 709, 710, 713, 720, 1018], "ad": [31, 93, 135, 160, 223, 232, 255, 268, 364, 569, 570, 612, 644, 688, 710, 819, 1018], "end": [31, 74, 102, 103, 111, 113, 130, 160, 255, 287, 290, 291, 314, 339, 343, 344, 361, 381, 420, 501, 505, 508, 520, 524, 559, 563, 576, 604, 612, 644, 646, 653, 663, 710, 713, 739, 766, 795, 799, 833, 878, 952, 955, 967, 971, 1018], "wise": [31, 65, 154, 255, 271, 272, 273, 274, 275, 276, 300, 301, 362, 429, 491, 492, 493, 543, 544, 569, 570, 578, 586, 589, 592, 612, 721, 722, 723, 724, 725, 726, 752, 753, 817, 887, 888, 938, 939, 940, 991, 992, 1018], "particip": [31, 255], "distinct": [31, 127, 187, 255, 285, 427, 467, 574, 612, 735, 885, 909, 1018, 1026], "referenc": [31, 255, 536], "differ": [31, 74, 102, 118, 120, 149, 160, 161, 172, 198, 215, 223, 255, 310, 320, 339, 340, 342, 351, 357, 404, 435, 453, 454, 456, 526, 549, 577, 580, 612, 635, 644, 645, 710, 713, 719, 720, 761, 772, 795, 796, 798, 807, 862, 899, 900, 928, 973, 1018], "row_index": [31, 255], "height": [31, 145, 255], "provid": [31, 53, 102, 103, 104, 105, 113, 114, 125, 127, 171, 255, 269, 288, 289, 425, 433, 503, 504, 507, 509, 510, 580, 599, 612, 623, 674, 675, 710, 720, 737, 738, 829, 852, 950, 951, 954, 956, 957, 1018, 1025, 1026], "intersect": [31, 255, 713], "bodi": [31, 255], "start": [31, 74, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 159, 160, 176, 207, 228, 233, 255, 287, 290, 291, 320, 323, 324, 326, 327, 332, 334, 340, 341, 343, 344, 348, 350, 351, 352, 354, 361, 381, 420, 474, 475, 477, 480, 481, 482, 495, 501, 505, 508, 520, 524, 559, 563, 569, 576, 578, 604, 612, 643, 644, 663, 676, 690, 710, 713, 740, 767, 769, 772, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810, 833, 878, 942, 952, 955, 967, 971, 1018, 1026], "zero": [31, 90, 91, 101, 102, 103, 107, 111, 124, 135, 151, 172, 197, 213, 218, 219, 255, 366, 425, 430, 485, 494, 534, 547, 612, 628, 639, 710, 747, 821, 883, 941, 981, 994, 999, 1000, 1018], "unless": [31, 65, 92, 219, 255, 519, 525, 593, 710, 972, 1000, 1008, 1018], "marker": [31, 255], "compliant": [31, 255], "case": [31, 65, 90, 92, 93, 94, 96, 117, 129, 136, 149, 160, 161, 172, 255, 314, 433, 434, 443, 444, 501, 508, 516, 612, 644, 645, 710, 713, 719, 766, 948, 955, 963, 1018], "three": [31, 221, 255, 425, 485, 612, 883], "avail": [31, 99, 105, 114, 123, 133, 254, 255, 467, 605, 606, 608, 611, 612, 613, 614, 617, 618, 619, 620, 623, 624, 637, 709, 710, 713, 909, 1010, 1012, 1014, 1018, 1019, 1022, 1023, 1024], "insert_befor": [31, 255], "insert_aft": [31, 255], "respect": [31, 255], "direct": [31, 104, 111, 117, 226, 255], "far": [31, 255], "thei": [31, 93, 113, 120, 133, 176, 255, 473, 612, 713, 915, 1018], "strongli": [31, 129, 136, 197, 237, 255, 269, 612, 720, 1018], "advis": [31, 176, 255, 293, 612], "structur": [31, 81, 85, 87, 149, 188, 218, 255, 461, 612, 662, 710, 719, 1018], "your": [31, 65, 102, 103, 120, 121, 136, 172, 201, 232, 235, 255, 269, 293, 526, 527, 528, 612, 630, 646, 653, 654, 669, 688, 692, 710, 720, 973, 974, 975, 1018, 1026], "wherev": [31, 136, 237, 255, 269, 612, 720, 1018], "possibl": [31, 102, 136, 159, 172, 198, 224, 237, 255, 269, 431, 443, 523, 550, 612, 643, 683, 710, 720, 970, 1018], "simpl": [31, 127, 185, 255], "colx": [31, 55, 255, 1026], "coli": [31, 255, 1026], "after": [31, 55, 73, 93, 101, 102, 103, 107, 111, 113, 115, 116, 117, 149, 225, 254, 255, 361, 435, 459, 467, 534, 612, 684, 710, 719, 890, 909, 981, 1018], "befor": [31, 102, 113, 129, 133, 149, 160, 175, 225, 255, 306, 307, 308, 435, 459, 460, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 534, 539, 594, 595, 612, 644, 647, 650, 684, 710, 719, 756, 757, 758, 890, 903, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 981, 987, 1018], "most": [31, 52, 90, 102, 103, 113, 255, 444, 450, 460, 523, 551, 612, 895, 903, 970, 1006, 1018, 1025], "mandatori": [31, 255], "return_dtyp": [31, 136, 255, 269, 433, 435, 557, 585, 612, 720, 890, 1018], "latter": [31, 149, 255, 719, 1018], "appropri": [31, 218, 255, 467, 612, 909, 1018], "pure": [31, 255], "actual": [31, 93, 106, 125, 127, 255, 293, 612, 936, 1018], "indic": [31, 70, 101, 102, 103, 107, 111, 113, 122, 123, 127, 160, 161, 175, 202, 216, 228, 255, 280, 339, 343, 350, 383, 386, 387, 389, 390, 391, 424, 439, 442, 474, 475, 476, 477, 478, 480, 481, 482, 485, 491, 541, 560, 612, 644, 645, 650, 670, 710, 795, 799, 806, 837, 841, 843, 844, 845, 846, 882, 927, 938, 989, 995, 1018, 1026], "calcul": [31, 65, 160, 209, 229, 255, 310, 358, 359, 360, 394, 404, 405, 431, 479, 494, 499, 550, 552, 555, 557, 566, 594, 595, 598, 603, 612, 644, 678, 686, 710, 761, 814, 815, 816, 853, 862, 863, 921, 941, 945, 1007, 1018], "individu": [31, 125, 161, 218, 255, 269, 508, 612, 645, 675, 710, 746, 955, 1018], "gridlin": [31, 255], "zoom": [31, 255], "level": [31, 35, 113, 115, 116, 117, 125, 136, 154, 185, 255, 367, 612, 646, 653, 675, 710], "definit": [31, 123, 255, 394, 612, 853, 1018], "take": [31, 125, 133, 154, 160, 182, 188, 189, 212, 218, 255, 339, 497, 542, 575, 577, 612, 644, 659, 681, 710, 795, 990, 1009, 1018], "care": [31, 255, 269, 486, 612, 931, 1018], "rel": [31, 105, 114, 120, 121, 255, 339, 358, 359, 360, 476, 478, 480, 482, 612, 795, 814, 815, 816, 1018], "readthedoc": [31, 255], "io": [31, 255], "working_with_conditional_format": [31, 255], "html": [31, 91, 104, 135, 141, 255], "similarli": [31, 93, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "well": [31, 74, 102, 103, 113, 148, 189, 255, 381, 612, 636, 710, 833, 1018], "adjac": [31, 255], "two": [31, 55, 92, 94, 96, 104, 130, 154, 181, 182, 189, 221, 236, 237, 255, 263, 311, 316, 425, 496, 541, 566, 568, 594, 595, 612, 658, 659, 693, 694, 710, 762, 768, 883, 1018], "help": [31, 255, 637, 710], "appear": [31, 93, 120, 255, 549, 612, 1004, 1018], "working_with_sparklin": [31, 255], "inject": [31, 65, 255], "locat": [31, 149, 195, 220, 225, 255, 485, 612, 684, 710, 719, 927, 930, 989, 1018], "syntax": [31, 136, 185, 255, 501, 507, 508, 516, 673, 710, 948, 954, 955, 963, 1018], "ensur": [31, 75, 124, 125, 127, 159, 187, 197, 255, 381, 551, 612, 643, 654, 710, 713, 999, 1006, 1018], "correctli": [31, 255], "microsoft": [31, 119, 255], "com": [31, 104, 255, 358, 359, 360, 507, 508, 612, 814, 815, 816, 954, 955, 1018], "u": [31, 38, 40, 53, 74, 97, 172, 198, 215, 255, 315, 316, 323, 348, 353, 526, 528, 580, 767, 768, 775, 804, 809, 973, 975], "offic": [31, 255], "f5ed2452": [31, 255], "2337": [31, 255], "4f71": [31, 255], "bed3": [31, 255], "c8ae6d2b276": [31, 255], "random": [31, 123, 125, 127, 162, 199, 255, 376, 467, 484, 490, 612, 827, 909, 926, 937, 1018], "date": [31, 38, 65, 74, 102, 103, 104, 113, 118, 125, 142, 158, 160, 161, 173, 175, 228, 255, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 402, 474, 475, 476, 477, 478, 480, 481, 482, 526, 527, 545, 580, 584, 602, 612, 644, 645, 650, 710, 713, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 849, 860, 861, 899, 900, 930, 973, 974, 1001, 1018], "dtm": [31, 255, 316, 768], "2023": [31, 74, 97, 119, 173, 255, 316, 584, 768], "num": [31, 221, 255, 381, 384, 534, 612, 833, 1018], "500": [31, 172, 227, 255, 637, 685, 710, 783, 785, 793, 800, 916, 917, 919, 1018], "val": [31, 196, 255, 295, 461, 545, 604, 612, 667, 710, 744], "10_000": [31, 255], "20_000": [31, 255], "30_000": [31, 255], "increas": [31, 65, 102, 111, 255, 308, 612, 758, 1018], "b4": [31, 255], "light": [31, 255], "twice": [31, 106, 255], "each": [31, 65, 74, 103, 116, 120, 121, 123, 136, 158, 159, 160, 161, 173, 175, 187, 219, 225, 228, 234, 235, 237, 238, 240, 249, 255, 269, 339, 343, 350, 410, 423, 430, 467, 476, 478, 480, 482, 497, 508, 522, 523, 557, 559, 560, 565, 599, 612, 644, 645, 650, 663, 684, 692, 694, 695, 697, 706, 710, 746, 795, 799, 806, 868, 881, 909, 955, 969, 970, 986, 1018, 1026], "titl": [31, 50, 255], "explicit": [31, 113, 123, 255, 592], "integr": [31, 255, 1026], "multi_fram": [31, 255], "wb": [31, 255], "coordin": [31, 255], "advanc": [31, 255, 425, 883, 1026], "min_color": [31, 255], "76933c": [31, 255], "mid_color": [31, 255], "c4d79b": [31, 255], "max_color": [31, 255], "ebf1d": [31, 255], "data_bar_2010": [31, 255], "bar_color": [31, 255], "9bbb59": [31, 255], "bar_negative_color_sam": [31, 255], "bar_negative_border_color_sam": [31, 255], "000": [31, 255, 1026], "white": [31, 255], "w": [31, 52, 53, 160, 255, 507, 644, 710, 713, 954, 966], "get_worksheet_by_nam": [31, 255], "fmt_titl": [31, 255], "add_format": [31, 255], "font_color": [31, 255], "4f6228": [31, 255], "font_siz": [31, 255], "12": [31, 65, 74, 97, 124, 125, 130, 160, 161, 175, 228, 255, 306, 314, 316, 324, 327, 334, 335, 336, 341, 343, 350, 354, 460, 466, 481, 489, 529, 570, 572, 573, 585, 612, 644, 645, 646, 650, 653, 673, 680, 710, 713, 720, 759, 766, 768, 790, 799, 806, 925, 976, 1018, 1026], "ital": [31, 255], "bold": [31, 255], "customis": [31, 255], "trend": [31, 255], "win_loss": [31, 255], "subtl": [31, 255], "tone": [31, 255], "hidden": [31, 255], "id": [31, 73, 237, 255, 516, 517, 549, 551, 612, 694, 1004, 1018, 1026], "q1": [31, 255], "55": [31, 67, 255], "20": [31, 125, 130, 149, 165, 166, 188, 190, 194, 195, 255, 277, 278, 279, 310, 343, 350, 376, 380, 461, 474, 475, 477, 580, 584, 612, 662, 710, 713, 761, 806, 1018], "35": [31, 119, 255, 310, 612, 761, 1018], "q2": [31, 255], "30": [31, 74, 130, 149, 160, 165, 188, 194, 195, 214, 232, 255, 277, 278, 279, 310, 316, 321, 327, 335, 341, 342, 343, 350, 354, 376, 489, 584, 612, 644, 662, 688, 710, 713, 759, 761, 768, 773, 791, 798, 799, 806, 1018, 1026], "15": [31, 119, 124, 130, 136, 160, 161, 166, 255, 308, 310, 336, 343, 350, 461, 481, 570, 593, 612, 644, 645, 710, 758, 761, 799, 806, 1018], "60": [31, 149, 255, 344, 345, 481, 526, 612, 796, 800, 801, 973], "q3": [31, 255], "40": [31, 149, 188, 255, 343, 350, 376, 529, 612, 662, 710, 779, 806, 976], "80": [31, 255], "q4": [31, 255], "75": [31, 142, 255, 266, 458, 474, 475, 476, 477, 480, 481, 482, 612, 760, 829, 907, 1018, 1026], "account": [31, 97, 255, 339, 358, 359, 360, 612, 795, 814, 815, 816, 1018], "flavour": [31, 255], "integer_dtyp": [31, 201, 255, 669, 710, 713], "0_": [31, 255], "just": [31, 104, 113, 181, 255, 658, 710], "unifi": [31, 255, 713], "multi": [31, 102, 103, 255, 361, 507, 586, 589, 612, 954], "2_color_scal": [31, 255], "95b3d7": [31, 255], "ffffff": [31, 255], "base": [31, 36, 145, 152, 160, 161, 255, 314, 322, 355, 358, 359, 360, 428, 429, 515, 612, 633, 640, 644, 645, 710, 713, 766, 774, 812, 814, 815, 816, 829, 886, 887, 907, 962, 1009, 1018, 1026], "standardis": [31, 255], "z": [31, 52, 73, 97, 123, 125, 147, 168, 170, 174, 181, 198, 255, 262, 266, 295, 376, 401, 458, 470, 508, 526, 528, 593, 612, 649, 658, 676, 710, 713, 744, 821, 955, 973, 975, 1018, 1025], "score": [31, 255], "conjunct": [31, 106, 255], "a123": [31, 255], "b345": [31, 255], "c567": [31, 255], "d789": [31, 255], "e101": [31, 255], "45": [31, 130, 161, 255, 316, 343, 350, 481, 502, 508, 584, 612, 645, 710, 713, 768, 799, 806, 949, 955, 1026], "85": [31, 255, 1026], "font": [31, 255], "consola": [31, 255], "standard": [31, 119, 209, 218, 255, 327, 359, 480, 494, 499, 510, 598, 612, 678, 710, 779, 815, 941, 945, 957, 1018, 1026], "stdev": [31, 255], "ipccompress": [32, 255], "arrow": [32, 76, 90, 104, 107, 115, 213, 255, 674, 710, 994, 999, 1018], "ipc": [32, 107, 108, 115, 118, 255, 623], "binari": [32, 255, 287, 289, 290, 291, 556, 736, 738, 739, 740], "feather": [32, 107, 115, 255, 623], "lz4": [32, 35, 255, 674, 675, 710], "zstd": [32, 35, 255, 674, 675, 710], "pretti": [33, 255], "row_ori": [33, 255], "iobas": [33, 34, 109, 110, 255, 447, 665, 691, 710], "serial": [33, 34, 255], "represent": [33, 34, 217, 255, 295, 320, 324, 327, 328, 330, 332, 334, 337, 340, 341, 344, 351, 352, 354, 545, 612, 635, 652, 710, 744, 772, 776, 778, 779, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 810, 997, 1001, 1018], "orient": [33, 66, 68, 94, 96, 255, 710], "slower": [33, 94, 96, 136, 159, 187, 228, 237, 255, 643, 710, 720, 1018], "common": [33, 65, 73, 74, 255, 617], "write_ndjson": [33, 255], "newlin": [34, 110, 116, 255], "delimit": [34, 102, 103, 110, 113, 116, 189, 216, 255, 500, 947, 995, 1018], "parquetcompress": [35, 255], "compression_level": [35, 255, 675, 710], "statist": [35, 102, 103, 111, 117, 142, 255, 359, 360, 394, 474, 475, 476, 477, 478, 479, 480, 481, 482, 494, 612, 675, 710, 760, 815, 816, 853, 921, 941, 1018], "row_group_s": [35, 255, 675, 710], "use_pyarrow": [35, 102, 107, 111, 255, 675, 710, 998, 999, 1018], "pyarrow_opt": [35, 105, 111, 114, 255], "parquet": [35, 111, 112, 117, 255, 623, 675, 710], "gzip": [35, 255, 675, 710], "lzo": [35, 255, 675, 710], "brotli": [35, 255, 675, 710], "choos": [35, 189, 255, 674, 675, 710], "good": [35, 172, 255, 674, 675, 710], "perform": [35, 65, 81, 91, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 160, 161, 175, 192, 237, 255, 269, 293, 459, 526, 527, 528, 612, 644, 645, 650, 674, 675, 690, 710, 720, 973, 974, 975, 1018], "fast": [35, 126, 128, 255, 364, 486, 612, 674, 675, 710, 819, 931, 1018, 1026], "decompress": [35, 255, 674, 675, 710], "backward": [35, 151, 175, 255, 286, 336, 366, 612, 639, 650, 675, 710, 792, 821, 1018], "guarante": [35, 91, 102, 103, 224, 255, 637, 675, 683, 710], "deal": [35, 172, 255, 342, 467, 526, 612, 675, 710, 798, 909, 973, 1018], "older": [35, 255, 675, 710], "reader": [35, 99, 102, 103, 107, 111, 255, 624, 675, 710], "higher": [35, 191, 247, 255, 465, 478, 591, 612, 664, 675, 704, 710, 908, 920, 1018], "mean": [35, 74, 102, 103, 107, 111, 113, 142, 151, 159, 160, 161, 175, 189, 228, 235, 255, 339, 343, 350, 363, 366, 474, 475, 476, 477, 478, 480, 481, 482, 494, 507, 561, 612, 639, 643, 644, 645, 650, 654, 675, 692, 710, 760, 795, 799, 806, 818, 821, 826, 917, 941, 954, 1018], "smaller": [35, 147, 255, 637, 675, 710, 813, 1018], "disk": [35, 107, 255, 673, 674, 675, 710], "11": [35, 119, 125, 161, 255, 312, 313, 327, 335, 336, 339, 343, 350, 380, 460, 467, 481, 495, 534, 554, 563, 600, 612, 630, 645, 646, 653, 663, 675, 680, 710, 713, 720, 795, 799, 806, 915, 1018], "22": [35, 124, 255, 343, 350, 353, 474, 475, 477, 480, 481, 482, 526, 563, 612, 675, 710, 799, 806, 809, 973, 1026], "comput": [35, 72, 73, 78, 147, 159, 175, 219, 224, 235, 247, 255, 261, 271, 272, 273, 274, 275, 276, 282, 283, 284, 300, 301, 303, 304, 305, 306, 307, 311, 355, 362, 394, 405, 411, 415, 416, 417, 426, 428, 429, 430, 450, 459, 460, 464, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 491, 492, 493, 494, 498, 543, 544, 555, 556, 560, 566, 568, 571, 575, 586, 589, 594, 595, 600, 612, 643, 647, 649, 650, 675, 683, 689, 692, 704, 710, 715, 721, 722, 723, 724, 725, 726, 732, 733, 734, 752, 753, 754, 755, 756, 757, 762, 812, 813, 817, 853, 863, 869, 873, 874, 875, 884, 886, 887, 888, 895, 903, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 938, 939, 940, 941, 944, 991, 992, 1000, 1018], "512": [35, 255, 462, 612, 903, 1018], "implement": [35, 91, 135, 136, 237, 255, 269, 612, 694, 720, 929, 930, 1018], "v": [35, 52, 53, 147, 255, 485, 612, 759, 927, 1018], "At": [35, 255], "moment": [35, 141, 255, 394, 494, 612, 853, 941, 1018], "pyarrow": [35, 90, 95, 102, 105, 107, 111, 114, 118, 119, 173, 213, 218, 219, 255, 624, 994, 998, 999, 1000, 1018], "write_t": [35, 255], "calendar": [37, 38, 160, 161, 175, 228, 255, 327, 339, 343, 350, 354, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 779, 795, 799, 806, 810], "time_unit": [38, 40, 74, 97, 315, 316, 323, 348, 353, 526, 528, 580, 713, 767, 768, 775, 804, 809, 973, 975], "time_zon": [38, 74, 97, 317, 342, 528, 766, 769, 774, 798, 975], "timezon": [38, 74], "m": [38, 40, 53, 74, 174, 255, 314, 315, 316, 322, 323, 346, 348, 349, 353, 507, 526, 527, 528, 531, 580, 649, 710, 713, 766, 767, 768, 774, 775, 802, 804, 805, 809, 954, 973, 974, 975, 978], "zone": [38, 74, 314, 317, 342, 526, 528, 766, 769, 798, 973, 975], "zoneinfo": 38, "run": [38, 72, 126, 128, 136, 159, 176, 189, 224, 237, 255, 269, 308, 406, 596, 612, 630, 635, 637, 643, 654, 658, 663, 673, 674, 675, 683, 710, 720, 758, 864, 1018, 1025, 1026], "available_timezon": 38, "128": [39, 67, 903, 1018], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 469, 501, 612, 911, 948, 1018], "neg": [39, 160, 161, 163, 177, 204, 205, 207, 211, 255, 419, 420, 461, 487, 488, 495, 520, 612, 644, 645, 671, 672, 676, 690, 710, 828, 855, 877, 878, 933, 934, 942, 967, 988, 1018], "scale": [39, 147, 255, 461, 529, 612, 813, 976, 1018], "experiment": [39, 118, 201, 226, 227, 232, 255, 308, 343, 474, 475, 476, 477, 478, 480, 481, 482, 612, 669, 685, 688, 710, 758, 799, 829, 907, 1018], "progress": 39, "expect": [39, 82, 84, 89, 269, 557, 584, 612, 652, 654, 710, 907, 1018], "32": [41, 44, 60, 67, 161, 171, 255, 451, 489, 612, 645, 710, 762, 796, 903, 920, 1018], "sign": [43, 44, 45, 46, 339, 469, 534, 612, 795, 842, 911, 981, 1018], "arrai": [47, 90, 94, 102, 103, 111, 147, 213, 218, 219, 255, 282, 283, 284, 285, 289, 297, 298, 299, 303, 304, 305, 306, 307, 401, 414, 415, 416, 417, 418, 421, 422, 429, 474, 475, 477, 481, 486, 502, 504, 507, 510, 575, 612, 710, 732, 733, 734, 735, 738, 748, 749, 750, 754, 755, 756, 757, 762, 813, 859, 872, 873, 874, 875, 876, 879, 880, 887, 888, 916, 917, 919, 922, 923, 924, 931, 936, 949, 951, 954, 957, 994, 999, 1000, 1008, 1018], "integer_list": 47, "float_list": 47, "wrap": [49, 97, 381, 612], "arbitrari": [49, 125], "python": [49, 74, 102, 103, 119, 130, 136, 172, 198, 215, 237, 255, 269, 316, 433, 557, 604, 612, 617, 694, 720, 768, 780, 781, 782, 787, 998, 1018], "queri": [50, 52, 72, 104, 107, 113, 115, 116, 117, 149, 176, 188, 255, 269, 433, 435, 510, 612, 630, 635, 637, 646, 653, 663, 673, 690, 694, 710, 719, 720, 957, 1018, 1025], "eager": [50, 51, 52, 53, 54, 55, 70, 74, 100, 130, 132, 160, 226, 255, 315, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 559, 580, 593, 599, 611, 612, 623, 644, 710, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810, 1025], "pars": [50, 102, 103, 106, 113, 115, 116, 137, 159, 201, 208, 222, 232, 235, 255, 381, 459, 497, 509, 515, 526, 528, 529, 555, 556, 560, 562, 564, 565, 571, 580, 586, 589, 596, 597, 599, 600, 612, 626, 643, 669, 677, 682, 688, 692, 710, 833, 956, 962, 973, 975, 976, 1018], "against": [50, 406, 710, 864, 1025, 1026], "eagerli": [50, 425], "unset": [50, 124, 342, 425, 798], "init": [50, 133], "eager_execut": [50, 1025], "itself": [50, 123, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 594, 595, 612, 652, 710, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 1018, 1025], "alwai": [50, 74, 102, 124, 136, 237, 255, 443, 526, 604, 654, 710, 720, 973, 1018, 1025, 1026], "impact": [50, 160, 255, 644, 710, 1025], "declar": [50, 90, 92, 93, 94, 96, 255, 710], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1025], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 326, 328, 335, 336, 339, 713, 778, 791, 792, 795], "533316061": 50, "232338648": 50, "1970": [50, 118], "134821952": 50, "register_glob": [51, 53, 55, 1025], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1025], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 176, 255, 293, 406, 612, 627, 654, 663, 710, 864, 1025], "collect": [51, 52, 55, 68, 72, 113, 114, 118, 125, 127, 130, 143, 145, 176, 213, 255, 269, 385, 559, 564, 580, 599, 612, 626, 632, 633, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 660, 661, 662, 664, 666, 667, 669, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 713, 840, 1018, 1025, 1026], "global": [52, 56, 75, 125, 131, 218, 255, 435, 612, 1025], "scope": [52, 55, 133, 622, 713, 1025], "automat": [52, 55, 90, 92, 93, 94, 96, 97, 102, 103, 104, 113, 125, 127, 129, 201, 232, 255, 435, 513, 519, 525, 612, 669, 688, 710, 890, 960, 966, 972, 1018, 1025], "map": [52, 53, 92, 93, 102, 103, 107, 108, 111, 112, 113, 115, 136, 146, 172, 193, 197, 198, 214, 255, 343, 350, 434, 435, 459, 551, 557, 612, 634, 666, 710, 799, 806, 890, 1018, 1025], "recent": [52, 460, 612, 903, 1018, 1025], "df1": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "x": [52, 53, 65, 73, 97, 102, 103, 104, 113, 123, 125, 147, 165, 168, 170, 174, 181, 189, 198, 255, 262, 266, 269, 309, 356, 357, 371, 374, 375, 376, 396, 401, 412, 430, 432, 433, 449, 451, 455, 456, 458, 462, 470, 491, 494, 522, 537, 545, 547, 554, 557, 569, 570, 578, 584, 585, 592, 612, 649, 654, 658, 676, 710, 713, 716, 720, 821, 851, 938, 941, 969, 1001, 1018, 1025], "df2": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "t": [52, 53, 73, 106, 113, 136, 160, 188, 224, 226, 255, 269, 308, 314, 322, 342, 355, 358, 359, 360, 406, 459, 461, 507, 513, 526, 528, 557, 604, 612, 644, 662, 683, 710, 713, 720, 758, 798, 812, 814, 815, 816, 864, 928, 954, 960, 966, 973, 975, 1008, 1018], "join": [52, 56, 65, 72, 73, 75, 175, 227, 255, 380, 459, 612, 630, 635, 637, 650, 663, 673, 685, 689, 710], "named_fram": [53, 1025], "lf1": [53, 55], "o": [53, 107, 115, 292, 308, 506, 546, 612, 741, 758, 953, 972, 1002, 1018], "lf2": [53, 55, 710], "p": [53, 67, 188, 255, 461, 599, 612, 662, 710], "q": [53, 255, 599], "r": [53, 461, 502, 506, 507, 508, 516, 612, 713, 949, 953, 954, 955, 963], "lf3": [53, 710], "lf4": [53, 710], "either": [53, 125, 161, 171, 176, 179, 187, 197, 210, 218, 255, 526, 555, 560, 599, 645, 652, 710, 713, 973], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 604], "hello_world": 54, "baz": [54, 166, 167, 189, 225, 255, 521, 523, 648, 684, 710, 713, 970], "hello_data": 54, "foo_bar": [54, 584], "registr": [55, 623], "lifetim": [55, 133, 622], "context": [55, 56, 129, 130, 185, 238, 255, 263, 269, 293, 302, 367, 406, 443, 496, 497, 551, 557, 567, 577, 580, 593, 596, 611, 612, 622, 623, 689, 695, 710, 864, 1025], "manag": [55, 56, 622, 623, 1025], "often": [55, 133, 160, 161, 255, 403, 470, 612, 644, 645, 710, 861], "want": [55, 93, 100, 132, 136, 149, 185, 255, 269, 297, 298, 299, 367, 433, 435, 474, 475, 476, 477, 478, 480, 481, 482, 569, 578, 593, 612, 630, 646, 653, 710, 713, 719, 720, 748, 749, 750, 999, 1018], "df0": 55, "exit": [55, 56, 133, 1025], "construct": [55, 90, 92, 93, 94, 95, 96, 100, 132, 255, 373, 435, 593, 612, 642, 665, 710, 1018], "persist": [55, 674, 675, 710], "through": [55, 713, 1018], "tbl0": 55, "remain": [55, 102, 103, 113, 147, 255, 522, 523, 654, 710, 813, 969, 970, 1018], "text": [55, 514, 516, 517, 961, 1026], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 129, 133, 160, 161, 255, 644, 645, 710], "cach": [56, 72, 75, 107, 113, 115, 117, 131, 435, 474, 475, 476, 477, 478, 480, 481, 482, 526, 527, 528, 531, 612, 622, 630, 635, 637, 663, 673, 710, 973, 974, 975, 978], "categori": [56, 75, 216, 255, 295, 744, 759, 829, 907, 1018], "until": [56, 74, 176, 255, 293, 612], "finish": [56, 78, 149, 255, 719, 1018], "invalid": [56, 74, 102, 103, 113, 509, 510, 515, 547, 612, 956, 957, 962], "outermost": 56, "color": [56, 75, 237, 287, 289, 290, 291, 694], "red": [56, 75, 237, 694], "green": [56, 75, 237, 694], "blue": [56, 75, 287, 289, 290, 291], "orang": [56, 75, 140, 238, 239, 241, 242, 243, 245, 247, 248, 255, 695, 696, 698, 699, 700, 702, 704, 705], "uint8": [56, 75, 122, 124, 217, 218, 255, 306, 307, 435, 539, 554, 612, 713, 756, 757, 987, 1018, 1026], "yellow": [56, 75, 287, 289, 290, 291], "black": [56, 75, 136, 255, 287, 289, 290, 291], "succe": [56, 102, 103, 113], "df_join": [56, 75], "cat": [56, 75, 217, 255, 501, 530, 533, 545, 565, 608, 612, 713, 759, 829, 907, 948, 977, 980, 1014, 1018], "u8": [56, 75, 216, 217, 255, 435, 554, 612, 713, 995, 1018, 1026], "schemadict": [57, 90, 92, 93, 94, 95, 96, 113, 200, 255, 599, 654, 668, 694, 710], "composit": [57, 124, 1026], "struct_seri": [57, 694], "dai": [58, 74, 160, 161, 173, 175, 228, 255, 323, 327, 334, 335, 336, 339, 340, 341, 343, 348, 350, 351, 352, 354, 474, 475, 476, 477, 478, 480, 481, 482, 572, 573, 574, 612, 644, 645, 650, 710, 791, 792, 795, 796, 799, 806, 808], "unsign": [59, 60, 61, 62, 469, 612, 842, 911, 1018], "could": [63, 78, 145, 160, 255, 294, 569, 578, 612, 633, 644, 710, 742, 1018], "static": [63, 694], "utf": 64, "frametyp": [65, 1025], "joinstrategi": [65, 174, 255, 649, 710], "outer": [65, 73, 174, 255, 649, 710], "descend": [65, 137, 202, 208, 222, 255, 279, 421, 467, 486, 496, 497, 560, 612, 626, 670, 677, 682, 710, 729, 848, 879, 909, 931, 943, 1018], "fill": [65, 73, 100, 132, 138, 150, 151, 205, 226, 255, 286, 304, 307, 365, 366, 372, 380, 474, 475, 477, 481, 488, 512, 518, 534, 579, 593, 612, 638, 639, 672, 689, 710, 820, 821, 901, 916, 917, 919, 922, 923, 924, 934, 959, 965, 981, 1018], "sort": [65, 66, 120, 124, 137, 160, 161, 175, 182, 188, 189, 202, 222, 228, 240, 249, 255, 279, 295, 367, 459, 486, 497, 551, 553, 560, 612, 626, 635, 644, 645, 650, 659, 662, 663, 670, 673, 682, 697, 706, 710, 713, 729, 744, 848, 931, 1003, 1006, 1018, 1026], "origin": [65, 102, 103, 224, 255, 342, 393, 435, 459, 469, 502, 507, 508, 510, 512, 518, 534, 612, 683, 710, 759, 798, 890, 907, 949, 954, 955, 957, 959, 965, 981, 1018], "In": [65, 74, 105, 114, 117, 125, 127, 133, 136, 147, 149, 160, 161, 185, 218, 255, 269, 612, 644, 645, 710, 719, 813, 910, 1018], "duplic": [65, 79, 168, 174, 175, 224, 255, 382, 612, 649, 650, 683, 710, 835, 1018], "behaviour": [65, 73, 501, 507, 508, 516, 547, 612, 948, 954, 955, 963], "strategi": [65, 73, 102, 122, 123, 124, 125, 127, 151, 160, 174, 175, 184, 255, 269, 366, 425, 612, 639, 644, 649, 650, 710, 821, 883, 1018], "suitabl": [65, 73, 123, 136, 255, 269, 485, 612, 720, 927, 1018, 1026], "get": [65, 74, 98, 108, 112, 129, 137, 140, 146, 156, 157, 160, 161, 163, 164, 168, 170, 171, 177, 184, 197, 200, 203, 207, 211, 222, 231, 240, 249, 255, 263, 277, 278, 279, 281, 285, 303, 304, 305, 306, 307, 323, 339, 368, 377, 382, 384, 392, 395, 398, 408, 413, 414, 427, 436, 437, 438, 443, 445, 448, 453, 454, 465, 495, 499, 511, 514, 539, 540, 548, 552, 577, 582, 586, 587, 588, 589, 598, 601, 603, 612, 626, 631, 634, 641, 644, 645, 646, 651, 653, 668, 676, 680, 682, 687, 697, 706, 710, 727, 728, 729, 730, 731, 735, 746, 754, 755, 756, 757, 775, 795, 825, 828, 833, 835, 838, 850, 855, 866, 871, 872, 885, 891, 893, 894, 896, 899, 900, 904, 905, 908, 942, 945, 958, 961, 988, 994, 995, 1003, 1007, 1008, 1018], "speedup": [65, 136, 172, 255, 269, 612, 720, 1018], "receiv": [65, 113, 136, 188, 255, 461, 612, 662, 710, 1026], "now": [65, 161, 255, 526, 528, 645, 710, 973, 975], "One": [65, 142, 185, 189, 255, 266, 458, 612, 713, 760, 1018], "whose": [65, 175, 189, 255, 361, 576, 612, 650, 710], "uniqu": [65, 122, 123, 124, 127, 170, 174, 185, 246, 255, 270, 281, 384, 392, 452, 526, 527, 528, 531, 549, 551, 558, 590, 612, 649, 703, 710, 731, 760, 838, 850, 897, 973, 974, 975, 978, 1004, 1006, 1018], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 137, 152, 154, 176, 208, 222, 255, 265, 266, 267, 287, 290, 291, 326, 367, 381, 383, 384, 385, 386, 387, 388, 389, 390, 391, 402, 458, 497, 509, 553, 554, 560, 599, 612, 626, 629, 640, 652, 677, 682, 710, 713, 717, 718, 730, 736, 778, 822, 833, 834, 835, 837, 838, 840, 841, 843, 844, 845, 846, 850, 860, 904, 905, 929, 948, 1009, 1018], "know": [65, 425, 514, 961, 999, 1008, 1018], "first": [65, 74, 102, 103, 106, 113, 116, 124, 136, 158, 160, 163, 175, 177, 184, 188, 189, 211, 216, 217, 223, 224, 228, 240, 255, 279, 281, 308, 336, 339, 343, 377, 384, 398, 406, 409, 410, 425, 435, 461, 485, 497, 507, 509, 510, 516, 517, 562, 569, 578, 582, 604, 612, 630, 644, 646, 650, 653, 662, 683, 689, 697, 710, 713, 729, 758, 760, 792, 795, 799, 828, 838, 855, 864, 867, 868, 883, 890, 927, 954, 956, 957, 963, 964, 988, 997, 1018, 1026], "2022": [65, 74, 142, 158, 160, 161, 175, 228, 255, 316, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 526, 574, 580, 612, 644, 645, 650, 710, 768, 779, 795, 799, 806, 973], "y": [65, 73, 97, 123, 125, 147, 168, 170, 174, 181, 189, 198, 255, 262, 266, 346, 349, 356, 357, 374, 375, 396, 401, 412, 432, 455, 456, 458, 470, 526, 527, 528, 547, 554, 584, 612, 649, 658, 676, 710, 713, 716, 802, 805, 973, 974, 975, 1018], "df3": [65, 255], "set_tbl_format": 65, "09": [65, 125, 161, 255, 316, 327, 335, 336, 529, 645, 710, 772, 976], "01": [65, 74, 125, 130, 142, 158, 160, 161, 228, 255, 314, 315, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 526, 527, 528, 531, 574, 612, 644, 645, 710, 713, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 973, 974, 975, 978], "02": [65, 74, 130, 158, 160, 161, 175, 228, 255, 315, 316, 323, 324, 325, 332, 333, 334, 335, 336, 339, 342, 343, 344, 345, 348, 350, 351, 353, 474, 475, 476, 477, 478, 480, 481, 482, 483, 526, 527, 528, 531, 574, 612, 644, 645, 650, 710, 713, 767, 768, 770, 771, 775, 776, 777, 780, 781, 782, 783, 785, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 883, 973, 974, 975, 978], "03": [65, 74, 97, 160, 161, 228, 255, 315, 316, 317, 321, 323, 325, 333, 334, 335, 336, 342, 343, 344, 345, 346, 348, 349, 350, 351, 353, 474, 475, 477, 480, 481, 482, 527, 531, 612, 644, 645, 710, 767, 768, 769, 772, 773, 775, 776, 777, 780, 781, 782, 783, 785, 787, 789, 790, 791, 792, 793, 796, 797, 798, 799, 800, 801, 802, 804, 805, 807, 808, 809, 974, 978], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 102, 103, 113, 224, 227, 228, 255, 393, 435, 562, 612, 683, 685, 710, 759, 890, 907, 1018], "easili": [65, 201, 232, 235, 255, 563, 599, 669, 688, 692, 710], "dot": [65, 612, 673, 710, 1018], "product": [65, 141, 255, 306, 311, 557, 612, 756, 762, 1018], "fill_nul": [65, 150, 255, 612, 638, 689, 710, 1018], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 113, 136, 154, 188, 237, 255, 269, 425, 433, 434, 461, 473, 557, 569, 570, 578, 585, 592, 612, 654, 662, 694, 710, 720, 883, 915, 1018], "decor": [66, 67, 68, 69, 125, 127, 136, 255, 269, 612, 622, 623, 720, 1018], "under": [66, 67, 68, 69, 605, 606, 608, 613, 614, 618, 619, 620, 1010, 1012, 1014, 1019, 1022, 1023, 1024], "access": [66, 67, 68, 69, 172, 197, 198, 255, 435, 612, 689, 710, 1026], "by_first_letter_of_column_nam": 66, "f": [66, 103, 142, 158, 173, 213, 223, 226, 255, 262, 269, 425, 489, 506, 526, 528, 557, 564, 585, 612, 883, 953, 973, 975], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 287, 290, 501, 505, 713, 952], "slice": [66, 72, 147, 163, 173, 211, 255, 410, 423, 473, 474, 475, 476, 477, 478, 480, 481, 482, 612, 630, 635, 637, 654, 663, 673, 674, 675, 710, 813, 828, 868, 881, 915, 916, 917, 918, 919, 920, 922, 923, 924, 988, 1018], "to_seri": [66, 70, 156, 255, 526, 593, 973], "xx": [66, 68, 124, 127, 713], "xy": [66, 68], "yy": [66, 68, 124, 127, 713], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 74, 160, 161, 175, 228, 255, 286, 339, 343, 350, 467, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806, 909, 1018], "ceil": [67, 612, 1018], "previou": [67, 133, 460, 536, 612, 903, 1018], "floor": [67, 612, 1018], "nearest": [67, 175, 191, 247, 255, 296, 370, 465, 478, 591, 612, 650, 664, 704, 710, 745, 824, 832, 908, 920, 1018], "24": [67, 119, 136, 147, 160, 161, 175, 228, 255, 306, 308, 325, 339, 343, 350, 451, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 758, 777, 795, 799, 806, 852, 1018], "001": [67, 328, 329, 331, 338, 574, 784, 786, 794], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 74, 125, 316, 320, 321, 334, 335, 339, 351, 526, 572, 573, 580, 584, 713, 766, 768, 772, 773, 791, 795, 973, 1026], "42": [69, 161, 162, 255, 645, 710, 827, 1018], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 74, 100, 130, 132, 150, 152, 175, 255, 266, 280, 308, 379, 381, 385, 425, 435, 458, 555, 556, 559, 575, 593, 599, 604, 612, 640, 647, 649, 650, 710, 730, 758, 1009, 1018], "immedi": [70, 74, 100, 130, 132, 467, 559, 593, 599, 612, 909, 1018], "arg_tru": [70, 612, 1018], "build": [71, 91, 713, 1026], "wa": 71, "compil": [71, 399, 400, 857, 858], "gate": 71, "info": [71, 105, 114, 119, 326, 778], "otherwis": [71, 124, 129, 182, 201, 255, 288, 297, 298, 299, 342, 358, 359, 360, 425, 461, 469, 501, 503, 555, 556, 571, 586, 589, 600, 604, 612, 659, 669, 710, 720, 737, 748, 749, 750, 798, 814, 815, 816, 883, 911, 929, 930, 948, 950, 1018], "depend": [71, 119, 269, 399, 400, 443, 467, 557, 577, 580, 612, 857, 858, 909, 1018, 1026], "host": [71, 102, 107, 111, 115, 117], "git": 71, "lazy_fram": 72, "type_coercion": [72, 630, 635, 637, 663, 673, 674, 675, 710], "predicate_pushdown": [72, 630, 635, 637, 654, 663, 673, 674, 675, 710], "projection_pushdown": [72, 630, 635, 637, 654, 663, 673, 674, 675, 710], "simplify_express": [72, 630, 635, 637, 663, 673, 674, 675, 710], "no_optim": [72, 630, 637, 654, 663, 674, 675, 710], "slice_pushdown": [72, 630, 635, 637, 654, 663, 673, 674, 675, 710], "common_subplan_elimin": [72, 630, 635, 637, 663, 673, 710], "graph": [72, 176, 255, 647, 689, 710], "parallel": [72, 73, 99, 104, 111, 117, 160, 175, 176, 188, 255, 308, 406, 612, 623, 644, 649, 650, 694, 710, 758, 864, 1018], "threadpool": [72, 129], "coercion": [72, 470, 612, 630, 635, 637, 663, 673, 674, 675, 710], "optim": [72, 111, 113, 115, 116, 117, 172, 176, 188, 192, 198, 224, 255, 630, 635, 637, 654, 663, 673, 674, 675, 683, 690, 694, 710], "predic": [72, 113, 115, 116, 117, 118, 152, 171, 197, 255, 367, 553, 578, 612, 630, 635, 637, 640, 654, 663, 666, 673, 674, 675, 690, 710, 822, 929, 930, 1018], "pushdown": [72, 630, 635, 637, 654, 663, 666, 673, 674, 675, 690, 710, 929, 930, 1018], "project": [72, 113, 115, 116, 117, 269, 496, 497, 612, 630, 635, 637, 654, 663, 666, 673, 674, 675, 691, 710], "turn": [72, 102, 103, 113, 532, 551, 612, 630, 635, 637, 654, 663, 674, 675, 710, 979], "off": [72, 102, 103, 113, 551, 612, 630, 635, 637, 654, 663, 674, 675, 710], "Will": [72, 223, 255, 630, 635, 637, 663, 673, 710, 1018], "try": [72, 85, 87, 102, 103, 106, 107, 111, 113, 115, 117, 630, 635, 637, 663, 673, 710], "branch": [72, 630, 635, 637, 663, 673, 710], "subplan": [72, 630, 635, 637, 663, 673, 710], "occur": [72, 403, 450, 467, 612, 630, 635, 637, 663, 673, 710, 861, 895, 909, 1018], "union": [72, 73, 630, 635, 637, 663, 673, 710, 713], "part": [72, 90, 125, 508, 522, 523, 630, 635, 637, 663, 673, 689, 710, 772, 776, 783, 785, 788, 790, 793, 800, 810, 955, 969, 970], "fashion": [72, 174, 255, 630, 635, 637, 663, 673, 710], "item": [73, 103, 197, 199, 255, 363, 402, 409, 412, 484, 523, 612, 818, 860, 867, 870, 926, 970, 1018], "iter": [73, 126, 128, 137, 159, 160, 161, 172, 173, 187, 197, 198, 201, 202, 208, 222, 223, 232, 234, 235, 255, 308, 361, 459, 497, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 596, 599, 600, 612, 626, 643, 644, 645, 669, 670, 677, 682, 688, 692, 710, 758, 1018, 1026], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 149, 226, 230, 255, 500, 947], "rechunk": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 149, 255, 612, 719, 746, 896, 1018], "combin": [73, 74, 85, 87, 160, 161, 162, 175, 228, 255, 266, 280, 339, 350, 458, 513, 519, 525, 612, 644, 645, 650, 673, 710, 795, 799, 806, 960, 966, 972], "concaten": [73, 154, 188, 255, 461, 564, 565, 612, 662, 710, 746, 896, 1018], "diagon": [73, 223, 255], "vstack": [73, 149, 255], "vertical_relax": 73, "coerc": [73, 470, 612], "equal": [73, 75, 102, 103, 113, 120, 121, 155, 160, 175, 182, 255, 356, 357, 374, 396, 425, 456, 473, 474, 475, 476, 477, 478, 480, 481, 482, 511, 512, 518, 534, 559, 594, 595, 612, 644, 650, 659, 710, 883, 915, 916, 917, 918, 919, 920, 922, 923, 924, 928, 958, 959, 965, 981, 1018, 1026], "supertyp": [73, 151, 255, 268, 612, 639, 710], "find": [73, 153, 255, 485, 612, 927, 1018], "miss": [73, 102, 103, 113, 150, 255, 286, 358, 359, 360, 372, 380, 387, 389, 612, 638, 710, 814, 815, 816, 1008, 1018], "stack": [73, 165, 230, 255], "don": [73, 136, 224, 226, 255, 269, 308, 406, 459, 557, 612, 683, 710, 713, 720, 758, 864, 928, 1008, 1018], "auto": [73, 90, 92, 93, 94, 96, 111, 117, 223, 255, 710, 1026], "logic": [73, 136, 237, 255, 266, 458, 545, 554, 612, 642, 649, 665, 691, 710, 720, 1001, 1018], "align_fram": 73, "pattern": [73, 102, 103, 113, 115, 116, 117, 172, 255, 441, 501, 502, 507, 508, 516, 517, 694, 713, 929, 930, 948, 949, 954, 955, 963, 964, 1018], "collis": 73, "need": [73, 97, 100, 102, 103, 106, 120, 121, 132, 160, 161, 206, 218, 255, 425, 435, 489, 511, 529, 593, 612, 644, 645, 710, 935, 958, 976, 1018], "sure": [73, 90, 95, 102, 103, 104, 107, 111, 160, 161, 192, 255, 559, 644, 645, 710], "contigu": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 192, 255], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "interv": [74, 130, 160, 161, 228, 255, 326, 343, 344, 350, 381, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 710, 772, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 810, 833, 1018], "timedelta": [74, 130, 160, 161, 228, 255, 320, 323, 324, 327, 332, 334, 339, 340, 341, 343, 344, 348, 350, 351, 352, 354, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 710, 780, 782, 787, 795, 799, 806, 899, 900, 1018], "1d": [74, 160, 161, 175, 228, 255, 315, 325, 333, 339, 343, 350, 353, 474, 475, 476, 477, 478, 480, 481, 482, 584, 612, 644, 645, 650, 710, 767, 775, 777, 780, 781, 782, 787, 789, 795, 799, 804, 806, 808, 809], "closedinterv": [74, 130, 160, 161, 255, 381, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 710, 833, 1018], "lower": [74, 113, 130, 160, 191, 247, 255, 297, 299, 381, 431, 434, 465, 469, 478, 559, 591, 612, 637, 644, 664, 704, 710, 750, 833, 889, 908, 911, 920, 1005, 1018], "bound": [74, 102, 103, 130, 147, 160, 255, 297, 298, 299, 381, 409, 424, 425, 431, 550, 559, 612, 644, 710, 749, 750, 813, 833, 867, 882, 889, 1005, 1018], "upper": [74, 102, 103, 130, 147, 160, 255, 297, 298, 381, 425, 550, 559, 612, 644, 710, 749, 813, 833, 889, 1005, 1018], "period": [74, 130, 160, 161, 204, 205, 255, 343, 350, 358, 359, 360, 419, 460, 487, 488, 612, 644, 645, 671, 672, 710, 799, 806, 814, 815, 816, 877, 903, 933, 934, 1018], "durat": [74, 130, 133, 175, 228, 255, 314, 321, 322, 325, 329, 331, 333, 338, 345, 353, 545, 612, 650, 710, 713, 766, 773, 774, 777, 784, 786, 789, 794, 801, 809, 1001, 1018], "3d12h4m25": [74, 160, 161, 175, 228, 255, 343, 350, 644, 645, 650, 710, 799, 806], "hour": [74, 130, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 573, 574, 602, 612, 644, 645, 650, 710, 795, 799, 806], "minut": [74, 130, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 573, 574, 602, 612, 644, 645, 650, 710, 795, 799, 806], "_satur": [74, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "month": [74, 160, 161, 175, 228, 255, 320, 335, 336, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 572, 573, 612, 644, 645, 650, 710, 772, 791, 792, 795, 799, 806], "1mo": [74, 160, 161, 175, 228, 255, 317, 321, 335, 336, 339, 342, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 769, 773, 790, 791, 792, 795, 796, 797, 798, 799, 806, 807], "offset": [74, 102, 103, 107, 111, 113, 115, 116, 117, 160, 161, 207, 228, 233, 255, 314, 322, 335, 336, 339, 343, 350, 420, 495, 520, 526, 528, 612, 644, 645, 676, 690, 710, 766, 774, 791, 792, 795, 799, 806, 878, 942, 967, 973, 975, 1018], "desir": [74, 125, 425, 883], "further": [74, 104, 1000, 1018], "tempor": [74, 130, 160, 161, 172, 198, 215, 255, 381, 474, 475, 476, 477, 478, 480, 481, 482, 612, 623, 644, 645, 710, 713, 833, 849, 1018], "window": [74, 130, 160, 161, 255, 308, 343, 350, 358, 359, 360, 459, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 564, 594, 595, 612, 644, 645, 710, 758, 799, 806, 814, 815, 816, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 1018], "deprec": [74, 130, 526, 528, 593, 973, 975], "sinc": [74, 105, 114, 130, 323, 526, 528, 580, 593, 775, 973, 975], "18": [74, 97, 130, 161, 255, 307, 343, 350, 353, 380, 393, 526, 528, 612, 645, 663, 710, 713, 809, 973, 975], "granular": 74, "finer": 74, "permut": 74, "becaus": [74, 136, 147, 160, 176, 226, 237, 255, 406, 644, 694, 710, 720, 813, 864, 1018], "year": [74, 105, 114, 160, 161, 175, 228, 255, 326, 327, 339, 340, 343, 350, 351, 474, 475, 476, 477, 478, 480, 481, 482, 572, 573, 612, 644, 645, 650, 710, 778, 779, 795, 796, 799, 806, 807], "1y": [74, 160, 161, 175, 228, 255, 326, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 778, 795, 799, 806, 810], "vari": [74, 314, 766, 1026], "accord": [74, 197, 255, 435, 612, 779], "februari": 74, "1st": [74, 175, 255, 650, 710], "28": [74, 160, 161, 175, 214, 228, 255, 262, 339, 342, 343, 350, 353, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 798, 799, 806, 809, 1026], "leap": [74, 326, 339, 778, 795], "wherea": [74, 453, 454, 612, 646, 653, 710, 899, 900, 1018], "febrari": 74, "28th": 74, "user": [74, 136, 188, 237, 255, 269, 433, 461, 486, 557, 612, 662, 694, 710, 720, 931, 1018], "march": 74, "31st": 74, "approach": 74, "prior": 74, "began": 74, "januari": 74, "1mo_satur": 74, "would": [74, 102, 103, 113, 279, 409, 443, 467, 560, 612, 713, 729, 867, 909, 999, 1018], "04": [74, 118, 160, 228, 255, 316, 317, 320, 321, 325, 332, 333, 334, 335, 336, 340, 342, 343, 344, 345, 346, 349, 351, 352, 353, 526, 574, 644, 710, 769, 773, 777, 783, 785, 788, 789, 790, 791, 792, 793, 797, 798, 800, 801, 802, 805, 807, 808, 809, 973], "05": [74, 118, 120, 121, 125, 175, 228, 255, 316, 317, 321, 342, 344, 346, 349, 650, 710, 713, 768, 769, 770, 771, 772, 773, 798, 799, 802, 803, 805, 806, 808], "almost": [74, 136, 237, 255, 526, 527, 528, 720, 973, 974, 975, 1018], "never": [74, 197, 255], "recommend": [74, 129, 172, 188, 255, 713], "month_end": 74, "convers": [74, 91, 135, 173, 219, 255, 526, 527, 528, 531, 623, 973, 974, 975, 978, 998, 999, 1000, 1018], "routin": 74, "1985": 74, "07": [74, 130, 316, 320, 340, 342, 343, 350, 352, 526, 580, 713, 768, 772, 798, 808, 973], "08": [74, 120, 121, 125, 130, 161, 255, 316, 343, 526, 574, 645, 710, 799, 806, 973], "america": 74, "new_york": 74, "\u03bc": [74, 97, 125, 160, 161, 175, 228, 255, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 526, 528, 574, 580, 612, 644, 645, 650, 710, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 809, 810, 973, 975], "est": 74, "last": [74, 137, 163, 175, 177, 189, 208, 211, 222, 224, 249, 255, 279, 308, 320, 335, 340, 351, 409, 423, 496, 523, 540, 601, 612, 626, 650, 677, 680, 682, 683, 706, 710, 713, 729, 758, 772, 791, 796, 807, 828, 855, 867, 881, 970, 988, 1018], "disabl": [75, 131, 172, 255], "encount": [76, 160, 255, 453, 454, 509, 510, 566, 569, 578, 612, 644, 710, 899, 900, 956, 957, 1018], "certain": [80, 105, 114, 166, 228, 255, 563, 630, 663, 674, 675, 710, 1018], "least": [82, 125, 460, 551, 612, 903, 1006, 1018], "unexpect": [83, 255, 269, 433, 612, 720, 1018], "caus": [83, 91, 102, 103, 113, 135, 149, 255, 719, 1018], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 118], "chunkedarrai": [90, 184, 255, 762, 1018], "recordbatch": [90, 173, 255], "schemadefinit": [90, 92, 93, 94, 96, 255, 710], "schema_overrid": [90, 92, 93, 94, 95, 96, 173, 218, 255, 285, 710, 713, 735], "copi": [90, 91, 135, 138, 139, 173, 213, 218, 219, 232, 255, 364, 534, 612, 628, 629, 688, 710, 716, 747, 751, 764, 819, 981, 994, 999, 1000, 1018], "closest": 90, "pair": [90, 92, 93, 94, 96, 124, 193, 255, 666, 710, 1026], "sever": [90, 92, 93, 94, 96, 255, 710, 1026], "wai": [90, 92, 93, 94, 96, 143, 159, 173, 188, 208, 235, 255, 459, 461, 497, 507, 563, 612, 632, 643, 662, 677, 692, 694, 710, 954], "equival": [90, 92, 93, 94, 96, 105, 160, 171, 185, 255, 262, 266, 356, 357, 371, 374, 375, 396, 432, 449, 451, 455, 456, 458, 462, 514, 537, 547, 554, 612, 644, 710, 852, 961, 977, 979, 980, 1018], "form": [90, 92, 93, 94, 96, 172, 198, 226, 255, 460, 612, 710, 903, 1018], "them": [90, 92, 93, 94, 96, 113, 149, 160, 161, 175, 182, 228, 255, 381, 412, 453, 454, 459, 564, 612, 644, 645, 650, 659, 710, 713, 719, 870, 899, 900, 1018], "dimens": [90, 92, 94, 96, 255, 471, 612, 710, 913, 1018], "allow_copi": [91, 135], "interchang": [91, 135], "__dataframe__": 91, "detail": [91, 104, 120, 121, 135, 255, 710, 1026], "latest": [91, 105, 114, 135, 372, 444, 612], "index": [91, 95, 98, 104, 119, 135, 153, 160, 161, 166, 171, 172, 175, 189, 195, 197, 198, 207, 218, 220, 228, 233, 255, 263, 277, 278, 279, 281, 339, 399, 400, 409, 420, 424, 425, 474, 475, 476, 477, 478, 480, 481, 482, 485, 495, 507, 520, 541, 612, 644, 645, 650, 676, 690, 710, 727, 728, 729, 730, 731, 795, 852, 857, 858, 867, 878, 882, 883, 901, 927, 930, 942, 954, 967, 989, 1018], "runtimeerror": 91, "from_panda": [91, 106], "from_arrow": 91, "effici": [91, 173, 255], "clone": [92, 93, 94, 95, 96, 138, 218, 219, 255, 628, 710, 747, 998, 999, 1000, 1008, 1018], "dimension": [92, 94, 96, 218, 255, 710, 1018], "infer_schema_length": [93, 96, 102, 103, 106, 113, 116, 255, 509, 710, 956], "NOT": [93, 120, 121, 442, 1025], "typic": [93, 136, 255, 322, 713, 720, 774, 1018], "clearer": 93, "load": [93, 95, 105, 114, 126, 128, 255, 623, 646, 653, 710, 1026], "_partial_": [93, 255, 710], "omit": [93, 97, 123, 125, 127, 130, 133, 185, 255], "mani": [93, 96, 104, 149, 255, 509, 719, 956, 1018], "scan": [93, 96, 102, 103, 111, 113, 114, 115, 116, 117, 118, 160, 161, 255, 637, 644, 645, 646, 653, 710], "slow": [93, 96, 102, 103, 113, 269, 308, 612, 694, 758, 1018], "partial": 93, "present": [93, 120, 125, 385, 612, 1008, 1018], "np": [94, 152, 218, 255, 541, 612, 710, 837, 841, 843, 844, 915, 989, 1018], "ndarrai": [94, 152, 218, 255, 541, 612, 710, 762, 927, 930, 989, 999, 1018], "numpi": [94, 119, 141, 218, 219, 255, 453, 454, 612, 710, 837, 841, 843, 844, 899, 900, 915, 999, 1000, 1008, 1018], "columnar": [94, 96, 172, 198, 255], "interpret": [94, 96, 102, 103, 113, 255, 710], "yield": [94, 96, 102, 103, 113, 147, 149, 223, 255, 459, 612, 710, 719, 813, 1018], "conclus": [94, 96, 255, 710], "nan_to_nul": [95, 255, 710, 1018], "include_index": 95, "datetimeindex": [95, 762, 1018], "panda": [95, 106, 119, 160, 219, 255, 335, 336, 545, 612, 644, 710, 791, 792, 1000, 1001, 1018], "instal": [95, 102, 103, 104, 107, 111, 119, 141, 218, 219, 255, 673, 710, 1000, 1018], "nan": [95, 120, 121, 125, 135, 150, 219, 255, 312, 313, 356, 357, 365, 374, 375, 380, 387, 389, 390, 391, 396, 432, 436, 448, 453, 454, 455, 456, 547, 566, 612, 638, 710, 722, 726, 763, 820, 843, 844, 899, 900, 915, 1000, 1018, 1026], "convert": [95, 105, 106, 114, 135, 214, 215, 216, 217, 218, 221, 255, 309, 317, 346, 349, 425, 434, 466, 515, 526, 527, 528, 529, 531, 612, 710, 769, 802, 805, 883, 962, 973, 974, 975, 976, 978, 986, 997, 998, 999, 1000, 1008, 1018], "pd": [95, 106, 545, 612, 1001, 1018], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 103], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 513, 519, 525, 960, 966, 972], "prompt": 97, "extract": [97, 320, 321, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 337, 338, 340, 341, 344, 345, 351, 352, 354, 461, 508, 509, 510, 612, 770, 771, 772, 773, 776, 777, 779, 783, 784, 785, 786, 788, 789, 790, 793, 794, 796, 797, 800, 801, 803, 807, 808, 810, 955, 956, 957], "to_init_repr": [97, 255, 1018], "truncat": [97, 160, 255, 339, 644, 663, 710, 795], "identifi": [97, 181, 187, 224, 255, 658, 683, 710], "compound": [97, 255], "struct": [97, 185, 201, 221, 225, 232, 255, 425, 435, 509, 522, 523, 551, 569, 570, 571, 585, 612, 669, 684, 688, 694, 710, 883, 956, 969, 970], "neither": [97, 106, 199, 255, 425, 883], "source_ac": 97, "source_cha": 97, "ident": [97, 138, 139, 255, 346, 628, 629, 710, 747, 751, 802, 1018], "timestamp": [97, 342, 580, 798], "tor_id": 97, "nnel_id": 97, "asia": [97, 770, 771, 803], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 130, 543, 612], "59": [97, 124, 130, 316, 332, 344, 573, 602, 768, 788, 800], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 125], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 716, 1018], "to_list": [97, 161, 255, 645, 710, 948, 1018], "datatypeclass": 98, "uint32": [98, 119, 147, 255, 279, 320, 324, 328, 330, 332, 334, 337, 340, 341, 344, 351, 352, 399, 400, 414, 470, 502, 511, 514, 541, 545, 612, 713, 730, 742, 772, 776, 783, 785, 788, 790, 793, 796, 797, 800, 807, 808, 813, 842, 857, 858, 872, 928, 949, 1001, 1018], "regular": [98, 172, 197, 198, 228, 255, 361, 501, 502, 507, 508, 516, 517, 563, 576, 586, 589, 600, 612, 713, 948, 949, 954, 955, 963, 964], "uint64": [98, 162, 255, 376, 399, 400, 469, 612, 827, 857, 858, 911, 1018], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 373, 433, 604, 612, 637, 642, 665, 710, 719, 1018], "batch": [99, 103, 116, 654, 710], "over": [99, 102, 103, 105, 113, 125, 136, 149, 172, 173, 197, 198, 223, 234, 237, 255, 269, 308, 366, 380, 433, 434, 467, 473, 474, 475, 476, 477, 478, 480, 481, 482, 557, 569, 570, 578, 585, 592, 612, 694, 713, 719, 720, 758, 915, 916, 917, 919, 923, 1018], "fetch": [99, 113, 176, 255, 628, 630, 646, 653, 710], "ideal": 99, "read_csv_batch": [99, 624], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "polarsexprtyp": [100, 132, 593], "syntact": [100, 132, 227, 255, 576, 577, 581, 591, 596, 685, 710, 944, 1018], "sugar": [100, 132, 227, 255, 576, 577, 581, 591, 596, 685, 710, 944, 1018], "repeat": [100, 107, 115, 132, 468, 470, 612], "pre": [100, 132, 425, 593], "i8": [100, 132, 489, 593, 612, 761, 914, 1005, 1018], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 173, 255, 637, 710], "accept": [101, 102, 103, 105, 107, 111, 137, 148, 159, 201, 208, 222, 232, 235, 255, 262, 361, 381, 459, 497, 554, 555, 556, 560, 562, 563, 564, 565, 571, 576, 586, 589, 596, 599, 600, 612, 626, 636, 643, 669, 677, 682, 688, 692, 710, 833, 1018], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 320, 323, 324, 326, 327, 332, 334, 340, 341, 343, 344, 348, 350, 351, 352, 354, 474, 475, 477, 480, 481, 482, 612, 767, 769, 772, 775, 776, 778, 783, 785, 788, 790, 793, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810], "textio": 102, "new_column": [102, 103, 106, 113, 194, 255], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 160, 161, 175, 228, 255, 269, 339, 343, 350, 406, 433, 474, 475, 476, 477, 478, 480, 481, 482, 515, 584, 604, 612, 644, 645, 650, 654, 710, 720, 795, 799, 806, 829, 864, 907, 962, 1018], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 160, 161, 175, 218, 226, 228, 255, 262, 269, 339, 343, 350, 361, 474, 475, 476, 477, 478, 480, 481, 482, 489, 576, 612, 644, 645, 650, 666, 710, 795, 799, 806, 928, 999, 1018], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 173, 255], "shorter": [102, 103], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 133, 149, 154, 255, 294, 444, 474, 475, 476, 477, 478, 480, 481, 482, 569, 578, 612, 654, 690, 710, 719, 742, 1018], "special": [102, 103, 113, 508, 720, 955, 1018], "escap": [102, 103, 113], "dure": [102, 103, 113, 133, 149, 255, 719, 1018], "prefer": [102, 103, 105, 113, 128, 136, 149, 172, 197, 198, 237, 255, 269, 473, 612, 710, 719, 720, 915, 1018, 1026], "treat": [102, 103, 113, 501, 516, 517, 948, 963, 964], "10000": [102, 173, 255, 534], "check": [102, 103, 113, 120, 121, 155, 160, 161, 169, 171, 174, 255, 265, 267, 287, 290, 291, 381, 385, 402, 501, 505, 524, 612, 644, 645, 649, 654, 710, 717, 718, 736, 739, 740, 834, 836, 839, 840, 842, 847, 848, 849, 851, 852, 860, 928, 948, 952, 971, 1018], "might": [102, 103, 113, 129, 218, 255, 269, 549, 612, 1000, 1018], "issu": [102, 103, 106, 113, 306, 307, 539, 612, 756, 757, 987, 1018], "iso8601": [102, 103, 113], "physic": [102, 103, 175, 255, 295, 545, 612, 627, 649, 650, 710, 744, 1001, 1018], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 158, 175, 255, 268, 270, 294, 459, 512, 518, 558, 612, 650, 710, 742, 959, 965, 1018], "buffer": [102, 103, 147, 172, 255, 813, 1018], "modifi": [102, 103, 113, 129, 133, 165, 172, 230, 255, 280, 342, 353, 501, 507, 508, 516, 612, 798, 809, 912, 948, 954, 955, 963, 977, 979, 980, 1018], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 242, 243, 245, 248, 489, 578, 612, 675, 699, 700, 702, 705, 710, 892, 906, 935, 987, 1018], "usag": [102, 103, 113, 125, 127, 206, 255, 713, 936, 1018], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 136, 160, 161, 172, 197, 198, 223, 224, 255, 269, 612, 644, 645, 683, 710, 719, 720, 1018, 1026], "aggreg": [102, 103, 111, 154, 160, 161, 178, 179, 180, 183, 185, 189, 190, 191, 209, 210, 226, 229, 235, 236, 239, 241, 255, 263, 367, 378, 433, 459, 473, 474, 475, 476, 477, 478, 480, 481, 482, 551, 555, 556, 569, 570, 571, 578, 583, 586, 589, 592, 600, 612, 644, 645, 654, 655, 656, 657, 660, 661, 664, 678, 679, 686, 692, 693, 696, 698, 710, 830, 915, 916, 917, 919, 922, 923, 924, 1018], "nativ": [102, 107, 111, 123, 136, 172, 198, 215, 237, 255, 269, 612, 617, 720, 1018, 1026], "parser": 102, "even": [102, 461, 612], "regard": [102, 566], "sens": [102, 107, 111, 115, 117, 182, 228, 255, 459, 612, 659, 710], "particular": [102, 107, 111, 115, 117, 147, 255, 813, 1018], "skip": [102, 103, 106, 111, 113, 117, 226, 255, 720, 1018], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 237, 255, 494, 612, 694, 941, 1018], "estim": [102, 103, 147, 255, 270, 359, 360, 394, 558, 612, 710, 813, 815, 816, 853, 1018], "alloc": [102, 103, 147, 192, 255, 813, 1018], "scan_csv": [102, 103, 674, 675, 710], "lazili": [102, 103, 113, 114, 115, 116, 117, 435, 612], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 494, 612, 941, 1018], "benchmark": [102, 111, 293, 612], "50000": 103, "batchedcsvread": [103, 623], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 746, 896, 1018], "partition_df": 103, "partition_bi": [103, 173, 255], "as_dict": [103, 187, 255], "fh": 103, "write_csv": [103, 113, 255], "els": [103, 604], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 173, 187, 255], "transfer": 104, "document": [104, 106, 346, 349, 510, 526, 527, 528, 531, 802, 805, 957, 973, 974, 975, 978], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": [104, 160, 255, 644, 710], "doc": [104, 141, 255], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "wide": [104, 158, 181, 226, 255, 658, 710], "adopt": 104, "significantli": [104, 1026], "better": [104, 136, 218, 237, 255, 269, 551, 612, 694, 929, 930, 1018], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 133, 435, 599, 612, 622], "delta_table_opt": [105, 114], "root": [105, 114, 393, 434, 445, 463, 498, 538, 611, 612, 944, 1018], "absolut": [105, 114, 120, 121, 261, 358, 359, 360, 612, 715, 814, 815, 816, 1018], "avoid": [105, 198, 255], "2021": [105, 114, 142, 158, 160, 228, 255, 526, 584, 644, 710, 713, 770, 771, 779, 803, 849, 973, 1018], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 136, 255, 425, 1025], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": 106, "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 199, 255], "skip_empty_lin": 106, "my": [106, 118, 532, 979], "datasheet": 106, "correct": [106, 359, 360, 394, 479, 494, 612, 654, 710, 815, 816, 853, 921, 941, 1018], "look": [106, 287, 425, 736], "whole": [106, 496, 497, 507, 612, 694, 710, 954], "With": [106, 136, 171, 255, 269, 474, 475, 476, 477, 478, 480, 481, 482, 612, 720, 852, 1018], "1000": [106, 147, 217, 255, 328, 329, 534, 784, 997, 1018, 1026], "spreadsheet": [106, 189, 255], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": 106, "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 675, 710], "page": [107, 111, 115, 117, 255, 612, 623, 675, 710, 1018], "give": [107, 111, 115, 116, 117, 181, 224, 255, 323, 394, 470, 547, 612, 623, 658, 683, 710, 775, 853, 1018], "That": [107, 654, 710], "filenam": 107, "my_fil": 107, "write_ipc": [107, 255], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 172, 198, 215, 255, 526, 528, 973, 975], "stabl": [111, 141, 199, 255, 430, 612, 658, 710], "row_group": [111, 117], "pressur": [111, 116, 117, 489, 612, 675, 710, 935, 1018], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 370, 612, 824, 1018], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117, 172, 197, 255], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 149, 255, 719, 1018], "headerless": 113, "unlik": [113, 160, 255, 644, 710], "fewer": 113, "my_long_fil": 113, "doesn": [113, 160, 255, 355, 612, 644, 710, 812, 1008, 1018], "thing": [113, 577], "less": [113, 175, 255, 396, 432, 512, 518, 523, 534, 612, 650, 710, 959, 965, 970, 981, 1026], "limit": [113, 151, 255, 286, 297, 298, 299, 366, 372, 612, 639, 646, 675, 710, 748, 749, 750, 821, 1018], "breezah": 113, "languag": [113, 160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "hard": [113, 654, 710], "mydf": 113, "lambda": [113, 136, 154, 188, 237, 255, 269, 358, 359, 360, 425, 433, 434, 473, 557, 569, 570, 578, 585, 592, 612, 654, 662, 694, 710, 720, 814, 815, 816, 883, 1018], "simpli": [113, 459, 569, 578, 612], "idx": [113, 160, 173, 255, 425, 644, 710, 883, 930, 1018], "uint16": [113, 306, 307, 539, 612, 713, 756, 757, 987, 1018], "u16": [113, 125, 1026], "eu": 114, "central": [114, 394, 494, 612, 853, 941, 1018], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "stdout": [119, 133, 158, 255], "17": [119, 125, 130, 235, 483, 580, 593, 612, 692, 752, 799, 1018, 1026], "platform": 119, "linux": 119, "90": [119, 529, 976], "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 136, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 314, 327, 380, 467, 612, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 766, 799], "44": [119, 311, 612], "51": 119, "gcc": 119, "matplotlib": [119, 663, 673, 710], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 155, 255, 356, 357, 374, 375, 396, 432, 455, 456, 556, 612, 928, 1018], "exactli": [120, 121, 124, 125, 127, 522, 523, 936, 969, 970, 1018], "toler": [120, 121, 175, 255, 650, 710], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 161, 255, 623, 645, 710, 713, 826, 1018], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 154, 255, 852, 883, 1000, 1009, 1018], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 460, 612, 903, 1018], "chanc": [122, 125, 127, 1026], "independ": [122, 123, 125, 127], "flag": [122, 486, 501, 507, 508, 516, 612, 635, 654, 710, 931, 948, 954, 955, 963, 1018], "hypothesi": [122, 123, 124, 125, 126, 127, 1026], "sampled_from": [122, 1026], "unique_small_int": 122, "ccy": [122, 1026], "gbp": [122, 1026], "eur": [122, 142, 158, 255, 1026], "jpy": [122, 1026], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "mincol": 123, "assign": [123, 160, 255, 425, 459, 467, 522, 523, 612, 644, 710, 759, 883, 890, 907, 909, 969, 970, 1018], "exact": [123, 125, 127, 206, 255, 526, 527, 528, 547, 612, 973, 974, 975], "minimum": [123, 124, 125, 127, 154, 183, 255, 358, 359, 360, 448, 454, 467, 589, 612, 660, 675, 710, 748, 787, 814, 815, 816, 900, 905, 909, 1018, 1026], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 1026], "max_siz": [124, 125, 127, 1026], "anoth": [124, 159, 255, 308, 315, 424, 439, 442, 612, 643, 689, 710, 758, 767, 882, 928, 1018], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 176, 255, 343, 637, 710, 1026], "uint8_pair": [124, 1026], "uint": [124, 1026], "zip": [124, 1026], "131": 124, "176": 124, "149": [124, 1026], "max_data_s": [125, 127], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 1026], "excluded_dtyp": [125, 127], "describ": [125, 158, 255, 1018], "n_chunk": [125, 127, 255, 1018], "randomis": 125, "onto": 125, "pct": 125, "preced": [125, 713], "disallow": [125, 127], "inf": [125, 127, 276, 383, 386, 547, 612, 726, 759, 829, 837, 841, 889, 903, 907, 1005, 1018], "exclud": [125, 127, 304, 307, 381, 563, 612, 833, 849, 1018], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 255], "0x11f561580": 125, "known": [125, 425, 694, 883], "0565": 125, "34715": 125, "5844": 125, "33": [125, 483, 563, 612, 920, 1018], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 160, 161, 175, 228, 255, 314, 335, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 766, 791, 795, 799, 806], "836271": 125, "4063": 125, "06": [125, 130, 228, 255, 316, 327, 341, 342, 354, 798, 799, 808], "39092": 125, "1889": 125, "13": [125, 130, 138, 139, 150, 151, 157, 161, 166, 176, 184, 232, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 473, 529, 564, 569, 578, 603, 612, 628, 629, 638, 639, 645, 652, 688, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 720, 799, 806, 807, 976, 1018], "41": [125, 481, 612, 1026], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 710], "balanc": [126, 128, 1026], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "normal": [127, 160, 255, 355, 394, 494, 612, 644, 710, 812, 853, 941, 1018], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 1026], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 136, 188, 237, 255, 269, 461, 557, 612, 662, 694, 710, 720, 1018], "similar": [129, 154, 175, 255, 346, 349, 459, 604, 612, 650, 710, 802, 805], "1h": [130, 160, 161, 175, 228, 255, 322, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 774, 776, 795, 799, 806], "23": [130, 160, 161, 255, 316, 324, 343, 474, 475, 477, 480, 481, 482, 573, 602, 612, 644, 645, 710, 768, 776, 1026], "999999": [130, 573, 602], "1h30m25": 130, "third": [130, 433, 612], "lf": [130, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 710, 1025, 1026], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 925, 1018, 1026], "19": [130, 161, 175, 255, 343, 475, 477, 529, 612, 645, 650, 710, 799, 806, 976], "initi": [133, 569, 578, 604], "whatev": 133, "were": 133, "enter": 133, "advantag": [133, 188, 255], "initialis": [133, 710, 1025], "set_": 133, "set_verbos": 133, "do_various_th": 133, "restor": 133, "cleaner": 133, "breviti": 133, "vein": 133, "set_ascii_t": 133, "write_ascii_frame_to_stdout": 133, "sy": 133, "nan_as_nul": 135, "_pyarrowdatafram": 135, "nullabl": 135, "extens": [135, 219, 255, 1000, 1018], "propag": [135, 179, 210, 255, 357, 453, 454, 456, 612, 899, 900, 1018], "inference_s": [136, 255], "256": [136, 255, 903, 1018], "_significantly_": [136, 237, 255, 720, 1018], "intens": [136, 237, 255, 459, 612, 720, 1018], "forc": [136, 175, 237, 255, 649, 650, 694, 710, 720, 1018], "materi": [136, 237, 255, 663, 694, 710, 713, 720, 1018], "parallelis": [136, 237, 255, 720, 1018], "optimis": [136, 237, 255, 710, 720, 929, 930, 1018], "achiev": [136, 237, 255, 269, 612, 720, 1018], "best": [136, 237, 255, 269, 612, 720, 1018], "tri": [136, 255], "arbitrarili": [136, 255], "rearrang": [136, 255], "transform": [136, 255, 433, 530, 532, 533, 612], "preserv": [136, 218, 219, 255, 491, 612, 938, 1000, 1018], "lru_cach": [136, 255, 269, 612, 720, 1018], "magnitud": [136, 255, 269, 612, 720, 1018], "column_1": [136, 223, 255], "scalar": [136, 171, 197, 255, 485, 557, 584, 612, 852, 927, 1018], "k": [137, 222, 255, 292, 295, 394, 546, 612, 626, 682, 710, 741, 744, 853, 1002, 1018], "intoexpr": [137, 159, 160, 161, 201, 208, 222, 232, 235, 255, 381, 403, 405, 411, 426, 459, 488, 497, 555, 556, 560, 562, 564, 565, 569, 571, 578, 586, 589, 593, 596, 599, 600, 604, 612, 626, 643, 644, 645, 669, 677, 682, 688, 692, 710, 833, 1018], "nulls_last": [137, 208, 222, 255, 279, 496, 612, 626, 677, 682, 710, 729, 1018], "smallest": [137, 222, 255, 292, 612, 626, 682, 710, 741, 1018], "largest": [137, 160, 161, 175, 222, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 546, 612, 626, 644, 645, 650, 682, 710, 795, 799, 806, 1002, 1018], "top": [137, 222, 255, 626, 682, 710], "top_k": [137, 255, 292, 612, 626, 710, 741, 1018], "greater": [138, 175, 255, 374, 375, 494, 523, 612, 650, 710, 941, 970, 1018], "cheap": [138, 139, 255, 628, 629, 710, 719, 747, 751, 1018], "deepcopi": [138, 139, 255, 628, 629, 710, 747, 751, 1018], "clear": [139, 255, 629, 710, 751, 1018], "properti": [140, 146, 164, 200, 203, 231, 255, 631, 634, 668, 687, 710, 713, 1026], "appl": [140, 165, 174, 193, 195, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 463, 472, 505, 524, 538, 612, 649, 666, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 952, 971], "banana": [140, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 463, 472, 538, 612, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705], "pearson": [141, 255, 394, 494, 566, 612, 853, 941, 1018], "correl": [141, 255, 566, 594], "coeffici": [141, 255, 494, 612, 941, 1018], "corrcoef": [141, 255], "percentil": [142, 255, 760, 1018], "summari": [142, 255, 760, 1018], "glimps": [142, 163, 255], "usd": [142, 158, 255, 1026], "2020": [142, 158, 161, 255, 317, 321, 322, 325, 328, 329, 331, 333, 338, 342, 345, 346, 349, 526, 527, 528, 645, 710, 713, 769, 773, 774, 777, 784, 786, 789, 794, 798, 801, 802, 805, 973, 974, 975], "null_count": [142, 145, 255, 308, 612, 710, 758, 760, 1018], "266667": [142, 255], "666667": [142, 179, 229, 243, 255, 358, 612, 686, 700, 710], "std": [142, 255, 473, 480, 612, 710, 760, 922, 1018], "101514": [142, 255], "707107": [142, 255, 359, 480, 612, 815, 1018], "57735": [142, 255], "median": [142, 189, 255, 366, 476, 612, 689, 710, 760, 918, 1018], "more_column": [143, 148, 202, 225, 255, 361, 576, 612, 632, 636, 670, 684, 710], "Or": [143, 159, 160, 161, 175, 208, 228, 235, 255, 459, 497, 563, 604, 612, 632, 643, 644, 645, 650, 677, 692, 710], "subset": [145, 185, 224, 255, 633, 683, 710], "snippet": [145, 255, 633, 710], "is_nul": [145, 255, 612, 633, 710, 1018], "sizeunit": [147, 255, 813, 1018], "heap": [147, 255, 813, 1018], "its": [147, 255, 316, 343, 350, 497, 612, 768, 799, 806, 813, 1018], "bitmap": [147, 255, 813, 1018], "therefor": [147, 255, 604, 813, 1018], "structarrai": [147, 255, 813, 1018], "constant": [147, 161, 255, 314, 364, 612, 645, 710, 766, 813, 819, 1018], "unchang": [147, 255, 545, 612, 654, 694, 710, 813, 1001, 1018], "capac": [147, 206, 255, 813, 936, 1018], "ffi": [147, 255, 813, 1018], "kb": [147, 255, 813, 1018], "mb": [147, 255, 813, 1018], "gb": [147, 255, 813, 1018], "tb": [147, 255, 813, 1018], "revers": [147, 255, 303, 304, 305, 306, 307, 434, 463, 538, 612, 710, 754, 755, 756, 757, 1018], "1_000_000": [147, 255, 813, 1018], "25888898": [147, 255], "689577102661133": [147, 255], "long": [148, 181, 226, 255, 636, 658, 710], "letter": [148, 240, 249, 255, 361, 508, 576, 612, 636, 697, 706, 710, 713, 955], "thu": [149, 255, 566, 719, 1018], "faster": [149, 218, 226, 255, 269, 473, 514, 549, 612, 674, 675, 710, 719, 720, 915, 961, 1018], "onlin": [149, 255, 719, 1018], "rerun": [149, 255, 719, 1018], "fill_valu": [150, 205, 226, 255, 488, 612, 672, 710, 934, 1018], "Not": [150, 255, 387, 389, 435, 612, 638, 710], "To": [150, 255, 312, 313, 339, 366, 501, 507, 508, 516, 532, 600, 612, 638, 710, 795, 948, 954, 955, 963, 979], "fillnullstrategi": [151, 255, 366, 612, 639, 710, 821, 1018], "matches_supertyp": [151, 255, 639, 710], "forward": [151, 175, 255, 335, 366, 372, 612, 639, 650, 710, 791, 821, 1018], "consecut": [151, 255, 286, 366, 372, 500, 612, 639, 710, 821, 947, 1018], "fill_nan": [151, 255, 612, 710, 1018], "OR": [152, 255, 556, 640, 710, 713], "reduct": [154, 255], "supercast": [154, 255], "parent": [154, 255], "rule": [154, 255], "arithmet": [154, 255], "zip_with": [154, 255, 1018], "foo11": [154, 255], "bar22": [154, 255], "null_equ": [155, 255, 928, 1018], "retriev": [156, 255, 399, 400, 535, 857, 858, 982], "return_as_str": [158, 255], "preview": [158, 255], "nice": [158, 255], "few": [158, 255], "rather": [158, 175, 255, 534, 650, 710, 981], "head": [158, 177, 211, 255, 268, 398, 612, 653, 710, 855, 988, 1018], "tail": [158, 163, 255, 268, 494, 612, 710, 828, 941, 1018], "more_bi": [159, 187, 208, 255, 497, 612, 643, 677, 710], "maintain_ord": [159, 187, 189, 224, 228, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 269, 285, 427, 541, 548, 567, 612, 630, 635, 637, 643, 663, 673, 674, 675, 683, 693, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 710, 735, 759, 885, 907, 1003, 1018], "consist": [159, 187, 255, 526, 643, 710, 973], "agg": [159, 160, 161, 255, 263, 269, 367, 369, 496, 497, 541, 553, 567, 612, 630, 635, 637, 643, 644, 645, 663, 673, 710, 713], "index_column": [160, 161, 255, 644, 645, 710], "include_boundari": [160, 255, 644, 710], "start_bi": [160, 255, 644, 710], "startbi": [160, 255, 644, 710], "check_sort": [160, 161, 255, 644, 645, 710], "dynamicgroupbi": [160, 255], "groupbi": [160, 161, 185, 255, 263, 269, 308, 367, 369, 406, 459, 496, 497, 541, 553, 557, 567, 612, 630, 635, 637, 644, 645, 663, 673, 710, 713, 758, 864, 1018], "member": [160, 255, 644, 710, 840, 1018], "seen": [160, 255, 286, 372, 612, 644, 710], "roll": [160, 161, 255, 335, 336, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 564, 594, 595, 612, 644, 645, 710, 791, 792, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 1018], "slot": [160, 255, 308, 310, 404, 612, 644, 710, 758, 761, 862, 1018], "1n": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "nanosecond": [160, 161, 175, 228, 255, 339, 343, 344, 350, 474, 475, 476, 477, 478, 480, 481, 482, 574, 612, 644, 645, 650, 710, 795, 799, 800, 806], "1u": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "microsecond": [160, 161, 175, 228, 255, 339, 343, 344, 350, 474, 475, 476, 477, 478, 480, 481, 482, 573, 574, 602, 612, 644, 645, 650, 663, 710, 795, 799, 806], "1m": [160, 161, 175, 228, 255, 328, 329, 331, 338, 339, 343, 345, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 784, 786, 794, 795, 799, 801, 806], "millisecond": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 574, 612, 644, 645, 650, 710, 795, 799, 806], "1w": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "week": [160, 161, 175, 228, 255, 339, 343, 350, 352, 474, 475, 476, 477, 478, 480, 481, 482, 574, 612, 644, 645, 650, 710, 795, 799, 806, 808], "1q": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "quarter": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "1i": [160, 161, 175, 228, 255, 339, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795], "suffix": [160, 161, 174, 175, 201, 228, 232, 235, 255, 264, 290, 339, 343, 350, 387, 389, 390, 391, 434, 459, 463, 472, 474, 475, 476, 477, 478, 480, 481, 482, 505, 612, 644, 645, 649, 650, 669, 688, 689, 692, 710, 713, 739, 795, 799, 806, 952], "satur": [160, 161, 175, 228, 255, 339, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 795, 799, 806], "correspond": [160, 161, 175, 218, 228, 255, 327, 339, 343, 350, 467, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 779, 795, 799, 806, 909, 1018], "due": [160, 161, 175, 228, 255, 294, 322, 339, 342, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 742, 774, 795, 798, 799, 806, 1018], "daylight": [160, 161, 175, 228, 255, 314, 322, 339, 342, 343, 350, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 645, 650, 710, 774, 795, 798, 799, 806], "10i": [160, 161, 255, 644, 645, 710], "ascend": [160, 161, 255, 644, 645, 710], "dynam": [160, 255, 425, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 710, 883], "matter": [160, 161, 172, 198, 215, 255, 644, 645, 710], "_lower_bound": [160, 255, 644, 710], "_upper_bound": [160, 255, 644, 710], "harder": [160, 255, 644, 710], "inclus": [160, 161, 255, 381, 474, 475, 476, 477, 478, 480, 481, 482, 521, 522, 559, 612, 644, 645, 710, 833, 968, 969, 1018], "datapoint": [160, 255, 644, 710], "mondai": [160, 255, 350, 352, 644, 710, 806, 808], "tuesdai": [160, 255, 644, 710], "wednesdai": [160, 255, 644, 710], "thursdai": [160, 255, 644, 710], "fridai": [160, 255, 644, 710], "saturdai": [160, 255, 644, 710], "sundai": [160, 255, 352, 644, 710, 808], "weekli": [160, 255, 350, 644, 710, 806], "sorted": [160, 161, 255, 644, 645, 710], "metadata": [160, 161, 255, 644, 645, 710], "verifi": [160, 161, 255, 644, 645, 710], "incorrectli": [160, 161, 255, 425, 644, 645, 710], "incorrect": [160, 161, 255, 353, 486, 612, 644, 645, 694, 710, 809, 931, 1018], "re": [160, 218, 255, 335, 336, 644, 710, 791, 792, 1025], "come": [160, 255, 335, 336, 394, 612, 624, 644, 709, 710, 791, 792, 853, 1018], "set_index": [160, 255, 644, 710], "resampl": [160, 255, 644, 710], "reset_index": [160, 255, 644, 710], "though": [160, 255, 644, 710], "evenli": [160, 255, 644, 710], "upsampl": [160, 255, 644, 710], "date_rang": [160, 228, 255, 315, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 612, 644, 710, 766, 767, 769, 772, 773, 774, 775, 776, 777, 778, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 804, 806, 807, 808, 809, 810], "30m": [160, 255, 343, 350, 644, 710, 799, 806], "time_min": [160, 255, 644, 710], "time_max": [160, 255, 644, 710], "boundari": [160, 255, 297, 298, 299, 612, 644, 710, 748, 749, 750, 829, 1018], "time_count": [160, 255, 644, 710], "_lower_boundari": [160, 255, 644, 710], "_upper_boundari": [160, 255, 644, 710], "lower_bound": [160, 255, 297, 299, 381, 612, 644, 710, 748, 750, 833, 1005, 1018], "upper_bound": [160, 255, 297, 298, 381, 425, 612, 644, 710, 748, 749, 833, 889, 1018], "time_agg_list": [160, 255, 644, 710], "arang": [160, 226, 237, 255, 644, 694, 710], "2i": [160, 255, 644, 710], "3i": [160, 255, 644, 710], "a_agg_list": [160, 255, 644, 710], "rollinggroupbi": [161, 255], "dynamic_groupbi": [161, 255, 645, 710], "groupby_dynam": [161, 255, 645, 710], "t_0": [161, 255, 474, 475, 476, 477, 478, 480, 481, 482, 612, 645, 710], "t_1": [161, 255, 474, 475, 476, 477, 478, 480, 481, 482, 612, 645, 710], "t_n": [161, 255, 474, 475, 476, 477, 478, 480, 481, 482, 612, 645, 710], "43": [161, 255, 307, 481, 612, 645, 710], "strptime": [161, 255, 342, 645, 710, 798], "set_sort": [161, 175, 228, 255, 612, 645, 650, 710, 1018], "2d": [161, 218, 255, 584, 645, 710, 766, 772], "sum_a": [161, 255, 645, 710], "min_a": [161, 255, 645, 710], "max_a": [161, 255, 645, 710], "seed": [162, 199, 255, 376, 467, 484, 490, 612, 827, 909, 926, 937, 1018], "seed_1": [162, 255, 376, 612, 827, 1018], "seed_2": [162, 255, 376, 612, 827, 1018], "seed_3": [162, 255, 376, 612, 827, 1018], "hash": [162, 255, 612, 1018], "u64": [162, 255, 376, 469, 612, 663, 710, 827, 1018], "10783150408545073287": [162, 255], "1438741209321515184": [162, 255], "10047419486152048166": [162, 255], "2047317070637311557": [162, 255], "ab": [163, 177, 211, 232, 255, 535, 536, 612, 688, 710, 828, 855, 988, 1018], "grown": [165, 255], "intermedi": [167, 255, 648, 710, 832, 1018, 1026], "linear": [167, 191, 247, 255, 380, 401, 438, 465, 478, 564, 565, 591, 612, 648, 664, 704, 710, 832, 859, 908, 920, 1018], "mask": [168, 170, 255, 287, 288, 290, 291, 382, 384, 392, 402, 501, 503, 612, 736, 737, 822, 833, 835, 838, 850, 860, 904, 905, 929, 948, 950, 1009, 1018], "visual": [168, 170, 255], "buffer_s": [172, 255], "intern": [172, 255], "veri": [172, 223, 255, 269, 612, 629, 694, 710, 751, 1018], "fit": [172, 206, 226, 255, 489, 593, 612, 935, 936, 1018], "signific": [172, 255, 269, 612], "4x": [172, 255], "materialis": [172, 173, 197, 198, 255], "rows_by_kei": [172, 198, 255], "iter_row": [173, 197, 198, 255], "17_500": [173, 255], "klmnoopqrstuvwxyz": [173, 255], "__name__": [173, 255], "7500": [173, 255], "15_000": [173, 255], "record_batch": [173, 255], "to_arrow": [173, 255, 1018], "to_batch": [173, 255], "date32": [173, 255], "large_str": [173, 213, 219, 255], "15000": [173, 255], "2500": [173, 255], "left_on": [174, 175, 255, 649, 650, 710], "right_on": [174, 175, 255, 649, 650, 710], "_right": [174, 175, 255, 649, 650, 710], "joinvalid": [174, 255, 649, 710], "semi": [174, 255, 649, 710], "anti": [174, 255, 649, 694, 710, 929, 930, 1018], "cross": [174, 255, 649, 710], "many_to_mani": [174, 255, 649, 710], "one_to_on": [174, 255, 649, 710], "one_to_mani": [174, 255, 649, 710], "many_to_on": [174, 255, 649, 710], "join_asof": [174, 255, 649, 710], "stringcach": [174, 255, 623], "other_df": [174, 255], "by_left": [175, 255, 650, 710], "by_right": [175, 255, 650, 710], "asofjoinstrategi": [175, 255, 650, 710], "allow_parallel": [175, 255, 649, 650, 710], "force_parallel": [175, 255, 649, 650, 710], "asof": [175, 255, 650, 710], "asof_join": [175, 255], "search": [175, 255, 650, 710], "distanc": [175, 255, 650, 710, 829, 1018], "plan": [175, 176, 255, 627, 635, 642, 649, 650, 665, 673, 691, 710], "gdp": [175, 255, 650, 710], "2016": [175, 255, 650, 710], "2017": [175, 255, 650, 710], "2018": [175, 255, 342, 650, 710, 798], "2019": [175, 255, 650, 710], "record": [175, 218, 255, 650, 710], "jan": [175, 255, 650, 710], "4164": [175, 255, 650, 710], "4411": [175, 255, 650, 710], "4566": [175, 255, 650, 710], "4696": [175, 255, 650, 710], "popul": [175, 255, 650, 710], "12th": [175, 255, 650, 710], "82": [175, 255, 650, 710], "66": [175, 255, 481, 554, 612, 650, 710, 920, 1018], "83": [175, 255, 650, 710], "52": [175, 232, 255, 483, 612, 650, 688, 710], "request": [176, 255], "describe_plan": [176, 255], "unoptim": [176, 255], "describe_optimized_plan": [176, 255], "show_graph": [176, 255, 710], "un": [176, 255], "graphviz": [176, 255, 673, 710], "axi": [178, 179, 181, 183, 210, 255, 658, 710], "null_strategi": [179, 210, 255], "nullstrategi": [179, 210, 255], "spam": [179, 255, 508, 955], "id_var": [181, 255, 658, 710], "value_var": [181, 255, 658, 710], "variable_nam": [181, 255, 658, 710], "value_nam": [181, 255, 658, 710], "unpivot": [181, 255, 658, 710], "leav": [181, 255, 425, 658, 710], "massag": [181, 255, 658, 710], "measur": [181, 255, 658, 710], "merg": [182, 255, 659, 710], "caller": [182, 255, 425, 654, 659, 694, 710], "respons": [182, 255, 659, 710], "what": [185, 255, 999, 1008, 1018], "pack": [185, 255], "expr_unique_subset": [185, 255], "df_nuniqu": [185, 255], "df_agg_nuniqu": [185, 255], "offer": [188, 255, 461, 612, 662, 710], "fulli": [188, 199, 255], "cast_str_to_int": [188, 255, 662, 710], "col_nam": [188, 255, 434, 612, 662, 710], "tdf": [188, 255, 662, 710], "aggregate_funct": [189, 255], "pivotagg": [189, 255], "nodefault": [189, 255], "_nodefault": [189, 255], "no_default": [189, 255], "sort_column": [189, 255], "predefin": [189, 255], "predict": [189, 192, 228, 255], "transpos": [189, 255], "discoveri": [189, 255], "col1": [189, 226, 255, 710, 1026], "col2": [189, 226, 255, 710, 1026], "col3": [189, 255, 1026], "tanh": [189, 255, 612, 1018], "998347": [189, 255], "964028": [189, 255], "999954": [189, 255], "interpol": [191, 247, 255, 366, 438, 465, 478, 591, 612, 664, 704, 710, 908, 920, 1018], "rollinginterpolationmethod": [191, 247, 255, 465, 478, 591, 612, 664, 704, 710, 908, 920, 1018], "midpoint": [191, 247, 255, 465, 478, 591, 612, 664, 704, 710, 908, 920, 1018], "by_pred": [197, 255], "mutual": [197, 255], "exclus": [197, 255, 554, 559, 612], "addition": [197, 255], "clariti": [197, 255], "toomanyrowsreturnederror": [197, 255, 623], "norowsreturnederror": [197, 255, 623], "inherit": [197, 255], "rowserror": [197, 255, 623], "with_replac": [199, 255, 484, 612, 926, 1018], "shuffl": [199, 237, 255, 484, 612, 694, 926, 1018], "modul": [199, 255, 484, 490, 611, 612, 713, 926, 937, 1018], "named_expr": [201, 232, 255, 596, 599, 669, 688, 710], "threshold": [201, 255, 669, 710], "set_auto_structifi": [201, 232, 255, 669, 688, 710], "auto_structifi": [201, 232, 255, 669, 688, 710], "is_odd": [201, 255, 669, 710], "_is_odd": [201, 255, 669, 710], "shift_and_fil": [204, 255, 612, 710, 1018], "shift": [205, 255, 310, 404, 460, 488, 564, 612, 672, 710, 761, 862, 903, 934, 1018], "shrink": [206, 255, 489, 612, 935, 936, 1018], "hold": [206, 255], "ddof": [209, 229, 255, 480, 482, 499, 552, 566, 594, 595, 598, 603, 612, 678, 686, 710, 922, 924, 945, 1007, 1018], "deviat": [209, 255, 359, 480, 499, 598, 612, 678, 710, 815, 945, 1018], "degre": [209, 229, 255, 466, 480, 482, 499, 552, 566, 594, 595, 598, 603, 612, 678, 686, 710, 922, 924, 945, 1007, 1018], "freedom": [209, 229, 255, 480, 482, 499, 552, 566, 594, 595, 598, 603, 612, 678, 686, 710, 922, 924, 945, 1007, 1018], "divisor": [209, 229, 255, 480, 482, 499, 552, 566, 594, 595, 598, 603, 612, 678, 686, 710, 922, 924, 945, 1007, 1018], "816497": [209, 255], "21": [210, 255, 474, 475, 477, 480, 481, 482, 580, 612], "16a": [210, 255], "27b": [210, 255], "38c": [210, 255], "nth": [212, 255, 523, 542, 612, 681, 710, 970, 990, 1018], "mostli": [213, 255, 367, 612], "categoricaltyp": [213, 255], "as_seri": [214, 255], "fruit": [214, 255, 463, 472, 505, 524, 538, 612, 952, 971], "car": [214, 255, 463, 472, 538, 612], "beetl": [214, 255, 463, 472, 538, 612], "audi": [214, 255, 463, 472, 538, 612], "300": [214, 255, 916, 917, 919, 1018], "drop_first": [216, 255], "dummi": [216, 255, 995, 1018], "foo_1": [216, 255], "foo_2": [216, 255], "bar_3": [216, 255], "bar_4": [216, 255], "ham_a": [216, 255], "ham_b": [216, 255], "instantiat": [217, 255, 997, 1018], "from_repr": [217, 255, 997, 1018], "df_from_str_repr": [217, 255], "eval": [217, 255, 575, 997, 1018], "indexord": [218, 255], "fortran": [218, 255], "downstream": [218, 255, 486, 612, 931, 1018], "applic": [218, 255, 474, 475, 476, 477, 478, 480, 481, 482, 612], "prevent": [218, 255, 306, 307, 393, 539, 612, 710, 756, 757, 987, 1018], "reshap": [218, 255, 407, 612, 865, 1018], "ll": [218, 255], "u1": [218, 255], "f4": [218, 255], "view": [218, 255, 999, 1018], "recarrai": [218, 255], "rec": [218, 255], "use_pyarrow_extension_arrai": [219, 255, 1000, 1018], "trigger": [219, 255, 1000, 1018], "sent": [219, 255, 999, 1000, 1018], "pandas_df1": [219, 255], "pandas_df2": [219, 255], "pandas_df2_pa": [219, 255], "na": [219, 255, 1000, 1018], "get_column": [220, 255, 600], "four": [221, 255], "five": [221, 255, 1026], "bottom_k": [222, 255, 546, 612, 682, 710, 1002, 1018], "include_head": [223, 255], "header_nam": [223, 255], "column_nam": [223, 255], "perhap": [223, 255], "column_2": [223, 255], "name_gener": [223, 255], "base_nam": [223, 255], "my_column_": [223, 255], "my_column_0": [223, 255], "my_column_1": [223, 255], "my_column_2": [223, 255], "uniquekeepstrategi": [224, 255, 683, 710], "kept": [224, 255, 683, 710], "decompos": [225, 255, 684, 710], "t_a": [225, 255, 684, 710], "t_b": [225, 255, 684, 710], "t_c": [225, 255, 684, 710], "t_d": [225, 255, 684, 710], "womp": [225, 255, 684, 710], "t_": [225, 255, 684, 710], "t_struct": [225, 255, 684, 710], "step": [226, 255, 559], "unstackdirect": [226, 255], "much": [226, 255, 308, 424, 612, 758, 882, 1018], "pivot": [226, 255], "phase": [226, 255], "subject": [226, 255], "ascii_uppercas": [226, 255], "h": [226, 255, 262, 346, 349, 489, 526, 528, 531, 612, 973, 975, 978], "col1_0": [226, 255], "col1_1": [226, 255], "col1_2": [226, 255], "col2_0": [226, 255], "col2_1": [226, 255], "col2_2": [226, 255], "coalesc": [227, 255, 526, 685, 710, 973], "400": [227, 255, 685, 710, 713, 916, 917, 919, 1018], "600": [227, 255, 685, 710, 713], "700": [227, 255, 685, 710], "new_df": [227, 255, 685, 710], "time_column": [228, 255], "frequenc": [228, 255], "forward_fil": [228, 255, 304, 307, 612], "varianc": [229, 255, 360, 394, 482, 552, 603, 612, 686, 710, 816, 853, 924, 1007, 1018], "grow": [230, 255], "is_not": [232, 255, 612, 688, 710], "not_c": [232, 255, 688, 710], "diff": [232, 255, 321, 325, 329, 331, 333, 338, 345, 405, 612, 688, 710, 773, 777, 784, 786, 789, 794, 801, 863, 1018], "_diff": [232, 255, 688, 710], "row_nr": [233, 255, 435, 474, 475, 477, 480, 481, 482, 612, 690, 710, 930, 1018], "named_agg": [235, 692], "_sum": [235, 692], "_mean_squar": [235, 692], "b_sum": [235, 692], "c_mean_squar": [235, 692], "sub": [237, 282, 283, 284, 612, 732, 733, 734], "triangl": [237, 694], "group_df": [237, 694], "deem": [238, 302, 567, 612, 695], "nr": [240, 249, 697, 706], "maxim": [242, 277, 612, 699, 727, 1018], "833333": [243, 700], "minim": [245, 278, 400, 489, 497, 612, 702, 728, 858, 894, 935, 1018], "overview": [255, 612, 623, 710, 1018, 1026], "public": [255, 612, 623, 710, 1018], "frameinittyp": [255, 710], "variou": [255, 612, 710, 713, 1018], "entri": [255, 710, 1025], "behavior": [255, 269, 424, 557, 612, 882], "mydatafram": 255, "notic": [255, 710, 1018], "df4": 255, "df5": 255, "df6": 255, "corr": 255, "drop_in_plac": 255, "drop_nul": [255, 312, 612, 710, 1018], "estimated_s": [255, 1018], "explod": [255, 369, 459, 471, 612, 710, 913, 1018], "find_idx_by_nam": 255, "fold": [255, 444, 562, 569, 570, 592], "frame_equ": [255, 343, 350], "groupby_rol": [255, 474, 475, 476, 477, 478, 480, 481, 482, 612, 644, 710], "hash_row": 255, "hstack": 255, "insert_at_idx": 255, "is_dupl": [255, 612, 1018], "is_empti": [255, 1018], "is_uniqu": [255, 612, 1018], "iter_slic": 255, "melt": [255, 710], "merge_sort": [255, 710], "n_uniqu": [255, 612, 1018], "pipe": [255, 612, 710], "quantil": [255, 478, 612, 710, 907, 920, 1018], "replace_at_idx": 255, "selectortyp": [255, 713], "include_kei": 255, "high": 255, "cost": 255, "reoconstruct": 255, "defaultdict": 255, "assum": [255, 654, 694, 710], "shrink_to_fit": [255, 1018], "take_everi": [255, 612, 710, 1018], "to_dict": 255, "to_dummi": [255, 1018], "to_numpi": [255, 433, 612, 1018], "to_panda": [255, 1018], "to_struct": [255, 508], "unnest": [255, 508, 522, 523, 536, 710, 883, 969, 970], "unstack": 255, "write_avro": 255, "write_databas": 255, "write_delta": 255, "write_excel": 255, "write_json": [255, 665, 710], "write_parquet": 255, "cumprod": [262, 612, 1018], "ghi": [262, 508, 612, 713, 955], "94": [263, 612], "map_alia": [264, 463, 538, 612], "confus": [265, 387, 389, 612], "tt": [265, 612], "tf": [265, 267, 612], "ff": [265, 267, 612], "upcast": [268, 612], "skip_nul": [269, 612, 720, 1018], "pass_nam": [269, 612], "applystrategi": [269, 612], "thread_loc": [269, 612], "unknown": [269, 435, 507, 584, 612, 954], "stage": [269, 612], "speed": [269, 612, 675, 710], "code": [269, 287, 289, 290, 291, 486, 612, 652, 710, 931, 1018], "amount": [269, 612], "releas": [269, 612, 1026], "gil": [269, 612], "bug": [269, 433, 612, 654, 694, 710, 720, 1018], "discourag": [269, 612], "loop": [269, 612], "a_times_2": [269, 612], "approx": [270, 558, 612, 710], "hyperloglog": [270, 558, 612, 710], "algorithm": [270, 558, 612, 710], "cardin": [270, 558, 612, 710], "invers": [271, 272, 273, 274, 275, 276, 612, 721, 722, 723, 724, 725, 726, 1018], "cosin": [271, 272, 300, 301, 433, 612, 721, 722, 752, 753, 1018], "570796": [271, 273, 612, 721, 723, 1018], "hyperbol": [272, 274, 276, 301, 493, 544, 612, 722, 724, 726, 753, 940, 992, 1018], "sine": [273, 274, 433, 492, 493, 612, 723, 724, 939, 940, 1018], "881374": [274, 612, 724, 1018], "tangent": [275, 276, 543, 544, 612, 725, 726, 991, 992, 1018], "785398": [275, 612, 725, 1018], "arg_wher": [280, 612], "maintain": [285, 427, 485, 548, 612, 674, 675, 710, 735, 885, 927, 1003, 1018], "substr": [287, 290, 291, 501, 505, 516, 517, 521, 522, 523, 524, 713, 736, 739, 740, 948, 952, 963, 964, 968, 969, 970, 971], "ends_with": [287, 291, 501, 524, 713, 971], "x00": [287, 289, 290, 291], "xff": [287, 289, 290, 291], "hex": [287, 288, 289, 290, 291, 503, 504, 515, 737, 738, 950, 951, 962], "code_encoded_hex": [287, 289, 290, 291], "contains_ff": [287, 290, 291], "starts_with_ff": [287, 290, 291], "ends_with_ff": [287, 290, 291], "000000": [287, 289, 290, 291], "ffff00": [287, 289, 290, 291], "0000ff": [287, 289, 290, 291], "transferencod": [288, 289, 503, 504, 737, 738, 950, 951], "strict": [288, 294, 501, 503, 515, 526, 527, 528, 531, 612, 737, 742, 928, 948, 950, 962, 973, 974, 975, 978, 1018], "base64": [288, 289, 503, 504, 737, 738, 950, 951], "anywher": [290, 291, 526, 527, 528, 973, 974, 975], "complex": [292, 308, 546, 612, 741, 758, 1002, 1018], "frac": [292, 358, 359, 360, 494, 546, 612, 741, 814, 815, 816, 941, 1002, 1018], "hurt": [293, 612], "lot": [293, 612], "content": [293, 490, 551, 612, 937, 1018], "problem": [293, 612], "overflow": [294, 306, 307, 515, 539, 612, 742, 756, 757, 962, 987, 1018], "categoricalord": [295, 744], "lexic": [295, 713, 744], "foo_clip": [297, 298, 299, 612], "clip": [298, 299, 612, 749, 750, 1018], "543081": [301, 612, 753, 1018], "cumul": [303, 304, 305, 306, 307, 569, 570, 571, 612, 754, 755, 756, 757, 1018], "a_revers": [303, 304, 305, 306, 307, 434, 472, 538, 612], "value_cummax": [304, 612], "value_cummax_all_fil": [304, 612], "value_cumsum": [307, 612], "value_cumsum_all_fil": [307, 612], "min_period": [308, 358, 359, 360, 473, 474, 475, 476, 477, 478, 480, 481, 482, 594, 595, 612, 758, 814, 815, 816, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1018], "slide": [308, 612, 758, 1018], "realli": [308, 612, 758, 1018], "visit": [308, 612, 758, 1018], "radian": [309, 612], "pi": [309, 612, 752, 939, 991, 1018], "720": [309, 466, 612], "540": [309, 466, 612], "360": [309, 466, 612], "180": [309, 327, 341, 354, 466, 612], "null_behavior": [310, 404, 612, 761, 862, 1018], "nullbehavior": [310, 404, 612, 761, 862, 1018], "th": [310, 404, 405, 494, 612, 761, 862, 863, 941, 1018], "discret": [310, 355, 404, 405, 612, 759, 761, 812, 829, 862, 863, 907, 1018], "drop_nan": [313, 612, 1018], "utc": [314, 317, 322, 342, 526, 528, 766, 769, 774, 798, 973, 975], "usual": [314, 766], "rare": [314, 766], "countri": [314, 766], "switch": [314, 766], "samoa": [314, 766], "apia": [314, 766], "did": [314, 508, 766, 955], "2011": [314, 766], "dst_offset": [314, 766], "2012": [314, 766], "replace_time_zon": [314, 322, 770, 771, 803], "pacif": [314, 766], "11h": [314, 766], "13h": [314, 766], "lose": [315, 767], "2001": [315, 320, 323, 324, 326, 327, 332, 334, 339, 340, 341, 343, 344, 348, 350, 351, 352, 353, 354, 474, 475, 477, 480, 481, 482, 526, 612, 767, 772, 775, 776, 778, 780, 781, 782, 783, 785, 787, 788, 790, 793, 795, 796, 797, 799, 800, 804, 806, 807, 808, 809, 810, 973], "time_unit_m": [315, 767], "time_unit_n": [315, 767], "naiv": [316, 526, 528, 768, 973, 975], "compon": [316, 344, 526, 528, 574, 768, 800, 973, 975], "resolv": 316, "tm": [316, 713], "456000": [316, 768], "101000": 316, "456": [316, 713, 768, 996, 1018], "101": [316, 515, 962, 1026], "d1": 316, "d2": 316, "d3": 316, "europ": [317, 322, 342, 769, 774, 798], "london": [317, 322, 342, 769, 774, 798], "gmt": [317, 322, 342, 769, 774, 798], "bst": [317, 322, 342, 769, 774, 798], "weekdai": [320, 340], "day_of_month": [320, 340, 352], "ordinal_dai": [320, 352], "day_of_year": [320, 340, 352], "days_diff": 321, "base_utc_offset": [322, 774], "26": [322, 774], "0m": [322, 774], "epochtimeunit": [323, 580, 775], "unix": [323, 580, 775], "epoch_n": [323, 775], "epoch_": [323, 775], "978307200000000": [323, 348, 775, 804], "978307200": [323, 775], "978393600000000": [323, 348, 775, 804], "978393600": [323, 775], "978480000000000": [323, 348, 775, 804], "978480000": [323, 775], "hours_diff": 325, "2002": [326, 327, 339, 341, 354, 778, 795, 810], "iso": [327, 351, 352, 779, 807, 808], "2006": [327, 339, 795], "2004": [327, 339, 795], "2005": [327, 339, 795], "1_001": [328, 329, 331, 338], "002": [328, 329, 331, 338, 574, 784, 786, 794], "003": [328, 329, 331, 338], "3000": 328, "997": [328, 329, 331, 338], "997000": 328, "998": [328, 329, 331, 338], "998000": 328, "999": [328, 329, 331, 338, 1026], "999000": 328, "microseconds_diff": 329, "milliseconds_diff": 331, "minutes_diff": 333, "1440": [333, 789], "think": [335, 336, 791, 792], "vectoris": [335, 336, 791, 792], "tseri": [335, 336, 791, 792], "monthend": [335, 791], "rollforward": [335, 791], "monthbegin": [336, 792], "rollback": [336, 792], "nanoseconds_diff": 338, "1000000": [338, 534, 794], "minu": [339, 795], "dictat": [339, 795], "date_plus_1i": [339, 795], "1y2mo": [339, 795], "date_min": 339, "1998": [339, 795], "1999": [339, 713, 795], "2003": [339, 580, 795], "ordin": [340, 467, 612, 796, 909, 1018], "366": [340, 796], "use_earliest": [342, 798], "convert_time_zon": [342, 798], "ambigu": [342, 798], "sai": [342, 798], "earliest": [342, 798], "london_timezon": [342, 798], "amsterdam": [342, 798], "london_to_amsterdam": [342, 798], "cet": [342, 798], "cest": [342, 798], "dst": [342, 798], "ts_local": [342, 798], "brussel": [342, 798], "half": [343, 358, 359, 360, 612, 799, 814, 815, 816, 1018], "225": [343, 350], "to_fram": [343, 350, 526, 929, 930, 969, 970, 973, 1018], "10m": [343, 350, 799, 806], "milli": [344, 800], "micro": [344, 800], "456789": 344, "654321": 344, "111110": 344, "765431": 344, "sec": [344, 1026], "11111": 344, "seconds_diff": 345, "to_str": [346, 802], "datetime_str": [346, 349], "timestamp_n": [348, 804], "timestamp_m": 348, "978307200000": 348, "978393600000": 348, "978480000000": 348, "strftime": [349, 805], "53": [351, 807], "time_unit_u": [353, 809], "32971": [353, 809], "32974": [353, 809], "32976": [353, 809], "718281828459045": [355, 428, 612, 812, 886, 1018], "pk": [355, 612, 812, 1018], "probabl": [355, 612, 812, 1018], "459148": [355, 612], "754888": [355, 612], "eq": [357, 612, 1018], "span": [358, 359, 360, 612, 814, 815, 816, 1018], "half_lif": [358, 359, 360, 612, 814, 815, 816, 1018], "adjust": [358, 359, 360, 494, 612, 814, 815, 816, 941, 1018], "ignore_nul": [358, 359, 360, 612, 814, 815, 816, 1008, 1018], "exponenti": [358, 359, 360, 362, 462, 612, 814, 815, 816, 817, 1018], "weight": [358, 359, 360, 473, 474, 475, 476, 477, 478, 480, 481, 482, 494, 612, 814, 815, 816, 915, 916, 917, 918, 919, 920, 922, 923, 924, 941, 1018], "decai": [358, 359, 360, 612, 814, 815, 816, 1018], "term": [358, 359, 360, 511, 514, 612, 814, 815, 816, 958, 961, 1018], "mass": [358, 359, 360, 612, 814, 815, 816, 1018], "gamma": [358, 359, 360, 612, 814, 815, 816, 1018], "foral": [358, 359, 360, 612, 814, 815, 816, 1018], "geq": [358, 359, 360, 612, 814, 815, 816, 1018], "theta": [358, 359, 360, 612, 814, 815, 816, 1018], "life": [358, 359, 360, 612, 814, 815, 816, 1018], "exp": [358, 359, 360, 612, 814, 815, 816, 1018], "ln": [358, 359, 360, 612, 814, 815, 816, 1018], "smooth": [358, 359, 360, 612, 814, 815, 816, 1018], "factor": [358, 359, 360, 545, 612, 814, 815, 816, 1001, 1018], "leq": [358, 359, 360, 612, 814, 815, 816, 1018], "imbal": [358, 359, 360, 612, 814, 815, 816, 1018], "ew": [358, 359, 360, 612, 814, 815, 816, 1018], "w_i": [358, 359, 360, 612, 814, 815, 816, 1018], "recurs": [358, 359, 360, 612, 814, 815, 816, 1018], "y_0": [358, 359, 360, 612, 814, 815, 816, 1018], "x_0": [358, 359, 360, 612, 814, 815, 816, 1018], "y_t": [358, 359, 360, 612, 814, 815, 816, 1018], "y_": [358, 359, 360, 612, 814, 815, 816, 1018], "x_t": [358, 359, 360, 612, 814, 815, 816, 1018], "observ": [358, 359, 360, 612, 814, 815, 816, 1018], "x_2": [358, 359, 360, 612, 814, 815, 816, 1018], "428571": [358, 612], "bia": [359, 360, 394, 479, 494, 612, 815, 816, 853, 921, 941, 1018], "unbias": [359, 360, 612, 815, 816, 1018], "963624": [359, 612, 815, 1018], "928571": [360, 612, 816, 1018], "wildcard": [361, 563, 569, 570, 578, 592, 612], "regex": [361, 441, 501, 502, 505, 507, 508, 516, 517, 524, 576, 600, 612, 713, 948, 949, 952, 954, 955, 963, 964, 971], "aa": [361, 501, 576, 612, 948], "ba": [361, 576, 612, 713], "cc": [361, 576, 612], "718282": [362, 612], "389056": [362, 612], "54": [362, 612, 1026], "59815": [362, 612], "expand": [363, 440, 441, 470, 612, 818, 1018], "pythonliter": [364, 586, 589, 612, 819, 891, 894, 1018], "extrem": [364, 612, 819, 1018], "group_col": [367, 553, 612], "g1": [367, 553, 612], "g2": [367, 553, 612], "lt": [367, 553, 612, 1018], "gte": [367, 553, 612], "exprlistnamespac": [369, 612], "divis": [371, 547, 612], "truediv": [371, 612], "9774092659964970114": [376, 612], "13614470193936745724": [376, 612], "1101441246220388612": [376, 612], "11638928888656214026": [376, 612], "13382926553367784577": [376, 612], "cumsum": [379, 537, 612, 647, 710, 852, 1018], "interpolationmethod": [380, 612, 832, 1018], "regrid": [380, 612], "grid": [380, 612], "df_original_grid": [380, 612], "grid_point": [380, 612], "df_new_grid": [380, 612], "conflat": [381, 612], "finit": [383, 547, 566, 612, 837, 1018], "primit": [385, 612, 999, 1018], "optional_memb": [385, 612, 840, 1018], "infinit": [386, 547, 612, 841, 1018], "_isnan": [387, 612], "b_isnan": [387, 612], "negat": [388, 612], "_is_not_nan": [389, 612], "b_is_not_nan": [389, 612], "_not_nul": [390, 612], "a_not_nul": [390, 612], "b_not_nul": [390, 612], "_isnul": [391, 612], "a_isnul": [391, 612], "b_isnul": [391, 612], "undo": [393, 446, 612], "duplicateerror": [393, 612, 623], "occurr": [393, 612, 829, 1018], "333333": [393, 612, 903, 924, 1018], "fisher": [394, 494, 612, 853, 941, 1018], "fourth": [394, 612, 853, 1018], "subtract": [394, 537, 612, 853, 1018], "distribut": [394, 494, 612, 853, 941, 1018], "elimin": [394, 612, 853, 1018], "bias": [394, 494, 612, 853, 941, 1018], "scipi": [394, 494, 612, 853, 941, 1018], "stat": [394, 494, 612, 853, 941, 1018], "153061": [394, 612], "sublist": [399, 400, 402, 404, 405, 408, 409, 410, 412, 413, 420, 423, 424, 425, 840, 857, 858, 860, 862, 863, 866, 867, 868, 870, 871, 878, 881, 882, 883, 1018], "membership": [402, 860], "listcol": 403, "number_of_two": 403, "blindli": [406, 864], "worth": [406, 864], "enough": [406, 494, 612, 864, 941, 1018], "concat_list": [406, 575, 864], "rank": [406, 566, 575, 612, 864, 1018], "exprnamespac": 407, "flat": [407, 471, 612, 865, 913, 1018], "taken": [420, 520, 541, 612, 878, 967], "null_on_oob": [424, 882], "cheaper": [424, 882], "n_field_strategi": [425, 883], "tostructstrategi": [425, 883], "first_non_nul": [425, 883], "max_width": [425, 883], "field_0": [425, 883], "field_1": [425, 883], "field_n": [425, 883], "n0": 425, "n1": 425, "logarithm": [428, 429, 430, 612, 886, 887, 888, 1018], "584963": [428, 612], "30103": [429, 612], "60206": [429, 612], "natur": [430, 612, 888, 1018], "plu": [430, 612, 888, 1018], "693147": [430, 612], "098612": [430, 612], "386294": [430, 612], "lowest": [431, 612], "9223372036854775808": [431, 612], "agg_list": [433, 612], "elementwis": [433, 473, 474, 475, 477, 481, 612, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1018], "parti": [433, 612], "book": [433, 612], "map_dict": [433, 612, 1018], "argmax": [433, 612], "_revers": [434, 472, 538, 612], "rsplit": [434, 612], "b_revers": [434, 472, 538, 612], "remap": [435, 612, 890, 1018], "lookup": [435, 612, 890, 1018], "country_code_dict": [435, 612], "ca": [435, 612], "canada": [435, 612], "de": [435, 612], "germani": [435, 612], "fr": [435, 612], "franc": [435, 612], "country_cod": [435, 612], "rest": [435, 612], "exprmetanamespac": [439, 442], "computeerror": [443, 515, 623, 962], "keep_nam": [446, 612], "modulu": [449, 612], "xlog2": [451, 462, 612], "poison": [453, 454, 612, 899, 900, 1018], "nanmax": [453, 454, 612, 899, 900, 1018], "inequ": [455, 612], "ne": [456, 612, 1018], "more_expr": [459, 555, 556, 560, 562, 564, 565, 571, 586, 589, 600, 612], "mapping_strategi": [459, 612], "windowmappingstrategi": [459, 612], "group_to_row": [459, 612], "outcom": [459, 612], "group_dtyp": [459, 612], "warn": [459, 612], "flatten": [459, 612], "_max": [459, 612], "c_max": [459, 612], "_min": [459, 612], "c_min": [459, 612], "percent": [460, 612, 903, 1018], "090909": [460, 612], "extract_numb": [461, 612], "digit": [461, 483, 508, 534, 612, 925, 949, 955, 981, 1018, 1026], "scale_negative_even": [461, 612], "expon": [462, 612, 1018], "reverse_": [463, 612], "reverse_a": [463, 612], "reverse_fruit": [463, 612], "reverse_b": [463, 612], "reverse_car": [463, 612], "566371": [466, 612], "424778": [466, 612], "283185": [466, 612], "141593": [466, 612, 721, 1018], "rankmethod": [467, 612, 909, 1018], "ti": [467, 612, 909, 1018], "competit": [467, 612, 909, 1018], "highest": [467, 550, 566, 612, 710, 909, 1018], "64bit": [469, 612, 911, 1018], "safe": [469, 526, 528, 612, 911, 973, 975, 999, 1018], "fruits_revers": [472, 538, 612], "cars_revers": [472, 538, 612], "window_s": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 594, 595, 612, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 1018], "rolling_min": [473, 612, 915, 1018], "rolling_max": [473, 612, 915, 1018], "rolling_mean": [473, 612, 915, 1018], "rolling_sum": [473, 612, 915, 1018], "multipli": [473, 474, 475, 477, 480, 481, 482, 612, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1018], "label": [473, 474, 475, 476, 477, 478, 480, 481, 482, 612, 663, 710, 759, 907, 915, 916, 917, 918, 919, 920, 922, 923, 924, 1018], "358899": [473, 612], "041452": [473, 612], "567764": [473, 612], "travers": [474, 475, 477, 481, 612, 916, 917, 919, 922, 923, 924, 1018], "vector": [474, 475, 477, 481, 612, 916, 917, 919, 922, 923, 924, 1018], "endpoint": [474, 475, 476, 477, 478, 480, 481, 482, 612], "5h": [474, 475, 476, 477, 478, 480, 481, 482, 612], "df_tempor": [474, 475, 477, 480, 481, 482, 612], "closur": [474, 475, 480, 481, 482, 612], "rolling_row_max": [474, 612], "2h": [474, 475, 477, 480, 481, 482, 612], "rolling_row_mean": [475, 612], "contribut": [476, 478, 480, 482, 612], "rolling_row_min": [477, 612], "625": [478, 612], "skew": [479, 612, 921, 1018], "381802": [479, 612, 921, 1018], "47033": [479, 612, 921, 1018], "38180177416060584": [479, 612, 921, 1018], "47033046033698594": [479, 612, 921, 1018], "433013": [480, 612, 678, 710], "rolling_row_std": [480, 612], "rolling_row_sum": [481, 612], "39": [481, 580, 612], "63": [481, 612], "69": [481, 612], "1875": [482, 612, 686, 710], "rolling_row_var": [482, 612], "searchsortedsid": [485, 612, 927, 1018], "leftmost": [485, 612, 927, 1018], "rightmost": [485, 612, 927, 1018], "six": [485, 612], "extrema": [489, 612, 935, 1018], "112": [489, 612, 1026], "129": [489, 612], "8589934592": [489, 612], "1073741824": [489, 612], "175201": [493, 612, 940, 1018], "about": [494, 501, 507, 508, 516, 612, 941, 948, 954, 955, 963, 1018, 1026], "unimod": [494, 612, 941, 1018], "skewtest": [494, 612, 941, 1018], "speak": [494, 612, 941, 1018], "g_1": [494, 612, 941, 1018], "m_3": [494, 612, 941, 1018], "m_2": [494, 612, 941, 1018], "m_i": [494, 612, 941, 1018], "sum_": [494, 612, 941, 1018], "texttt": [494, 612, 941, 1018], "k_3": [494, 612, 941, 1018], "k_2": [494, 612, 941, 1018], "sqrt": [494, 612, 941, 1018], "343622": [494, 612], "value1": [497, 612], "value2": [497, 612], "attain": [497, 612], "414214": [498, 612, 944, 1018], "sensit": [501, 508, 516, 948, 955, 963], "ilmsuxu": [501, 507, 508, 516, 948, 954, 955, 963], "default_match": 501, "insensitive_match": 501, "section": [501, 507, 508, 516, 948, 954, 955, 963], "crab": [501, 948], "dog": [501, 530, 533, 565, 948, 977, 980], "rab": [501, 948], "success": [502, 508, 949, 955], "overlap": [502, 508, 949, 955], "captur": [502, 507, 508, 949, 954, 955], "123": [502, 508, 517, 713, 949, 955, 964, 996, 1018], "bla": [502, 508, 949, 955], "asd": [502, 508, 949, 955], "678": [502, 508, 949, 955], "910t": [502, 508, 949, 955], "count_digit": 502, "666f6f": [504, 951], "626172": [504, 951], "mango": [505, 524, 952, 971], "go": [505, 952], "has_suffix": 505, "group_index": [507, 954], "nthose": [507, 954], "nodd": [507, 954], "nthe": [507, 954], "url": [507, 954], "vote": [507, 954], "ballon_dor": [507, 954], "404": [507, 954], "ref": [507, 954], "candid": [507, 954], "messi": [507, 954], "ronaldo": [507, 954], "email": [508, 955], "real": [508, 955], "some_account": [508, 955], "somewher": [508, 955], "net": [508, 955], "jkl": [508, 955], "uvw": [508, 955], "co": [508, 612, 955, 1018], "uk": [508, 955], "address": 508, "xi": [508, 955], "insensit": [508, 516, 713, 948, 955, 963], "quantifi": [508, 955], "email_part": [508, 955], "extracted_nr": 508, "910": [508, 955], "json_path_match": [509, 956], "jsonpath": [509, 510, 956, 957], "json_path": [510, 957], "regardless": [510, 957], "json_val": [510, 957], "n_char": [511, 958], "caf\u00e9": [511, 514, 958, 961], "345": [511, 514, 958, 961], "\u6771\u4eac": [511, 514, 958, 961], "nchar": [511, 514], "fill_char": [512, 518, 959, 965], "justifi": [512, 518, 959, 965], "pad": [512, 518, 534, 959, 965, 981], "cow": [512, 518, 959, 965], "monkei": [512, 518, 959, 965], "hippopotamu": [512, 518, 959, 965], "strip": [513, 519, 960, 966], "tworld": [513, 960, 972], "wod": [513, 960], "rld": [513, 525, 960], "radix": [515, 962], "parseerror": [515, 962], "becom": [515, 962], "silent": [515, 962], "bin": [515, 554, 606, 612, 759, 829, 907, 962, 1012, 1018], "110": [515, 962], "010": [515, 962], "fa1e": [515, 962], "ff00": [515, 962], "cafe": [515, 962], "64030": [515, 962], "65280": [515, 962], "51966": [515, 962], "replace_al": [516, 963], "citi": 516, "philadelphia": 516, "season": 516, "spring": 516, "summer": 516, "autumn": 516, "winter": 516, "weather": [516, 963], "raini": [516, 963], "sunni": [516, 963], "cloudi": 516, "snowi": 516, "foggi": [516, 963], "123abc": [516, 963], "abc456": [516, 963], "abcabc": [517, 964], "123a123": [517, 964], "bc": [517, 600, 964], "trail": [519, 525, 966, 972], "oldw": 519, "he": 519, "subslic": [520, 967], "pear": [520, 967], "papaya": [520, 967], "dragonfruit": [520, 967], "s_slice": 520, "ear": [520, 967], "aya": [520, 967], "uit": [520, 967], "ya": [520, 967], "onf": [520, 967], "a_1": [522, 969, 995, 1018], "d_4": [522, 969], "rename_field": [522, 523, 969, 970], "first_part": [522, 523, 969, 970], "second_part": [522, 523, 969, 970], "remaind": [523, 970], "app": [524, 971], "has_prefix": 524, "nworld": 525, "ow": 525, "hell": [525, 972], "polarstemporaltyp": [526, 973], "introduc": [526, 527, 528, 973, 974, 975], "penalti": [526, 527, 528, 973, 974, 975], "clean": [526, 527, 528, 973, 974, 975], "beforehand": [526, 527, 528, 973, 974, 975], "certainli": [526, 527, 528, 973, 974, 975], "3f": [526, 528, 973, 975], "00z": [526, 528, 973, 975], "sun": [526, 973], "jul": [526, 973], "34": [526, 973], "inference_length": [529, 976], "3420": [529, 976], "120134": [529, 976], "3212": [529, 976], "143": [529, 976, 1026], "lowercas": [530, 977], "variant": [530, 532, 533], "titlecas": [532, 979], "sing": [532, 979], "welcom": [532, 979], "THERE": [532, 979], "NO": [532, 979], "There": [532, 979], "uppercas": [533, 980], "100000": 534, "0010": 534, "0001": 534, "00000": 534, "00001": 534, "cd": [535, 536], "struct_col": [535, 536], "www": 536, "xxx": 536, "yyi": 536, "zzz": 536, "obvious": 536, "structfieldnotfounderror": [536, 623], "761594": [544, 612, 992, 1018], "replic": [545, 612, 1001, 1018], "vals_phys": [545, 612], "floordiv": [547, 612], "ieee": [547, 612], "754": [547, 612], "mathemat": [547, 575, 612], "undefin": [547, 612], "On": [547, 612], "operand": [547, 612], "infin": [547, 612], "value_count": [549, 612, 1018], "9223372036854775807": [550, 612], "multithread": [551, 612], "binary_str": [554, 612], "zfill": [554, 612], "250": [554, 612, 917, 1018, 1026], "bin_x": [554, 612], "bin_i": [554, 612], "xor_xi": [554, 612], "bin_xor_xi": [554, 612], "00001010": [554, 612], "00000001": [554, 612], "00001011": [554, 612], "00001000": [554, 612], "00000010": [554, 612], "11111010": [554, 612], "00000011": [554, 612], "249": [554, 612], "11111001": [554, 612], "01000010": [554, 612], "00000100": [554, 612], "70": [554, 612], "01000110": [554, 612], "bitwis": [555, 556], "AND": [555, 713], "returns_scalar": 557, "product_a": 557, "49": 557, "Be": 559, "more_nam": 563, "hamburg": 563, "lag": 564, "mimic": 564, "a_lag_": 564, "a_rol": 564, "swim": 565, "walk": 565, "full_sent": 565, "correlationmethod": 566, "propagate_nan": 566, "spearman": 566, "larger": [566, 674, 675, 710], "544705": 566, "covari": [568, 595], "acc": [569, 570, 578, 592], "include_init": 569, "accumul": [569, 570, 578, 592], "fn": [569, 570, 578, 592], "new_valu": [569, 570, 578, 592], "cumreduc": 569, "tbl_width_char": 574, "120": 574, "add_week": 574, "add_dai": 574, "add_second": 574, "add_milli": 574, "add_hour": 574, "a_b_doubl": 575, "f_string": 579, "placehold": 579, "hello_": 579, "_world": 579, "foo_": 579, "_bar_": 579, "foo_a_bar_1": 579, "foo_b_bar_2": 579, "foo_c_bar_3": 579, "epoch": 580, "timestep": 580, "1666683077": 580, "1666683099": 580, "12345": [580, 745, 824, 925, 1018], "12346": 580, "agg_group": [581, 612], "allow_object": 584, "valueexcept": 584, "test_func": 585, "605551": 598, "605551275463989": 598, "my_struct": 599, "chain": 604, "isn": 604, "thens": 604, "elif": 604, "pick": 604, "arr": [605, 999, 1010, 1018], "sometim": 611, "and_": 612, "approx_uniqu": [612, 710], "arcco": [612, 1018], "arccosh": [612, 1018], "arcsin": [612, 1018], "arcsinh": [612, 1018], "arctan": [612, 1018], "arctanh": [612, 1018], "arg_max": [612, 1018], "arg_min": [612, 1018], "arg_sort": [612, 1018], "arg_uniqu": [612, 1018], "backward_fil": 612, "clip_max": [612, 1018], "clip_min": [612, 1018], "cosh": [612, 1018], "cumcount": 612, "cummax": [612, 1018], "cummin": [612, 1018], "cumulative_ev": [612, 1018], "entropi": [612, 1018], "eq_miss": [612, 1018], "ewm_mean": [612, 1018], "ewm_std": [612, 1018], "ewm_var": [612, 1018], "extend_const": [612, 1018], "from_json": [612, 665, 710], "ge": [612, 1018], "gt": [612, 1018], "implod": [612, 1018], "inspect": [612, 710], "is_between": [612, 1018], "is_finit": [612, 1018], "is_first": [612, 1018], "is_in": [612, 1018], "is_infinit": [612, 1018], "is_nan": [612, 1018], "is_not_nan": [612, 1018], "is_not_nul": [612, 1018], "kurtosi": [612, 1018], "le": [612, 1018], "log10": [612, 1018], "log1p": [612, 1018], "mod": 612, "mul": 612, "nan_max": [612, 1018], "nan_min": [612, 1018], "ne_miss": [612, 1018], "or_": 612, "pct_chang": [612, 1018], "pow": [612, 1018], "reinterpret": [612, 1018], "repeat_bi": 612, "rolling_appli": [612, 1018], "rolling_median": [612, 1018], "rolling_quantil": [612, 1018], "rolling_skew": [612, 1018], "rolling_std": [612, 1018], "rolling_var": [612, 1018], "search_sort": [612, 1018], "shrink_dtyp": [612, 1018], "sin": [612, 1018], "sinh": [612, 1018], "sort_bi": 612, "tan": [612, 1018], "to_phys": [612, 1018], "unique_count": [612, 1018], "xor": 612, "expos": 623, "miscellan": 623, "arrowerror": 623, "columnnotfounderror": 623, "invalidoperationerror": 623, "nodataerror": 623, "polarspanicerror": 623, "schemaerror": 623, "schemafieldnotfounderror": 623, "shapeerror": 623, "parametr": 623, "build_info": 623, "get_index_typ": 623, "show_vers": 623, "threadpool_s": 623, "sqlcontext": [623, 1025], "hit": [627, 710], "node": [627, 647, 654, 658, 663, 666, 710], "huge": [630, 710], "saver": [630, 710], "purpos": [637, 710], "influenc": [637, 654, 710], "read_json": [642, 691, 710], "lazygroupbi": [643, 644, 645, 710], "other_lf": [649, 710], "validate_output_schema": [654, 710], "streamabl": [654, 658, 710], "past": [654, 710], "paramount": [654, 710], "elig": [654, 710], "invari": [654, 710], "upheld": [654, 710], "prune": [654, 710], "show_plot": [663, 710], "truncate_nod": [663, 710], "figsiz": [663, 673, 710], "gantt": [663, 710], "plot": [663, 673, 710], "groupby_partit": [663, 710], "470": [663, 710], "475": [663, 710], "1964": [663, 710], "swap": [666, 710], "output_path": [673, 710], "raw_output": [673, 710], "figur": [673, 710], "ram": [674, 675, 710], "slightli": [674, 675, 710], "my_larger_than_ram_fil": [674, 675, 710], "data_pagesize_limit": [675, 710], "290994": [678, 710], "118034": [678, 710], "extern": [689, 710], "lf_other": [689, 710], "afoo": [689, 710], "cfoo": [689, 710], "train_lf": [689, 710], "feature_0": [689, 710], "feature_1": [689, 710], "test_lf": [689, 710], "_train": [689, 710], "feature_0_train": [689, 710], "dataframescan": [691, 710], "output_schema": [691, 710], "opaqu": 694, "idiomat": 694, "my_column": 694, "lf5": 710, "lf6": 710, "explain": 710, "sink_ipc": 710, "sink_parquet": 710, "with_context": 710, "intuit": 713, "relat": 713, "broadcast": 713, "emploi": 713, "complement": 713, "plenti": 713, "cde": 713, "fgg": 713, "jjk": 713, "lmn": 713, "opp": 713, "qqr": 713, "by_dtyp": 713, "as_expr": 713, "dispatch": 713, "2024": 713, "1_234_500": 713, "5_000_555": 713, "1234500": 713, "5000555": 713, "2010": 713, "4_500_000": 713, "4500000": 713, "3265500": 713, "by_nam": 713, "zap": 713, "tstamp": 713, "600000": 713, "123000": 713, "dtime": 713, "987000": 713, "400500": 713, "987": 713, "is_selector": 713, "obj": 713, "selector_column_nam": 713, "include_categor": 713, "set_ord": 713, "2345": 713, "3456": 713, "new_aliased_sr": [716, 1018], "append_chunk": [719, 1018], "super": [719, 1018], "292432": [722, 1018], "549306": [726, 1018], "catnamespac": 743, "56789": [745, 824, 925, 1018], "901234": [745, 824, 925, 1018], "1232e": [752, 1018], "break_point_label": [759, 907, 1018], "break_point": [759, 829, 907, 1018], "category_label": [759, 907, 1018], "breakpoint": [759, 907, 1018], "quick": [760, 1018, 1026], "series_num": [760, 1018], "581139": [760, 1018], "series_str": [760, 1018], "datetimenamespac": 765, "ser": [766, 770, 771, 774, 803], "kathmandu": [770, 771, 803], "0545": [770, 771, 803], "500m": [783, 785, 793, 800], "500000": 783, "2m": 788, "500000000": 793, "date_minus_1y_2mon": 795, "165": [799, 806], "series_equ": [799, 806, 1018], "timestamp_u": 804, "978307200000000000": 804, "978393600000000000": 804, "978480000000000000": 804, "005": [812, 1018], "06293300616044681": [812, 1018], "65": [812, 1018], "8568409950394724": [812, 1018], "4000000": [813, 1018], "814697265625": [813, 1018], "bitmask": [826, 1018], "swiftli": [826, 1018], "10734580197236529959": [827, 1018], "3022416320763508302": [827, 1018], "13756996518000038261": [827, 1018], "bin_count": [829, 1018], "a_count": [829, 1018], "fall": [833, 1018], "listnamespac": 856, "field_2": 883, "n00": 883, "n01": 883, "n02": 883, "2147483648": [889, 1018], "iso3166": [890, 1018], "tur": [890, 979, 1018], "jpn": [890, 1018], "nld": [890, 1018], "country_lookup": [890, 1018], "japan": [890, 1018], "t\u00fcrkiy": [890, 1018], "netherland": [890, 1018], "unrecognis": [890, 1018], "unspecifi": [890, 1018], "country_nam": [890, 1018], "166667": [903, 1018], "142857": [903, 1018], "peak": [904, 905, 1018], "nanstd": [915, 1018], "858612": [915, 1018], "200": [916, 917, 919, 1018], "150": [917, 1018], "350": [917, 1018], "450": [917, 1018], "dev": [922, 1018], "527525": [922, 1018], "frequent": [929, 930, 1018], "mutat": [930, 1018], "2246e": [939, 991, 1018], "stringnamespac": 946, "orld": 966, "6331e16": [991, 1018], "lib": [994, 1018], "int64arrai": [994, 1018], "a_2": [995, 1018], "a_3": [995, 1018], "s_from_str_repr": [997, 1018], "zero_copy_onli": [999, 1018], "writabl": [999, 1018], "complet": [999, 1018], "presenc": [999, 1018], "immut": [999, 1018], "127": [1005, 1018], "seriesview": [1008, 1018], "arraylik": 1018, "dtype_if_empti": 1018, "position": 1018, "scenario": 1018, "chunk_length": 1018, "cut": 1018, "get_chunk": 1018, "has_valid": 1018, "hist": 1018, "is_boolean": 1018, "is_float": 1018, "is_integ": 1018, "is_numer": [1018, 1026], "is_sort": 1018, "is_tempor": 1018, "is_utf8": 1018, "new_from_index": 1018, "peak_max": 1018, "peak_min": 1018, "power": 1018, "qcut": 1018, "set_at_idx": 1018, "two_a": 1025, "__enter__": 1025, "__exit__": 1025, "exc_typ": 1025, "baseexcept": 1025, "exc_val": 1025, "exc_tb": 1025, "tracebacktyp": 1025, "guid": 1026, "easi": 1026, "approxim": 1026, "own": 1026, "machin": 1026, "xdist": 1026, "hardwar": 1026, "setup": 1026, "numeric_dtyp": 1026, "null_probabililti": 1026, "test_numer": 1026, "col0": 1026, "col4": 1026, "29096": 1026, "485": 1026, "2147483647": 1026, "8257e14": 1026, "7508": 1026, "37338": 1026, "7264": 1026, "321": 1026, "16996": 1026, "121": 1026, "361": 1026, "63204": 1026, "1443e235": 1026, "conform": 1026, "ascii_lett": 1026, "id_char": 1026, "alphabet": 1026, "price": 1026, "min_valu": 1026, "max_valu": 1026, "test_price_calcul": 1026, "a101": 1026, "8nin": 1026, "qhoo": 1026, "714": 1026, "544": 1026, "i0e0": 1026, "0000": 1026, "colz": 1026, "test_miscellan": 1026, "235": 1026, "87": 1026, "186": 1026, "174": 1026, "179": 1026, "213": 1026, "221": 1026, "86": 1026, "255": 1026}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1025, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [555, 4, 1, "", "all"], [556, 4, 1, "", "any"], [557, 4, 1, "", "apply"], [558, 4, 1, "", "approx_unique"], [559, 4, 1, "", "arange"], [560, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [561, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [562, 4, 1, "", "coalesce"], [563, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [564, 4, 1, "", "concat_list"], [565, 4, 1, "", "concat_str"], [566, 4, 1, "", "corr"], [567, 4, 1, "", "count"], [568, 4, 1, "", "cov"], [569, 4, 1, "", "cumfold"], [570, 4, 1, "", "cumreduce"], [571, 4, 1, "", "cumsum"], [572, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [573, 4, 1, "", "datetime"], [574, 4, 1, "", "duration"], [575, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [576, 4, 1, "", "exclude"], [577, 4, 1, "", "first"], [578, 4, 1, "", "fold"], [579, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [580, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [581, 4, 1, "", "groups"], [582, 4, 1, "", "head"], [583, 4, 1, "", "implode"], [584, 4, 1, "", "lit"], [585, 4, 1, "", "map"], [586, 4, 1, "", "max"], [587, 4, 1, "", "mean"], [588, 4, 1, "", "median"], [589, 4, 1, "", "min"], [590, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [591, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [592, 4, 1, "", "reduce"], [593, 4, 1, "", "repeat"], [594, 4, 1, "", "rolling_corr"], [595, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [596, 4, 1, "", "select"], [713, 6, 0, "-", "selectors"], [119, 4, 1, "", "show_versions"], [597, 4, 1, "", "sql_expr"], [598, 4, 1, "", "std"], [599, 4, 1, "", "struct"], [600, 4, 1, "", "sum"], [601, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [602, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [131, 4, 1, "", "using_string_cache"], [603, 4, 1, "", "var"], [604, 4, 1, "", "when"], [132, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[135, 1, 1, "", "__dataframe__"], [136, 1, 1, "", "apply"], [137, 1, 1, "", "bottom_k"], [138, 1, 1, "", "clear"], [139, 1, 1, "", "clone"], [140, 2, 1, "", "columns"], [141, 1, 1, "", "corr"], [142, 1, 1, "", "describe"], [143, 1, 1, "", "drop"], [144, 1, 1, "", "drop_in_place"], [145, 1, 1, "", "drop_nulls"], [146, 2, 1, "", "dtypes"], [147, 1, 1, "", "estimated_size"], [148, 1, 1, "", "explode"], [149, 1, 1, "", "extend"], [150, 1, 1, "", "fill_nan"], [151, 1, 1, "", "fill_null"], [152, 1, 1, "", "filter"], [153, 1, 1, "", "find_idx_by_name"], [154, 1, 1, "", "fold"], [155, 1, 1, "", "frame_equal"], [156, 1, 1, "", "get_column"], [157, 1, 1, "", "get_columns"], [158, 1, 1, "", "glimpse"], [159, 1, 1, "", "groupby"], [160, 1, 1, "", "groupby_dynamic"], [161, 1, 1, "", "groupby_rolling"], [162, 1, 1, "", "hash_rows"], [163, 1, 1, "", "head"], [164, 2, 1, "", "height"], [165, 1, 1, "", "hstack"], [166, 1, 1, "", "insert_at_idx"], [167, 1, 1, "", "interpolate"], [168, 1, 1, "", "is_duplicated"], [169, 1, 1, "", "is_empty"], [170, 1, 1, "", "is_unique"], [171, 1, 1, "", "item"], [172, 1, 1, "", "iter_rows"], [173, 1, 1, "", "iter_slices"], [174, 1, 1, "", "join"], [175, 1, 1, "", "join_asof"], [176, 1, 1, "", "lazy"], [177, 1, 1, "", "limit"], [178, 1, 1, "", "max"], [179, 1, 1, "", "mean"], [180, 1, 1, "", "median"], [181, 1, 1, "", "melt"], [182, 1, 1, "", "merge_sorted"], [183, 1, 1, "", "min"], [184, 1, 1, "", "n_chunks"], [185, 1, 1, "", "n_unique"], [186, 1, 1, "", "null_count"], [187, 1, 1, "", "partition_by"], [188, 1, 1, "", "pipe"], [189, 1, 1, "", "pivot"], [190, 1, 1, "", "product"], [191, 1, 1, "", "quantile"], [192, 1, 1, "", "rechunk"], [193, 1, 1, "", "rename"], [194, 1, 1, "", "replace"], [195, 1, 1, "", "replace_at_idx"], [196, 1, 1, "", "reverse"], [197, 1, 1, "", "row"], [198, 1, 1, "", "rows"], [199, 1, 1, "", "sample"], [200, 2, 1, "", "schema"], [201, 1, 1, "", "select"], [202, 1, 1, "", "set_sorted"], [203, 2, 1, "", "shape"], [204, 1, 1, "", "shift"], [205, 1, 1, "", "shift_and_fill"], [206, 1, 1, "", "shrink_to_fit"], [207, 1, 1, "", "slice"], [208, 1, 1, "", "sort"], [209, 1, 1, "", "std"], [210, 1, 1, "", "sum"], [211, 1, 1, "", "tail"], [212, 1, 1, "", "take_every"], [213, 1, 1, "", "to_arrow"], [214, 1, 1, "", "to_dict"], [215, 1, 1, "", "to_dicts"], [216, 1, 1, "", "to_dummies"], [217, 1, 1, "", "to_init_repr"], [218, 1, 1, "", "to_numpy"], [219, 1, 1, "", "to_pandas"], [220, 1, 1, "", "to_series"], [221, 1, 1, "", "to_struct"], [222, 1, 1, "", "top_k"], [223, 1, 1, "", "transpose"], [224, 1, 1, "", "unique"], [225, 1, 1, "", "unnest"], [226, 1, 1, "", "unstack"], [227, 1, 1, "", "update"], [228, 1, 1, "", "upsample"], [229, 1, 1, "", "var"], [230, 1, 1, "", "vstack"], [231, 2, 1, "", "width"], [232, 1, 1, "", "with_columns"], [233, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[261, 1, 1, "", "abs"], [262, 1, 1, "", "add"], [263, 1, 1, "", "agg_groups"], [264, 1, 1, "", "alias"], [265, 1, 1, "", "all"], [266, 1, 1, "", "and_"], [267, 1, 1, "", "any"], [268, 1, 1, "", "append"], [269, 1, 1, "", "apply"], [270, 1, 1, "", "approx_unique"], [271, 1, 1, "", "arccos"], [272, 1, 1, "", "arccosh"], [273, 1, 1, "", "arcsin"], [274, 1, 1, "", "arcsinh"], [275, 1, 1, "", "arctan"], [276, 1, 1, "", "arctanh"], [277, 1, 1, "", "arg_max"], [278, 1, 1, "", "arg_min"], [279, 1, 1, "", "arg_sort"], [280, 1, 1, "", "arg_true"], [281, 1, 1, "", "arg_unique"], [286, 1, 1, "", "backward_fill"], [292, 1, 1, "", "bottom_k"], [293, 1, 1, "", "cache"], [294, 1, 1, "", "cast"], [296, 1, 1, "", "ceil"], [297, 1, 1, "", "clip"], [298, 1, 1, "", "clip_max"], [299, 1, 1, "", "clip_min"], [300, 1, 1, "", "cos"], [301, 1, 1, "", "cosh"], [302, 1, 1, "", "count"], [303, 1, 1, "", "cumcount"], [304, 1, 1, "", "cummax"], [305, 1, 1, "", "cummin"], [306, 1, 1, "", "cumprod"], [307, 1, 1, "", "cumsum"], [308, 1, 1, "", "cumulative_eval"], [309, 1, 1, "", "degrees"], [310, 1, 1, "", "diff"], [311, 1, 1, "", "dot"], [312, 1, 1, "", "drop_nans"], [313, 1, 1, "", "drop_nulls"], [355, 1, 1, "", "entropy"], [356, 1, 1, "", "eq"], [357, 1, 1, "", "eq_missing"], [358, 1, 1, "", "ewm_mean"], [359, 1, 1, "", "ewm_std"], [360, 1, 1, "", "ewm_var"], [361, 1, 1, "", "exclude"], [362, 1, 1, "", "exp"], [363, 1, 1, "", "explode"], [364, 1, 1, "", "extend_constant"], [365, 1, 1, "", "fill_nan"], [366, 1, 1, "", "fill_null"], [367, 1, 1, "", "filter"], [368, 1, 1, "", "first"], [369, 1, 1, "", "flatten"], [370, 1, 1, "", "floor"], [371, 1, 1, "", "floordiv"], [372, 1, 1, "", "forward_fill"], [373, 1, 1, "", "from_json"], [374, 1, 1, "", "ge"], [375, 1, 1, "", "gt"], [376, 1, 1, "", "hash"], [377, 1, 1, "", "head"], [378, 1, 1, "", "implode"], [379, 1, 1, "", "inspect"], [380, 1, 1, "", "interpolate"], [381, 1, 1, "", "is_between"], [382, 1, 1, "", "is_duplicated"], [383, 1, 1, "", "is_finite"], [384, 1, 1, "", "is_first"], [385, 1, 1, "", "is_in"], [386, 1, 1, "", "is_infinite"], [387, 1, 1, "", "is_nan"], [388, 1, 1, "", "is_not"], [389, 1, 1, "", "is_not_nan"], [390, 1, 1, "", "is_not_null"], [391, 1, 1, "", "is_null"], [392, 1, 1, "", "is_unique"], [393, 1, 1, "", "keep_name"], [394, 1, 1, "", "kurtosis"], [395, 1, 1, "", "last"], [396, 1, 1, "", "le"], [397, 1, 1, "", "len"], [398, 1, 1, "", "limit"], [428, 1, 1, "", "log"], [429, 1, 1, "", "log10"], [430, 1, 1, "", "log1p"], [431, 1, 1, "", "lower_bound"], [432, 1, 1, "", "lt"], [433, 1, 1, "", "map"], [434, 1, 1, "", "map_alias"], [435, 1, 1, "", "map_dict"], [436, 1, 1, "", "max"], [437, 1, 1, "", "mean"], [438, 1, 1, "", "median"], [448, 1, 1, "", "min"], [449, 1, 1, "", "mod"], [450, 1, 1, "", "mode"], [451, 1, 1, "", "mul"], [452, 1, 1, "", "n_unique"], [453, 1, 1, "", "nan_max"], [454, 1, 1, "", "nan_min"], [455, 1, 1, "", "ne"], [456, 1, 1, "", "ne_missing"], [457, 1, 1, "", "null_count"], [458, 1, 1, "", "or_"], [459, 1, 1, "", "over"], [460, 1, 1, "", "pct_change"], [461, 1, 1, "", "pipe"], [462, 1, 1, "", "pow"], [463, 1, 1, "", "prefix"], [464, 1, 1, "", "product"], [465, 1, 1, "", "quantile"], [466, 1, 1, "", "radians"], [467, 1, 1, "", "rank"], [468, 1, 1, "", "rechunk"], [469, 1, 1, "", "reinterpret"], [470, 1, 1, "", "repeat_by"], [471, 1, 1, "", "reshape"], [472, 1, 1, "", "reverse"], [473, 1, 1, "", "rolling_apply"], [474, 1, 1, "", "rolling_max"], [475, 1, 1, "", "rolling_mean"], [476, 1, 1, "", "rolling_median"], [477, 1, 1, "", "rolling_min"], [478, 1, 1, "", "rolling_quantile"], [479, 1, 1, "", "rolling_skew"], [480, 1, 1, "", "rolling_std"], [481, 1, 1, "", "rolling_sum"], [482, 1, 1, "", "rolling_var"], [483, 1, 1, "", "round"], [484, 1, 1, "", "sample"], [485, 1, 1, "", "search_sorted"], [486, 1, 1, "", "set_sorted"], [487, 1, 1, "", "shift"], [488, 1, 1, "", "shift_and_fill"], [489, 1, 1, "", "shrink_dtype"], [490, 1, 1, "", "shuffle"], [491, 1, 1, "", "sign"], [492, 1, 1, "", "sin"], [493, 1, 1, "", "sinh"], [494, 1, 1, "", "skew"], [495, 1, 1, "", "slice"], [496, 1, 1, "", "sort"], [497, 1, 1, "", "sort_by"], [498, 1, 1, "", "sqrt"], [499, 1, 1, "", "std"], [537, 1, 1, "", "sub"], [538, 1, 1, "", "suffix"], [539, 1, 1, "", "sum"], [540, 1, 1, "", "tail"], [541, 1, 1, "", "take"], [542, 1, 1, "", "take_every"], [543, 1, 1, "", "tan"], [544, 1, 1, "", "tanh"], [545, 1, 1, "", "to_physical"], [546, 1, 1, "", "top_k"], [547, 1, 1, "", "truediv"], [548, 1, 1, "", "unique"], [549, 1, 1, "", "unique_counts"], [550, 1, 1, "", "upper_bound"], [551, 1, 1, "", "value_counts"], [552, 1, 1, "", "var"], [553, 1, 1, "", "where"], [554, 1, 1, "", "xor"]], "polars.Expr.arr": [[282, 1, 1, "", "max"], [283, 1, 1, "", "min"], [284, 1, 1, "", "sum"], [285, 1, 1, "", "unique"]], "polars.Expr.bin": [[287, 1, 1, "", "contains"], [288, 1, 1, "", "decode"], [289, 1, 1, "", "encode"], [290, 1, 1, "", "ends_with"], [291, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[295, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[314, 1, 1, "", "base_utc_offset"], [315, 1, 1, "", "cast_time_unit"], [316, 1, 1, "", "combine"], [317, 1, 1, "", "convert_time_zone"], [318, 1, 1, "", "date"], [319, 1, 1, "", "datetime"], [320, 1, 1, "", "day"], [321, 1, 1, "", "days"], [322, 1, 1, "", "dst_offset"], [323, 1, 1, "", "epoch"], [324, 1, 1, "", "hour"], [325, 1, 1, "", "hours"], [326, 1, 1, "", "is_leap_year"], [327, 1, 1, "", "iso_year"], [328, 1, 1, "", "microsecond"], [329, 1, 1, "", "microseconds"], [330, 1, 1, "", "millisecond"], [331, 1, 1, "", "milliseconds"], [332, 1, 1, "", "minute"], [333, 1, 1, "", "minutes"], [334, 1, 1, "", "month"], [335, 1, 1, "", "month_end"], [336, 1, 1, "", "month_start"], [337, 1, 1, "", "nanosecond"], [338, 1, 1, "", "nanoseconds"], [339, 1, 1, "", "offset_by"], [340, 1, 1, "", "ordinal_day"], [341, 1, 1, "", "quarter"], [342, 1, 1, "", "replace_time_zone"], [343, 1, 1, "", "round"], [344, 1, 1, "", "second"], [345, 1, 1, "", "seconds"], [346, 1, 1, "", "strftime"], [347, 1, 1, "", "time"], [348, 1, 1, "", "timestamp"], [349, 1, 1, "", "to_string"], [350, 1, 1, "", "truncate"], [351, 1, 1, "", "week"], [352, 1, 1, "", "weekday"], [353, 1, 1, "", "with_time_unit"], [354, 1, 1, "", "year"]], "polars.Expr.list": [[399, 1, 1, "", "arg_max"], [400, 1, 1, "", "arg_min"], [401, 1, 1, "", "concat"], [402, 1, 1, "", "contains"], [403, 1, 1, "", "count_match"], [404, 1, 1, "", "diff"], [405, 1, 1, "", "difference"], [406, 1, 1, "", "eval"], [407, 1, 1, "", "explode"], [408, 1, 1, "", "first"], [409, 1, 1, "", "get"], [410, 1, 1, "", "head"], [411, 1, 1, "", "intersection"], [412, 1, 1, "", "join"], [413, 1, 1, "", "last"], [414, 1, 1, "", "lengths"], [415, 1, 1, "", "max"], [416, 1, 1, "", "mean"], [417, 1, 1, "", "min"], [418, 1, 1, "", "reverse"], [419, 1, 1, "", "shift"], [420, 1, 1, "", "slice"], [421, 1, 1, "", "sort"], [422, 1, 1, "", "sum"], [423, 1, 1, "", "tail"], [424, 1, 1, "", "take"], [425, 1, 1, "", "to_struct"], [426, 1, 1, "", "union"], [427, 1, 1, "", "unique"]], "polars.Expr.meta": [[439, 1, 1, "", "eq"], [440, 1, 1, "", "has_multiple_outputs"], [441, 1, 1, "", "is_regex_projection"], [442, 1, 1, "", "ne"], [443, 1, 1, "", "output_name"], [444, 1, 1, "", "pop"], [445, 1, 1, "", "root_names"], [446, 1, 1, "", "undo_aliases"], [447, 1, 1, "", "write_json"]], "polars.Expr.str": [[500, 1, 1, "", "concat"], [501, 1, 1, "", "contains"], [502, 1, 1, "", "count_match"], [503, 1, 1, "", "decode"], [504, 1, 1, "", "encode"], [505, 1, 1, "", "ends_with"], [506, 1, 1, "", "explode"], [507, 1, 1, "", "extract"], [508, 1, 1, "", "extract_all"], [509, 1, 1, "", "json_extract"], [510, 1, 1, "", "json_path_match"], [511, 1, 1, "", "lengths"], [512, 1, 1, "", "ljust"], [513, 1, 1, "", "lstrip"], [514, 1, 1, "", "n_chars"], [515, 1, 1, "", "parse_int"], [516, 1, 1, "", "replace"], [517, 1, 1, "", "replace_all"], [518, 1, 1, "", "rjust"], [519, 1, 1, "", "rstrip"], [520, 1, 1, "", "slice"], [521, 1, 1, "", "split"], [522, 1, 1, "", "split_exact"], [523, 1, 1, "", "splitn"], [524, 1, 1, "", "starts_with"], [525, 1, 1, "", "strip"], [526, 1, 1, "", "strptime"], [527, 1, 1, "", "to_date"], [528, 1, 1, "", "to_datetime"], [529, 1, 1, "", "to_decimal"], [530, 1, 1, "", "to_lowercase"], [531, 1, 1, "", "to_time"], [532, 1, 1, "", "to_titlecase"], [533, 1, 1, "", "to_uppercase"], [534, 1, 1, "", "zfill"]], "polars.Expr.struct": [[535, 1, 1, "", "field"], [536, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[626, 1, 1, "", "bottom_k"], [627, 1, 1, "", "cache"], [628, 1, 1, "", "clear"], [629, 1, 1, "", "clone"], [630, 1, 1, "", "collect"], [631, 2, 1, "", "columns"], [632, 1, 1, "", "drop"], [633, 1, 1, "", "drop_nulls"], [634, 2, 1, "", "dtypes"], [635, 1, 1, "", "explain"], [636, 1, 1, "", "explode"], [637, 1, 1, "", "fetch"], [638, 1, 1, "", "fill_nan"], [639, 1, 1, "", "fill_null"], [640, 1, 1, "", "filter"], [641, 1, 1, "", "first"], [642, 1, 1, "", "from_json"], [643, 1, 1, "", "groupby"], [644, 1, 1, "", "groupby_dynamic"], [645, 1, 1, "", "groupby_rolling"], [646, 1, 1, "", "head"], [647, 1, 1, "", "inspect"], [648, 1, 1, "", "interpolate"], [649, 1, 1, "", "join"], [650, 1, 1, "", "join_asof"], [651, 1, 1, "", "last"], [652, 1, 1, "", "lazy"], [653, 1, 1, "", "limit"], [654, 1, 1, "", "map"], [655, 1, 1, "", "max"], [656, 1, 1, "", "mean"], [657, 1, 1, "", "median"], [658, 1, 1, "", "melt"], [659, 1, 1, "", "merge_sorted"], [660, 1, 1, "", "min"], [661, 1, 1, "", "null_count"], [662, 1, 1, "", "pipe"], [663, 1, 1, "", "profile"], [664, 1, 1, "", "quantile"], [665, 1, 1, "", "read_json"], [666, 1, 1, "", "rename"], [667, 1, 1, "", "reverse"], [668, 2, 1, "", "schema"], [669, 1, 1, "", "select"], [670, 1, 1, "", "set_sorted"], [671, 1, 1, "", "shift"], [672, 1, 1, "", "shift_and_fill"], [673, 1, 1, "", "show_graph"], [674, 1, 1, "", "sink_ipc"], [675, 1, 1, "", "sink_parquet"], [676, 1, 1, "", "slice"], [677, 1, 1, "", "sort"], [678, 1, 1, "", "std"], [679, 1, 1, "", "sum"], [680, 1, 1, "", "tail"], [681, 1, 1, "", "take_every"], [682, 1, 1, "", "top_k"], [683, 1, 1, "", "unique"], [684, 1, 1, "", "unnest"], [685, 1, 1, "", "update"], [686, 1, 1, "", "var"], [687, 2, 1, "", "width"], [688, 1, 1, "", "with_columns"], [689, 1, 1, "", "with_context"], [690, 1, 1, "", "with_row_count"], [691, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1025, 1, 1, "", "__enter__"], [1025, 1, 1, "", "__exit__"], [1025, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[715, 1, 1, "", "abs"], [716, 1, 1, "", "alias"], [717, 1, 1, "", "all"], [718, 1, 1, "", "any"], [719, 1, 1, "", "append"], [720, 1, 1, "", "apply"], [721, 1, 1, "", "arccos"], [722, 1, 1, "", "arccosh"], [723, 1, 1, "", "arcsin"], [724, 1, 1, "", "arcsinh"], [725, 1, 1, "", "arctan"], [726, 1, 1, "", "arctanh"], [727, 1, 1, "", "arg_max"], [728, 1, 1, "", "arg_min"], [729, 1, 1, "", "arg_sort"], [730, 1, 1, "", "arg_true"], [731, 1, 1, "", "arg_unique"], [741, 1, 1, "", "bottom_k"], [742, 1, 1, "", "cast"], [743, 3, 1, "", "cat"], [745, 1, 1, "", "ceil"], [746, 1, 1, "", "chunk_lengths"], [747, 1, 1, "", "clear"], [748, 1, 1, "", "clip"], [749, 1, 1, "", "clip_max"], [750, 1, 1, "", "clip_min"], [751, 1, 1, "", "clone"], [752, 1, 1, "", "cos"], [753, 1, 1, "", "cosh"], [754, 1, 1, "", "cummax"], [755, 1, 1, "", "cummin"], [756, 1, 1, "", "cumprod"], [757, 1, 1, "", "cumsum"], [758, 1, 1, "", "cumulative_eval"], [759, 1, 1, "", "cut"], [760, 1, 1, "", "describe"], [761, 1, 1, "", "diff"], [762, 1, 1, "", "dot"], [763, 1, 1, "", "drop_nans"], [764, 1, 1, "", "drop_nulls"], [765, 3, 1, "", "dt"], [811, 3, 1, "", "dtype"], [812, 1, 1, "", "entropy"], [813, 1, 1, "", "estimated_size"], [814, 1, 1, "", "ewm_mean"], [815, 1, 1, "", "ewm_std"], [816, 1, 1, "", "ewm_var"], [817, 1, 1, "", "exp"], [818, 1, 1, "", "explode"], [819, 1, 1, "", "extend_constant"], [820, 1, 1, "", "fill_nan"], [821, 1, 1, "", "fill_null"], [822, 1, 1, "", "filter"], [823, 3, 1, "", "flags"], [824, 1, 1, "", "floor"], [825, 1, 1, "", "get_chunks"], [826, 1, 1, "", "has_validity"], [827, 1, 1, "", "hash"], [828, 1, 1, "", "head"], [829, 1, 1, "", "hist"], [830, 1, 1, "", "implode"], [831, 3, 1, "", "inner_dtype"], [832, 1, 1, "", "interpolate"], [833, 1, 1, "", "is_between"], [834, 1, 1, "", "is_boolean"], [835, 1, 1, "", "is_duplicated"], [836, 1, 1, "", "is_empty"], [837, 1, 1, "", "is_finite"], [838, 1, 1, "", "is_first"], [839, 1, 1, "", "is_float"], [840, 1, 1, "", "is_in"], [841, 1, 1, "", "is_infinite"], [842, 1, 1, "", "is_integer"], [843, 1, 1, "", "is_nan"], [844, 1, 1, "", "is_not_nan"], [845, 1, 1, "", "is_not_null"], [846, 1, 1, "", "is_null"], [847, 1, 1, "", "is_numeric"], [848, 1, 1, "", "is_sorted"], [849, 1, 1, "", "is_temporal"], [850, 1, 1, "", "is_unique"], [851, 1, 1, "", "is_utf8"], [852, 1, 1, "", "item"], [853, 1, 1, "", "kurtosis"], [854, 1, 1, "", "len"], [855, 1, 1, "", "limit"], [856, 3, 1, "", "list"], [886, 1, 1, "", "log"], [887, 1, 1, "", "log10"], [888, 1, 1, "", "log1p"], [889, 1, 1, "", "lower_bound"], [890, 1, 1, "", "map_dict"], [891, 1, 1, "", "max"], [892, 1, 1, "", "mean"], [893, 1, 1, "", "median"], [894, 1, 1, "", "min"], [895, 1, 1, "", "mode"], [896, 1, 1, "", "n_chunks"], [897, 1, 1, "", "n_unique"], [898, 3, 1, "", "name"], [899, 1, 1, "", "nan_max"], [900, 1, 1, "", "nan_min"], [901, 1, 1, "", "new_from_index"], [902, 1, 1, "", "null_count"], [903, 1, 1, "", "pct_change"], [904, 1, 1, "", "peak_max"], [905, 1, 1, "", "peak_min"], [906, 1, 1, "", "product"], [907, 1, 1, "", "qcut"], [908, 1, 1, "", "quantile"], [909, 1, 1, "", "rank"], [910, 1, 1, "", "rechunk"], [911, 1, 1, "", "reinterpret"], [912, 1, 1, "", "rename"], [913, 1, 1, "", "reshape"], [914, 1, 1, "", "reverse"], [915, 1, 1, "", "rolling_apply"], [916, 1, 1, "", "rolling_max"], [917, 1, 1, "", "rolling_mean"], [918, 1, 1, "", "rolling_median"], [919, 1, 1, "", "rolling_min"], [920, 1, 1, "", "rolling_quantile"], [921, 1, 1, "", "rolling_skew"], [922, 1, 1, "", "rolling_std"], [923, 1, 1, "", "rolling_sum"], [924, 1, 1, "", "rolling_var"], [925, 1, 1, "", "round"], [926, 1, 1, "", "sample"], [927, 1, 1, "", "search_sorted"], [928, 1, 1, "", "series_equal"], [929, 1, 1, "", "set"], [930, 1, 1, "", "set_at_idx"], [931, 1, 1, "", "set_sorted"], [932, 3, 1, "", "shape"], [933, 1, 1, "", "shift"], [934, 1, 1, "", "shift_and_fill"], [935, 1, 1, "", "shrink_dtype"], [936, 1, 1, "", "shrink_to_fit"], [937, 1, 1, "", "shuffle"], [938, 1, 1, "", "sign"], [939, 1, 1, "", "sin"], [940, 1, 1, "", "sinh"], [941, 1, 1, "", "skew"], [942, 1, 1, "", "slice"], [943, 1, 1, "", "sort"], [944, 1, 1, "", "sqrt"], [945, 1, 1, "", "std"], [946, 3, 1, "", "str"], [987, 1, 1, "", "sum"], [988, 1, 1, "", "tail"], [989, 1, 1, "", "take"], [990, 1, 1, "", "take_every"], [991, 1, 1, "", "tan"], [992, 1, 1, "", "tanh"], [993, 3, 1, "", "time_unit"], [994, 1, 1, "", "to_arrow"], [995, 1, 1, "", "to_dummies"], [996, 1, 1, "", "to_frame"], [997, 1, 1, "", "to_init_repr"], [998, 1, 1, "", "to_list"], [999, 1, 1, "", "to_numpy"], [1000, 1, 1, "", "to_pandas"], [1001, 1, 1, "", "to_physical"], [1002, 1, 1, "", "top_k"], [1003, 1, 1, "", "unique"], [1004, 1, 1, "", "unique_counts"], [1005, 1, 1, "", "upper_bound"], [1006, 1, 1, "", "value_counts"], [1007, 1, 1, "", "var"], [1008, 1, 1, "", "view"], [1009, 1, 1, "", "zip_with"]], "polars.Series.arr": [[732, 1, 1, "", "max"], [733, 1, 1, "", "min"], [734, 1, 1, "", "sum"], [735, 1, 1, "", "unique"]], "polars.Series.bin": [[736, 1, 1, "", "contains"], [737, 1, 1, "", "decode"], [738, 1, 1, "", "encode"], [739, 1, 1, "", "ends_with"], [740, 1, 1, "", "starts_with"]], "polars.Series.cat": [[744, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[766, 1, 1, "", "base_utc_offset"], [767, 1, 1, "", "cast_time_unit"], [768, 1, 1, "", "combine"], [769, 1, 1, "", "convert_time_zone"], [770, 1, 1, "", "date"], [771, 1, 1, "", "datetime"], [772, 1, 1, "", "day"], [773, 1, 1, "", "days"], [774, 1, 1, "", "dst_offset"], [775, 1, 1, "", "epoch"], [776, 1, 1, "", "hour"], [777, 1, 1, "", "hours"], [778, 1, 1, "", "is_leap_year"], [779, 1, 1, "", "iso_year"], [780, 1, 1, "", "max"], [781, 1, 1, "", "mean"], [782, 1, 1, "", "median"], [783, 1, 1, "", "microsecond"], [784, 1, 1, "", "microseconds"], [785, 1, 1, "", "millisecond"], [786, 1, 1, "", "milliseconds"], [787, 1, 1, "", "min"], [788, 1, 1, "", "minute"], [789, 1, 1, "", "minutes"], [790, 1, 1, "", "month"], [791, 1, 1, "", "month_end"], [792, 1, 1, "", "month_start"], [793, 1, 1, "", "nanosecond"], [794, 1, 1, "", "nanoseconds"], [795, 1, 1, "", "offset_by"], [796, 1, 1, "", "ordinal_day"], [797, 1, 1, "", "quarter"], [798, 1, 1, "", "replace_time_zone"], [799, 1, 1, "", "round"], [800, 1, 1, "", "second"], [801, 1, 1, "", "seconds"], [802, 1, 1, "", "strftime"], [803, 1, 1, "", "time"], [804, 1, 1, "", "timestamp"], [805, 1, 1, "", "to_string"], [806, 1, 1, "", "truncate"], [807, 1, 1, "", "week"], [808, 1, 1, "", "weekday"], [809, 1, 1, "", "with_time_unit"], [810, 1, 1, "", "year"]], "polars.Series.list": [[857, 1, 1, "", "arg_max"], [858, 1, 1, "", "arg_min"], [859, 1, 1, "", "concat"], [860, 1, 1, "", "contains"], [861, 1, 1, "", "count_match"], [862, 1, 1, "", "diff"], [863, 1, 1, "", "difference"], [864, 1, 1, "", "eval"], [865, 1, 1, "", "explode"], [866, 1, 1, "", "first"], [867, 1, 1, "", "get"], [868, 1, 1, "", "head"], [869, 1, 1, "", "intersection"], [870, 1, 1, "", "join"], [871, 1, 1, "", "last"], [872, 1, 1, "", "lengths"], [873, 1, 1, "", "max"], [874, 1, 1, "", "mean"], [875, 1, 1, "", "min"], [876, 1, 1, "", "reverse"], [877, 1, 1, "", "shift"], [878, 1, 1, "", "slice"], [879, 1, 1, "", "sort"], [880, 1, 1, "", "sum"], [881, 1, 1, "", "tail"], [882, 1, 1, "", "take"], [883, 1, 1, "", "to_struct"], [884, 1, 1, "", "union"], [885, 1, 1, "", "unique"]], "polars.Series.str": [[947, 1, 1, "", "concat"], [948, 1, 1, "", "contains"], [949, 1, 1, "", "count_match"], [950, 1, 1, "", "decode"], [951, 1, 1, "", "encode"], [952, 1, 1, "", "ends_with"], [953, 1, 1, "", "explode"], [954, 1, 1, "", "extract"], [955, 1, 1, "", "extract_all"], [956, 1, 1, "", "json_extract"], [957, 1, 1, "", "json_path_match"], [958, 1, 1, "", "lengths"], [959, 1, 1, "", "ljust"], [960, 1, 1, "", "lstrip"], [961, 1, 1, "", "n_chars"], [962, 1, 1, "", "parse_int"], [963, 1, 1, "", "replace"], [964, 1, 1, "", "replace_all"], [965, 1, 1, "", "rjust"], [966, 1, 1, "", "rstrip"], [967, 1, 1, "", "slice"], [968, 1, 1, "", "split"], [969, 1, 1, "", "split_exact"], [970, 1, 1, "", "splitn"], [971, 1, 1, "", "starts_with"], [972, 1, 1, "", "strip"], [973, 1, 1, "", "strptime"], [974, 1, 1, "", "to_date"], [975, 1, 1, "", "to_datetime"], [976, 1, 1, "", "to_decimal"], [977, 1, 1, "", "to_lowercase"], [978, 1, 1, "", "to_time"], [979, 1, 1, "", "to_titlecase"], [980, 1, 1, "", "to_uppercase"], [981, 1, 1, "", "zfill"]], "polars.Series.struct": [[982, 1, 1, "", "field"], [983, 3, 1, "", "fields"], [984, 1, 1, "", "rename_fields"], [985, 3, 1, "", "schema"], [986, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[234, 1, 1, "", "__iter__"], [235, 1, 1, "", "agg"], [236, 1, 1, "", "all"], [237, 1, 1, "", "apply"], [238, 1, 1, "", "count"], [239, 1, 1, "", "first"], [240, 1, 1, "", "head"], [241, 1, 1, "", "last"], [242, 1, 1, "", "max"], [243, 1, 1, "", "mean"], [244, 1, 1, "", "median"], [245, 1, 1, "", "min"], [246, 1, 1, "", "n_unique"], [247, 1, 1, "", "quantile"], [248, 1, 1, "", "sum"], [249, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[692, 1, 1, "", "agg"], [693, 1, 1, "", "all"], [694, 1, 1, "", "apply"], [695, 1, 1, "", "count"], [696, 1, 1, "", "first"], [697, 1, 1, "", "head"], [698, 1, 1, "", "last"], [699, 1, 1, "", "max"], [700, 1, 1, "", "mean"], [701, 1, 1, "", "median"], [702, 1, 1, "", "min"], [703, 1, 1, "", "n_unique"], [704, 1, 1, "", "quantile"], [705, 1, 1, "", "sum"], [706, 1, 1, "", "tail"]], "polars.selectors": [[713, 4, 1, "", "all"], [713, 4, 1, "", "by_dtype"], [713, 4, 1, "", "by_name"], [713, 4, 1, "", "contains"], [713, 4, 1, "", "datetime"], [713, 4, 1, "", "ends_with"], [713, 4, 1, "", "first"], [713, 4, 1, "", "float"], [713, 4, 1, "", "integer"], [713, 4, 1, "", "is_selector"], [713, 4, 1, "", "last"], [713, 4, 1, "", "matches"], [713, 4, 1, "", "numeric"], [713, 4, 1, "", "selector_column_names"], [713, 4, 1, "", "starts_with"], [713, 4, 1, "", "string"], [713, 4, 1, "", "temporal"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 149], "api": [1, 66, 67, 68, 69, 623], "provid": 1, "new": 1, "function": [1, 133, 611, 622, 713], "avail": 1, "registr": 1, "exampl": [1, 713, 1026], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1026], "arrai": [2, 605, 1010], "binari": [3, 606, 617, 1012], "boolean": [4, 607, 1013], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 133], "activate_decim": 6, "load": [7, 133], "restore_default": 8, "save": [9, 133], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 133], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 447, 691], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 318, 572, 770], "datetim": [38, 319, 573, 771], "decim": 39, "durat": [40, 574], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 613, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 1019], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 622], "struct": [57, 535, 536, 599, 619, 982, 983, 984, 985, 986, 1023], "time": [58, 347, 602, 803], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 401, 500, 859, 947], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 259], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 624], "batched_read": 99, "batchedcsvread": [99, 624], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 665], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 1026], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 1026], "column": [122, 123, 140, 609, 631], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1018], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "using_string_cach": 131, "zero": 132, "option": 133, "current": 133, "us": 133, "context": 133, "manag": 133, "decor": 133, "aggreg": [134, 260, 625, 714], "__dataframe__": 135, "appli": [136, 237, 269, 557, 694, 720], "bottom_k": [137, 292, 626, 741], "clear": [138, 628, 747], "clone": [139, 629, 751], "corr": [141, 566], "describ": [142, 760], "drop": [143, 632], "drop_in_plac": 144, "drop_nul": [145, 313, 633, 764], "dtype": [146, 634, 811], "estimated_s": [147, 813], "explod": [148, 363, 407, 506, 636, 818, 865, 953], "fill_nan": [150, 365, 638, 820], "fill_nul": [151, 366, 639, 821], "filter": [152, 367, 640, 822], "find_idx_by_nam": 153, "fold": [154, 578], "frame_equ": 155, "get_column": [156, 157], "glimps": 158, "groupbi": [159, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 643, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709], "groupby_dynam": [160, 644], "groupby_rol": [161, 645], "hash_row": 162, "head": [163, 240, 377, 410, 582, 646, 697, 828, 868], "height": 164, "hstack": 165, "insert_at_idx": 166, "interpol": [167, 380, 648, 832], "is_dupl": [168, 382, 835], "is_empti": [169, 836], "is_uniqu": [170, 392, 850], "item": [171, 852], "iter_row": 172, "iter_slic": 173, "join": [174, 412, 649, 870], "join_asof": [175, 650], "lazi": [176, 622, 652], "limit": [177, 398, 653, 855], "max": [178, 242, 282, 415, 436, 586, 655, 699, 732, 780, 873, 891], "mean": [179, 243, 416, 437, 587, 656, 700, 781, 874, 892], "median": [180, 244, 438, 588, 657, 701, 782, 893], "melt": [181, 658], "merge_sort": [182, 659], "min": [183, 245, 283, 417, 448, 589, 660, 702, 733, 787, 875, 894], "n_chunk": [184, 896], "n_uniqu": [185, 246, 452, 590, 703, 897], "null_count": [186, 457, 661, 902], "partition_bi": 187, "pipe": [188, 461, 662], "pivot": 189, "product": [190, 464, 906], "quantil": [191, 247, 465, 591, 664, 704, 908], "rechunk": [192, 468, 910], "renam": [193, 666, 912], "replac": [194, 516, 963], "replace_at_idx": 195, "revers": [196, 418, 472, 667, 876, 914], "row": [197, 198], "sampl": [199, 484, 926], "schema": [200, 668, 985], "select": [201, 257, 596, 616, 669, 712, 1021], "set_sort": [202, 486, 670, 931], "shape": [203, 932], "shift": [204, 419, 487, 671, 877, 933], "shift_and_fil": [205, 488, 672, 934], "shrink_to_fit": [206, 936], "slice": [207, 420, 495, 520, 676, 878, 942, 967], "sort": [208, 421, 496, 677, 879, 943], "std": [209, 499, 598, 678, 945], "sum": [210, 248, 284, 422, 539, 600, 679, 705, 734, 880, 987], "tail": [211, 249, 423, 540, 601, 680, 706, 881, 988], "take_everi": [212, 542, 681, 990], "to_arrow": [213, 994], "to_dict": [214, 215], "to_dummi": [216, 995], "to_init_repr": [217, 997], "to_numpi": [218, 999], "to_panda": [219, 1000], "to_seri": 220, "to_struct": [221, 425, 883], "top_k": [222, 546, 682, 1002], "transpos": 223, "uniqu": [224, 285, 427, 548, 683, 735, 885, 1003], "unnest": [225, 684, 986], "unstack": 226, "updat": [227, 685], "upsampl": 228, "var": [229, 552, 603, 686, 1007], "vstack": 230, "width": [231, 687], "with_column": [232, 688], "with_row_count": [233, 690], "__iter__": 234, "agg": [235, 692], "all": [236, 265, 555, 693, 717], "count": [238, 302, 567, 695], "first": [239, 368, 408, 577, 641, 696, 866], "last": [241, 395, 413, 651, 698, 871], "attribut": [250, 707, 1011], "comput": [251, 610, 1015], "descript": [252, 708, 1016], "export": [253, 1017], "miscellan": [256, 615, 622, 711, 1020], "manipul": [257, 616, 712, 1021], "data": 258, "type": 258, "numer": [258, 617], "tempor": [258, 620, 1024], "nest": 258, "other": 258, "expr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554], "ab": [261, 715], "add": 262, "agg_group": 263, "alia": [264, 716], "and_": 266, "ani": [267, 556, 718], "append": [268, 719], "approx_uniqu": [270, 558], "arcco": [271, 721], "arccosh": [272, 722], "arcsin": [273, 723], "arcsinh": [274, 724], "arctan": [275, 725], "arctanh": [276, 726], "arg_max": [277, 399, 727, 857], "arg_min": [278, 400, 728, 858], "arg_sort": [279, 729], "arg_tru": [280, 730], "arg_uniqu": [281, 731], "arr": [282, 283, 284, 285, 732, 733, 734, 735], "backward_fil": 286, "bin": [287, 288, 289, 290, 291, 736, 737, 738, 739, 740], "contain": [287, 402, 501, 736, 860, 948], "decod": [288, 503, 737, 950], "encod": [289, 504, 738, 951], "ends_with": [290, 505, 739, 952], "starts_with": [291, 524, 740, 971], "cach": [293, 627], "cast": [294, 742], "cat": [295, 743, 744], "set_ord": [295, 744], "ceil": [296, 745], "clip": [297, 748], "clip_max": [298, 749], "clip_min": [299, 750], "co": [300, 752], "cosh": [301, 753], "cumcount": 303, "cummax": [304, 754], "cummin": [305, 755], "cumprod": [306, 756], "cumsum": [307, 571, 757], "cumulative_ev": [308, 758], "degre": 309, "diff": [310, 404, 761, 862], "dot": [311, 762], "drop_nan": [312, 763], "dt": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "base_utc_offset": [314, 766], "cast_time_unit": [315, 767], "combin": [316, 768], "convert_time_zon": [317, 769], "dai": [320, 321, 772, 773], "dst_offset": [322, 774], "epoch": [323, 775], "hour": [324, 325, 776, 777], "is_leap_year": [326, 778], "iso_year": [327, 779], "microsecond": [328, 329, 783, 784], "millisecond": [330, 331, 785, 786], "minut": [332, 333, 788, 789], "month": [334, 790], "month_end": [335, 791], "month_start": [336, 792], "nanosecond": [337, 338, 793, 794], "offset_bi": [339, 795], "ordinal_dai": [340, 796], "quarter": [341, 797], "replace_time_zon": [342, 798], "round": [343, 483, 799, 925], "second": [344, 345, 800, 801], "strftime": [346, 802], "timestamp": [348, 804], "to_str": [349, 805], "truncat": [350, 806], "week": [351, 807], "weekdai": [352, 808], "with_time_unit": [353, 809], "year": [354, 810], "entropi": [355, 812], "eq": [356, 439], "eq_miss": 357, "ewm_mean": [358, 814], "ewm_std": [359, 815], "ewm_var": [360, 816], "exclud": [361, 576], "exp": [362, 817], "extend_const": [364, 819], "flatten": 369, "floor": [370, 824], "floordiv": 371, "forward_fil": 372, "from_json": [373, 642], "ge": 374, "gt": 375, "hash": [376, 827], "implod": [378, 583, 830], "inspect": [379, 647], "is_between": [381, 833], "is_finit": [383, 837], "is_first": [384, 838], "is_in": [385, 840], "is_infinit": [386, 841], "is_nan": [387, 843], "is_not": 388, "is_not_nan": [389, 844], "is_not_nul": [390, 845], "is_nul": [391, 846], "keep_nam": 393, "kurtosi": [394, 853], "le": 396, "len": [397, 854], "count_match": [403, 502, 861, 949], "differ": [405, 863], "eval": [406, 864], "get": [409, 867], "intersect": [411, 869], "length": [414, 511, 872, 958], "take": [424, 541, 882, 989], "union": [426, 884], "log": [428, 886], "log10": [429, 887], "log1p": [430, 888], "lower_bound": [431, 889], "lt": 432, "map": [433, 585, 654], "map_alia": 434, "map_dict": [435, 890], "meta": [439, 440, 441, 442, 443, 444, 445, 446, 447, 614], "has_multiple_output": 440, "is_regex_project": 441, "ne": [442, 455], "output_nam": 443, "pop": 444, "root_nam": 445, "undo_alias": 446, "mod": 449, "mode": [450, 895], "mul": 451, "nan_max": [453, 899], "nan_min": [454, 900], "ne_miss": 456, "or_": 458, "over": 459, "pct_chang": [460, 903], "pow": 462, "prefix": 463, "radian": 466, "rank": [467, 909], "reinterpret": [469, 911], "repeat_bi": 470, "reshap": [471, 913], "rolling_appli": [473, 915], "rolling_max": [474, 916], "rolling_mean": [475, 917], "rolling_median": [476, 918], "rolling_min": [477, 919], "rolling_quantil": [478, 920], "rolling_skew": [479, 921], "rolling_std": [480, 922], "rolling_sum": [481, 923], "rolling_var": [482, 924], "search_sort": [485, 927], "shrink_dtyp": [489, 935], "shuffl": [490, 937], "sign": [491, 938], "sin": [492, 939], "sinh": [493, 940], "skew": [494, 941], "sort_bi": 497, "sqrt": [498, 944], "str": [500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981], "extract": [507, 954], "extract_al": [508, 955], "json_extract": [509, 956], "json_path_match": [510, 957], "ljust": [512, 959], "lstrip": [513, 960], "n_char": [514, 961], "parse_int": [515, 962], "replace_al": [517, 964], "rjust": [518, 965], "rstrip": [519, 966], "split": [521, 968], "split_exact": [522, 969], "splitn": [523, 970], "strip": [525, 972], "strptime": [526, 973], "to_dat": [527, 974], "to_datetim": [528, 975], "to_decim": [529, 976], "to_lowercas": [530, 977], "to_tim": [531, 978], "to_titlecas": [532, 979], "to_uppercas": [533, 980], "zfill": [534, 981], "field": [535, 982, 983], "rename_field": [536, 984], "sub": 537, "suffix": 538, "tan": [543, 991], "tanh": [544, 992], "to_phys": [545, 1001], "truediv": 547, "unique_count": [549, 1004], "upper_bound": [550, 1005], "value_count": [551, 1006], "where": 553, "xor": 554, "arang": 559, "arg_sort_bi": 560, "avg": 561, "coalesc": 562, "col": 563, "concat_list": 564, "concat_str": 565, "cov": 568, "cumfold": 569, "cumreduc": 570, "element": 575, "format": 579, "from_epoch": 580, "group": 581, "lit": 584, "reduc": 592, "repeat": 593, "rolling_corr": 594, "rolling_cov": 595, "sql_expr": 597, "when": 604, "categori": [608, 1014], "name": [609, 898], "express": 612, "oper": [617, 713], "conjunct": 617, "comparison": 617, "string": [618, 1022], "window": 621, "convers": 622, "eager": 622, "parallel": 622, "refer": 623, "input": 624, "output": 624, "feather": 624, "ipc": 624, "parquet": 624, "databas": 624, "json": 624, "avro": 624, "excel": 624, "delta": 624, "lake": 624, "dataset": 624, "lazyfram": [626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 710], "collect": 630, "explain": 635, "fetch": 637, "profil": [663, 1026], "show_graph": 673, "sink_ipc": 674, "sink_parquet": 675, "with_context": 689, "lazygroupbi": [692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706], "read": 711, "write": 711, "logic": 711, "plan": 711, "selector": 713, "import": 713, "set": [713, 929], "chunk_length": 746, "cut": 759, "flag": 823, "get_chunk": 825, "has_valid": 826, "hist": 829, "inner_dtyp": 831, "is_boolean": 834, "is_float": 839, "is_integ": 842, "is_numer": 847, "is_sort": 848, "is_tempor": 849, "is_utf8": 851, "new_from_index": 901, "peak_max": 904, "peak_min": 905, "qcut": 907, "series_equ": 928, "set_at_idx": 930, "time_unit": 993, "to_fram": 996, "to_list": 998, "view": 1008, "zip_with": 1009, "sql": 1025, "method": 1025, "assert": 1026, "primit": 1026, "strategi": 1026, "helper": 1026, "util": 1027}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "Config": [[133, "config"]], "Config options": [[133, "config-options"]], "Config load, save, and current state": [[133, "config-load-save-and-current-state"]], "Use as a context manager": [[133, "use-as-a-context-manager"]], "Use as a function decorator": [[133, "use-as-a-function-decorator"]], "polars.DataFrame.corr": [[141, "polars-dataframe-corr"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.DataFrame.bottom_k": [[137, "polars-dataframe-bottom-k"]], "polars.date_range": [[74, "polars-date-range"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.read_avro": [[101, "polars-read-avro"]], "Aggregation": [[134, "aggregation"], [714, "aggregation"], [625, "aggregation"], [260, "aggregation"]], "polars.DataFrame.clone": [[139, "polars-dataframe-clone"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.from_records": [[96, "polars-from-records"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.DataFrame.__dataframe__": [[135, "polars-dataframe-dataframe"]], "polars.concat": [[73, "polars-concat"]], "polars.time_range": [[130, "polars-time-range"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.DataFrame.apply": [[136, "polars-dataframe-apply"]], "polars.DataFrame.columns": [[140, "polars-dataframe-columns"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.zeros": [[132, "polars-zeros"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.read_json": [[109, "polars-read-json"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "polars.build_info": [[71, "polars-build-info"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.read_excel": [[106, "polars-read-excel"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.ones": [[100, "polars-ones"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.DataFrame.clear": [[138, "polars-dataframe-clear"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.using_string_cache": [[131, "polars-using-string-cache"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.read_database": [[104, "polars-read-database"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Date": [[37, "polars-date"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.Binary": [[3, "polars-binary"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.Null": [[48, "polars-null"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Float64": [[42, "polars-float64"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.Object": [[49, "polars-object"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Int64": [[45, "polars-int64"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.Struct": [[57, "polars-struct"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.Float32": [[41, "polars-float32"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.List": [[47, "polars-list"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.Categorical": [[5, "polars-categorical"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1026, "examples"], [713, "examples"]], "polars.Time": [[58, "polars-time"]], "polars.Int32": [[44, "polars-int32"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Duration": [[40, "polars-duration"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.arg_where": [[70, "polars-arg-where"]], "polars.Int16": [[43, "polars-int16"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Int8": [[46, "polars-int8"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.Series.tail": [[988, "polars-series-tail"]], "polars.Series.str.encode": [[951, "polars-series-str-encode"]], "polars.Series.shrink_to_fit": [[936, "polars-series-shrink-to-fit"]], "polars.Series.str.starts_with": [[971, "polars-series-str-starts-with"]], "polars.Series.str.rstrip": [[966, "polars-series-str-rstrip"]], "polars.Series.struct.fields": [[983, "polars-series-struct-fields"]], "polars.Series.str.to_lowercase": [[977, "polars-series-str-to-lowercase"]], "polars.Series.str.json_path_match": [[957, "polars-series-str-json-path-match"]], "polars.Series.str.count_match": [[949, "polars-series-str-count-match"]], "polars.Series.set_at_idx": [[930, "polars-series-set-at-idx"]], "polars.Series.str.split_exact": [[969, "polars-series-str-split-exact"]], "polars.Series.skew": [[941, "polars-series-skew"]], "polars.Series.struct.rename_fields": [[984, "polars-series-struct-rename-fields"]], "polars.Series.str.to_decimal": [[976, "polars-series-str-to-decimal"]], "polars.Series.str.lengths": [[958, "polars-series-str-lengths"]], "polars.Series.sinh": [[940, "polars-series-sinh"]], "polars.Series.str.replace_all": [[964, "polars-series-str-replace-all"]], "polars.Series.str.to_time": [[978, "polars-series-str-to-time"]], "polars.Series.str.parse_int": [[962, "polars-series-str-parse-int"]], "polars.Series.str.decode": [[950, "polars-series-str-decode"]], "polars.Series.str.splitn": [[970, "polars-series-str-splitn"]], "polars.Series.set_sorted": [[931, "polars-series-set-sorted"]], "polars.Series.str.zfill": [[981, "polars-series-str-zfill"]], "polars.Series.str.strptime": [[973, "polars-series-str-strptime"]], "polars.Series.str.split": [[968, "polars-series-str-split"]], "polars.Series.tan": [[991, "polars-series-tan"]], "polars.Series.sin": [[939, "polars-series-sin"]], "polars.Series.series_equal": [[928, "polars-series-series-equal"]], "polars.Series.str.contains": [[948, "polars-series-str-contains"]], "polars.Series.str.lstrip": [[960, "polars-series-str-lstrip"]], "polars.Series.take_every": [[990, "polars-series-take-every"]], "polars.Series.sample": [[926, "polars-series-sample"]], "polars.Series.str.n_chars": [[961, "polars-series-str-n-chars"]], "polars.Series.str.ends_with": [[952, "polars-series-str-ends-with"]], "polars.Series.rolling_sum": [[923, "polars-series-rolling-sum"]], "polars.Series.sort": [[943, "polars-series-sort"]], "polars.Series.search_sorted": [[927, "polars-series-search-sorted"]], "polars.Series.str.to_date": [[974, "polars-series-str-to-date"]], "polars.Series.struct.schema": [[985, "polars-series-struct-schema"]], "polars.Series.struct.field": [[982, "polars-series-struct-field"]], "polars.Series.str": [[946, "polars-series-str"]], "polars.Series.std": [[945, "polars-series-std"]], "polars.Series.str.explode": [[953, "polars-series-str-explode"]], "polars.Series.str.rjust": [[965, "polars-series-str-rjust"]], "polars.Series.str.to_titlecase": [[979, "polars-series-str-to-titlecase"]], "polars.Series.struct.unnest": [[986, "polars-series-struct-unnest"]], "polars.Series.shuffle": [[937, "polars-series-shuffle"]], "polars.Series.shift": [[933, "polars-series-shift"]], "polars.Series.str.extract": [[954, "polars-series-str-extract"]], "polars.Series.str.concat": [[947, "polars-series-str-concat"]], "polars.Series.str.strip": [[972, "polars-series-str-strip"]], "polars.Series.round": [[925, "polars-series-round"]], "polars.Series.str.json_extract": [[956, "polars-series-str-json-extract"]], "polars.Series.slice": [[942, "polars-series-slice"]], "polars.Series.shift_and_fill": [[934, "polars-series-shift-and-fill"]], "polars.Series.str.extract_all": [[955, "polars-series-str-extract-all"]], "polars.Series.str.ljust": [[959, "polars-series-str-ljust"]], "polars.Series.take": [[989, "polars-series-take"]], "polars.Series.shrink_dtype": [[935, "polars-series-shrink-dtype"]], "polars.Series.shape": [[932, "polars-series-shape"]], "polars.Series.tanh": [[992, "polars-series-tanh"]], "polars.Series.sign": [[938, "polars-series-sign"]], "polars.Series.rolling_var": [[924, "polars-series-rolling-var"]], "polars.Series.str.to_datetime": [[975, "polars-series-str-to-datetime"]], "polars.Series.str.replace": [[963, "polars-series-str-replace"]], "polars.Series.sum": [[987, "polars-series-sum"]], "polars.Series.time_unit": [[993, "polars-series-time-unit"]], "polars.Series.sqrt": [[944, "polars-series-sqrt"]], "polars.Series.set": [[929, "polars-series-set"]], "polars.Series.str.slice": [[967, "polars-series-str-slice"]], "polars.Series.str.to_uppercase": [[980, "polars-series-str-to-uppercase"]], "polars.Series.mean": [[892, "polars-series-mean"]], "polars.Series.min": [[894, "polars-series-min"]], "polars.Series.list.max": [[873, "polars-series-list-max"]], "polars.Series.median": [[893, "polars-series-median"]], "polars.Series.log": [[886, "polars-series-log"]], "polars.Series.rolling_mean": [[917, "polars-series-rolling-mean"]], "polars.Series.list.explode": [[865, "polars-series-list-explode"]], "polars.Series.rolling_min": [[919, "polars-series-rolling-min"]], "polars.Series.list.diff": [[862, "polars-series-list-diff"]], "polars.Series.list.last": [[871, "polars-series-list-last"]], "polars.Series.list.join": [[870, "polars-series-list-join"]], "polars.Series.rolling_quantile": [[920, "polars-series-rolling-quantile"]], "polars.Series.list.mean": [[874, "polars-series-list-mean"]], "polars.Series.peak_max": [[904, "polars-series-peak-max"]], "polars.Series.null_count": [[902, "polars-series-null-count"]], "polars.Series.qcut": [[907, "polars-series-qcut"]], "polars.Series.list.take": [[882, "polars-series-list-take"]], "polars.Series.lower_bound": [[889, "polars-series-lower-bound"]], "polars.Series.list.shift": [[877, "polars-series-list-shift"]], "polars.Series.list.count_match": [[861, "polars-series-list-count-match"]], "polars.Series.list.tail": [[881, "polars-series-list-tail"]], "polars.Series.n_unique": [[897, "polars-series-n-unique"]], "polars.Series.rolling_apply": [[915, "polars-series-rolling-apply"]], "polars.Series.rolling_median": [[918, "polars-series-rolling-median"]], "polars.Series.rename": [[912, "polars-series-rename"]], "polars.Series.reinterpret": [[911, "polars-series-reinterpret"]], "polars.Series.len": [[854, "polars-series-len"]], "polars.Series.list.concat": [[859, "polars-series-list-concat"]], "polars.Series.list.reverse": [[876, "polars-series-list-reverse"]], "polars.Series.limit": [[855, "polars-series-limit"]], "polars.Series.n_chunks": [[896, "polars-series-n-chunks"]], "polars.Series.map_dict": [[890, "polars-series-map-dict"]], "polars.Series.list.slice": [[878, "polars-series-list-slice"]], "polars.Series.list.contains": [[860, "polars-series-list-contains"]], "polars.Series.mode": [[895, "polars-series-mode"]], "polars.Series.list.arg_max": [[857, "polars-series-list-arg-max"]], "polars.Series.peak_min": [[905, "polars-series-peak-min"]], "polars.Series.list.unique": [[885, "polars-series-list-unique"]], "polars.Series.list.head": [[868, "polars-series-list-head"]], "polars.Series.list.lengths": [[872, "polars-series-list-lengths"]], "polars.Series.item": [[852, "polars-series-item"]], "polars.Series.list.get": [[867, "polars-series-list-get"]], "polars.Series.name": [[898, "polars-series-name"]], "polars.Series.kurtosis": [[853, "polars-series-kurtosis"]], "polars.Series.list.sort": [[879, "polars-series-list-sort"]], "polars.Series.nan_max": [[899, "polars-series-nan-max"]], "polars.Series.pct_change": [[903, "polars-series-pct-change"]], "polars.Series.list.intersection": [[869, "polars-series-list-intersection"]], "polars.Series.list.union": [[884, "polars-series-list-union"]], "polars.Series.product": [[906, "polars-series-product"]], "polars.Series.list": [[856, "polars-series-list"]], "polars.Series.list.first": [[866, "polars-series-list-first"]], "polars.Series.log10": [[887, "polars-series-log10"]], "polars.Series.rolling_skew": [[921, "polars-series-rolling-skew"]], "polars.Series.rolling_max": [[916, "polars-series-rolling-max"]], "polars.Series.list.eval": [[864, "polars-series-list-eval"]], "polars.Series.rolling_std": [[922, "polars-series-rolling-std"]], "polars.Series.list.sum": [[880, "polars-series-list-sum"]], "polars.Series.rank": [[909, "polars-series-rank"]], "polars.Series.list.min": [[875, "polars-series-list-min"]], "polars.Series.log1p": [[888, "polars-series-log1p"]], "polars.Series.reshape": [[913, "polars-series-reshape"]], "polars.Series.reverse": [[914, "polars-series-reverse"]], "polars.Series.list.difference": [[863, "polars-series-list-difference"]], "polars.Series.max": [[891, "polars-series-max"]], "polars.Series.list.to_struct": [[883, "polars-series-list-to-struct"]], "polars.Series.list.arg_min": [[858, "polars-series-list-arg-min"]], "polars.Series.rechunk": [[910, "polars-series-rechunk"]], "polars.Series.nan_min": [[900, "polars-series-nan-min"]], "polars.Series.quantile": [[908, "polars-series-quantile"]], "polars.Series.new_from_index": [[901, "polars-series-new-from-index"]], "polars.Series.get_chunks": [[825, "polars-series-get-chunks"]], "polars.Series.is_float": [[839, "polars-series-is-float"]], "polars.Series.dt.seconds": [[801, "polars-series-dt-seconds"]], "polars.Series.is_not_nan": [[844, "polars-series-is-not-nan"]], "polars.Series.dt.min": [[787, "polars-series-dt-min"]], "polars.Series.dt.minute": [[788, "polars-series-dt-minute"]], "polars.Series.dt.month_start": [[792, "polars-series-dt-month-start"]], "polars.Series.dtype": [[811, "polars-series-dtype"]], "polars.Series.is_integer": [[842, "polars-series-is-integer"]], "polars.Series.hist": [[829, "polars-series-hist"]], "polars.Series.is_numeric": [[847, "polars-series-is-numeric"]], "polars.Series.dt.millisecond": [[785, "polars-series-dt-millisecond"]], "polars.Series.dt.replace_time_zone": [[798, "polars-series-dt-replace-time-zone"]], "polars.Series.interpolate": [[832, "polars-series-interpolate"]], "polars.Series.dt.second": [[800, "polars-series-dt-second"]], "polars.Series.ewm_var": [[816, "polars-series-ewm-var"]], "polars.Series.is_not_null": [[845, "polars-series-is-not-null"]], "polars.Series.implode": [[830, "polars-series-implode"]], "polars.Series.extend_constant": [[819, "polars-series-extend-constant"]], "polars.Series.dt.offset_by": [[795, "polars-series-dt-offset-by"]], "polars.Series.dt.minutes": [[789, "polars-series-dt-minutes"]], "polars.Series.fill_null": [[821, "polars-series-fill-null"]], "polars.Series.is_between": [[833, "polars-series-is-between"]], "polars.Series.inner_dtype": [[831, "polars-series-inner-dtype"]], "polars.Series.dt.month_end": [[791, "polars-series-dt-month-end"]], "polars.Series.dt.weekday": [[808, "polars-series-dt-weekday"]], "polars.Series.dt.month": [[790, "polars-series-dt-month"]], "polars.Series.dt.quarter": [[797, "polars-series-dt-quarter"]], "polars.Series.flags": [[823, "polars-series-flags"]], "polars.Series.is_nan": [[843, "polars-series-is-nan"]], "polars.Series.is_first": [[838, "polars-series-is-first"]], "polars.Series.dt.with_time_unit": [[809, "polars-series-dt-with-time-unit"]], "polars.Series.is_finite": [[837, "polars-series-is-finite"]], "polars.Series.dt.truncate": [[806, "polars-series-dt-truncate"]], "polars.Series.dt.round": [[799, "polars-series-dt-round"]], "polars.Series.explode": [[818, "polars-series-explode"]], "polars.Series.fill_nan": [[820, "polars-series-fill-nan"]], "polars.Series.ewm_std": [[815, "polars-series-ewm-std"]], "polars.Series.hash": [[827, "polars-series-hash"]], "polars.Series.is_boolean": [[834, "polars-series-is-boolean"]], "polars.Series.is_unique": [[850, "polars-series-is-unique"]], "polars.Series.dt.ordinal_day": [[796, "polars-series-dt-ordinal-day"]], "polars.Series.is_infinite": [[841, "polars-series-is-infinite"]], "polars.Series.is_utf8": [[851, "polars-series-is-utf8"]], "polars.Series.dt.strftime": [[802, "polars-series-dt-strftime"]], "polars.Series.is_in": [[840, "polars-series-is-in"]], "polars.Series.has_validity": [[826, "polars-series-has-validity"]], "polars.Series.floor": [[824, "polars-series-floor"]], "polars.Series.dt.median": [[782, "polars-series-dt-median"]], "polars.Series.is_duplicated": [[835, "polars-series-is-duplicated"]], "polars.Series.is_sorted": [[848, "polars-series-is-sorted"]], "polars.Series.exp": [[817, "polars-series-exp"]], "polars.Series.dt.mean": [[781, "polars-series-dt-mean"]], "polars.Series.dt.timestamp": [[804, "polars-series-dt-timestamp"]], "polars.Series.dt.year": [[810, "polars-series-dt-year"]], "polars.Series.dt.milliseconds": [[786, "polars-series-dt-milliseconds"]], "polars.Series.is_empty": [[836, "polars-series-is-empty"]], "polars.Series.head": [[828, "polars-series-head"]], "polars.Series.dt.nanosecond": [[793, "polars-series-dt-nanosecond"]], "polars.Series.ewm_mean": [[814, "polars-series-ewm-mean"]], "polars.Series.is_null": [[846, "polars-series-is-null"]], "polars.Series.filter": [[822, "polars-series-filter"]], "polars.Series.is_temporal": [[849, "polars-series-is-temporal"]], "polars.Series.entropy": [[812, "polars-series-entropy"]], "polars.Series.dt.time": [[803, "polars-series-dt-time"]], "polars.Series.estimated_size": [[813, "polars-series-estimated-size"]], "polars.Series.dt.nanoseconds": [[794, "polars-series-dt-nanoseconds"]], "polars.Series.dt.microsecond": [[783, "polars-series-dt-microsecond"]], "polars.Series.dt.microseconds": [[784, "polars-series-dt-microseconds"]], "polars.Series.dt.week": [[807, "polars-series-dt-week"]], "polars.Series.dt.to_string": [[805, "polars-series-dt-to-string"]], "Miscellaneous": [[1020, "miscellaneous"], [711, "miscellaneous"], [615, "miscellaneous"], [622, "miscellaneous"], [256, "miscellaneous"]], "Attributes": [[1011, "attributes"], [707, "attributes"], [250, "attributes"]], "polars.Series.to_init_repr": [[997, "polars-series-to-init-repr"]], "Array": [[1010, "array"], [605, "array"]], "Temporal": [[1024, "temporal"], [620, "temporal"], [258, "temporal"]], "Export": [[1017, "export"], [253, "export"]], "Binary": [[1012, "binary"], [606, "binary"], [617, "binary"]], "polars.Series.value_counts": [[1006, "polars-series-value-counts"]], "Utils": [[1027, "utils"]], "polars.Series.to_pandas": [[1000, "polars-series-to-pandas"]], "polars.Series.to_dummies": [[995, "polars-series-to-dummies"]], "String": [[1022, "string"], [618, "string"]], "polars.Series.to_frame": [[996, "polars-series-to-frame"]], "polars.Series.top_k": [[1002, "polars-series-top-k"]], "Boolean": [[1013, "boolean"], [607, "boolean"]], "Testing": [[1026, "testing"]], "Asserts": [[1026, "asserts"]], "Parametric testing": [[1026, "parametric-testing"]], "Polars primitives": [[1026, "polars-primitives"]], "Strategy helpers": [[1026, "strategy-helpers"]], "Profiles": [[1026, "profiles"]], "polars.Series.to_numpy": [[999, "polars-series-to-numpy"]], "polars.Series.to_physical": [[1001, "polars-series-to-physical"]], "List": [[1019, "list"], [613, "list"]], "polars.Series.to_arrow": [[994, "polars-series-to-arrow"]], "Struct": [[1023, "struct"], [619, "struct"]], "Categories": [[1014, "categories"], [608, "categories"]], "SQL": [[1025, "sql"]], "Methods": [[1025, "methods"]], "polars.Series.upper_bound": [[1005, "polars-series-upper-bound"]], "polars.Series.view": [[1008, "polars-series-view"]], "Manipulation/selection": [[1021, "manipulation-selection"], [712, "manipulation-selection"], [616, "manipulation-selection"], [257, "manipulation-selection"]], "Series": [[1018, "series"]], "polars.Series.to_list": [[998, "polars-series-to-list"]], "polars.Series.zip_with": [[1009, "polars-series-zip-with"]], "polars.Series.var": [[1007, "polars-series-var"]], "polars.Series.unique_counts": [[1004, "polars-series-unique-counts"]], "Descriptive": [[1016, "descriptive"], [708, "descriptive"], [252, "descriptive"]], "Computation": [[1015, "computation"], [610, "computation"], [251, "computation"]], "polars.Series.unique": [[1003, "polars-series-unique"]], "polars.LazyFrame.quantile": [[664, "polars-lazyframe-quantile"]], "polars.LazyFrame.lazy": [[652, "polars-lazyframe-lazy"]], "polars.LazyFrame.join": [[649, "polars-lazyframe-join"]], "polars.LazyFrame.with_context": [[689, "polars-lazyframe-with-context"]], "polars.LazyFrame.inspect": [[647, "polars-lazyframe-inspect"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[706, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.unnest": [[684, "polars-lazyframe-unnest"]], "polars.LazyFrame.groupby": [[643, "polars-lazyframe-groupby"]], "polars.LazyFrame.with_row_count": [[690, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.sink_ipc": [[674, "polars-lazyframe-sink-ipc"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[694, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.LazyFrame.width": [[687, "polars-lazyframe-width"]], "polars.LazyFrame.sink_parquet": [[675, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.top_k": [[682, "polars-lazyframe-top-k"]], "polars.LazyFrame.groupby_rolling": [[645, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.min": [[660, "polars-lazyframe-min"]], "polars.LazyFrame.unique": [[683, "polars-lazyframe-unique"]], "polars.LazyFrame.limit": [[653, "polars-lazyframe-limit"]], "polars.LazyFrame.schema": [[668, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[697, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.shift_and_fill": [[672, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.std": [[678, "polars-lazyframe-std"]], "polars.LazyFrame.pipe": [[662, "polars-lazyframe-pipe"]], "polars.LazyFrame.median": [[657, "polars-lazyframe-median"]], "polars.LazyFrame.interpolate": [[648, "polars-lazyframe-interpolate"]], "polars.LazyFrame.melt": [[658, "polars-lazyframe-melt"]], "polars.LazyFrame.write_json": [[691, "polars-lazyframe-write-json"]], "polars.LazyFrame.reverse": [[667, "polars-lazyframe-reverse"]], "polars.LazyFrame.fill_null": [[639, "polars-lazyframe-fill-null"]], "polars.LazyFrame.head": [[646, "polars-lazyframe-head"]], "GroupBy": [[709, "groupby"], [254, "groupby"]], "polars.LazyFrame.take_every": [[681, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[700, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[696, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[698, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.set_sorted": [[670, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.filter": [[640, "polars-lazyframe-filter"]], "polars.LazyFrame.from_json": [[642, "polars-lazyframe-from-json"]], "polars.LazyFrame.map": [[654, "polars-lazyframe-map"]], "polars.LazyFrame.max": [[655, "polars-lazyframe-max"]], "polars.LazyFrame.mean": [[656, "polars-lazyframe-mean"]], "polars.LazyFrame.merge_sorted": [[659, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.read_json": [[665, "polars-lazyframe-read-json"]], "polars.LazyFrame.tail": [[680, "polars-lazyframe-tail"]], "polars.LazyFrame.last": [[651, "polars-lazyframe-last"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[695, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[699, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[703, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[705, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.shift": [[671, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[673, "polars-lazyframe-show-graph"]], "polars.LazyFrame.profile": [[663, "polars-lazyframe-profile"]], "polars.LazyFrame.first": [[641, "polars-lazyframe-first"]], "polars.LazyFrame.groupby_dynamic": [[644, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.sum": [[679, "polars-lazyframe-sum"]], "polars.LazyFrame.update": [[685, "polars-lazyframe-update"]], "polars.LazyFrame.sort": [[677, "polars-lazyframe-sort"]], "polars.LazyFrame.null_count": [[661, "polars-lazyframe-null-count"]], "polars.LazyFrame.rename": [[666, "polars-lazyframe-rename"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[702, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.with_columns": [[688, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[693, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.select": [[669, "polars-lazyframe-select"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[701, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.slice": [[676, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[704, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.LazyFrame.var": [[686, "polars-lazyframe-var"]], "polars.LazyFrame.join_asof": [[650, "polars-lazyframe-join-asof"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[692, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.cat.set_ordering": [[744, "polars-series-cat-set-ordering"]], "polars.Series.arcsinh": [[724, "polars-series-arcsinh"]], "polars.Series.cat": [[743, "polars-series-cat"]], "polars.Series.clear": [[747, "polars-series-clear"]], "polars.Series.diff": [[761, "polars-series-diff"]], "polars.Series.cut": [[759, "polars-series-cut"]], "polars.Series.append": [[719, "polars-series-append"]], "polars.Series.bin.encode": [[738, "polars-series-bin-encode"]], "polars.Series.describe": [[760, "polars-series-describe"]], "polars.Series.dt": [[765, "polars-series-dt"]], "polars.Series.ceil": [[745, "polars-series-ceil"]], "polars.Series.arctanh": [[726, "polars-series-arctanh"]], "polars.Series.cummin": [[755, "polars-series-cummin"]], "polars.Series.abs": [[715, "polars-series-abs"]], "polars.Series.dt.date": [[770, "polars-series-dt-date"]], "polars.Series.dt.day": [[772, "polars-series-dt-day"]], "polars.Series.dt.days": [[773, "polars-series-dt-days"]], "polars.Series.dt.combine": [[768, "polars-series-dt-combine"]], "polars.Series.dt.is_leap_year": [[778, "polars-series-dt-is-leap-year"]], "polars.Series.cumulative_eval": [[758, "polars-series-cumulative-eval"]], "polars.Series.arctan": [[725, "polars-series-arctan"]], "polars.Series.bin.ends_with": [[739, "polars-series-bin-ends-with"]], "polars.Series.clip": [[748, "polars-series-clip"]], "polars.Series.apply": [[720, "polars-series-apply"]], "polars.Series.all": [[717, "polars-series-all"]], "polars.Series.clip_max": [[749, "polars-series-clip-max"]], "Read/write logical plan": [[711, "read-write-logical-plan"]], "polars.Series.alias": [[716, "polars-series-alias"]], "LazyFrame": [[710, "lazyframe"]], "polars.Series.dt.iso_year": [[779, "polars-series-dt-iso-year"]], "polars.Series.arccosh": [[722, "polars-series-arccosh"]], "polars.Series.cumsum": [[757, "polars-series-cumsum"]], "polars.Series.dot": [[762, "polars-series-dot"]], "polars.Series.bin.decode": [[737, "polars-series-bin-decode"]], "polars.Series.dt.hour": [[776, "polars-series-dt-hour"]], "polars.Series.drop_nulls": [[764, "polars-series-drop-nulls"]], "polars.Series.arr.max": [[732, "polars-series-arr-max"]], "polars.Series.dt.dst_offset": [[774, "polars-series-dt-dst-offset"]], "polars.Series.chunk_lengths": [[746, "polars-series-chunk-lengths"]], "polars.Series.arcsin": [[723, "polars-series-arcsin"]], "polars.Series.cummax": [[754, "polars-series-cummax"]], "polars.Series.arr.sum": [[734, "polars-series-arr-sum"]], "polars.Series.bin.contains": [[736, "polars-series-bin-contains"]], "polars.Series.dt.datetime": [[771, "polars-series-dt-datetime"]], "polars.Series.dt.epoch": [[775, "polars-series-dt-epoch"]], "polars.Series.arg_true": [[730, "polars-series-arg-true"]], "polars.Series.dt.hours": [[777, "polars-series-dt-hours"]], "polars.Series.dt.max": [[780, "polars-series-dt-max"]], "polars.Series.bin.starts_with": [[740, "polars-series-bin-starts-with"]], "polars.Series.dt.cast_time_unit": [[767, "polars-series-dt-cast-time-unit"]], "polars.Series.arg_unique": [[731, "polars-series-arg-unique"]], "polars.Series.dt.convert_time_zone": [[769, "polars-series-dt-convert-time-zone"]], "polars.Series.cumprod": [[756, "polars-series-cumprod"]], "polars.Series.dt.base_utc_offset": [[766, "polars-series-dt-base-utc-offset"]], "Selectors": [[713, "selectors"]], "Importing": [[713, "importing"]], "Set operations": [[713, "set-operations"]], "Functions": [[713, "functions"], [622, "functions"], [611, "functions"]], "polars.Series.arg_sort": [[729, "polars-series-arg-sort"]], "polars.Series.arg_min": [[728, "polars-series-arg-min"]], "polars.Series.cos": [[752, "polars-series-cos"]], "polars.Series.drop_nans": [[763, "polars-series-drop-nans"]], "polars.Series.cosh": [[753, "polars-series-cosh"]], "polars.Series.arg_max": [[727, "polars-series-arg-max"]], "polars.Series.cast": [[742, "polars-series-cast"]], "polars.Series.clip_min": [[750, "polars-series-clip-min"]], "polars.Series.clone": [[751, "polars-series-clone"]], "polars.Series.any": [[718, "polars-series-any"]], "polars.Series.bottom_k": [[741, "polars-series-bottom-k"]], "polars.Series.arr.min": [[733, "polars-series-arr-min"]], "polars.Series.arccos": [[721, "polars-series-arccos"]], "polars.Series.arr.unique": [[735, "polars-series-arr-unique"]], "polars.Expr.str.ljust": [[512, "polars-expr-str-ljust"]], "polars.Expr.str.replace": [[516, "polars-expr-str-replace"]], "polars.Expr.std": [[499, "polars-expr-std"]], "polars.Expr.str.encode": [[504, "polars-expr-str-encode"]], "polars.Expr.to_physical": [[545, "polars-expr-to-physical"]], "polars.Expr.str.slice": [[520, "polars-expr-str-slice"]], "polars.Expr.str.starts_with": [[524, "polars-expr-str-starts-with"]], "polars.Expr.tanh": [[544, "polars-expr-tanh"]], "polars.Expr.str.rstrip": [[519, "polars-expr-str-rstrip"]], "polars.Expr.str.concat": [[500, "polars-expr-str-concat"]], "polars.Expr.str.n_chars": [[514, "polars-expr-str-n-chars"]], "polars.col": [[563, "polars-col"]], "polars.count": [[567, "polars-count"]], "polars.Expr.str.to_time": [[531, "polars-expr-str-to-time"]], "polars.Expr.sort_by": [[497, "polars-expr-sort-by"]], "polars.coalesce": [[562, "polars-coalesce"]], "polars.Expr.truediv": [[547, "polars-expr-truediv"]], "polars.Expr.unique": [[548, "polars-expr-unique"]], "polars.arg_sort_by": [[560, "polars-arg-sort-by"]], "polars.Expr.str.explode": [[506, "polars-expr-str-explode"]], "polars.Expr.str.replace_all": [[517, "polars-expr-str-replace-all"]], "polars.Expr.str.json_path_match": [[510, "polars-expr-str-json-path-match"]], "polars.Expr.str.decode": [[503, "polars-expr-str-decode"]], "polars.Expr.str.contains": [[501, "polars-expr-str-contains"]], "polars.Expr.str.extract_all": [[508, "polars-expr-str-extract-all"]], "polars.Expr.upper_bound": [[550, "polars-expr-upper-bound"]], "polars.Expr.str.to_titlecase": [[532, "polars-expr-str-to-titlecase"]], "polars.Expr.str.strip": [[525, "polars-expr-str-strip"]], "polars.Expr.where": [[553, "polars-expr-where"]], "polars.Expr.var": [[552, "polars-expr-var"]], "polars.all": [[555, "polars-all"]], "polars.arange": [[559, "polars-arange"]], "polars.Expr.str.split_exact": [[522, "polars-expr-str-split-exact"]], "polars.Expr.str.extract": [[507, "polars-expr-str-extract"]], "polars.Expr.tail": [[540, "polars-expr-tail"]], "polars.Expr.take_every": [[542, "polars-expr-take-every"]], "polars.Expr.top_k": [[546, "polars-expr-top-k"]], "polars.Expr.str.split": [[521, "polars-expr-str-split"]], "polars.Expr.str.parse_int": [[515, "polars-expr-str-parse-int"]], "polars.Expr.str.splitn": [[523, "polars-expr-str-splitn"]], "polars.Expr.str.to_lowercase": [[530, "polars-expr-str-to-lowercase"]], "polars.avg": [[561, "polars-avg"]], "polars.any": [[556, "polars-any"]], "polars.Expr.str.json_extract": [[509, "polars-expr-str-json-extract"]], "polars.Expr.str.to_date": [[527, "polars-expr-str-to-date"]], "polars.Expr.suffix": [[538, "polars-expr-suffix"]], "polars.Expr.str.lengths": [[511, "polars-expr-str-lengths"]], "polars.Expr.sqrt": [[498, "polars-expr-sqrt"]], "polars.Expr.struct.field": [[535, "polars-expr-struct-field"]], "polars.approx_unique": [[558, "polars-approx-unique"]], "polars.corr": [[566, "polars-corr"]], "polars.Expr.str.to_datetime": [[528, "polars-expr-str-to-datetime"]], "polars.Expr.struct.rename_fields": [[536, "polars-expr-struct-rename-fields"]], "polars.Expr.tan": [[543, "polars-expr-tan"]], "polars.concat_str": [[565, "polars-concat-str"]], "polars.Expr.sum": [[539, "polars-expr-sum"]], "polars.apply": [[557, "polars-apply"]], "polars.Expr.str.strptime": [[526, "polars-expr-str-strptime"]], "polars.Expr.sub": [[537, "polars-expr-sub"]], "polars.Expr.unique_counts": [[549, "polars-expr-unique-counts"]], "polars.concat_list": [[564, "polars-concat-list"]], "polars.Expr.value_counts": [[551, "polars-expr-value-counts"]], "polars.Expr.str.lstrip": [[513, "polars-expr-str-lstrip"]], "polars.Expr.take": [[541, "polars-expr-take"]], "polars.Expr.str.zfill": [[534, "polars-expr-str-zfill"]], "polars.Expr.str.to_decimal": [[529, "polars-expr-str-to-decimal"]], "polars.Expr.str.count_match": [[502, "polars-expr-str-count-match"]], "polars.Expr.str.ends_with": [[505, "polars-expr-str-ends-with"]], "polars.Expr.xor": [[554, "polars-expr-xor"]], "polars.Expr.str.rjust": [[518, "polars-expr-str-rjust"]], "polars.Expr.str.to_uppercase": [[533, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_std": [[480, "polars-expr-rolling-std"]], "polars.Expr.meta.root_names": [[445, "polars-expr-meta-root-names"]], "polars.Expr.search_sorted": [[485, "polars-expr-search-sorted"]], "polars.Expr.repeat_by": [[470, "polars-expr-repeat-by"]], "polars.Expr.meta.output_name": [[443, "polars-expr-meta-output-name"]], "polars.Expr.ne_missing": [[456, "polars-expr-ne-missing"]], "polars.Expr.map": [[433, "polars-expr-map"]], "polars.Expr.list.unique": [[427, "polars-expr-list-unique"]], "polars.Expr.rechunk": [[468, "polars-expr-rechunk"]], "polars.Expr.mean": [[437, "polars-expr-mean"]], "polars.Expr.rolling_var": [[482, "polars-expr-rolling-var"]], "polars.Expr.pipe": [[461, "polars-expr-pipe"]], "polars.Expr.rolling_apply": [[473, "polars-expr-rolling-apply"]], "polars.Expr.shift": [[487, "polars-expr-shift"]], "polars.Expr.lt": [[432, "polars-expr-lt"]], "polars.Expr.reverse": [[472, "polars-expr-reverse"]], "polars.Expr.meta.has_multiple_outputs": [[440, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.rolling_mean": [[475, "polars-expr-rolling-mean"]], "polars.Expr.map_dict": [[435, "polars-expr-map-dict"]], "polars.Expr.pow": [[462, "polars-expr-pow"]], "polars.Expr.product": [[464, "polars-expr-product"]], "polars.Expr.sin": [[492, "polars-expr-sin"]], "polars.Expr.pct_change": [[460, "polars-expr-pct-change"]], "polars.Expr.set_sorted": [[486, "polars-expr-set-sorted"]], "polars.Expr.or_": [[458, "polars-expr-or"]], "polars.Expr.slice": [[495, "polars-expr-slice"]], "polars.Expr.rolling_sum": [[481, "polars-expr-rolling-sum"]], "polars.Expr.radians": [[466, "polars-expr-radians"]], "polars.Expr.meta.is_regex_projection": [[441, "polars-expr-meta-is-regex-projection"]], "polars.Expr.shrink_dtype": [[489, "polars-expr-shrink-dtype"]], "polars.Expr.sample": [[484, "polars-expr-sample"]], "polars.Expr.meta.ne": [[442, "polars-expr-meta-ne"]], "polars.Expr.rolling_skew": [[479, "polars-expr-rolling-skew"]], "polars.Expr.meta.undo_aliases": [[446, "polars-expr-meta-undo-aliases"]], "polars.Expr.mod": [[449, "polars-expr-mod"]], "polars.Expr.meta.write_json": [[447, "polars-expr-meta-write-json"]], "polars.Expr.rolling_median": [[476, "polars-expr-rolling-median"]], "polars.Expr.list.union": [[426, "polars-expr-list-union"]], "polars.Expr.round": [[483, "polars-expr-round"]], "polars.Expr.max": [[436, "polars-expr-max"]], "polars.Expr.prefix": [[463, "polars-expr-prefix"]], "polars.Expr.quantile": [[465, "polars-expr-quantile"]], "polars.Expr.rolling_quantile": [[478, "polars-expr-rolling-quantile"]], "polars.Expr.shuffle": [[490, "polars-expr-shuffle"]], "polars.Expr.sign": [[491, "polars-expr-sign"]], "polars.Expr.log10": [[429, "polars-expr-log10"]], "polars.Expr.rank": [[467, "polars-expr-rank"]], "polars.Expr.mul": [[451, "polars-expr-mul"]], "polars.Expr.nan_max": [[453, "polars-expr-nan-max"]], "polars.Expr.meta.eq": [[439, "polars-expr-meta-eq"]], "polars.Expr.log1p": [[430, "polars-expr-log1p"]], "polars.Expr.median": [[438, "polars-expr-median"]], "polars.Expr.ne": [[455, "polars-expr-ne"]], "polars.Expr.over": [[459, "polars-expr-over"]], "polars.Expr.sort": [[496, "polars-expr-sort"]], "polars.Expr.lower_bound": [[431, "polars-expr-lower-bound"]], "polars.Expr.meta.pop": [[444, "polars-expr-meta-pop"]], "polars.Expr.reinterpret": [[469, "polars-expr-reinterpret"]], "polars.Expr.n_unique": [[452, "polars-expr-n-unique"]], "polars.Expr.log": [[428, "polars-expr-log"]], "polars.Expr.rolling_min": [[477, "polars-expr-rolling-min"]], "polars.Expr.map_alias": [[434, "polars-expr-map-alias"]], "polars.Expr.shift_and_fill": [[488, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_max": [[474, "polars-expr-rolling-max"]], "polars.Expr.sinh": [[493, "polars-expr-sinh"]], "polars.Expr.skew": [[494, "polars-expr-skew"]], "polars.Expr.null_count": [[457, "polars-expr-null-count"]], "polars.Expr.nan_min": [[454, "polars-expr-nan-min"]], "polars.Expr.reshape": [[471, "polars-expr-reshape"]], "polars.Expr.mode": [[450, "polars-expr-mode"]], "polars.Expr.min": [[448, "polars-expr-min"]], "polars.Expr.is_between": [[381, "polars-expr-is-between"]], "polars.Expr.list.sum": [[422, "polars-expr-list-sum"]], "polars.Expr.list.count_match": [[403, "polars-expr-list-count-match"]], "polars.Expr.ewm_std": [[359, "polars-expr-ewm-std"]], "polars.Expr.is_unique": [[392, "polars-expr-is-unique"]], "polars.Expr.list.join": [[412, "polars-expr-list-join"]], "polars.Expr.list.sort": [[421, "polars-expr-list-sort"]], "polars.Expr.list.concat": [[401, "polars-expr-list-concat"]], "polars.Expr.list.explode": [[407, "polars-expr-list-explode"]], "polars.Expr.list.to_struct": [[425, "polars-expr-list-to-struct"]], "polars.Expr.interpolate": [[380, "polars-expr-interpolate"]], "polars.Expr.ge": [[374, "polars-expr-ge"]], "polars.Expr.eq_missing": [[357, "polars-expr-eq-missing"]], "polars.Expr.head": [[377, "polars-expr-head"]], "polars.Expr.eq": [[356, "polars-expr-eq"]], "polars.Expr.hash": [[376, "polars-expr-hash"]], "polars.Expr.list.last": [[413, "polars-expr-list-last"]], "polars.Expr.fill_null": [[366, "polars-expr-fill-null"]], "polars.Expr.is_finite": [[383, "polars-expr-is-finite"]], "polars.Expr.list.tail": [[423, "polars-expr-list-tail"]], "polars.Expr.is_not_null": [[390, "polars-expr-is-not-null"]], "polars.Expr.kurtosis": [[394, "polars-expr-kurtosis"]], "polars.Expr.list.arg_max": [[399, "polars-expr-list-arg-max"]], "polars.Expr.flatten": [[369, "polars-expr-flatten"]], "polars.Expr.ewm_var": [[360, "polars-expr-ewm-var"]], "polars.Expr.explode": [[363, "polars-expr-explode"]], "polars.Expr.first": [[368, "polars-expr-first"]], "polars.Expr.is_infinite": [[386, "polars-expr-is-infinite"]], "polars.Expr.is_nan": [[387, "polars-expr-is-nan"]], "polars.Expr.len": [[397, "polars-expr-len"]], "polars.Expr.list.first": [[408, "polars-expr-list-first"]], "polars.Expr.floor": [[370, "polars-expr-floor"]], "polars.Expr.keep_name": [[393, "polars-expr-keep-name"]], "polars.Expr.list.max": [[415, "polars-expr-list-max"]], "polars.Expr.forward_fill": [[372, "polars-expr-forward-fill"]], "polars.Expr.from_json": [[373, "polars-expr-from-json"]], "polars.Expr.is_not": [[388, "polars-expr-is-not"]], "polars.Expr.implode": [[378, "polars-expr-implode"]], "polars.Expr.is_duplicated": [[382, "polars-expr-is-duplicated"]], "polars.Expr.list.head": [[410, "polars-expr-list-head"]], "polars.Expr.fill_nan": [[365, "polars-expr-fill-nan"]], "polars.Expr.list.min": [[417, "polars-expr-list-min"]], "polars.Expr.extend_constant": [[364, "polars-expr-extend-constant"]], "polars.Expr.gt": [[375, "polars-expr-gt"]], "polars.Expr.is_first": [[384, "polars-expr-is-first"]], "polars.Expr.filter": [[367, "polars-expr-filter"]], "polars.Expr.is_null": [[391, "polars-expr-is-null"]], "polars.Expr.list.contains": [[402, "polars-expr-list-contains"]], "polars.Expr.list.take": [[424, "polars-expr-list-take"]], "polars.Expr.list.get": [[409, "polars-expr-list-get"]], "polars.Expr.last": [[395, "polars-expr-last"]], "polars.Expr.list.mean": [[416, "polars-expr-list-mean"]], "polars.Expr.list.intersection": [[411, "polars-expr-list-intersection"]], "polars.Expr.le": [[396, "polars-expr-le"]], "polars.Expr.inspect": [[379, "polars-expr-inspect"]], "polars.Expr.list.difference": [[405, "polars-expr-list-difference"]], "polars.Expr.list.reverse": [[418, "polars-expr-list-reverse"]], "polars.Expr.exclude": [[361, "polars-expr-exclude"]], "polars.Expr.is_in": [[385, "polars-expr-is-in"]], "polars.Expr.list.diff": [[404, "polars-expr-list-diff"]], "polars.Expr.list.lengths": [[414, "polars-expr-list-lengths"]], "polars.Expr.limit": [[398, "polars-expr-limit"]], "polars.Expr.list.slice": [[420, "polars-expr-list-slice"]], "polars.Expr.list.shift": [[419, "polars-expr-list-shift"]], "polars.Expr.list.arg_min": [[400, "polars-expr-list-arg-min"]], "polars.Expr.entropy": [[355, "polars-expr-entropy"]], "polars.Expr.list.eval": [[406, "polars-expr-list-eval"]], "polars.Expr.floordiv": [[371, "polars-expr-floordiv"]], "polars.Expr.exp": [[362, "polars-expr-exp"]], "polars.Expr.is_not_nan": [[389, "polars-expr-is-not-nan"]], "polars.Expr.ewm_mean": [[358, "polars-expr-ewm-mean"]], "polars.Expr.dt.replace_time_zone": [[342, "polars-expr-dt-replace-time-zone"]], "polars.Expr.drop_nulls": [[313, "polars-expr-drop-nulls"]], "polars.Expr.dt.month_start": [[336, "polars-expr-dt-month-start"]], "polars.Expr.dt.with_time_unit": [[353, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.cast_time_unit": [[315, "polars-expr-dt-cast-time-unit"]], "polars.Expr.degrees": [[309, "polars-expr-degrees"]], "polars.Expr.cos": [[300, "polars-expr-cos"]], "polars.Expr.cumcount": [[303, "polars-expr-cumcount"]], "polars.Expr.dt.nanosecond": [[337, "polars-expr-dt-nanosecond"]], "polars.Expr.bin.contains": [[287, "polars-expr-bin-contains"]], "polars.Expr.cummin": [[305, "polars-expr-cummin"]], "polars.Expr.dt.second": [[344, "polars-expr-dt-second"]], "polars.Expr.bin.starts_with": [[291, "polars-expr-bin-starts-with"]], "polars.Expr.dt.seconds": [[345, "polars-expr-dt-seconds"]], "polars.Expr.dt.millisecond": [[330, "polars-expr-dt-millisecond"]], "polars.Expr.arr.sum": [[284, "polars-expr-arr-sum"]], "polars.Expr.clip_max": [[298, "polars-expr-clip-max"]], "polars.Expr.dt.hour": [[324, "polars-expr-dt-hour"]], "polars.Expr.bin.ends_with": [[290, "polars-expr-bin-ends-with"]], "polars.Expr.dt.dst_offset": [[322, "polars-expr-dt-dst-offset"]], "polars.Expr.clip": [[297, "polars-expr-clip"]], "polars.Expr.dt.minute": [[332, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[334, "polars-expr-dt-month"]], "polars.Expr.dt.ordinal_day": [[340, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.week": [[351, "polars-expr-dt-week"]], "polars.Expr.dot": [[311, "polars-expr-dot"]], "polars.Expr.ceil": [[296, "polars-expr-ceil"]], "polars.Expr.count": [[302, "polars-expr-count"]], "polars.Expr.dt.microsecond": [[328, "polars-expr-dt-microsecond"]], "polars.Expr.dt.iso_year": [[327, "polars-expr-dt-iso-year"]], "polars.Expr.cast": [[294, "polars-expr-cast"]], "polars.Expr.cumsum": [[307, "polars-expr-cumsum"]], "polars.Expr.dt.month_end": [[335, "polars-expr-dt-month-end"]], "polars.Expr.dt.day": [[320, "polars-expr-dt-day"]], "polars.Expr.dt.time": [[347, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[348, "polars-expr-dt-timestamp"]], "polars.Expr.cosh": [[301, "polars-expr-cosh"]], "polars.Expr.diff": [[310, "polars-expr-diff"]], "polars.Expr.dt.is_leap_year": [[326, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.minutes": [[333, "polars-expr-dt-minutes"]], "polars.Expr.dt.weekday": [[352, "polars-expr-dt-weekday"]], "polars.Expr.dt.microseconds": [[329, "polars-expr-dt-microseconds"]], "polars.Expr.backward_fill": [[286, "polars-expr-backward-fill"]], "polars.Expr.cumprod": [[306, "polars-expr-cumprod"]], "polars.Expr.dt.truncate": [[350, "polars-expr-dt-truncate"]], "polars.Expr.dt.to_string": [[349, "polars-expr-dt-to-string"]], "polars.Expr.dt.hours": [[325, "polars-expr-dt-hours"]], "polars.Expr.dt.convert_time_zone": [[317, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.epoch": [[323, "polars-expr-dt-epoch"]], "polars.Expr.bottom_k": [[292, "polars-expr-bottom-k"]], "polars.Expr.drop_nans": [[312, "polars-expr-drop-nans"]], "polars.Expr.dt.nanoseconds": [[338, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.days": [[321, "polars-expr-dt-days"]], "polars.Expr.dt.milliseconds": [[331, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.base_utc_offset": [[314, "polars-expr-dt-base-utc-offset"]], "polars.Expr.bin.decode": [[288, "polars-expr-bin-decode"]], "polars.Expr.cat.set_ordering": [[295, "polars-expr-cat-set-ordering"]], "polars.Expr.clip_min": [[299, "polars-expr-clip-min"]], "polars.Expr.cummax": [[304, "polars-expr-cummax"]], "polars.Expr.cumulative_eval": [[308, "polars-expr-cumulative-eval"]], "polars.Expr.dt.datetime": [[319, "polars-expr-dt-datetime"]], "polars.Expr.arr.unique": [[285, "polars-expr-arr-unique"]], "polars.Expr.dt.quarter": [[341, "polars-expr-dt-quarter"]], "polars.Expr.dt.year": [[354, "polars-expr-dt-year"]], "polars.Expr.dt.combine": [[316, "polars-expr-dt-combine"]], "polars.Expr.bin.encode": [[289, "polars-expr-bin-encode"]], "polars.Expr.dt.date": [[318, "polars-expr-dt-date"]], "polars.Expr.cache": [[293, "polars-expr-cache"]], "polars.Expr.dt.offset_by": [[339, "polars-expr-dt-offset-by"]], "polars.Expr.dt.strftime": [[346, "polars-expr-dt-strftime"]], "polars.Expr.dt.round": [[343, "polars-expr-dt-round"]], "polars.max": [[586, "polars-max"]], "polars.tail": [[601, "polars-tail"]], "polars.cumsum": [[571, "polars-cumsum"]], "polars.median": [[588, "polars-median"]], "polars.sql_expr": [[597, "polars-sql-expr"]], "polars.groups": [[581, "polars-groups"]], "polars.element": [[575, "polars-element"]], "polars.datetime": [[573, "polars-datetime"]], "polars.reduce": [[592, "polars-reduce"]], "polars.LazyFrame.fill_nan": [[638, "polars-lazyframe-fill-nan"]], "Expressions": [[612, "expressions"]], "polars.LazyFrame.bottom_k": [[626, "polars-lazyframe-bottom-k"]], "polars.mean": [[587, "polars-mean"]], "polars.LazyFrame.cache": [[627, "polars-lazyframe-cache"]], "polars.date": [[572, "polars-date"]], "Operators": [[617, "operators"]], "Conjunction": [[617, "conjunction"]], "Comparison": [[617, "comparison"]], "Numeric": [[617, "numeric"], [258, "numeric"]], "polars.LazyFrame.clone": [[629, "polars-lazyframe-clone"]], "polars.n_unique": [[590, "polars-n-unique"]], "polars.cumfold": [[569, "polars-cumfold"]], "polars.LazyFrame.explain": [[635, "polars-lazyframe-explain"]], "polars.cov": [[568, "polars-cov"]], "polars.time": [[602, "polars-time"]], "Meta": [[614, "meta"]], "polars.cumreduce": [[570, "polars-cumreduce"]], "polars.first": [[577, "polars-first"]], "Conversion": [[622, "conversion"]], "Eager/Lazy functions": [[622, "eager-lazy-functions"]], "Parallelization": [[622, "parallelization"]], "StringCache": [[622, "stringcache"]], "polars.when": [[604, "polars-when"]], "polars.fold": [[578, "polars-fold"]], "polars.lit": [[584, "polars-lit"]], "polars.repeat": [[593, "polars-repeat"]], "polars.sum": [[600, "polars-sum"]], "polars.implode": [[583, "polars-implode"]], "polars.var": [[603, "polars-var"]], "Columns / names": [[609, "columns-names"]], "polars.min": [[589, "polars-min"]], "polars.LazyFrame.clear": [[628, "polars-lazyframe-clear"]], "polars.LazyFrame.dtypes": [[634, "polars-lazyframe-dtypes"]], "polars.LazyFrame.explode": [[636, "polars-lazyframe-explode"]], "polars.duration": [[574, "polars-duration"]], "API reference": [[623, "api-reference"]], "polars.struct": [[599, "polars-struct"]], "polars.LazyFrame.columns": [[631, "polars-lazyframe-columns"]], "polars.LazyFrame.drop": [[632, "polars-lazyframe-drop"]], "Input/output": [[624, "input-output"]], "CSV": [[624, "csv"]], "Feather/ IPC": [[624, "feather-ipc"]], "Parquet": [[624, "parquet"]], "Database": [[624, "database"]], "JSON": [[624, "json"]], "AVRO": [[624, "avro"]], "Excel": [[624, "excel"]], "Delta Lake": [[624, "delta-lake"]], "Datasets": [[624, "datasets"]], "BatchedCsvReader": [[624, "batchedcsvreader"]], "polars.select": [[596, "polars-select"]], "Window": [[621, "window"]], "polars.quantile": [[591, "polars-quantile"]], "polars.format": [[579, "polars-format"]], "polars.LazyFrame.collect": [[630, "polars-lazyframe-collect"]], "polars.rolling_cov": [[595, "polars-rolling-cov"]], "polars.LazyFrame.fetch": [[637, "polars-lazyframe-fetch"]], "polars.std": [[598, "polars-std"]], "polars.LazyFrame.drop_nulls": [[633, "polars-lazyframe-drop-nulls"]], "polars.map": [[585, "polars-map"]], "polars.exclude": [[576, "polars-exclude"]], "polars.head": [[582, "polars-head"]], "polars.from_epoch": [[580, "polars-from-epoch"]], "polars.rolling_corr": [[594, "polars-rolling-corr"]], "polars.DataFrame.product": [[190, "polars-dataframe-product"]], "polars.DataFrame.fill_null": [[151, "polars-dataframe-fill-null"]], "polars.DataFrame.pivot": [[189, "polars-dataframe-pivot"]], "polars.DataFrame.shift_and_fill": [[205, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.sample": [[199, "polars-dataframe-sample"]], "polars.DataFrame.tail": [[211, "polars-dataframe-tail"]], "polars.DataFrame.join_asof": [[175, "polars-dataframe-join-asof"]], "polars.DataFrame.join": [[174, "polars-dataframe-join"]], "polars.DataFrame.row": [[197, "polars-dataframe-row"]], "polars.DataFrame.shift": [[204, "polars-dataframe-shift"]], "polars.DataFrame.shape": [[203, "polars-dataframe-shape"]], "polars.DataFrame.quantile": [[191, "polars-dataframe-quantile"]], "polars.DataFrame.select": [[201, "polars-dataframe-select"]], "polars.DataFrame.describe": [[142, "polars-dataframe-describe"]], "polars.DataFrame.drop_nulls": [[145, "polars-dataframe-drop-nulls"]], "polars.DataFrame.extend": [[149, "polars-dataframe-extend"]], "polars.DataFrame.find_idx_by_name": [[153, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.hstack": [[165, "polars-dataframe-hstack"]], "polars.DataFrame.rows": [[198, "polars-dataframe-rows"]], "polars.DataFrame.melt": [[181, "polars-dataframe-melt"]], "polars.DataFrame.groupby": [[159, "polars-dataframe-groupby"]], "polars.DataFrame.iter_rows": [[172, "polars-dataframe-iter-rows"]], "polars.DataFrame.lazy": [[176, "polars-dataframe-lazy"]], "polars.DataFrame.head": [[163, "polars-dataframe-head"]], "polars.DataFrame.take_every": [[212, "polars-dataframe-take-every"]], "polars.DataFrame.slice": [[207, "polars-dataframe-slice"]], "polars.DataFrame.null_count": [[186, "polars-dataframe-null-count"]], "polars.DataFrame.reverse": [[196, "polars-dataframe-reverse"]], "polars.DataFrame.get_column": [[156, "polars-dataframe-get-column"]], "polars.DataFrame.std": [[209, "polars-dataframe-std"]], "polars.DataFrame.median": [[180, "polars-dataframe-median"]], "polars.DataFrame.dtypes": [[146, "polars-dataframe-dtypes"]], "polars.DataFrame.estimated_size": [[147, "polars-dataframe-estimated-size"]], "polars.DataFrame.height": [[164, "polars-dataframe-height"]], "polars.DataFrame.insert_at_idx": [[166, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.fill_nan": [[150, "polars-dataframe-fill-nan"]], "polars.DataFrame.replace": [[194, "polars-dataframe-replace"]], "polars.DataFrame.replace_at_idx": [[195, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.explode": [[148, "polars-dataframe-explode"]], "polars.DataFrame.schema": [[200, "polars-dataframe-schema"]], "polars.DataFrame.fold": [[154, "polars-dataframe-fold"]], "polars.DataFrame.filter": [[152, "polars-dataframe-filter"]], "polars.DataFrame.rename": [[193, "polars-dataframe-rename"]], "polars.DataFrame.max": [[178, "polars-dataframe-max"]], "polars.DataFrame.sort": [[208, "polars-dataframe-sort"]], "polars.DataFrame.merge_sorted": [[182, "polars-dataframe-merge-sorted"]], "polars.DataFrame.set_sorted": [[202, "polars-dataframe-set-sorted"]], "polars.DataFrame.rechunk": [[192, "polars-dataframe-rechunk"]], "polars.DataFrame.groupby_rolling": [[161, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.hash_rows": [[162, "polars-dataframe-hash-rows"]], "polars.DataFrame.pipe": [[188, "polars-dataframe-pipe"]], "polars.DataFrame.shrink_to_fit": [[206, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.min": [[183, "polars-dataframe-min"]], "polars.DataFrame.partition_by": [[187, "polars-dataframe-partition-by"]], "polars.DataFrame.drop_in_place": [[144, "polars-dataframe-drop-in-place"]], "polars.DataFrame.get_columns": [[157, "polars-dataframe-get-columns"]], "polars.DataFrame.n_unique": [[185, "polars-dataframe-n-unique"]], "polars.DataFrame.sum": [[210, "polars-dataframe-sum"]], "polars.DataFrame.item": [[171, "polars-dataframe-item"]], "polars.DataFrame.drop": [[143, "polars-dataframe-drop"]], "polars.DataFrame.frame_equal": [[155, "polars-dataframe-frame-equal"]], "polars.DataFrame.is_empty": [[169, "polars-dataframe-is-empty"]], "polars.DataFrame.glimpse": [[158, "polars-dataframe-glimpse"]], "polars.DataFrame.n_chunks": [[184, "polars-dataframe-n-chunks"]], "polars.DataFrame.groupby_dynamic": [[160, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.interpolate": [[167, "polars-dataframe-interpolate"]], "polars.DataFrame.is_duplicated": [[168, "polars-dataframe-is-duplicated"]], "polars.DataFrame.is_unique": [[170, "polars-dataframe-is-unique"]], "polars.DataFrame.mean": [[179, "polars-dataframe-mean"]], "polars.DataFrame.limit": [[177, "polars-dataframe-limit"]], "polars.DataFrame.iter_slices": [[173, "polars-dataframe-iter-slices"]], "polars.Expr.arcsinh": [[274, "polars-expr-arcsinh"]], "polars.Expr.arccos": [[271, "polars-expr-arccos"]], "polars.DataFrame.to_series": [[220, "polars-dataframe-to-series"]], "Exceptions": [[259, "exceptions"]], "polars.dataframe.groupby.GroupBy.__iter__": [[234, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.agg_groups": [[263, "polars-expr-agg-groups"]], "polars.Expr.any": [[267, "polars-expr-any"]], "polars.DataFrame.to_dummies": [[216, "polars-dataframe-to-dummies"]], "polars.DataFrame.with_row_count": [[233, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_struct": [[221, "polars-dataframe-to-struct"]], "polars.DataFrame.var": [[229, "polars-dataframe-var"]], "polars.dataframe.groupby.GroupBy.count": [[238, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arg_unique": [[281, "polars-expr-arg-unique"]], "polars.Expr.arr.min": [[283, "polars-expr-arr-min"]], "polars.DataFrame.with_columns": [[232, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.all": [[236, "polars-dataframe-groupby-groupby-all"]], "polars.DataFrame.update": [[227, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.max": [[242, "polars-dataframe-groupby-groupby-max"]], "polars.DataFrame.to_init_repr": [[217, "polars-dataframe-to-init-repr"]], "polars.Expr.alias": [[264, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.apply": [[237, "polars-dataframe-groupby-groupby-apply"]], "polars.Expr.arctan": [[275, "polars-expr-arctan"]], "polars.dataframe.groupby.GroupBy.median": [[244, "polars-dataframe-groupby-groupby-median"]], "polars.Expr.all": [[265, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.sum": [[248, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arg_min": [[278, "polars-expr-arg-min"]], "polars.DataFrame.to_arrow": [[213, "polars-dataframe-to-arrow"]], "polars.Expr.arg_max": [[277, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.agg": [[235, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.mean": [[243, "polars-dataframe-groupby-groupby-mean"]], "polars.Expr.arccosh": [[272, "polars-expr-arccosh"]], "polars.DataFrame.transpose": [[223, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.min": [[245, "polars-dataframe-groupby-groupby-min"]], "polars.DataFrame.to_numpy": [[218, "polars-dataframe-to-numpy"]], "polars.Expr.apply": [[269, "polars-expr-apply"]], "polars.DataFrame.width": [[231, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.first": [[239, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.vstack": [[230, "polars-dataframe-vstack"]], "polars.Expr.abs": [[261, "polars-expr-abs"]], "polars.dataframe.groupby.GroupBy.n_unique": [[246, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.append": [[268, "polars-expr-append"]], "polars.Expr.arg_sort": [[279, "polars-expr-arg-sort"]], "polars.DataFrame.to_dicts": [[215, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_dict": [[214, "polars-dataframe-to-dict"]], "DataFrame": [[255, "dataframe"]], "polars.DataFrame.unique": [[224, "polars-dataframe-unique"]], "polars.dataframe.groupby.GroupBy.head": [[240, "polars-dataframe-groupby-groupby-head"]], "Data types": [[258, "data-types"]], "Nested": [[258, "nested"]], "Other": [[258, "other"]], "polars.Expr.add": [[262, "polars-expr-add"]], "polars.dataframe.groupby.GroupBy.last": [[241, "polars-dataframe-groupby-groupby-last"]], "polars.Expr.approx_unique": [[270, "polars-expr-approx-unique"]], "polars.DataFrame.top_k": [[222, "polars-dataframe-top-k"]], "polars.DataFrame.unnest": [[225, "polars-dataframe-unnest"]], "polars.Expr.arr.max": [[282, "polars-expr-arr-max"]], "polars.DataFrame.unstack": [[226, "polars-dataframe-unstack"]], "polars.DataFrame.to_pandas": [[219, "polars-dataframe-to-pandas"]], "polars.Expr.arctanh": [[276, "polars-expr-arctanh"]], "polars.Expr.and_": [[266, "polars-expr-and"]], "polars.dataframe.groupby.GroupBy.quantile": [[247, "polars-dataframe-groupby-groupby-quantile"]], "polars.Expr.arg_true": [[280, "polars-expr-arg-true"]], "polars.dataframe.groupby.GroupBy.tail": [[249, "polars-dataframe-groupby-groupby-tail"]], "polars.Expr.arcsin": [[273, "polars-expr-arcsin"]], "polars.DataFrame.upsample": [[228, "polars-dataframe-upsample"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "using_string_cache() (in module polars)": [[131, "polars.using_string_cache"]], "zeros() (in module polars)": [[132, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[135, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[136, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[137, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[138, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[139, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[140, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[141, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[142, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[143, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[144, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[145, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[146, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[147, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[148, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[149, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[150, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[151, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[152, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[153, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[154, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[155, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[156, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[157, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[158, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[159, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[161, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[162, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[163, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[164, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[165, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[166, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[167, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[168, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[169, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[170, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[171, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[172, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[173, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[174, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[175, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[176, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[177, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[178, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[179, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[180, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[181, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[182, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[183, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[184, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[185, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[186, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[187, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[188, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[189, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[190, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[191, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[192, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[193, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[194, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[196, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[197, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[198, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[199, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[200, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[201, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[202, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[203, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[204, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[205, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[206, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[207, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[208, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[209, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[210, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[211, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[212, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[213, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[214, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[215, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[216, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[217, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[218, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[219, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[220, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[221, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[222, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[223, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[224, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[225, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[226, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[227, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[228, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[229, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[230, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[231, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[232, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[233, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[261, "polars.Expr.abs"]], "add() (polars.expr method)": [[262, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[263, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[264, "polars.Expr.alias"]], "all() (polars.expr method)": [[265, "polars.Expr.all"]], "and_() (polars.expr method)": [[266, "polars.Expr.and_"]], "any() (polars.expr method)": [[267, "polars.Expr.any"]], "append() (polars.expr method)": [[268, "polars.Expr.append"]], "apply() (polars.expr method)": [[269, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[270, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[271, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[272, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[273, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[274, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[275, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[276, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[277, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[278, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[279, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[280, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[281, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[282, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[283, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[284, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[285, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[286, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[287, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[288, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[289, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[292, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[293, "polars.Expr.cache"]], "cast() (polars.expr method)": [[294, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[295, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[296, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[297, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[298, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[299, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[300, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[301, "polars.Expr.cosh"]], "count() (polars.expr method)": [[302, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[303, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[304, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[305, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[306, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[307, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[308, "polars.Expr.cumulative_eval"]], "degrees() (polars.expr method)": [[309, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[310, "polars.Expr.diff"]], "dot() (polars.expr method)": [[311, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[312, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[313, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[314, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[315, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[316, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[317, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[318, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[319, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[320, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[321, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[322, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[323, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[324, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[325, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[326, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[327, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[328, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[329, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[330, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[331, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[332, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[333, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[334, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[335, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[336, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[337, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[338, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[339, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[340, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[341, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[342, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[343, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[344, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[345, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[346, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[347, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[348, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[349, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[350, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[351, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[352, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[353, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[354, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[355, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[356, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[357, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[358, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[359, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[360, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[361, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[362, "polars.Expr.exp"]], "explode() (polars.expr method)": [[363, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[364, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[365, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[366, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[367, "polars.Expr.filter"]], "first() (polars.expr method)": [[368, "polars.Expr.first"]], "flatten() (polars.expr method)": [[369, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[370, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[371, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[372, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[373, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[374, "polars.Expr.ge"]], "gt() (polars.expr method)": [[375, "polars.Expr.gt"]], "hash() (polars.expr method)": [[376, "polars.Expr.hash"]], "head() (polars.expr method)": [[377, "polars.Expr.head"]], "implode() (polars.expr method)": [[378, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[379, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[380, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[381, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[382, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[383, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[384, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[385, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[386, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[387, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[388, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[389, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[390, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[391, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[392, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[393, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[394, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[395, "polars.Expr.last"]], "le() (polars.expr method)": [[396, "polars.Expr.le"]], "len() (polars.expr method)": [[397, "polars.Expr.len"]], "limit() (polars.expr method)": [[398, "polars.Expr.limit"]], "arg_max() (polars.expr.list method)": [[399, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[400, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[401, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[402, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[403, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[404, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[405, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[406, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[407, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[408, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[409, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[410, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[411, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[412, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[413, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[414, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[415, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[416, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[417, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[418, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[419, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[420, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[421, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[422, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[423, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[424, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[425, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[426, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[427, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[428, "polars.Expr.log"]], "log10() (polars.expr method)": [[429, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[430, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[431, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[432, "polars.Expr.lt"]], "map() (polars.expr method)": [[433, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[434, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[435, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[436, "polars.Expr.max"]], "mean() (polars.expr method)": [[437, "polars.Expr.mean"]], "median() (polars.expr method)": [[438, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[439, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[440, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[441, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[442, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[443, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[444, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[445, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[446, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[447, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[448, "polars.Expr.min"]], "mod() (polars.expr method)": [[449, "polars.Expr.mod"]], "mode() (polars.expr method)": [[450, "polars.Expr.mode"]], "mul() (polars.expr method)": [[451, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[452, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[453, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[454, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[455, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[456, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[457, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[458, "polars.Expr.or_"]], "over() (polars.expr method)": [[459, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[460, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[461, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[462, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[463, "polars.Expr.prefix"]], "product() (polars.expr method)": [[464, "polars.Expr.product"]], "quantile() (polars.expr method)": [[465, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[466, "polars.Expr.radians"]], "rank() (polars.expr method)": [[467, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[468, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[469, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[470, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[471, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[472, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[473, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[474, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[475, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[476, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[477, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[478, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[479, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[480, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[481, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[482, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[483, "polars.Expr.round"]], "sample() (polars.expr method)": [[484, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[485, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[486, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[487, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[488, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[489, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[490, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[491, "polars.Expr.sign"]], "sin() (polars.expr method)": [[492, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[493, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[494, "polars.Expr.skew"]], "slice() (polars.expr method)": [[495, "polars.Expr.slice"]], "sort() (polars.expr method)": [[496, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[497, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[498, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[499, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[500, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[501, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[502, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[503, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[504, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[505, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[506, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[507, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[508, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[509, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[510, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[511, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[512, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[513, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[514, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[515, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[516, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[517, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[518, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[519, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[520, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[521, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[522, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[523, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[524, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[525, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[526, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[527, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[528, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[529, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[530, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[531, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[532, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[533, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[534, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[535, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[536, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[537, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[538, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[539, "polars.Expr.sum"]], "tail() (polars.expr method)": [[540, "polars.Expr.tail"]], "take() (polars.expr method)": [[541, "polars.Expr.take"]], "take_every() (polars.expr method)": [[542, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[543, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[544, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[545, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[546, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[547, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[548, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[549, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[550, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[551, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[552, "polars.Expr.var"]], "where() (polars.expr method)": [[553, "polars.Expr.where"]], "xor() (polars.expr method)": [[554, "polars.Expr.xor"]], "all() (in module polars)": [[555, "polars.all"]], "any() (in module polars)": [[556, "polars.any"]], "apply() (in module polars)": [[557, "polars.apply"]], "approx_unique() (in module polars)": [[558, "polars.approx_unique"]], "arange() (in module polars)": [[559, "polars.arange"]], "arg_sort_by() (in module polars)": [[560, "polars.arg_sort_by"]], "avg() (in module polars)": [[561, "polars.avg"]], "coalesce() (in module polars)": [[562, "polars.coalesce"]], "col() (in module polars)": [[563, "polars.col"]], "concat_list() (in module polars)": [[564, "polars.concat_list"]], "concat_str() (in module polars)": [[565, "polars.concat_str"]], "corr() (in module polars)": [[566, "polars.corr"]], "count() (in module polars)": [[567, "polars.count"]], "cov() (in module polars)": [[568, "polars.cov"]], "cumfold() (in module polars)": [[569, "polars.cumfold"]], "cumreduce() (in module polars)": [[570, "polars.cumreduce"]], "cumsum() (in module polars)": [[571, "polars.cumsum"]], "date() (in module polars)": [[572, "polars.date"]], "datetime() (in module polars)": [[573, "polars.datetime"]], "duration() (in module polars)": [[574, "polars.duration"]], "element() (in module polars)": [[575, "polars.element"]], "exclude() (in module polars)": [[576, "polars.exclude"]], "first() (in module polars)": [[577, "polars.first"]], "fold() (in module polars)": [[578, "polars.fold"]], "format() (in module polars)": [[579, "polars.format"]], "from_epoch() (in module polars)": [[580, "polars.from_epoch"]], "groups() (in module polars)": [[581, "polars.groups"]], "head() (in module polars)": [[582, "polars.head"]], "implode() (in module polars)": [[583, "polars.implode"]], "lit() (in module polars)": [[584, "polars.lit"]], "map() (in module polars)": [[585, "polars.map"]], "max() (in module polars)": [[586, "polars.max"]], "mean() (in module polars)": [[587, "polars.mean"]], "median() (in module polars)": [[588, "polars.median"]], "min() (in module polars)": [[589, "polars.min"]], "n_unique() (in module polars)": [[590, "polars.n_unique"]], "quantile() (in module polars)": [[591, "polars.quantile"]], "reduce() (in module polars)": [[592, "polars.reduce"]], "repeat() (in module polars)": [[593, "polars.repeat"]], "rolling_corr() (in module polars)": [[594, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[595, "polars.rolling_cov"]], "select() (in module polars)": [[596, "polars.select"]], "sql_expr() (in module polars)": [[597, "polars.sql_expr"]], "std() (in module polars)": [[598, "polars.std"]], "struct() (in module polars)": [[599, "polars.struct"]], "sum() (in module polars)": [[600, "polars.sum"]], "tail() (in module polars)": [[601, "polars.tail"]], "time() (in module polars)": [[602, "polars.time"]], "var() (in module polars)": [[603, "polars.var"]], "when() (in module polars)": [[604, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[626, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[627, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[628, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[629, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[630, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[631, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[632, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[633, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[634, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[635, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[636, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[637, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[638, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[639, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[640, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[641, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[642, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[643, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[644, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[645, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[646, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[647, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[648, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[649, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[650, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[651, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[652, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[653, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[654, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[655, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[656, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[657, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[658, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[659, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[660, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[661, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[662, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[663, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[664, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[665, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[666, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[667, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[668, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[669, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[670, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[671, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[672, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[673, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[674, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[675, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[676, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[677, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[678, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[679, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[680, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[681, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[682, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[683, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[684, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[685, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[686, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[687, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[688, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[689, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[690, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[691, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[692, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[693, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[694, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[695, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[696, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[697, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[698, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[699, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[700, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[701, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[702, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[703, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[704, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[705, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[706, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[713, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[713, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[713, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[713, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[713, "polars.selectors.datetime"]], "ends_with() (in module polars.selectors)": [[713, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[713, "polars.selectors.first"]], "float() (in module polars.selectors)": [[713, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[713, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[713, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[713, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[713, "polars.selectors.matches"]], "module": [[713, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[713, "polars.selectors.numeric"]], "polars.selectors": [[713, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[713, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[713, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[713, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[713, "polars.selectors.temporal"]], "abs() (polars.series method)": [[715, "polars.Series.abs"]], "alias() (polars.series method)": [[716, "polars.Series.alias"]], "all() (polars.series method)": [[717, "polars.Series.all"]], "any() (polars.series method)": [[718, "polars.Series.any"]], "append() (polars.series method)": [[719, "polars.Series.append"]], "apply() (polars.series method)": [[720, "polars.Series.apply"]], "arccos() (polars.series method)": [[721, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[722, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[723, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[724, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[725, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[726, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[727, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[728, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[729, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[730, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[731, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[732, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[733, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[734, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[735, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[736, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[737, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[738, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[739, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[740, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[741, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[742, "polars.Series.cast"]], "cat (polars.series attribute)": [[743, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[744, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[745, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[746, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[747, "polars.Series.clear"]], "clip() (polars.series method)": [[748, "polars.Series.clip"]], "clip_max() (polars.series method)": [[749, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[750, "polars.Series.clip_min"]], "clone() (polars.series method)": [[751, "polars.Series.clone"]], "cos() (polars.series method)": [[752, "polars.Series.cos"]], "cosh() (polars.series method)": [[753, "polars.Series.cosh"]], "cummax() (polars.series method)": [[754, "polars.Series.cummax"]], "cummin() (polars.series method)": [[755, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[756, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[757, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[758, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[759, "polars.Series.cut"]], "describe() (polars.series method)": [[760, "polars.Series.describe"]], "diff() (polars.series method)": [[761, "polars.Series.diff"]], "dot() (polars.series method)": [[762, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[763, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[764, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[765, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[766, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[767, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[768, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[769, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[770, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[771, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[772, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[773, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[774, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[775, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[776, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[777, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[778, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[779, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[780, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[781, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[782, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[783, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[784, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[785, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[786, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[787, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[788, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[789, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[790, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[791, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[792, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[793, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[794, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[795, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[796, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[797, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[798, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[799, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[800, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[801, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[802, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[803, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[804, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[805, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[806, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[807, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[808, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[809, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[810, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[811, "polars.Series.dtype"]], "entropy() (polars.series method)": [[812, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[813, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[814, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[815, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[816, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[817, "polars.Series.exp"]], "explode() (polars.series method)": [[818, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[819, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[820, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[821, "polars.Series.fill_null"]], "filter() (polars.series method)": [[822, "polars.Series.filter"]], "flags (polars.series attribute)": [[823, "polars.Series.flags"]], "floor() (polars.series method)": [[824, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[825, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[826, "polars.Series.has_validity"]], "hash() (polars.series method)": [[827, "polars.Series.hash"]], "head() (polars.series method)": [[828, "polars.Series.head"]], "hist() (polars.series method)": [[829, "polars.Series.hist"]], "implode() (polars.series method)": [[830, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[831, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[832, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[833, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[834, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[835, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[836, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[837, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[838, "polars.Series.is_first"]], "is_float() (polars.series method)": [[839, "polars.Series.is_float"]], "is_in() (polars.series method)": [[840, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[841, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[842, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[843, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[844, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[845, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[846, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[847, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[848, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[849, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[850, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[851, "polars.Series.is_utf8"]], "item() (polars.series method)": [[852, "polars.Series.item"]], "kurtosis() (polars.series method)": [[853, "polars.Series.kurtosis"]], "len() (polars.series method)": [[854, "polars.Series.len"]], "limit() (polars.series method)": [[855, "polars.Series.limit"]], "list (polars.series attribute)": [[856, "polars.Series.list"]], "arg_max() (polars.series.list method)": [[857, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[858, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[859, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[860, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[861, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[862, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[863, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[864, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[865, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[866, "polars.Series.list.first"]], "get() (polars.series.list method)": [[867, "polars.Series.list.get"]], "head() (polars.series.list method)": [[868, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[869, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[870, "polars.Series.list.join"]], "last() (polars.series.list method)": [[871, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[872, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[873, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[874, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[875, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[876, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[877, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[878, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[879, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[880, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[881, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[882, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[883, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[884, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[885, "polars.Series.list.unique"]], "log() (polars.series method)": [[886, "polars.Series.log"]], "log10() (polars.series method)": [[887, "polars.Series.log10"]], "log1p() (polars.series method)": [[888, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[889, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[890, "polars.Series.map_dict"]], "max() (polars.series method)": [[891, "polars.Series.max"]], "mean() (polars.series method)": [[892, "polars.Series.mean"]], "median() (polars.series method)": [[893, "polars.Series.median"]], "min() (polars.series method)": [[894, "polars.Series.min"]], "mode() (polars.series method)": [[895, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[896, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[897, "polars.Series.n_unique"]], "name (polars.series attribute)": [[898, "polars.Series.name"]], "nan_max() (polars.series method)": [[899, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[900, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[901, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[902, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[903, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[904, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[905, "polars.Series.peak_min"]], "product() (polars.series method)": [[906, "polars.Series.product"]], "qcut() (polars.series method)": [[907, "polars.Series.qcut"]], "quantile() (polars.series method)": [[908, "polars.Series.quantile"]], "rank() (polars.series method)": [[909, "polars.Series.rank"]], "rechunk() (polars.series method)": [[910, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[911, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[912, "polars.Series.rename"]], "reshape() (polars.series method)": [[913, "polars.Series.reshape"]], "reverse() (polars.series method)": [[914, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[915, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[916, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[917, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[918, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[919, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[920, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[921, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[922, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[923, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[924, "polars.Series.rolling_var"]], "round() (polars.series method)": [[925, "polars.Series.round"]], "sample() (polars.series method)": [[926, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[927, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[928, "polars.Series.series_equal"]], "set() (polars.series method)": [[929, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[930, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[931, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[932, "polars.Series.shape"]], "shift() (polars.series method)": [[933, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[934, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[935, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[936, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[937, "polars.Series.shuffle"]], "sign() (polars.series method)": [[938, "polars.Series.sign"]], "sin() (polars.series method)": [[939, "polars.Series.sin"]], "sinh() (polars.series method)": [[940, "polars.Series.sinh"]], "skew() (polars.series method)": [[941, "polars.Series.skew"]], "slice() (polars.series method)": [[942, "polars.Series.slice"]], "sort() (polars.series method)": [[943, "polars.Series.sort"]], "sqrt() (polars.series method)": [[944, "polars.Series.sqrt"]], "std() (polars.series method)": [[945, "polars.Series.std"]], "str (polars.series attribute)": [[946, "polars.Series.str"]], "concat() (polars.series.str method)": [[947, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[948, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[949, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[950, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[951, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[952, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[953, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[954, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[955, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[956, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[957, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[958, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[959, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[960, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[961, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[962, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[963, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[964, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[965, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[966, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[967, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[968, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[969, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[970, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[971, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[972, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[973, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[974, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[975, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[976, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[977, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[978, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[979, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[980, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[981, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[982, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[983, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[984, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[985, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[986, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[987, "polars.Series.sum"]], "tail() (polars.series method)": [[988, "polars.Series.tail"]], "take() (polars.series method)": [[989, "polars.Series.take"]], "take_every() (polars.series method)": [[990, "polars.Series.take_every"]], "tan() (polars.series method)": [[991, "polars.Series.tan"]], "tanh() (polars.series method)": [[992, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[993, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[994, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[995, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[996, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[997, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[998, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[999, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1000, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1001, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1002, "polars.Series.top_k"]], "unique() (polars.series method)": [[1003, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1004, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1005, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1006, "polars.Series.value_counts"]], "var() (polars.series method)": [[1007, "polars.Series.var"]], "view() (polars.series method)": [[1008, "polars.Series.view"]], "zip_with() (polars.series method)": [[1009, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1025, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1025, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1025, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1025, "polars.SQLContext.__init__"]]}})