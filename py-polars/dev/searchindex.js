Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.concat", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.arg_where", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.date_range", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.time_range", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 89, 115, 130, 131, 233, 251, 265, 618, 726, 1026], "refer": [0, 31, 99, 100, 103, 136, 251, 342, 345, 433, 466, 506, 525, 526, 527, 530, 618, 808, 811, 917, 981, 982, 983, 986, 1026], "input": [0, 65, 91, 99, 100, 103, 131, 132, 143, 154, 182, 197, 204, 218, 228, 231, 251, 258, 265, 357, 377, 427, 442, 458, 496, 553, 554, 555, 556, 559, 562, 563, 564, 565, 571, 577, 578, 586, 588, 589, 592, 600, 603, 604, 618, 629, 632, 642, 649, 675, 683, 688, 694, 698, 716, 726, 839, 895, 896, 898, 1026], "output": [0, 26, 28, 31, 32, 33, 34, 103, 131, 155, 156, 167, 177, 184, 193, 197, 224, 228, 251, 260, 265, 431, 432, 441, 475, 477, 479, 481, 483, 489, 550, 556, 566, 573, 588, 607, 618, 629, 650, 651, 660, 664, 665, 675, 694, 697, 700, 716, 726, 1014, 1026], "seri": [0, 1, 2, 23, 57, 66, 67, 68, 69, 72, 88, 90, 93, 95, 118, 122, 131, 139, 147, 149, 151, 152, 156, 157, 160, 161, 163, 165, 173, 174, 178, 189, 190, 206, 210, 213, 216, 217, 232, 251, 264, 265, 267, 268, 269, 270, 271, 272, 275, 276, 283, 291, 292, 296, 297, 305, 311, 313, 317, 321, 325, 327, 329, 334, 338, 339, 341, 346, 349, 359, 360, 366, 375, 377, 379, 380, 381, 382, 383, 385, 386, 387, 397, 398, 399, 405, 408, 410, 417, 418, 421, 422, 423, 429, 431, 461, 465, 466, 467, 468, 469, 470, 472, 478, 484, 485, 488, 491, 492, 499, 514, 519, 525, 526, 527, 530, 534, 540, 541, 542, 543, 549, 554, 555, 556, 557, 558, 560, 561, 567, 569, 570, 571, 573, 578, 579, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 602, 603, 604, 605, 607, 608, 610, 618, 629, 646, 651, 699, 716, 1018, 1020, 1022, 1025, 1027, 1030, 1031, 1032, 1034], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 112, 113, 114, 117, 119, 120, 128, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 577, 578, 579, 580, 581, 583, 586, 588, 589, 590, 591, 592, 593, 596, 600, 601, 602, 603, 604, 605, 607, 608, 609, 618, 629, 636, 638, 642, 643, 647, 650, 655, 656, 657, 658, 660, 664, 665, 669, 673, 680, 681, 682, 683, 689, 690, 691, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 725, 726, 740, 741, 750, 765, 766, 804, 835, 863, 864, 872, 915, 965, 977, 978, 994, 1003, 1004, 1014, 1026, 1033, 1034], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 71, 72, 110, 111, 112, 113, 114, 115, 117, 122, 171, 183, 251, 363, 423, 607, 618, 629, 715, 719, 1033, 1034], "express": [0, 71, 119, 122, 124, 131, 132, 143, 145, 147, 154, 180, 184, 192, 197, 204, 218, 228, 231, 233, 251, 258, 260, 261, 262, 264, 265, 276, 289, 293, 294, 295, 298, 304, 307, 310, 312, 318, 331, 332, 335, 342, 352, 353, 357, 360, 362, 363, 367, 369, 370, 371, 375, 377, 381, 384, 389, 392, 393, 401, 404, 423, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 444, 446, 448, 450, 454, 455, 457, 458, 460, 461, 462, 463, 469, 483, 484, 485, 487, 489, 494, 496, 500, 501, 506, 507, 508, 509, 515, 516, 536, 537, 540, 546, 547, 549, 552, 553, 554, 555, 558, 559, 560, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 585, 586, 587, 588, 589, 592, 594, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 609, 610, 617, 629, 632, 636, 641, 642, 643, 646, 649, 669, 675, 678, 679, 680, 681, 683, 688, 694, 695, 698, 700, 716, 719, 726, 754, 755, 756, 764, 774, 801, 825, 839, 869, 872, 935, 942, 956, 957, 962, 963, 964, 965, 971, 972, 1026], "selector": [0, 604, 629], "extend": [0, 91, 251, 360, 618, 629, 725, 825, 1026], "function": [0, 31, 65, 66, 67, 68, 69, 89, 95, 99, 100, 103, 110, 120, 131, 136, 142, 149, 176, 183, 184, 215, 219, 222, 223, 233, 251, 261, 265, 304, 339, 354, 355, 356, 423, 431, 432, 458, 460, 472, 473, 474, 475, 476, 477, 479, 480, 481, 493, 544, 554, 555, 556, 569, 570, 571, 578, 579, 581, 588, 589, 592, 596, 604, 618, 629, 660, 664, 668, 691, 700, 716, 726, 764, 805, 819, 820, 821, 822, 835, 891, 915, 923, 937, 938, 944, 949, 1008, 1026, 1034], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 72, 73, 78, 79, 83, 85, 88, 89, 90, 91, 92, 93, 94, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 117, 118, 120, 121, 122, 124, 130, 131, 134, 144, 153, 154, 155, 156, 167, 168, 169, 171, 182, 183, 187, 192, 193, 194, 202, 209, 214, 215, 228, 230, 249, 251, 262, 265, 278, 279, 280, 281, 285, 290, 311, 340, 349, 352, 353, 370, 371, 376, 383, 385, 392, 425, 430, 454, 455, 457, 458, 466, 482, 483, 493, 506, 507, 525, 526, 527, 530, 544, 546, 547, 553, 558, 563, 585, 586, 587, 594, 597, 610, 618, 629, 634, 635, 643, 649, 650, 651, 668, 680, 681, 694, 716, 725, 726, 740, 741, 748, 753, 757, 765, 770, 773, 815, 835, 893, 915, 917, 933, 934, 944, 949, 981, 982, 983, 986, 1006, 1007, 1008, 1009, 1011, 1016, 1025, 1026, 1033], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 71, 78, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 110, 111, 116, 117, 118, 121, 122, 131, 149, 153, 155, 156, 157, 168, 169, 209, 215, 217, 220, 251, 265, 290, 291, 293, 294, 295, 313, 317, 321, 325, 327, 329, 334, 338, 341, 357, 372, 379, 381, 382, 410, 423, 433, 469, 520, 521, 522, 525, 544, 556, 558, 563, 572, 573, 574, 575, 577, 578, 585, 586, 587, 594, 597, 606, 607, 610, 618, 629, 636, 641, 643, 650, 651, 655, 669, 679, 680, 681, 689, 716, 748, 750, 754, 755, 756, 775, 779, 783, 790, 792, 795, 800, 804, 807, 833, 878, 891, 944, 976, 977, 978, 981, 1006, 1007, 1009, 1017, 1026, 1033], "config": [0, 65, 197, 228, 251, 575, 629, 675, 694, 716], "except": [0, 158, 170, 172, 207, 251, 577, 629, 656, 716, 719, 834, 861, 996, 1007, 1016, 1026], "test": [0, 101, 103, 629, 652, 659, 716], "util": [0, 95, 581, 629, 643, 716], "sql": [0, 29, 50, 54, 101, 169, 251, 601, 629], "These": [1, 31, 128, 251, 346, 617, 805, 812], "allow": [1, 30, 31, 56, 78, 89, 110, 112, 113, 114, 115, 122, 124, 130, 167, 170, 171, 192, 193, 195, 214, 215, 220, 230, 251, 265, 335, 342, 345, 431, 468, 483, 525, 526, 527, 618, 655, 656, 660, 664, 680, 681, 689, 695, 716, 719, 726, 801, 808, 811, 919, 934, 936, 981, 982, 983, 1008, 1026, 1034], "you": [1, 13, 31, 35, 55, 65, 72, 88, 90, 91, 92, 94, 99, 100, 101, 103, 104, 108, 110, 117, 128, 131, 140, 144, 155, 156, 167, 180, 192, 193, 194, 211, 214, 219, 233, 251, 265, 293, 294, 295, 331, 332, 338, 342, 345, 363, 377, 404, 423, 431, 433, 468, 473, 474, 475, 476, 477, 479, 480, 481, 510, 513, 525, 527, 558, 569, 579, 594, 597, 610, 618, 636, 639, 650, 651, 652, 656, 659, 679, 681, 716, 719, 725, 726, 754, 755, 756, 797, 798, 804, 808, 811, 839, 872, 919, 966, 969, 981, 983, 1007, 1016, 1026, 1034], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 123, 125, 1033], "custom": [1, 31, 66, 67, 68, 69, 123, 124, 125, 131, 233, 251, 265, 342, 345, 423, 431, 472, 556, 588, 618, 660, 700, 716, 726, 808, 811, 891, 923, 1026, 1034], "dedic": [1, 89, 167, 193, 251], "namespac": [1, 250, 617, 629, 715], "underli": [1, 74, 81, 88, 90, 91, 92, 94, 108, 119, 122, 124, 144, 167, 168, 193, 209, 251, 284, 311, 312, 316, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 338, 340, 347, 348, 349, 350, 468, 482, 500, 502, 618, 716, 719, 725, 743, 773, 774, 778, 782, 784, 785, 789, 791, 794, 796, 799, 802, 803, 804, 806, 813, 814, 815, 816, 919, 933, 944, 956, 958, 1002, 1007, 1026], "polar": [1, 251, 617, 618, 623, 629, 716, 719, 1026, 1033], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 93, 119, 120, 194, 215, 251, 618, 623, 629, 716, 1006, 1007, 1026, 1033], "without": [1, 6, 95, 102, 105, 109, 111, 115, 222, 223, 251, 265, 304, 339, 473, 474, 475, 476, 477, 479, 480, 481, 600, 618, 691, 716, 764, 770, 805, 835, 915, 1026], "requir": [1, 30, 31, 35, 65, 93, 117, 118, 136, 192, 215, 251, 281, 354, 355, 356, 425, 488, 525, 526, 527, 547, 597, 618, 681, 716, 741, 820, 821, 822, 893, 943, 981, 982, 983, 1007, 1008, 1011, 1026], "subclass": [1, 251], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 143, 145, 147, 169, 170, 180, 184, 192, 197, 228, 251, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 614, 618, 619, 620, 623, 624, 625, 626, 642, 644, 655, 656, 670, 675, 678, 694, 716, 719, 764, 774, 826, 863, 864, 869, 872, 876, 886, 889, 942, 956, 960, 979, 997, 1026], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 72, 73, 80, 87, 88, 89, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 115, 117, 118, 120, 122, 128, 130, 131, 132, 136, 140, 142, 145, 149, 154, 155, 156, 167, 169, 170, 171, 176, 177, 182, 184, 192, 193, 194, 197, 198, 204, 210, 215, 218, 223, 224, 228, 231, 251, 261, 300, 302, 303, 308, 309, 339, 346, 351, 353, 354, 355, 356, 377, 379, 381, 382, 383, 385, 386, 387, 390, 395, 423, 433, 455, 458, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 490, 493, 495, 496, 508, 510, 513, 514, 525, 527, 538, 554, 555, 558, 559, 562, 564, 565, 566, 571, 573, 589, 592, 600, 603, 604, 609, 611, 612, 614, 617, 618, 619, 620, 623, 624, 625, 626, 629, 632, 639, 644, 649, 650, 651, 652, 655, 656, 659, 660, 664, 665, 669, 672, 675, 676, 680, 681, 683, 688, 691, 694, 695, 698, 716, 719, 723, 725, 762, 763, 805, 812, 818, 819, 820, 821, 822, 832, 839, 843, 846, 847, 849, 850, 851, 852, 859, 863, 891, 917, 921, 923, 929, 946, 949, 964, 966, 969, 970, 981, 983, 995, 1007, 1008, 1016, 1018, 1020, 1022, 1026, 1027, 1030, 1031, 1032, 1034], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 71, 88, 91, 93, 94, 99, 100, 102, 103, 104, 108, 110, 112, 113, 119, 120, 124, 137, 140, 146, 158, 163, 165, 167, 168, 171, 172, 176, 179, 180, 187, 192, 193, 194, 203, 207, 212, 214, 220, 222, 224, 251, 262, 263, 264, 282, 298, 304, 309, 310, 357, 362, 368, 372, 374, 376, 379, 382, 386, 387, 389, 393, 404, 410, 420, 423, 431, 432, 449, 456, 462, 466, 471, 488, 494, 496, 501, 507, 508, 509, 512, 515, 516, 518, 524, 537, 550, 563, 571, 573, 577, 579, 584, 596, 603, 604, 609, 618, 623, 629, 636, 639, 641, 643, 645, 660, 664, 669, 679, 682, 689, 695, 716, 719, 764, 766, 770, 772, 834, 841, 856, 861, 872, 878, 888, 891, 917, 950, 957, 963, 964, 965, 968, 971, 972, 974, 980, 996, 1026, 1033, 1034], "support": [1, 30, 31, 35, 72, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 111, 119, 124, 128, 130, 167, 168, 169, 193, 194, 203, 204, 211, 215, 251, 418, 458, 494, 496, 519, 563, 618, 623, 655, 682, 683, 716, 719, 886, 950, 975, 1008, 1026, 1033], "target": [1, 30, 31, 70, 251, 506, 525, 526, 527, 573, 962, 981, 982, 983], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 71, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 124, 126, 128, 130, 131, 136, 140, 141, 142, 144, 149, 154, 155, 156, 157, 161, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 186, 187, 192, 193, 194, 195, 197, 201, 203, 205, 206, 209, 211, 214, 215, 219, 220, 222, 223, 224, 225, 226, 228, 229, 233, 234, 250, 251, 261, 264, 265, 266, 275, 281, 288, 289, 291, 298, 304, 310, 311, 323, 331, 332, 335, 338, 339, 342, 345, 349, 353, 359, 375, 376, 377, 381, 393, 403, 404, 405, 409, 410, 419, 423, 424, 425, 428, 429, 431, 437, 438, 439, 440, 441, 442, 452, 453, 455, 458, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 485, 487, 488, 489, 494, 495, 496, 506, 511, 512, 517, 518, 524, 525, 527, 528, 533, 545, 547, 548, 549, 550, 554, 555, 557, 558, 564, 567, 569, 571, 573, 578, 579, 581, 589, 592, 597, 600, 604, 607, 618, 629, 630, 633, 636, 639, 641, 643, 649, 650, 651, 653, 655, 656, 660, 664, 665, 669, 672, 675, 678, 679, 680, 681, 682, 689, 691, 694, 695, 696, 697, 700, 701, 715, 716, 719, 725, 726, 735, 741, 747, 750, 764, 770, 772, 773, 774, 785, 797, 798, 801, 804, 805, 808, 811, 815, 819, 824, 831, 832, 835, 840, 845, 846, 848, 853, 855, 857, 858, 860, 871, 872, 873, 877, 878, 887, 892, 893, 897, 899, 900, 901, 902, 904, 905, 907, 908, 910, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 927, 930, 931, 932, 934, 937, 938, 939, 942, 943, 944, 945, 950, 951, 953, 962, 967, 968, 973, 974, 980, 981, 983, 984, 989, 990, 994, 995, 1002, 1004, 1006, 1007, 1008, 1010, 1011, 1013, 1015, 1016, 1026, 1033, 1034], "featur": [1, 35, 39, 56, 70, 251], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 75, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 101, 102, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 124, 126, 130, 131, 140, 142, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 174, 176, 177, 180, 182, 183, 184, 192, 193, 194, 195, 203, 204, 205, 206, 207, 209, 214, 215, 219, 220, 222, 223, 224, 225, 233, 234, 250, 251, 258, 261, 263, 264, 265, 266, 276, 289, 298, 304, 310, 312, 322, 335, 339, 342, 346, 354, 355, 356, 359, 372, 375, 377, 390, 396, 404, 407, 418, 422, 423, 428, 431, 433, 437, 440, 442, 458, 466, 468, 470, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484, 485, 489, 490, 493, 494, 495, 496, 498, 500, 501, 506, 507, 509, 511, 512, 514, 515, 517, 518, 519, 522, 524, 525, 526, 527, 530, 533, 550, 551, 554, 555, 557, 558, 560, 563, 564, 566, 567, 569, 570, 571, 573, 579, 587, 589, 592, 597, 598, 599, 600, 602, 604, 607, 608, 609, 618, 636, 639, 641, 643, 649, 650, 651, 654, 655, 656, 658, 660, 664, 665, 669, 679, 680, 681, 682, 683, 684, 689, 691, 692, 697, 700, 701, 716, 719, 724, 725, 726, 764, 772, 774, 784, 801, 805, 808, 812, 819, 820, 821, 822, 824, 832, 833, 834, 835, 838, 840, 842, 848, 853, 854, 855, 857, 858, 859, 861, 864, 872, 875, 886, 890, 891, 915, 917, 919, 921, 930, 932, 934, 935, 936, 937, 938, 939, 945, 946, 949, 950, 953, 956, 957, 962, 963, 965, 967, 968, 970, 971, 973, 974, 975, 978, 980, 981, 982, 983, 986, 989, 996, 1002, 1007, 1008, 1014, 1015, 1016, 1026, 1033, 1034], "primarili": 1, "intend": [1, 573], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 38, 50, 51, 52, 53, 55, 56, 65, 72, 89, 91, 92, 94, 96, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 119, 120, 121, 122, 123, 124, 126, 131, 138, 140, 145, 146, 149, 154, 155, 156, 163, 165, 167, 168, 170, 174, 176, 179, 180, 183, 184, 192, 193, 194, 195, 197, 204, 205, 206, 212, 213, 214, 215, 219, 220, 222, 223, 224, 225, 228, 231, 233, 251, 259, 265, 266, 276, 284, 285, 289, 291, 304, 308, 309, 338, 342, 345, 349, 351, 354, 355, 356, 362, 363, 376, 377, 390, 404, 423, 431, 433, 436, 458, 466, 468, 470, 473, 474, 475, 476, 477, 479, 480, 481, 483, 485, 488, 489, 493, 495, 496, 498, 500, 502, 503, 504, 506, 507, 508, 510, 511, 515, 517, 519, 521, 523, 525, 526, 527, 530, 551, 554, 555, 556, 557, 558, 563, 565, 566, 569, 571, 573, 579, 581, 587, 589, 592, 594, 597, 598, 599, 600, 602, 603, 604, 607, 608, 610, 617, 618, 628, 629, 636, 638, 639, 644, 645, 649, 650, 651, 652, 656, 658, 659, 664, 675, 681, 683, 684, 689, 691, 692, 694, 698, 700, 716, 719, 726, 743, 744, 750, 764, 765, 804, 808, 811, 815, 818, 820, 821, 822, 826, 827, 832, 835, 839, 859, 872, 891, 898, 915, 917, 919, 921, 934, 937, 938, 939, 943, 945, 949, 953, 956, 958, 959, 962, 963, 964, 966, 967, 971, 973, 975, 977, 981, 982, 983, 986, 997, 1003, 1005, 1006, 1007, 1008, 1015, 1016, 1026, 1033, 1034], "librari": [1, 74, 81, 431, 618, 1034], "author": 1, "domain": [1, 507, 963], "specif": [1, 26, 30, 31, 88, 90, 92, 94, 99, 101, 102, 111, 121, 122, 167, 251, 342, 345, 472, 525, 526, 527, 530, 618, 716, 719, 808, 811, 923, 981, 982, 983, 986, 1026, 1034], "capabl": [1, 31, 251], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 91, 99, 100, 101, 102, 103, 110, 111, 117, 123, 125, 132, 140, 144, 155, 156, 170, 214, 218, 220, 224, 251, 261, 335, 339, 342, 346, 360, 377, 379, 382, 383, 385, 386, 387, 423, 442, 473, 474, 475, 476, 477, 479, 480, 481, 514, 609, 618, 632, 639, 641, 650, 651, 656, 680, 681, 688, 689, 697, 716, 725, 801, 805, 808, 812, 825, 839, 843, 847, 849, 850, 851, 852, 891, 937, 970, 1026, 1034], "mai": [1, 30, 39, 72, 88, 90, 91, 92, 94, 99, 102, 104, 111, 112, 115, 131, 142, 144, 155, 156, 170, 200, 201, 215, 222, 223, 224, 251, 265, 304, 310, 311, 323, 335, 339, 346, 417, 422, 423, 431, 441, 473, 474, 475, 476, 477, 479, 480, 481, 486, 487, 525, 527, 569, 570, 573, 579, 596, 618, 650, 651, 656, 660, 677, 678, 681, 691, 696, 700, 716, 725, 726, 764, 772, 773, 785, 801, 805, 812, 819, 835, 885, 890, 915, 941, 942, 981, 983, 1026, 1034], "exist": [1, 29, 30, 31, 65, 102, 111, 122, 228, 251, 283, 286, 287, 312, 694, 716, 774], "belong": [1, 155, 251, 650, 716], "core": [1, 215, 251, 1034], "cannot": [1, 89, 99, 100, 103, 104, 117, 126, 131, 194, 195, 233, 251, 284, 433, 483, 502, 521, 535, 618, 679, 716, 726, 743, 934, 958, 977, 1026], "overrid": [1, 31, 88, 90, 91, 92, 93, 94, 99, 119, 120, 124, 126, 251, 433, 618, 716, 898, 1026], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 73, 88, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 122, 123, 124, 125, 128, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 151, 153, 154, 155, 156, 158, 160, 163, 165, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 198, 200, 201, 203, 204, 205, 206, 207, 210, 211, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 265, 283, 285, 286, 287, 307, 313, 335, 338, 339, 342, 345, 346, 357, 359, 363, 365, 369, 375, 377, 384, 399, 400, 407, 408, 410, 418, 421, 423, 432, 433, 441, 443, 444, 446, 458, 460, 462, 469, 471, 473, 474, 475, 476, 477, 479, 480, 481, 487, 488, 495, 496, 534, 535, 537, 540, 552, 553, 554, 556, 557, 561, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 588, 590, 591, 593, 595, 596, 597, 598, 599, 601, 602, 603, 605, 606, 607, 608, 618, 624, 632, 636, 637, 638, 639, 641, 642, 643, 646, 648, 649, 650, 651, 653, 655, 656, 664, 665, 669, 671, 672, 673, 676, 678, 679, 680, 681, 682, 683, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 722, 748, 765, 766, 775, 801, 804, 805, 808, 811, 812, 824, 827, 868, 869, 878, 891, 898, 907, 908, 915, 920, 937, 938, 990, 992, 1003, 1004, 1005, 1026, 1030, 1033, 1034], "dt": [1, 65, 156, 251, 573, 575, 626, 651, 716, 719, 1032], "attempt": [1, 214, 251, 573], "do": [1, 31, 65, 71, 72, 110, 144, 155, 156, 170, 184, 209, 219, 222, 251, 304, 404, 458, 512, 518, 524, 594, 597, 610, 618, 636, 641, 650, 651, 656, 660, 669, 679, 680, 681, 716, 719, 725, 764, 872, 968, 974, 980, 1007, 1016, 1026], "so": [1, 56, 101, 110, 126, 153, 155, 156, 184, 251, 276, 289, 377, 407, 423, 512, 518, 524, 618, 650, 651, 716, 875, 968, 974, 980], "rais": [1, 14, 18, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 117, 118, 184, 192, 251, 284, 338, 422, 441, 500, 502, 514, 525, 526, 527, 530, 587, 743, 804, 890, 956, 958, 970, 981, 982, 983, 986, 1007, 1016, 1026], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 71, 74, 78, 79, 81, 88, 99, 100, 101, 102, 103, 105, 108, 110, 112, 120, 122, 124, 131, 133, 134, 142, 145, 147, 149, 155, 156, 167, 168, 170, 180, 184, 190, 192, 209, 214, 222, 228, 233, 251, 260, 261, 265, 284, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 312, 338, 342, 349, 360, 362, 363, 369, 389, 401, 404, 407, 422, 423, 431, 432, 442, 463, 472, 473, 474, 475, 476, 477, 479, 480, 481, 500, 502, 507, 525, 526, 527, 530, 540, 546, 554, 555, 558, 560, 563, 571, 573, 576, 581, 585, 586, 587, 589, 592, 594, 596, 597, 600, 603, 604, 607, 609, 610, 618, 629, 634, 635, 636, 641, 643, 646, 650, 651, 656, 660, 669, 679, 694, 695, 700, 716, 719, 726, 743, 748, 753, 754, 755, 756, 757, 760, 761, 762, 763, 764, 774, 804, 808, 815, 819, 825, 848, 869, 872, 875, 890, 923, 924, 925, 926, 927, 928, 930, 931, 932, 937, 938, 956, 958, 963, 981, 982, 983, 986, 1007, 1016, 1026, 1033], "attributeerror": 1, "howev": [1, 91, 142, 214, 251, 573, 819, 1026], "can": [1, 13, 31, 38, 55, 65, 79, 91, 99, 100, 103, 104, 108, 110, 112, 114, 115, 120, 121, 122, 124, 126, 128, 131, 132, 133, 141, 149, 155, 156, 163, 165, 180, 184, 194, 197, 204, 214, 218, 219, 222, 228, 233, 251, 265, 289, 300, 303, 304, 331, 332, 335, 338, 346, 360, 376, 377, 404, 423, 441, 449, 458, 468, 473, 474, 475, 476, 477, 479, 480, 481, 483, 485, 488, 489, 490, 493, 496, 509, 512, 518, 524, 525, 527, 550, 558, 559, 563, 573, 579, 581, 607, 609, 617, 618, 628, 632, 636, 641, 650, 651, 675, 683, 688, 694, 696, 716, 719, 726, 764, 797, 798, 801, 804, 805, 812, 825, 839, 872, 891, 903, 915, 919, 937, 938, 939, 943, 946, 949, 965, 968, 974, 980, 981, 983, 1026, 1033], "other": [1, 18, 31, 55, 99, 100, 103, 110, 117, 118, 140, 144, 150, 169, 170, 176, 177, 192, 194, 197, 223, 228, 249, 251, 258, 262, 264, 276, 293, 294, 295, 307, 352, 353, 367, 370, 371, 377, 381, 392, 399, 403, 409, 424, 430, 433, 437, 440, 448, 450, 454, 455, 457, 496, 536, 544, 546, 553, 554, 555, 562, 564, 565, 571, 573, 589, 592, 600, 603, 604, 618, 629, 639, 655, 656, 664, 665, 675, 691, 694, 695, 716, 719, 725, 754, 755, 756, 768, 846, 867, 871, 877, 892, 936, 1009, 1017, 1025, 1026], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 70, 72, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 122, 124, 128, 131, 140, 155, 156, 167, 169, 170, 174, 193, 194, 206, 211, 213, 214, 224, 251, 259, 265, 276, 289, 292, 293, 294, 295, 335, 357, 366, 458, 468, 473, 474, 475, 476, 477, 479, 480, 481, 548, 573, 618, 636, 639, 650, 651, 652, 655, 656, 659, 716, 751, 754, 755, 756, 765, 801, 830, 848, 915, 919, 1002, 1005, 1026, 1033, 1034], "gener": [1, 101, 119, 120, 121, 122, 124, 136, 184, 195, 212, 214, 219, 251, 483, 489, 558, 573, 585, 586, 597, 607, 618, 716, 934, 945, 1003, 1026, 1034], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 124, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 863, 864, 870, 871, 872, 873, 876, 877, 878, 880, 885, 886, 887, 889, 891, 892, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 916, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 945, 946, 947, 948, 950, 951, 952, 953, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1033, 1034], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 120, 121, 122, 124, 128, 183, 219, 251, 258, 460, 507, 553, 588, 618, 668, 716, 719, 963, 1034], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 119, 1033], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 71, 133, 134, 137, 144, 158, 160, 161, 172, 173, 174, 175, 176, 178, 181, 182, 184, 186, 187, 189, 190, 195, 200, 202, 203, 205, 206, 207, 212, 219, 221, 224, 225, 226, 229, 230, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 282, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 618, 632, 633, 635, 636, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 716, 725, 726, 748, 757, 828, 836, 897, 898, 909, 912, 913, 918, 937, 938, 939, 951, 1013, 1017, 1026], "_expr": [1, 67], "hello": [1, 18, 51, 54, 512, 518, 524, 554, 878, 968, 974, 980], "return": [1, 9, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 80, 82, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 121, 127, 131, 132, 133, 136, 139, 140, 141, 142, 143, 145, 146, 149, 153, 154, 155, 156, 158, 160, 166, 167, 168, 169, 171, 172, 179, 180, 182, 183, 184, 192, 193, 194, 195, 207, 208, 214, 215, 218, 219, 220, 224, 228, 230, 233, 236, 240, 245, 251, 261, 263, 267, 268, 269, 270, 271, 272, 275, 276, 283, 285, 286, 287, 288, 296, 297, 305, 310, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 344, 346, 347, 348, 350, 359, 373, 377, 379, 380, 381, 382, 383, 385, 386, 387, 394, 397, 398, 400, 405, 407, 408, 410, 421, 422, 429, 433, 442, 444, 449, 460, 465, 469, 470, 483, 484, 490, 491, 492, 499, 501, 503, 505, 506, 507, 509, 510, 511, 513, 514, 517, 519, 520, 521, 522, 533, 539, 540, 541, 542, 543, 545, 546, 548, 549, 550, 553, 554, 555, 556, 558, 559, 560, 563, 572, 573, 574, 575, 581, 583, 585, 586, 587, 588, 594, 597, 600, 603, 605, 606, 607, 609, 610, 618, 632, 634, 636, 639, 640, 641, 643, 650, 651, 652, 658, 659, 660, 668, 669, 679, 680, 681, 686, 687, 688, 689, 694, 697, 703, 707, 712, 716, 719, 722, 723, 724, 726, 733, 734, 736, 737, 742, 744, 747, 753, 765, 766, 772, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 812, 813, 814, 816, 819, 824, 832, 834, 835, 841, 843, 844, 846, 847, 849, 850, 851, 852, 856, 858, 861, 865, 866, 868, 873, 875, 876, 878, 889, 890, 897, 898, 903, 915, 921, 922, 934, 935, 936, 938, 946, 955, 956, 957, 959, 961, 962, 963, 965, 966, 967, 969, 970, 973, 975, 976, 977, 978, 989, 996, 998, 1010, 1012, 1013, 1017, 1026, 1033, 1034], "lit": [1, 377, 389, 569, 579, 594, 597, 609, 610, 618, 827, 1026], "alia": [1, 12, 65, 67, 69, 155, 156, 172, 221, 228, 251, 258, 262, 265, 283, 285, 286, 287, 288, 293, 294, 295, 299, 300, 301, 302, 303, 306, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 327, 329, 334, 335, 336, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 352, 353, 363, 365, 367, 370, 371, 375, 377, 380, 381, 389, 392, 393, 394, 401, 403, 404, 409, 424, 430, 432, 433, 445, 448, 450, 454, 455, 457, 459, 461, 462, 466, 468, 484, 500, 501, 504, 506, 507, 510, 513, 519, 521, 522, 523, 534, 535, 536, 537, 544, 545, 546, 552, 553, 554, 555, 556, 561, 562, 564, 565, 569, 570, 571, 573, 575, 576, 579, 580, 588, 589, 592, 596, 597, 603, 604, 607, 609, 618, 650, 651, 653, 659, 690, 694, 716, 773, 775, 781, 801, 804, 808, 810, 815, 861, 872, 898, 962, 963, 977, 978, 1026], "hi": [1, 618], "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 512, 518, 524, 531, 878, 968, 974, 980, 987], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 98, 99, 100, 101, 102, 104, 108, 110, 115, 121, 131, 166, 170, 180, 183, 192, 203, 216, 221, 224, 251, 257, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 364, 366, 368, 372, 374, 375, 376, 378, 379, 381, 382, 384, 388, 389, 390, 391, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 447, 449, 451, 452, 453, 456, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 478, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 505, 506, 507, 508, 509, 511, 512, 514, 517, 518, 520, 521, 522, 524, 525, 528, 529, 531, 532, 534, 535, 537, 538, 541, 542, 543, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 566, 567, 568, 569, 570, 571, 573, 575, 577, 578, 579, 580, 581, 583, 589, 590, 591, 592, 593, 596, 597, 601, 602, 603, 604, 605, 608, 618, 637, 653, 656, 668, 682, 690, 695, 697, 716, 719, 740, 741, 804, 863, 864, 872, 937, 938, 950, 965, 981, 997, 1026, 1033], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 47, 50, 51, 52, 54, 56, 57, 65, 66, 67, 68, 69, 72, 73, 85, 88, 90, 91, 92, 93, 94, 95, 110, 115, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 169, 170, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 195, 197, 200, 201, 203, 204, 205, 206, 207, 208, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 618, 632, 634, 636, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 675, 677, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 725, 726, 727, 728, 729, 730, 731, 732, 735, 736, 737, 738, 739, 740, 741, 747, 748, 750, 751, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 841, 843, 846, 847, 849, 850, 851, 852, 856, 858, 863, 864, 870, 871, 872, 873, 876, 877, 878, 880, 885, 886, 887, 889, 891, 892, 897, 898, 903, 911, 912, 913, 915, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 937, 938, 941, 945, 946, 947, 948, 950, 951, 952, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 996, 997, 998, 999, 1000, 1003, 1004, 1005, 1009, 1010, 1011, 1012, 1013, 1014, 1017, 1026, 1033], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 103, 110, 115, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 260, 261, 265, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 316, 317, 319, 320, 322, 328, 330, 336, 337, 338, 339, 340, 342, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 392, 393, 394, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 432, 433, 448, 449, 450, 454, 455, 456, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 495, 496, 497, 500, 503, 504, 506, 507, 508, 510, 513, 515, 519, 520, 521, 522, 523, 526, 530, 534, 535, 536, 537, 539, 540, 541, 545, 548, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 576, 577, 578, 579, 580, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 596, 597, 600, 602, 603, 604, 605, 607, 608, 609, 610, 618, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 722, 725, 726, 727, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 748, 750, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 774, 775, 778, 779, 781, 782, 784, 786, 787, 788, 790, 792, 793, 794, 796, 800, 802, 804, 805, 806, 808, 810, 811, 812, 814, 815, 819, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 859, 860, 870, 871, 872, 873, 876, 877, 880, 885, 886, 887, 889, 891, 892, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 945, 947, 948, 949, 950, 951, 953, 959, 960, 962, 963, 964, 966, 969, 971, 975, 979, 982, 986, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1026, 1033, 1034], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 104, 110, 111, 115, 116, 117, 118, 119, 122, 124, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 511, 512, 514, 515, 516, 517, 518, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 618, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 748, 750, 751, 752, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 820, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 858, 860, 863, 864, 870, 871, 872, 873, 875, 876, 877, 880, 885, 886, 887, 889, 891, 892, 897, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 962, 964, 965, 971, 977, 978, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1033, 1034], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 101, 110, 115, 116, 117, 118, 121, 122, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 262, 263, 264, 265, 266, 273, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 306, 307, 310, 312, 313, 317, 318, 320, 321, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 448, 449, 450, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 493, 494, 495, 496, 497, 499, 501, 504, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 518, 519, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 534, 535, 536, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 596, 600, 601, 602, 603, 604, 605, 607, 608, 609, 618, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 722, 725, 726, 728, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 750, 751, 752, 753, 757, 758, 761, 762, 763, 764, 765, 766, 767, 768, 772, 774, 776, 777, 780, 782, 787, 788, 794, 796, 797, 798, 803, 804, 805, 806, 809, 812, 814, 816, 818, 819, 820, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 860, 870, 871, 872, 873, 876, 877, 878, 880, 885, 886, 887, 889, 891, 892, 894, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 945, 947, 949, 950, 951, 952, 953, 955, 957, 962, 963, 964, 965, 968, 969, 970, 971, 972, 974, 977, 978, 980, 981, 983, 984, 985, 987, 988, 994, 995, 996, 997, 998, 999, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1017, 1026, 1033, 1034], "column_0": [1, 131, 219, 251], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 168, 251, 521, 522, 977, 978], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 66, 67, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 110, 120, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 528, 529, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 575, 576, 577, 578, 579, 580, 581, 583, 586, 588, 589, 590, 591, 592, 593, 596, 600, 601, 602, 603, 604, 605, 608, 609, 618, 650, 651, 690, 691, 697, 700, 703, 712, 716, 719, 740, 741, 750, 804, 863, 864, 872, 965, 972, 977, 978, 1004, 1026, 1034], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 71, 88, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 102, 104, 108, 110, 111, 120, 121, 122, 124, 135, 138, 141, 142, 143, 147, 152, 154, 155, 160, 167, 179, 182, 192, 193, 194, 197, 204, 210, 211, 219, 220, 221, 222, 228, 231, 232, 251, 259, 281, 359, 365, 374, 431, 442, 443, 458, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 495, 496, 507, 520, 534, 535, 540, 544, 559, 563, 564, 571, 576, 584, 586, 587, 603, 604, 607, 618, 637, 638, 640, 642, 649, 650, 664, 675, 683, 689, 690, 694, 695, 698, 699, 716, 719, 741, 752, 765, 819, 824, 828, 831, 835, 836, 846, 915, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 935, 963, 976, 997, 1006, 1009, 1026, 1034], "with_row_count": [1, 251, 433, 473, 474, 476, 479, 480, 481, 618, 716, 938, 1026], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 72, 77, 88, 90, 91, 92, 93, 94, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 118, 119, 120, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 143, 148, 151, 153, 154, 166, 167, 169, 170, 176, 177, 182, 184, 188, 192, 193, 194, 196, 197, 204, 210, 212, 214, 217, 218, 219, 220, 221, 222, 223, 228, 229, 230, 231, 251, 260, 265, 283, 285, 286, 287, 357, 377, 389, 423, 432, 441, 443, 458, 462, 496, 507, 534, 535, 537, 554, 555, 557, 559, 562, 563, 564, 565, 566, 568, 571, 573, 577, 583, 584, 589, 592, 595, 597, 598, 599, 600, 603, 604, 605, 607, 618, 632, 637, 638, 639, 642, 649, 655, 656, 664, 665, 672, 674, 675, 683, 688, 689, 690, 691, 694, 696, 697, 698, 716, 719, 722, 753, 765, 891, 915, 920, 962, 963, 971, 990, 992, 1003, 1004, 1008, 1026, 1033, 1034], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 97, 99, 100, 110, 131, 133, 144, 155, 158, 167, 168, 172, 193, 194, 195, 205, 207, 208, 211, 213, 225, 236, 245, 251, 288, 304, 306, 311, 312, 319, 344, 349, 360, 373, 394, 402, 403, 408, 421, 423, 459, 460, 469, 479, 481, 483, 493, 498, 515, 518, 521, 522, 524, 527, 539, 541, 545, 546, 551, 553, 566, 573, 581, 583, 594, 597, 598, 599, 602, 605, 608, 610, 618, 634, 636, 650, 652, 659, 684, 686, 687, 692, 703, 712, 716, 719, 725, 747, 753, 764, 767, 773, 774, 781, 810, 815, 825, 834, 861, 870, 871, 876, 889, 891, 911, 930, 932, 934, 949, 953, 971, 977, 978, 983, 996, 998, 1005, 1010, 1015, 1026, 1033, 1034], "filter": [1, 66, 102, 110, 111, 115, 140, 163, 164, 165, 233, 251, 504, 523, 552, 579, 618, 639, 643, 653, 700, 716, 719, 937, 1026], "col": [1, 12, 28, 31, 65, 66, 67, 68, 92, 94, 110, 120, 122, 131, 143, 147, 154, 155, 156, 164, 166, 171, 180, 183, 192, 197, 204, 221, 228, 231, 251, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 375, 376, 377, 378, 380, 381, 383, 384, 385, 388, 389, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 424, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 447, 448, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 528, 529, 531, 532, 533, 534, 535, 536, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 560, 562, 564, 565, 569, 570, 571, 575, 578, 579, 580, 581, 582, 589, 592, 595, 596, 604, 609, 618, 635, 642, 646, 649, 650, 651, 653, 658, 668, 675, 683, 690, 694, 695, 698, 716, 719, 740, 741, 750, 801, 804, 863, 864, 872, 921, 937, 938, 965, 981, 1026, 1034], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 47, 50, 55, 65, 66, 67, 69, 99, 100, 101, 103, 104, 108, 110, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 131, 133, 134, 136, 137, 138, 141, 145, 146, 149, 150, 152, 153, 154, 155, 157, 161, 166, 167, 168, 169, 171, 173, 174, 175, 178, 179, 180, 181, 184, 185, 186, 190, 193, 194, 195, 196, 197, 201, 203, 204, 205, 206, 212, 213, 214, 215, 216, 219, 222, 224, 225, 228, 229, 231, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 257, 259, 262, 267, 268, 269, 270, 271, 272, 275, 276, 277, 290, 292, 294, 295, 296, 297, 299, 304, 305, 308, 309, 320, 324, 325, 327, 328, 334, 340, 341, 352, 353, 354, 355, 356, 358, 360, 361, 362, 366, 367, 370, 371, 372, 376, 379, 382, 383, 385, 386, 387, 389, 390, 392, 397, 398, 401, 404, 407, 414, 423, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 447, 448, 450, 452, 453, 454, 455, 456, 457, 459, 460, 461, 464, 465, 466, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 488, 490, 491, 492, 493, 497, 498, 506, 507, 525, 527, 533, 536, 538, 542, 543, 544, 546, 551, 558, 559, 560, 561, 562, 564, 566, 568, 569, 573, 574, 576, 579, 585, 586, 590, 591, 594, 595, 596, 597, 606, 607, 608, 609, 610, 618, 634, 635, 638, 640, 644, 645, 649, 650, 655, 658, 663, 667, 669, 670, 674, 675, 678, 679, 681, 683, 684, 692, 694, 695, 696, 698, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 719, 727, 728, 729, 730, 731, 732, 733, 735, 737, 748, 751, 753, 758, 759, 764, 765, 766, 768, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 799, 800, 806, 807, 818, 820, 821, 822, 826, 830, 833, 835, 843, 845, 847, 849, 850, 851, 852, 858, 859, 872, 875, 891, 897, 900, 901, 911, 915, 916, 917, 923, 925, 926, 928, 929, 930, 932, 933, 934, 946, 947, 948, 952, 953, 955, 962, 963, 965, 981, 983, 989, 999, 1000, 1003, 1008, 1009, 1013, 1015, 1016, 1026, 1034], "drop": [1, 91, 131, 139, 140, 220, 228, 251, 306, 308, 309, 402, 618, 639, 689, 694, 716, 767, 769, 770, 870, 915, 1026], "aaa": [1, 31, 251, 500, 534, 535, 956], "bbb": [1, 31, 251, 534, 535, 719], "ccc": [1, 31, 251, 534, 535], "ddd": [1, 31, 251, 534, 535], "eee": [1, 31, 251, 719], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 38, 56, 65, 66, 72, 75, 77, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 113, 114, 117, 122, 130, 131, 132, 136, 138, 139, 140, 141, 143, 148, 151, 153, 154, 155, 156, 160, 161, 166, 167, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 194, 196, 197, 198, 204, 205, 206, 210, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 231, 251, 261, 263, 265, 275, 312, 316, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 340, 342, 345, 347, 348, 350, 357, 359, 363, 365, 377, 389, 399, 405, 419, 422, 423, 433, 439, 441, 443, 458, 462, 467, 469, 470, 473, 474, 475, 476, 477, 479, 480, 481, 488, 495, 496, 505, 521, 522, 525, 526, 527, 528, 530, 537, 552, 554, 555, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 632, 638, 639, 640, 642, 649, 650, 651, 655, 656, 660, 661, 662, 663, 664, 666, 667, 668, 670, 672, 674, 675, 676, 683, 684, 685, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 716, 719, 723, 724, 765, 776, 777, 778, 782, 784, 785, 789, 791, 794, 796, 799, 802, 803, 806, 808, 809, 811, 813, 814, 816, 824, 867, 873, 887, 890, 915, 921, 943, 961, 977, 978, 981, 982, 983, 984, 986, 994, 1003, 1004, 1026, 1034], "txt": [1, 12, 110], "utf8": [1, 10, 18, 56, 73, 91, 95, 99, 100, 110, 119, 121, 124, 141, 142, 143, 149, 196, 214, 251, 342, 345, 410, 433, 499, 503, 506, 507, 509, 510, 519, 520, 521, 522, 525, 526, 527, 528, 530, 563, 565, 618, 640, 642, 674, 716, 719, 808, 811, 857, 878, 955, 959, 962, 963, 965, 966, 975, 976, 977, 978, 981, 982, 983, 984, 986, 1026], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 698, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 156, 183, 251, 258, 265, 276, 285, 290, 291, 293, 294, 295, 300, 303, 306, 310, 318, 338, 342, 345, 352, 353, 361, 362, 367, 370, 371, 372, 376, 377, 380, 383, 385, 386, 387, 389, 392, 403, 404, 409, 424, 430, 432, 433, 448, 450, 454, 455, 458, 459, 460, 461, 466, 473, 474, 475, 476, 477, 479, 480, 481, 500, 504, 507, 510, 513, 515, 516, 519, 521, 522, 523, 533, 536, 544, 546, 553, 556, 558, 562, 565, 571, 576, 586, 588, 604, 607, 609, 618, 651, 668, 716, 719, 750, 804, 872], "tp": [1, 68], "cast": [1, 67, 68, 73, 88, 149, 155, 156, 183, 215, 228, 251, 264, 291, 302, 303, 311, 342, 345, 433, 457, 460, 468, 508, 509, 533, 538, 544, 565, 618, 650, 651, 668, 694, 716, 719, 750, 762, 763, 773, 808, 811, 919, 964, 965, 995, 1004, 1009, 1026], "int64": [1, 2, 31, 33, 67, 68, 95, 99, 141, 149, 155, 156, 171, 183, 196, 209, 215, 251, 278, 279, 280, 281, 302, 303, 317, 321, 325, 327, 329, 334, 341, 357, 460, 468, 508, 538, 544, 558, 563, 577, 585, 586, 587, 597, 603, 618, 635, 640, 650, 651, 653, 658, 668, 674, 697, 716, 738, 739, 740, 741, 762, 763, 779, 783, 790, 792, 795, 800, 807, 919, 936, 995, 1007, 1008, 1009, 1026], "int8": [1, 68, 149, 251, 302, 303, 538, 594, 597, 610, 618, 762, 763, 767, 898, 922, 995, 1013, 1026], "int16": [1, 68, 302, 303, 538, 618, 719, 762, 763, 898, 995, 1005, 1026], "int32": [1, 68, 88, 91, 95, 121, 122, 155, 156, 168, 251, 290, 323, 350, 544, 597, 618, 650, 651, 716, 719, 785, 816, 897, 1009, 1026], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 68, 72, 73, 88, 90, 91, 92, 93, 94, 95, 103, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 260, 264, 265, 277, 282, 283, 285, 286, 287, 290, 291, 298, 307, 308, 309, 357, 359, 361, 362, 363, 365, 368, 372, 374, 376, 377, 379, 382, 383, 384, 385, 386, 387, 389, 393, 399, 403, 404, 409, 410, 412, 424, 432, 449, 456, 458, 460, 462, 466, 471, 488, 494, 496, 505, 508, 515, 537, 548, 550, 552, 554, 555, 556, 557, 559, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 576, 577, 578, 579, 580, 583, 588, 589, 590, 591, 592, 593, 596, 598, 599, 602, 603, 604, 605, 608, 618, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 725, 750, 766, 768, 818, 819, 827, 839, 846, 857, 871, 872, 877, 892, 920, 936, 961, 964, 971, 994, 1008, 1012, 1026, 1033], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 110, 116, 117, 118, 124, 131, 132, 133, 134, 137, 140, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 174, 176, 177, 179, 180, 182, 183, 184, 185, 189, 193, 194, 199, 204, 207, 208, 209, 210, 211, 212, 217, 218, 219, 221, 222, 223, 224, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 262, 264, 265, 277, 278, 279, 280, 282, 288, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 312, 316, 321, 328, 329, 330, 336, 337, 339, 340, 341, 342, 345, 346, 347, 348, 350, 352, 353, 358, 359, 361, 362, 365, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 386, 387, 389, 392, 393, 394, 401, 402, 403, 404, 405, 408, 409, 417, 418, 421, 424, 427, 430, 432, 433, 448, 450, 454, 455, 457, 458, 460, 461, 462, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 486, 487, 490, 494, 495, 496, 497, 500, 510, 511, 513, 514, 515, 517, 519, 521, 522, 525, 534, 535, 536, 537, 539, 540, 541, 544, 545, 546, 553, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 573, 576, 578, 579, 583, 587, 588, 589, 590, 591, 592, 593, 602, 603, 604, 605, 607, 608, 609, 618, 632, 634, 635, 636, 639, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 677, 678, 679, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 725, 728, 735, 738, 739, 740, 747, 751, 752, 754, 764, 766, 768, 782, 783, 789, 791, 794, 795, 796, 797, 798, 799, 803, 805, 806, 807, 808, 811, 812, 813, 814, 826, 827, 834, 835, 838, 839, 841, 846, 849, 850, 851, 852, 856, 870, 871, 872, 873, 876, 877, 885, 886, 889, 892, 898, 904, 911, 912, 913, 915, 917, 921, 926, 928, 929, 930, 931, 932, 934, 936, 946, 950, 951, 956, 966, 967, 969, 970, 973, 975, 977, 978, 981, 994, 996, 997, 998, 1005, 1008, 1009, 1010, 1017, 1026, 1034], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 66, 68, 72, 73, 91, 93, 95, 103, 110, 120, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 153, 154, 155, 158, 160, 161, 168, 169, 171, 173, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 192, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 209, 213, 214, 215, 216, 218, 219, 222, 223, 225, 226, 228, 231, 234, 235, 236, 237, 238, 239, 241, 244, 245, 251, 258, 265, 282, 377, 389, 399, 410, 412, 458, 460, 488, 521, 525, 548, 550, 554, 555, 557, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 578, 579, 580, 583, 588, 589, 590, 591, 592, 593, 602, 604, 605, 608, 618, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 646, 649, 650, 655, 658, 664, 667, 669, 672, 673, 674, 675, 679, 682, 683, 688, 691, 694, 695, 698, 701, 702, 703, 704, 705, 706, 708, 711, 712, 716, 719, 766, 839, 857, 977, 981, 1012, 1026], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 57, 65, 66, 68, 69, 72, 88, 91, 92, 93, 94, 95, 97, 100, 116, 122, 131, 133, 134, 137, 143, 144, 145, 146, 149, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 166, 167, 170, 171, 172, 174, 176, 179, 180, 182, 184, 185, 186, 189, 194, 199, 204, 207, 208, 209, 210, 211, 214, 217, 222, 224, 227, 228, 229, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 258, 259, 262, 283, 286, 287, 288, 290, 291, 292, 293, 294, 295, 304, 305, 306, 307, 312, 313, 317, 338, 340, 341, 342, 345, 347, 353, 356, 357, 360, 362, 366, 367, 370, 371, 373, 374, 377, 380, 383, 385, 386, 387, 389, 392, 394, 401, 403, 404, 405, 408, 409, 414, 420, 421, 424, 448, 450, 455, 457, 458, 459, 460, 462, 464, 466, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 484, 490, 496, 501, 509, 510, 513, 514, 533, 536, 537, 539, 541, 545, 546, 556, 557, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 583, 587, 588, 589, 590, 591, 592, 593, 596, 602, 604, 605, 608, 618, 634, 635, 636, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 654, 656, 657, 658, 659, 662, 663, 664, 669, 677, 678, 679, 682, 683, 684, 685, 686, 687, 693, 694, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 725, 728, 732, 735, 747, 750, 752, 754, 760, 764, 765, 766, 767, 768, 774, 775, 776, 777, 778, 779, 804, 806, 807, 808, 809, 811, 813, 814, 822, 825, 834, 835, 838, 839, 871, 872, 873, 876, 877, 880, 889, 892, 897, 898, 904, 911, 912, 913, 915, 916, 917, 921, 923, 924, 925, 927, 928, 931, 934, 936, 946, 952, 957, 965, 966, 970, 996, 1010, 1013, 1017, 1026, 1034], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 57, 66, 68, 72, 88, 91, 92, 93, 94, 131, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 155, 156, 158, 160, 161, 162, 164, 166, 167, 169, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 189, 190, 192, 193, 194, 195, 196, 197, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 221, 222, 223, 224, 225, 226, 228, 229, 236, 244, 245, 251, 258, 262, 265, 282, 290, 302, 303, 307, 312, 335, 337, 340, 351, 353, 361, 362, 368, 373, 374, 376, 394, 395, 396, 403, 405, 409, 424, 455, 457, 463, 465, 466, 467, 470, 473, 474, 475, 476, 477, 479, 480, 481, 484, 496, 501, 505, 510, 513, 514, 536, 539, 541, 553, 554, 556, 569, 570, 571, 576, 579, 588, 604, 618, 636, 637, 638, 639, 640, 641, 642, 643, 646, 647, 650, 651, 652, 654, 655, 657, 659, 660, 664, 667, 669, 672, 674, 675, 677, 678, 679, 682, 683, 686, 687, 690, 691, 693, 694, 696, 697, 703, 711, 712, 716, 719, 725, 752, 758, 762, 763, 768, 801, 814, 835, 863, 864, 871, 873, 877, 892, 904, 917, 921, 926, 928, 930, 932, 936, 957, 961, 966, 970, 995, 1026, 1033, 1034], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 72, 116, 135, 136, 137, 138, 139, 141, 143, 147, 148, 150, 155, 156, 158, 160, 162, 169, 173, 174, 175, 177, 178, 181, 184, 186, 188, 190, 192, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 224, 225, 226, 251, 258, 262, 280, 303, 312, 316, 336, 338, 339, 346, 348, 350, 358, 373, 376, 394, 403, 409, 424, 433, 457, 466, 470, 480, 496, 528, 539, 541, 556, 569, 570, 573, 579, 588, 604, 618, 637, 638, 640, 642, 646, 650, 651, 652, 654, 655, 659, 665, 667, 670, 672, 674, 675, 686, 687, 691, 697, 716, 719, 732, 740, 774, 778, 785, 804, 805, 812, 814, 858, 871, 877, 892, 898, 921, 931, 984, 1026, 1034], "float32": [1, 28, 68, 149, 213, 214, 251, 587, 716, 719, 842, 897, 1026], "lazi": [1, 50, 51, 52, 53, 55, 68, 72, 110, 122, 170, 183, 251, 265, 581, 594, 597, 610, 618, 655, 656, 695, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 1033, 1034], "i16": [1, 68, 488, 618, 719, 898, 1005, 1026, 1034], "i32": [1, 68, 88, 91, 95, 121, 122, 197, 251, 290, 323, 350, 488, 514, 609, 618, 675, 716, 785, 816, 897, 970, 1026, 1034], "f32": [1, 68, 140, 213, 251, 404, 466, 488, 566, 576, 618, 639, 716, 719, 872, 897, 917, 1026], "i64": [1, 2, 15, 19, 47, 50, 52, 66, 67, 68, 69, 72, 88, 90, 91, 92, 93, 94, 95, 110, 131, 132, 133, 134, 135, 138, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 156, 158, 160, 161, 162, 163, 165, 169, 170, 173, 176, 177, 178, 182, 183, 184, 185, 188, 189, 190, 191, 195, 197, 200, 201, 203, 204, 206, 207, 208, 210, 216, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 241, 244, 245, 251, 258, 260, 264, 265, 278, 279, 280, 281, 282, 288, 291, 293, 294, 295, 300, 301, 302, 303, 306, 307, 317, 319, 321, 325, 327, 329, 334, 341, 344, 357, 359, 360, 362, 363, 364, 365, 367, 368, 373, 374, 375, 376, 377, 380, 383, 385, 386, 387, 389, 391, 394, 402, 403, 404, 405, 406, 407, 408, 409, 411, 413, 415, 416, 417, 418, 419, 420, 421, 424, 425, 429, 431, 432, 448, 449, 450, 458, 459, 460, 461, 462, 463, 466, 467, 468, 470, 471, 483, 485, 486, 488, 489, 490, 494, 495, 496, 515, 516, 534, 535, 536, 537, 538, 539, 540, 541, 545, 546, 547, 549, 552, 554, 556, 558, 562, 563, 565, 569, 570, 571, 575, 576, 577, 578, 579, 583, 585, 586, 587, 588, 589, 592, 596, 600, 601, 604, 605, 609, 618, 632, 634, 636, 638, 639, 642, 643, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 664, 665, 666, 668, 669, 672, 673, 675, 677, 678, 682, 683, 685, 686, 687, 688, 689, 690, 691, 694, 696, 698, 699, 700, 702, 703, 704, 705, 708, 711, 712, 716, 719, 725, 726, 738, 739, 740, 741, 747, 750, 754, 757, 760, 761, 762, 763, 766, 779, 781, 783, 790, 792, 795, 800, 807, 810, 825, 827, 828, 834, 838, 846, 870, 871, 872, 873, 876, 877, 885, 886, 887, 889, 891, 892, 903, 920, 921, 924, 927, 931, 934, 937, 938, 941, 945, 946, 950, 951, 994, 996, 997, 998, 1004, 1010, 1011, 1014, 1017, 1026, 1033, 1034], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 305, 618, 758, 947, 999, 1026], "mathshortcut": [1, 69], "": [1, 2, 28, 31, 50, 53, 57, 69, 88, 95, 99, 100, 101, 111, 124, 132, 138, 140, 142, 143, 154, 155, 161, 169, 170, 182, 184, 189, 190, 194, 197, 204, 208, 212, 218, 220, 221, 222, 228, 251, 265, 319, 342, 345, 357, 390, 408, 410, 417, 418, 421, 431, 442, 449, 452, 453, 458, 459, 468, 472, 496, 500, 506, 507, 510, 511, 513, 515, 517, 519, 520, 522, 525, 526, 527, 530, 531, 533, 534, 535, 554, 555, 559, 563, 566, 571, 577, 580, 581, 589, 592, 600, 603, 604, 618, 632, 638, 639, 642, 649, 650, 656, 675, 683, 688, 689, 690, 694, 700, 716, 719, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 747, 748, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 774, 781, 797, 798, 805, 808, 811, 812, 819, 821, 822, 825, 826, 827, 828, 830, 833, 834, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 870, 873, 876, 878, 880, 885, 886, 887, 889, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 945, 946, 947, 948, 950, 951, 953, 956, 957, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 973, 974, 975, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1026], "_": [1, 65, 69, 184, 212, 251, 507, 521, 963, 977, 1003, 1026], "squar": [1, 69, 233, 390, 497, 618, 700, 859, 952, 1026], "cube": [1, 69, 461, 618], "s2": [1, 118, 149, 251, 725, 752, 768, 846, 858, 891, 904, 936, 1008, 1017, 1026], "renam": [1, 91, 99, 100, 197, 228, 231, 251, 260, 432, 445, 535, 600, 603, 618, 675, 694, 698, 716, 772, 780, 992, 1004, 1026], "n2": [1, 423], "in_plac": [1, 160, 202, 226, 251, 918, 920, 944, 951, 1026], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 71, 72, 73, 88, 89, 93, 95, 97, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 128, 130, 132, 133, 134, 137, 146, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 195, 197, 204, 210, 214, 215, 218, 219, 220, 221, 222, 224, 228, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 261, 262, 263, 264, 265, 276, 283, 284, 286, 287, 290, 299, 300, 301, 302, 303, 311, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 395, 396, 400, 419, 422, 423, 430, 444, 454, 455, 457, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 488, 489, 493, 495, 496, 500, 502, 504, 508, 509, 514, 520, 521, 523, 525, 526, 527, 530, 534, 535, 540, 547, 550, 553, 554, 555, 556, 558, 559, 560, 566, 567, 573, 579, 585, 586, 594, 597, 603, 607, 609, 610, 618, 632, 634, 635, 636, 641, 643, 645, 649, 650, 651, 655, 656, 658, 660, 664, 669, 675, 679, 680, 681, 683, 688, 689, 690, 694, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 719, 723, 724, 725, 726, 736, 743, 748, 752, 753, 765, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 818, 820, 821, 822, 828, 832, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 863, 864, 887, 890, 904, 912, 913, 915, 919, 929, 936, 949, 951, 956, 958, 960, 964, 965, 970, 976, 977, 979, 981, 982, 983, 986, 1007, 1008, 1016, 1017, 1026, 1033, 1034], "s3": [1, 30, 102, 111, 115, 251, 891, 1026], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 72, 116, 120, 131, 135, 136, 137, 138, 139, 140, 141, 143, 147, 148, 150, 153, 158, 160, 169, 173, 174, 175, 178, 186, 188, 190, 192, 194, 195, 196, 197, 200, 201, 203, 205, 206, 207, 208, 213, 214, 215, 216, 222, 223, 225, 226, 228, 251, 262, 264, 277, 298, 300, 303, 304, 308, 309, 312, 376, 393, 402, 403, 404, 409, 424, 450, 457, 461, 462, 470, 471, 488, 494, 496, 511, 517, 525, 537, 541, 553, 557, 561, 566, 567, 568, 570, 571, 576, 578, 583, 588, 589, 590, 591, 592, 593, 602, 604, 605, 608, 618, 637, 638, 639, 640, 642, 646, 652, 655, 659, 660, 669, 672, 674, 675, 686, 687, 691, 694, 697, 716, 719, 764, 785, 835, 858, 870, 871, 872, 877, 892, 911, 915, 921, 923, 926, 928, 930, 932, 967, 973, 981, 1026, 1034], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 72, 131, 136, 137, 149, 156, 158, 162, 193, 194, 197, 207, 222, 223, 226, 228, 244, 251, 258, 262, 264, 277, 298, 300, 303, 305, 308, 309, 312, 316, 336, 347, 348, 376, 381, 389, 393, 402, 416, 419, 457, 465, 470, 472, 478, 480, 490, 494, 507, 528, 541, 556, 564, 569, 570, 618, 651, 652, 654, 659, 675, 686, 691, 694, 711, 716, 766, 778, 789, 791, 799, 805, 806, 812, 813, 846, 858, 870, 887, 921, 923, 929, 931, 933, 946, 963, 984, 1026], "27": [1, 69, 244, 303, 323, 337, 350, 618, 711, 1026, 1034], "16": [1, 31, 43, 59, 67, 155, 156, 228, 251, 300, 303, 376, 450, 461, 514, 556, 569, 575, 576, 579, 618, 650, 651, 679, 694, 716, 719, 805, 812, 911, 947, 970, 999, 1026], "64": [1, 42, 45, 61, 67, 69, 450, 461, 618, 681, 716, 911, 1026], "25": [1, 31, 69, 95, 122, 137, 155, 156, 170, 224, 228, 251, 306, 318, 323, 339, 346, 350, 473, 474, 475, 476, 477, 479, 480, 481, 546, 573, 581, 607, 618, 650, 651, 656, 662, 692, 694, 716, 719, 766, 767, 780, 805, 812, 818, 835, 911, 915, 1026], "125": [1, 31, 69, 251, 258, 618, 911, 1026], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 183, 215, 251, 460, 559, 580, 618, 668, 716, 726, 1007, 1008, 1026], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 70, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 114, 119, 121, 122, 124, 128, 131, 136, 140, 144, 146, 147, 149, 166, 167, 168, 182, 183, 192, 193, 194, 210, 211, 214, 215, 220, 222, 251, 258, 262, 265, 290, 340, 352, 353, 362, 367, 370, 371, 381, 392, 399, 404, 430, 431, 433, 445, 448, 450, 454, 455, 457, 458, 460, 470, 472, 484, 514, 525, 526, 527, 530, 536, 540, 546, 553, 554, 556, 566, 578, 587, 609, 618, 639, 645, 668, 689, 716, 719, 725, 726, 768, 806, 827, 846, 858, 867, 872, 898, 921, 923, 935, 938, 970, 981, 982, 983, 986, 997, 1006, 1007, 1008, 1026, 1033, 1034], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 136, 183, 215, 251, 460, 618, 668, 716, 1008, 1026, 1033], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 618, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1033], "width": [2, 24, 31, 99, 100, 251, 278, 279, 280, 281, 511, 517, 533, 716, 738, 739, 740, 741, 967, 973, 989], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 91, 94, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 131, 132, 133, 142, 145, 146, 148, 157, 158, 159, 161, 166, 167, 168, 170, 172, 173, 174, 178, 179, 180, 190, 192, 195, 199, 200, 201, 203, 205, 206, 207, 208, 213, 216, 218, 222, 225, 227, 229, 236, 245, 251, 258, 282, 288, 293, 294, 295, 304, 306, 354, 355, 356, 360, 361, 362, 368, 372, 373, 394, 400, 402, 407, 408, 417, 418, 421, 422, 423, 457, 459, 460, 461, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 489, 494, 498, 506, 508, 511, 514, 515, 517, 519, 521, 522, 528, 533, 539, 540, 541, 545, 551, 553, 558, 566, 567, 572, 574, 575, 581, 583, 585, 586, 591, 593, 594, 597, 598, 599, 602, 603, 604, 605, 606, 608, 610, 618, 632, 634, 643, 644, 645, 652, 656, 659, 669, 677, 678, 681, 682, 684, 686, 687, 688, 692, 693, 696, 703, 712, 716, 733, 734, 747, 748, 752, 753, 754, 755, 756, 764, 767, 819, 820, 821, 822, 825, 826, 827, 833, 834, 835, 858, 860, 861, 868, 869, 870, 875, 876, 885, 886, 889, 890, 891, 900, 904, 905, 907, 908, 909, 910, 911, 914, 917, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 937, 938, 941, 942, 945, 950, 953, 962, 964, 967, 970, 971, 973, 975, 977, 978, 984, 989, 995, 996, 997, 998, 1005, 1010, 1015, 1026, 1033, 1034], "inner": [2, 47, 56, 73, 121, 169, 223, 251, 278, 279, 280, 281, 307, 410, 544, 618, 655, 691, 697, 716, 738, 739, 740, 741, 768, 878, 1009, 1026], "polarsdatatyp": [2, 47, 99, 100, 105, 109, 110, 119, 120, 121, 122, 124, 131, 141, 251, 265, 290, 357, 431, 433, 508, 556, 558, 563, 577, 587, 588, 594, 597, 610, 618, 640, 716, 719, 726, 748, 898, 964, 1026], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 72, 91, 99, 100, 110, 115, 130, 132, 133, 137, 140, 146, 149, 150, 162, 169, 174, 175, 181, 184, 186, 200, 201, 204, 205, 206, 210, 215, 218, 221, 223, 225, 228, 234, 251, 260, 264, 265, 275, 282, 284, 293, 294, 295, 298, 300, 303, 306, 308, 309, 317, 321, 325, 327, 329, 334, 341, 353, 354, 355, 356, 357, 360, 361, 362, 363, 368, 376, 383, 384, 385, 386, 387, 393, 395, 396, 402, 403, 406, 407, 409, 411, 417, 422, 423, 424, 433, 455, 456, 459, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 487, 488, 490, 495, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 517, 519, 521, 522, 523, 533, 534, 535, 544, 552, 554, 562, 564, 565, 567, 577, 587, 598, 599, 603, 609, 618, 632, 634, 639, 645, 654, 655, 667, 677, 678, 683, 688, 690, 691, 694, 695, 697, 701, 716, 726, 735, 743, 753, 754, 767, 770, 779, 783, 790, 792, 795, 800, 807, 820, 821, 822, 825, 827, 832, 851, 852, 863, 864, 870, 877, 885, 890, 891, 892, 910, 911, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 936, 941, 942, 946, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 967, 969, 970, 973, 975, 977, 978, 979, 1005, 1007, 1008, 1009, 1016, 1026, 1033, 1034], "nest": [2, 47, 56, 95, 142, 251, 629, 819, 1026, 1033, 1034], "fix": [2, 103, 120, 122, 349, 473, 474, 475, 476, 477, 479, 480, 481, 618, 815], "length": [2, 12, 47, 72, 110, 120, 155, 156, 203, 251, 304, 339, 346, 418, 423, 442, 472, 473, 474, 475, 476, 477, 479, 480, 481, 494, 511, 513, 517, 519, 533, 558, 594, 597, 598, 599, 610, 618, 650, 651, 669, 682, 716, 752, 764, 765, 774, 805, 812, 860, 886, 891, 909, 915, 923, 924, 925, 926, 927, 928, 930, 931, 932, 950, 967, 969, 973, 975, 989, 1026], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 71, 72, 73, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 130, 131, 132, 133, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 166, 167, 168, 169, 170, 172, 174, 176, 177, 179, 180, 182, 183, 184, 186, 188, 189, 190, 192, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 231, 233, 236, 243, 245, 251, 258, 260, 262, 264, 265, 275, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 293, 294, 295, 299, 300, 301, 302, 303, 304, 306, 307, 311, 312, 313, 319, 335, 338, 339, 340, 342, 344, 345, 346, 349, 351, 352, 353, 354, 355, 356, 357, 360, 362, 363, 367, 368, 369, 370, 371, 372, 373, 376, 377, 381, 390, 392, 394, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 417, 418, 419, 421, 422, 423, 424, 425, 426, 430, 431, 432, 433, 444, 448, 450, 454, 455, 457, 458, 459, 460, 461, 462, 464, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 533, 534, 535, 536, 537, 539, 540, 545, 546, 547, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 618, 632, 634, 636, 638, 639, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 655, 656, 659, 660, 664, 665, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 700, 703, 710, 712, 716, 719, 722, 725, 726, 735, 741, 742, 743, 744, 745, 746, 747, 748, 750, 753, 754, 755, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 774, 775, 781, 801, 804, 805, 806, 808, 810, 811, 812, 815, 818, 819, 820, 821, 822, 825, 826, 827, 828, 833, 834, 835, 838, 839, 848, 854, 855, 859, 861, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 885, 886, 887, 889, 890, 891, 892, 893, 898, 911, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 945, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 986, 989, 990, 992, 996, 997, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1014, 1015, 1016, 1017, 1026, 1033], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 70, 88, 90, 91, 92, 94, 97, 99, 101, 108, 110, 126, 131, 139, 141, 153, 154, 155, 156, 157, 162, 167, 170, 177, 182, 192, 193, 194, 197, 214, 221, 224, 228, 231, 233, 251, 282, 283, 284, 285, 316, 330, 335, 336, 339, 342, 346, 347, 357, 360, 368, 372, 422, 431, 458, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 489, 490, 493, 499, 502, 503, 508, 510, 511, 512, 517, 518, 524, 525, 533, 563, 577, 581, 598, 599, 600, 603, 609, 611, 612, 614, 618, 619, 620, 624, 625, 626, 650, 651, 652, 654, 656, 659, 660, 665, 669, 675, 681, 690, 694, 698, 700, 716, 726, 742, 743, 744, 753, 778, 796, 801, 802, 805, 808, 812, 813, 825, 833, 838, 890, 917, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 946, 949, 955, 958, 959, 964, 966, 967, 968, 973, 974, 980, 981, 989, 1018, 1020, 1022, 1026, 1027, 1030, 1031, 1032, 1034], "size": [2, 13, 35, 99, 100, 120, 121, 122, 124, 126, 142, 155, 222, 251, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 558, 585, 586, 598, 599, 618, 650, 681, 716, 819, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1026, 1034], "datatyp": [2, 28, 33, 47, 63, 88, 90, 91, 92, 94, 96, 103, 105, 109, 124, 141, 143, 149, 196, 251, 290, 357, 405, 488, 505, 544, 563, 577, 587, 618, 629, 642, 674, 697, 716, 726, 748, 766, 848, 853, 855, 857, 873, 943, 961, 1009, 1026], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 72, 73, 91, 93, 99, 100, 101, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 132, 137, 140, 144, 145, 146, 150, 153, 155, 156, 157, 158, 162, 166, 167, 170, 172, 173, 174, 175, 176, 178, 180, 182, 184, 185, 186, 188, 192, 193, 194, 195, 200, 201, 204, 205, 206, 207, 210, 211, 215, 218, 222, 223, 224, 225, 234, 235, 237, 238, 239, 241, 242, 251, 257, 258, 259, 261, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 300, 303, 304, 306, 308, 309, 312, 316, 330, 336, 347, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385, 386, 387, 388, 391, 392, 393, 395, 396, 397, 398, 401, 402, 406, 407, 408, 411, 413, 414, 415, 417, 420, 421, 425, 427, 429, 430, 431, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 464, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 490, 491, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 515, 516, 519, 521, 522, 523, 533, 536, 538, 540, 541, 542, 543, 545, 546, 547, 548, 549, 550, 553, 555, 557, 562, 565, 567, 569, 570, 571, 578, 579, 584, 587, 589, 590, 591, 592, 593, 596, 597, 598, 599, 604, 609, 618, 632, 639, 644, 645, 650, 651, 653, 654, 656, 661, 662, 663, 664, 666, 667, 670, 672, 677, 678, 683, 684, 685, 688, 691, 692, 697, 701, 702, 704, 705, 706, 708, 709, 716, 719, 721, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 750, 751, 754, 755, 756, 758, 759, 764, 765, 766, 767, 769, 770, 774, 778, 796, 802, 813, 819, 820, 821, 822, 825, 826, 827, 830, 832, 833, 834, 835, 836, 838, 839, 841, 843, 844, 846, 847, 849, 850, 851, 852, 856, 861, 863, 864, 865, 866, 869, 870, 874, 875, 876, 879, 881, 882, 883, 885, 889, 893, 898, 899, 900, 902, 903, 905, 907, 908, 909, 910, 911, 914, 915, 916, 917, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 936, 937, 938, 941, 942, 946, 947, 948, 949, 955, 956, 957, 958, 959, 960, 962, 963, 964, 965, 966, 969, 971, 972, 975, 977, 978, 979, 989, 995, 996, 997, 998, 999, 1000, 1008, 1009, 1012, 1014, 1016, 1017, 1026, 1034], "within": [2, 47, 117, 118, 155, 156, 170, 224, 251, 466, 496, 618, 650, 651, 656, 716, 1033], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 72, 73, 88, 90, 91, 92, 93, 94, 95, 97, 100, 101, 102, 103, 110, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 618, 629, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 722, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 747, 748, 750, 751, 752, 753, 754, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 818, 819, 820, 821, 822, 825, 826, 827, 828, 830, 833, 834, 835, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 858, 860, 863, 864, 870, 871, 872, 873, 876, 877, 878, 880, 885, 886, 887, 889, 891, 892, 897, 898, 899, 900, 901, 902, 903, 904, 905, 911, 912, 913, 915, 916, 917, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 936, 937, 938, 939, 941, 945, 946, 947, 948, 950, 951, 953, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 994, 995, 996, 997, 998, 999, 1000, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026, 1033], "dtype": [2, 31, 38, 68, 72, 73, 88, 90, 92, 94, 95, 99, 100, 110, 119, 120, 121, 122, 124, 130, 155, 156, 170, 213, 214, 215, 251, 265, 267, 268, 269, 270, 271, 272, 275, 290, 293, 294, 295, 296, 297, 302, 303, 305, 317, 321, 325, 327, 329, 334, 341, 349, 357, 359, 397, 398, 399, 410, 422, 429, 431, 433, 465, 468, 469, 473, 474, 475, 476, 477, 479, 480, 481, 488, 491, 492, 499, 508, 519, 525, 538, 540, 542, 543, 544, 549, 550, 556, 558, 567, 577, 581, 586, 587, 588, 594, 597, 603, 610, 618, 650, 651, 656, 716, 719, 738, 739, 748, 753, 754, 755, 756, 762, 763, 766, 767, 779, 783, 790, 792, 795, 800, 807, 815, 819, 824, 842, 848, 855, 865, 866, 867, 878, 890, 897, 898, 922, 936, 943, 955, 964, 975, 981, 995, 1005, 1007, 1008, 1009, 1013, 1026, 1034], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 72, 89, 99, 100, 103, 119, 128, 140, 154, 162, 167, 180, 186, 192, 193, 194, 220, 228, 243, 251, 258, 261, 262, 342, 345, 352, 353, 360, 367, 370, 371, 376, 392, 430, 448, 450, 454, 455, 457, 461, 464, 466, 473, 474, 475, 476, 477, 479, 480, 481, 528, 536, 546, 548, 553, 566, 573, 595, 597, 607, 611, 612, 614, 618, 619, 620, 623, 624, 625, 626, 629, 639, 654, 670, 689, 694, 710, 716, 726, 808, 811, 825, 838, 916, 917, 928, 984, 1009, 1018, 1020, 1022, 1026, 1027, 1030, 1031, 1032], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 119, 251, 611, 612, 614, 619, 620, 624, 625, 626, 716, 1018, 1020, 1022, 1027, 1030, 1031, 1032], "A": [5, 28, 31, 50, 53, 71, 95, 99, 100, 101, 108, 110, 126, 149, 155, 170, 184, 193, 210, 222, 223, 224, 228, 251, 257, 312, 317, 321, 325, 327, 329, 334, 341, 352, 353, 360, 370, 371, 379, 382, 383, 385, 392, 423, 430, 431, 432, 442, 454, 455, 462, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 500, 501, 506, 507, 509, 515, 516, 533, 537, 564, 573, 576, 580, 607, 618, 650, 656, 672, 691, 694, 716, 719, 774, 779, 783, 790, 792, 795, 800, 807, 825, 923, 924, 925, 927, 930, 931, 932, 956, 957, 962, 963, 965, 971, 972, 989, 1026, 1033], "encod": [5, 64, 99, 100, 110, 212, 251, 283, 284, 286, 287, 369, 502, 618, 743, 958], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 89, 91, 94, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 130, 135, 140, 154, 155, 156, 157, 167, 170, 176, 195, 197, 203, 212, 214, 219, 220, 222, 228, 251, 265, 349, 372, 381, 403, 409, 418, 422, 423, 424, 433, 460, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 489, 493, 494, 512, 518, 519, 524, 525, 526, 527, 530, 558, 560, 573, 585, 586, 594, 597, 598, 599, 603, 607, 609, 610, 618, 629, 639, 641, 649, 650, 651, 655, 656, 660, 664, 675, 680, 681, 682, 689, 694, 697, 700, 716, 725, 726, 815, 833, 846, 871, 877, 886, 890, 891, 892, 898, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 938, 945, 949, 950, 968, 974, 975, 980, 981, 982, 983, 986, 1007, 1026, 1034], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 73, 95, 99, 100, 110, 119, 120, 121, 124, 127, 132, 149, 153, 154, 155, 156, 170, 184, 194, 197, 204, 213, 218, 222, 224, 228, 231, 251, 258, 286, 291, 335, 339, 342, 345, 346, 359, 365, 369, 377, 410, 433, 444, 458, 460, 473, 474, 475, 476, 477, 479, 480, 481, 496, 499, 500, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 533, 554, 555, 559, 562, 564, 565, 571, 573, 580, 589, 592, 600, 603, 604, 607, 618, 632, 641, 648, 649, 650, 651, 656, 675, 683, 688, 694, 697, 698, 716, 719, 745, 750, 801, 805, 808, 811, 812, 824, 839, 878, 954, 955, 956, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 985, 987, 988, 989, 1005, 1026, 1034], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 369, 618, 648, 671, 716], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 404, 507, 872, 963], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 71, 72, 73, 88, 89, 93, 95, 99, 100, 104, 108, 110, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 127, 130, 132, 133, 134, 146, 147, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 170, 182, 184, 194, 195, 198, 202, 204, 210, 212, 214, 215, 218, 219, 220, 221, 224, 226, 228, 235, 237, 238, 241, 251, 261, 262, 263, 264, 265, 275, 281, 283, 284, 286, 287, 290, 299, 300, 301, 302, 303, 304, 322, 338, 340, 351, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 395, 396, 400, 404, 419, 422, 425, 430, 431, 437, 438, 439, 440, 444, 454, 455, 457, 466, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 488, 489, 493, 495, 496, 500, 502, 504, 514, 515, 516, 520, 521, 523, 525, 526, 527, 530, 535, 547, 550, 553, 554, 555, 556, 558, 559, 560, 566, 569, 573, 585, 586, 587, 594, 597, 603, 607, 610, 618, 632, 634, 636, 641, 643, 645, 649, 650, 651, 655, 656, 660, 664, 669, 676, 679, 680, 681, 683, 688, 689, 690, 694, 702, 704, 705, 708, 716, 719, 723, 724, 725, 726, 735, 741, 743, 748, 753, 760, 761, 762, 763, 764, 765, 784, 804, 806, 818, 820, 821, 822, 828, 832, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 863, 864, 868, 869, 872, 887, 890, 893, 912, 913, 915, 917, 918, 919, 920, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 936, 938, 939, 944, 949, 951, 956, 958, 960, 970, 971, 972, 976, 977, 979, 981, 982, 983, 986, 1006, 1007, 1008, 1011, 1014, 1016, 1026, 1033], "decim": [6, 28, 31, 251, 482, 528, 618, 933, 984, 1026], "temporari": 6, "remov": [6, 8, 138, 212, 223, 251, 265, 357, 432, 512, 518, 524, 525, 527, 577, 618, 638, 691, 716, 968, 974, 980, 981, 983], "later": [6, 573], "onc": [6, 53, 99, 100, 103, 126, 130, 131, 193, 195, 231, 251, 265, 289, 483, 618, 633, 698, 716, 726, 934, 1026], "stabil": 6, "happen": [6, 618, 915, 1026], "being": [6, 99, 100, 110, 115, 212, 222, 223, 251, 265, 304, 339, 473, 474, 475, 476, 477, 479, 480, 481, 483, 489, 576, 618, 691, 716, 764, 805, 835, 915, 1026, 1034], "consid": [6, 99, 100, 110, 115, 131, 140, 150, 176, 193, 220, 222, 223, 251, 265, 293, 294, 295, 304, 339, 431, 473, 474, 475, 476, 477, 479, 480, 481, 569, 579, 618, 639, 652, 659, 664, 689, 691, 700, 716, 726, 754, 755, 756, 764, 805, 835, 848, 915, 936, 937, 938, 1026], "break": [6, 115, 222, 223, 251, 265, 304, 339, 473, 474, 475, 476, 477, 479, 480, 481, 618, 691, 716, 764, 805, 835, 915, 1026], "chang": [6, 26, 65, 99, 100, 115, 222, 223, 224, 251, 265, 304, 306, 339, 459, 473, 474, 475, 476, 477, 479, 480, 481, 483, 489, 618, 691, 716, 764, 805, 835, 911, 915, 944, 1026], "current": [6, 9, 26, 52, 89, 95, 101, 127, 130, 133, 134, 169, 251, 318, 339, 423, 459, 618, 629, 634, 635, 655, 716, 719, 753, 757, 772, 780, 805, 911, 1026, 1033], "alpha": [6, 71, 265, 354, 355, 356, 618, 636, 641, 643, 669, 679, 716, 820, 821, 822, 1026], "state": [6, 8, 71, 81, 127, 569, 629, 636, 641, 643, 669, 679, 716], "cfg": [7, 8, 9, 15, 128], "path": [7, 9, 27, 28, 30, 31, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 251, 446, 485, 509, 618, 671, 680, 681, 697, 716, 939, 965, 1026], "previous": 7, "save": [7, 155, 156, 170, 224, 251, 310, 318, 335, 338, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 629, 650, 651, 656, 716, 780, 801, 804, 805, 812], "share": [7, 56, 142, 251, 819, 1026], "option": [7, 8, 9, 26, 30, 31, 39, 65, 99, 102, 103, 104, 108, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 166, 170, 176, 210, 214, 219, 251, 390, 472, 473, 474, 475, 476, 477, 479, 480, 481, 493, 519, 573, 587, 603, 609, 618, 629, 655, 656, 664, 716, 719, 855, 859, 923, 924, 925, 926, 927, 928, 930, 931, 932, 949, 975, 1004, 1026], "from": [7, 8, 28, 31, 50, 51, 52, 65, 72, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 137, 138, 142, 144, 153, 155, 156, 167, 168, 170, 171, 176, 184, 188, 192, 194, 195, 197, 212, 219, 220, 222, 224, 251, 299, 305, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 353, 357, 369, 376, 390, 423, 452, 453, 455, 459, 460, 465, 473, 474, 476, 479, 480, 481, 483, 496, 506, 507, 508, 514, 525, 526, 527, 530, 548, 550, 562, 572, 573, 574, 575, 597, 602, 606, 607, 617, 618, 638, 643, 648, 650, 651, 656, 664, 671, 672, 675, 689, 695, 716, 719, 725, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 819, 855, 859, 891, 907, 908, 909, 911, 934, 962, 963, 964, 970, 981, 982, 983, 986, 1014, 1017, 1026, 1033, 1034], "json": [7, 9, 33, 34, 106, 107, 113, 251, 369, 446, 508, 509, 618, 629, 648, 671, 697, 716, 964, 965], "file": [7, 9, 27, 28, 32, 33, 34, 35, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 251, 446, 643, 671, 680, 681, 697, 716, 725, 1026], "produc": [7, 121, 122, 124, 401, 441, 573, 588, 660, 716, 869], "filepath": [7, 9], "same": [7, 18, 30, 31, 54, 56, 65, 71, 72, 73, 104, 110, 120, 128, 131, 138, 154, 194, 204, 220, 228, 231, 233, 251, 257, 264, 359, 437, 440, 458, 472, 473, 474, 475, 476, 477, 479, 480, 481, 496, 535, 563, 573, 618, 638, 649, 660, 683, 689, 694, 698, 716, 721, 725, 726, 774, 824, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1017, 1026], "reset": [8, 128], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 72, 88, 90, 91, 92, 93, 94, 95, 99, 100, 103, 108, 110, 119, 120, 121, 122, 123, 124, 140, 142, 154, 156, 157, 167, 169, 170, 176, 182, 184, 192, 193, 194, 195, 205, 212, 220, 222, 225, 229, 251, 291, 338, 351, 353, 354, 355, 356, 372, 418, 422, 423, 426, 433, 452, 453, 455, 459, 466, 473, 474, 475, 476, 477, 479, 480, 481, 483, 489, 498, 506, 512, 514, 518, 519, 524, 525, 526, 527, 530, 551, 558, 560, 566, 573, 581, 585, 586, 587, 594, 597, 602, 603, 607, 608, 610, 618, 639, 641, 649, 651, 655, 656, 664, 681, 684, 689, 692, 697, 716, 750, 804, 818, 819, 820, 821, 822, 833, 886, 890, 891, 898, 907, 908, 911, 917, 934, 945, 953, 956, 962, 968, 970, 974, 975, 980, 981, 982, 983, 986, 1015, 1026, 1034], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 88, 89, 90, 92, 94, 95, 99, 101, 102, 108, 110, 111, 120, 122, 124, 126, 128, 130, 131, 136, 145, 155, 156, 166, 167, 169, 170, 180, 183, 192, 193, 194, 211, 214, 219, 223, 224, 228, 251, 265, 302, 303, 308, 309, 331, 332, 335, 339, 346, 377, 383, 385, 404, 422, 473, 474, 475, 476, 477, 478, 479, 480, 481, 493, 500, 506, 507, 510, 512, 513, 515, 518, 524, 525, 538, 546, 569, 573, 579, 594, 596, 597, 609, 610, 618, 628, 636, 643, 644, 650, 651, 652, 656, 659, 672, 679, 691, 694, 716, 726, 762, 763, 797, 798, 801, 812, 872, 890, 929, 937, 938, 944, 949, 956, 962, 963, 966, 968, 969, 971, 974, 980, 981, 995, 1026, 1033], "oper": [8, 31, 56, 72, 78, 79, 88, 90, 91, 92, 93, 94, 99, 108, 131, 144, 149, 154, 161, 171, 177, 180, 182, 183, 187, 194, 209, 214, 215, 219, 222, 230, 231, 251, 258, 259, 262, 299, 300, 301, 302, 303, 304, 352, 353, 367, 370, 371, 389, 392, 403, 409, 423, 424, 430, 445, 448, 450, 454, 455, 457, 461, 468, 536, 546, 553, 554, 555, 564, 565, 576, 618, 629, 643, 649, 652, 655, 659, 664, 665, 698, 716, 725, 760, 761, 762, 763, 764, 871, 877, 892, 919, 1002, 1006, 1007, 1008, 1016, 1026], "environ": [8, 26, 123, 126], "local": [8, 30, 102, 111, 124, 251, 338, 776, 777, 804, 809, 912, 913, 1026], "non": [8, 31, 39, 65, 93, 156, 168, 176, 197, 223, 228, 251, 377, 423, 459, 472, 473, 474, 475, 476, 477, 479, 480, 481, 501, 507, 554, 555, 562, 564, 565, 571, 573, 589, 592, 598, 599, 600, 603, 604, 618, 651, 664, 675, 691, 694, 716, 839, 891, 911, 923, 924, 925, 926, 927, 928, 930, 931, 932, 957, 963, 1007, 1026], "env": [8, 125], "back": [8, 65, 144, 215, 251, 458, 531, 618, 725, 987, 1008, 1026], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 73, 88, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 131, 133, 137, 140, 145, 146, 153, 155, 156, 157, 162, 166, 169, 170, 171, 174, 176, 180, 181, 184, 192, 195, 201, 203, 204, 210, 212, 215, 219, 220, 221, 222, 223, 224, 251, 260, 264, 265, 277, 282, 293, 294, 295, 298, 300, 303, 308, 309, 338, 339, 346, 353, 354, 355, 356, 357, 360, 361, 362, 368, 372, 376, 377, 383, 384, 385, 386, 387, 393, 395, 396, 403, 407, 409, 418, 423, 424, 431, 433, 444, 446, 455, 456, 459, 466, 467, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 487, 488, 489, 490, 494, 495, 499, 500, 503, 504, 508, 509, 510, 511, 512, 513, 514, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 530, 533, 534, 535, 544, 554, 556, 558, 562, 565, 567, 573, 574, 575, 577, 578, 587, 588, 589, 592, 597, 598, 599, 602, 603, 606, 607, 608, 609, 618, 634, 635, 639, 644, 645, 650, 651, 654, 655, 656, 658, 660, 664, 667, 678, 679, 680, 681, 682, 683, 689, 690, 691, 695, 697, 700, 716, 719, 726, 733, 734, 753, 754, 765, 766, 768, 786, 787, 788, 793, 804, 805, 812, 817, 818, 820, 821, 822, 825, 826, 827, 829, 832, 833, 835, 837, 838, 839, 848, 851, 852, 855, 858, 859, 863, 864, 871, 875, 877, 886, 891, 892, 898, 899, 900, 901, 902, 906, 915, 916, 917, 920, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 938, 940, 942, 945, 946, 949, 950, 953, 955, 956, 959, 960, 964, 965, 966, 967, 968, 969, 970, 973, 974, 975, 977, 978, 979, 980, 981, 982, 983, 986, 1001, 1004, 1005, 1008, 1009, 1015, 1016, 1026, 1033], "written": [9, 27, 28, 31, 32, 33, 34, 35, 251, 680, 681, 697, 716], "contain": [9, 31, 65, 70, 90, 93, 95, 102, 111, 117, 121, 132, 140, 155, 168, 180, 184, 218, 251, 265, 286, 287, 381, 433, 501, 504, 506, 507, 509, 522, 523, 618, 632, 639, 650, 669, 688, 716, 719, 898, 904, 957, 960, 962, 963, 965, 978, 979, 1002, 1026], "where": [9, 31, 50, 65, 101, 121, 140, 144, 167, 176, 193, 205, 225, 251, 276, 348, 351, 353, 455, 484, 493, 496, 498, 551, 560, 566, 598, 599, 602, 608, 609, 618, 664, 684, 692, 716, 725, 736, 814, 818, 935, 949, 953, 1015, 1017, 1026, 1033], "ascii": [10, 18, 511, 513, 517, 533, 967, 969, 973, 989], "charact": [10, 12, 18, 24, 28, 99, 100, 110, 251, 335, 505, 507, 510, 511, 512, 517, 518, 520, 521, 524, 533, 669, 716, 719, 801, 961, 963, 966, 967, 968, 973, 974, 976, 977, 980, 989], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 251], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 88, 95, 99, 100, 102, 110, 111, 184, 209, 215, 222, 223, 251, 691, 716, 1008, 1026, 1033], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 71, 89, 93, 95, 99, 100, 103, 104, 108, 110, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 130, 132, 133, 134, 137, 149, 150, 152, 153, 154, 155, 156, 160, 161, 163, 164, 165, 167, 170, 171, 174, 179, 180, 182, 184, 185, 192, 193, 194, 195, 198, 202, 204, 210, 212, 214, 215, 218, 219, 220, 224, 226, 228, 234, 235, 237, 238, 239, 241, 244, 251, 261, 262, 263, 265, 275, 281, 283, 286, 287, 299, 300, 301, 302, 303, 304, 322, 338, 340, 351, 352, 353, 354, 355, 356, 370, 371, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 392, 395, 396, 400, 404, 419, 422, 425, 430, 431, 444, 454, 455, 457, 466, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 488, 489, 493, 495, 496, 500, 504, 508, 514, 515, 516, 520, 521, 523, 525, 526, 527, 547, 550, 553, 554, 555, 558, 559, 560, 566, 569, 573, 585, 586, 587, 594, 597, 603, 607, 609, 610, 618, 632, 634, 635, 636, 641, 643, 649, 650, 651, 655, 656, 658, 660, 669, 676, 679, 680, 681, 683, 688, 689, 694, 701, 702, 704, 705, 706, 708, 711, 716, 719, 725, 735, 741, 748, 752, 753, 760, 761, 762, 763, 764, 765, 784, 804, 806, 818, 820, 821, 822, 828, 839, 840, 841, 843, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 859, 863, 864, 872, 887, 890, 893, 904, 912, 913, 915, 917, 918, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 936, 939, 944, 949, 951, 956, 960, 964, 970, 971, 972, 976, 977, 979, 981, 982, 983, 1006, 1007, 1008, 1011, 1014, 1016, 1017, 1026, 1033], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 258, 507, 515, 618, 719, 963, 971], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 258, 501, 507, 618, 957, 963, 1004, 1026], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 47, 50, 65, 67, 69, 91, 115, 122, 133, 134, 136, 137, 138, 141, 145, 146, 149, 152, 153, 154, 161, 169, 170, 174, 175, 184, 185, 186, 203, 204, 205, 225, 228, 231, 235, 237, 238, 239, 240, 241, 243, 244, 251, 257, 267, 268, 269, 270, 271, 272, 290, 292, 296, 297, 304, 305, 308, 309, 340, 351, 352, 353, 354, 355, 356, 357, 358, 361, 362, 366, 367, 370, 371, 376, 383, 385, 386, 387, 389, 390, 392, 414, 426, 427, 428, 430, 434, 435, 436, 447, 450, 452, 453, 454, 455, 459, 461, 464, 465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 491, 492, 493, 497, 498, 542, 543, 546, 551, 561, 562, 564, 566, 568, 577, 590, 591, 602, 608, 618, 634, 638, 644, 645, 649, 655, 656, 662, 663, 670, 683, 684, 692, 694, 695, 698, 702, 704, 705, 706, 707, 708, 710, 711, 716, 719, 727, 728, 729, 730, 731, 732, 751, 758, 759, 764, 765, 766, 806, 821, 822, 826, 830, 835, 911, 915, 923, 925, 926, 928, 929, 930, 932, 933, 947, 948, 952, 999, 1000, 1013, 1026, 1034], "fmt": [11, 375, 580, 618, 653, 716], "floatfmt": 11, "mix": [11, 525, 527, 766, 981, 983, 1026], "control": [11, 31, 55, 72, 120, 251, 641, 716], "how": [11, 30, 31, 56, 65, 72, 73, 91, 94, 101, 140, 169, 222, 223, 251, 291, 306, 376, 401, 402, 458, 469, 478, 508, 609, 618, 639, 655, 691, 716, 750, 767, 869, 870, 929, 964, 1026], "float": [11, 31, 41, 42, 115, 117, 118, 119, 122, 124, 137, 142, 145, 170, 186, 195, 201, 243, 251, 292, 293, 294, 295, 308, 309, 340, 351, 352, 353, 354, 355, 356, 361, 366, 370, 371, 376, 379, 382, 383, 385, 386, 387, 392, 400, 426, 430, 434, 447, 452, 453, 454, 455, 461, 464, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 546, 561, 590, 591, 595, 597, 602, 604, 608, 618, 644, 656, 670, 678, 679, 710, 716, 719, 748, 751, 754, 755, 756, 765, 766, 768, 806, 818, 819, 820, 821, 822, 826, 830, 835, 845, 859, 868, 869, 894, 900, 901, 907, 908, 914, 915, 916, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 937, 938, 949, 953, 995, 1015, 1026, 1034], "point": [11, 31, 41, 42, 122, 124, 145, 155, 171, 251, 292, 308, 309, 340, 361, 366, 383, 385, 482, 483, 573, 618, 644, 650, 660, 672, 716, 751, 806, 826, 830, 845, 933, 934, 1026], "full": [11, 38, 65, 70, 72, 99, 100, 102, 110, 111, 155, 156, 251, 525, 526, 527, 530, 650, 651, 660, 716, 719, 981, 982, 983, 986], "format": [11, 14, 18, 28, 31, 98, 99, 100, 110, 115, 143, 153, 167, 176, 193, 194, 211, 249, 251, 339, 342, 345, 444, 514, 525, 526, 527, 530, 555, 642, 648, 664, 697, 716, 808, 811, 970, 981, 982, 983, 986, 1025], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 82, 88, 90, 92, 94, 97, 99, 100, 101, 103, 110, 113, 120, 122, 123, 125, 126, 132, 133, 142, 143, 145, 146, 158, 167, 168, 171, 172, 179, 180, 195, 200, 201, 205, 207, 218, 222, 225, 234, 236, 245, 251, 276, 282, 288, 298, 304, 306, 320, 323, 328, 330, 340, 347, 348, 350, 354, 355, 356, 360, 362, 368, 373, 383, 385, 393, 394, 402, 408, 417, 421, 423, 460, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 486, 487, 489, 498, 510, 513, 515, 521, 522, 528, 539, 545, 551, 566, 567, 573, 583, 598, 599, 602, 605, 608, 618, 632, 634, 642, 643, 644, 645, 652, 659, 669, 677, 678, 681, 684, 686, 688, 692, 701, 703, 712, 716, 747, 753, 764, 767, 782, 785, 794, 796, 806, 813, 814, 816, 819, 820, 821, 822, 825, 827, 834, 845, 861, 870, 876, 885, 889, 891, 904, 905, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 941, 942, 945, 953, 966, 969, 971, 977, 978, 984, 996, 1010, 1015, 1026, 1034], "plai": [12, 565], "sam": 12, "As": [12, 88, 90, 91, 92, 94, 103, 251, 716], "time": [12, 30, 38, 40, 50, 55, 70, 71, 110, 144, 155, 156, 170, 224, 251, 288, 310, 311, 312, 313, 318, 319, 335, 338, 339, 342, 344, 345, 346, 349, 399, 400, 423, 473, 474, 475, 476, 477, 479, 480, 481, 525, 527, 530, 544, 545, 564, 565, 573, 575, 581, 607, 618, 636, 650, 651, 656, 669, 716, 719, 725, 747, 772, 773, 774, 775, 780, 781, 801, 804, 805, 808, 810, 811, 812, 815, 867, 869, 981, 983, 986, 1009, 1010, 1026, 1034], "goe": 12, "By": [12, 13, 65, 99, 100, 103, 110, 155, 156, 170, 205, 224, 225, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 498, 514, 551, 566, 587, 602, 608, 618, 650, 651, 656, 684, 692, 716, 801, 805, 812, 953, 970, 1007, 1015, 1026], "begin": [12, 354, 355, 356, 506, 573, 618, 820, 821, 822, 962, 1026], "beauti": 12, "friendship": 12, "len": [12, 31, 120, 122, 168, 251, 299, 470, 511, 517, 533, 618, 765, 915, 921, 967, 973, 989, 1026], "u32": [12, 50, 155, 181, 229, 234, 242, 244, 251, 259, 266, 273, 274, 275, 276, 277, 298, 299, 316, 320, 324, 328, 330, 336, 337, 340, 347, 348, 393, 397, 398, 401, 412, 433, 451, 456, 466, 473, 474, 476, 479, 480, 481, 484, 501, 510, 513, 544, 548, 557, 559, 560, 567, 593, 618, 650, 667, 696, 701, 709, 711, 716, 735, 736, 737, 748, 778, 782, 789, 791, 794, 796, 799, 802, 803, 806, 813, 814, 835, 880, 917, 957, 966, 969, 1009, 1012, 1014, 1026], "37": 12, "beaut": 12, "48": [12, 156, 251, 651, 716], "fmt_str_length": 12, "50": [12, 31, 144, 251, 293, 294, 295, 339, 346, 618, 754, 812, 1026], "print": [12, 15, 17, 18, 23, 100, 116, 141, 153, 154, 168, 171, 213, 230, 251, 375, 444, 575, 618, 653, 716, 846, 923, 1005, 1026, 1034], "overwrit": [13, 29, 30, 88, 90, 91, 92, 94, 99, 100, 110, 130, 251, 643, 716], "chunk": [13, 97, 99, 100, 108, 110, 112, 113, 114, 122, 124, 144, 168, 179, 251, 264, 467, 618, 681, 716, 725, 752, 831, 904, 918, 1002, 1026], "stream": [13, 32, 71, 154, 169, 220, 251, 636, 641, 643, 649, 655, 660, 664, 669, 679, 680, 681, 689, 716], "engin": [13, 29, 101, 126, 131, 154, 169, 220, 233, 251, 649, 655, 660, 664, 689, 700, 716, 726, 1026], "determin": [13, 31, 63, 65, 72, 91, 94, 99, 100, 103, 108, 110, 114, 131, 149, 155, 156, 167, 168, 219, 224, 251, 291, 322, 338, 423, 433, 441, 469, 473, 474, 475, 476, 477, 479, 480, 481, 493, 508, 528, 594, 597, 610, 618, 650, 651, 716, 750, 784, 804, 835, 891, 898, 949, 964, 984, 1026], "schema": [13, 30, 50, 56, 66, 67, 68, 72, 73, 83, 84, 86, 88, 90, 91, 92, 94, 95, 99, 100, 101, 105, 109, 110, 113, 120, 122, 131, 133, 134, 141, 142, 177, 180, 214, 251, 278, 279, 280, 423, 441, 508, 553, 603, 618, 634, 635, 640, 660, 665, 697, 700, 716, 719, 740, 757, 964, 1026], "thread": [13, 28, 97, 99, 100, 101, 126, 251, 265, 404, 483, 489, 618, 872], "pool": [13, 126], "For": [13, 30, 31, 101, 102, 103, 111, 144, 156, 169, 170, 233, 251, 290, 354, 355, 356, 423, 442, 468, 493, 500, 506, 507, 515, 569, 573, 579, 580, 618, 651, 656, 700, 716, 725, 820, 821, 822, 919, 949, 956, 962, 963, 971, 1007, 1026], "some": [13, 26, 30, 31, 91, 99, 100, 110, 140, 251, 639, 716, 846, 1026, 1034], "dataset": [13, 99, 100, 110, 115, 169, 251, 390, 618, 629, 655, 660, 716, 859, 1026], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 38, 55, 56, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 99, 100, 104, 108, 110, 111, 112, 113, 122, 124, 131, 132, 141, 142, 144, 146, 149, 155, 156, 169, 183, 192, 194, 197, 204, 212, 214, 218, 220, 251, 293, 294, 295, 338, 354, 355, 356, 362, 423, 431, 433, 442, 460, 495, 496, 512, 518, 524, 525, 559, 569, 573, 579, 618, 632, 645, 650, 651, 655, 660, 675, 681, 683, 688, 689, 716, 725, 754, 755, 756, 804, 819, 820, 821, 822, 827, 898, 937, 938, 968, 974, 980, 981, 1003, 1026], "have": [13, 26, 31, 38, 65, 73, 89, 99, 100, 101, 103, 122, 124, 144, 156, 167, 187, 193, 194, 211, 251, 289, 304, 354, 355, 356, 442, 466, 525, 527, 573, 618, 651, 664, 679, 696, 716, 719, 725, 764, 820, 821, 822, 832, 915, 917, 981, 983, 1026, 1034], "larg": [13, 65, 155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "element": [13, 23, 121, 124, 132, 166, 184, 192, 205, 218, 225, 251, 265, 267, 268, 269, 270, 271, 272, 288, 296, 297, 299, 300, 301, 302, 303, 304, 358, 372, 381, 401, 403, 404, 405, 409, 424, 427, 428, 458, 459, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 490, 491, 492, 497, 498, 521, 522, 528, 542, 543, 545, 551, 566, 598, 599, 602, 608, 618, 632, 684, 688, 692, 716, 726, 727, 728, 729, 730, 731, 732, 747, 753, 758, 759, 760, 761, 762, 763, 764, 823, 828, 834, 846, 858, 861, 869, 871, 872, 873, 877, 892, 895, 896, 911, 917, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 946, 947, 948, 952, 953, 977, 978, 984, 996, 999, 1000, 1005, 1010, 1011, 1015, 1026], "too": [13, 155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "optimist": 13, "lead": [13, 95, 115, 155, 156, 251, 265, 431, 485, 512, 524, 533, 540, 550, 566, 618, 650, 651, 660, 700, 716, 726, 939, 968, 980, 989, 1026], "out": [13, 95, 116, 156, 194, 251, 284, 379, 382, 407, 422, 500, 502, 609, 618, 651, 680, 681, 716, 743, 875, 890, 956, 958], "memori": [13, 72, 88, 89, 92, 93, 94, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 144, 194, 202, 233, 251, 458, 467, 488, 618, 681, 716, 725, 726, 918, 943, 944, 1026], "error": [13, 30, 74, 99, 100, 110, 155, 156, 170, 184, 192, 224, 251, 284, 290, 335, 339, 346, 389, 410, 422, 473, 474, 475, 476, 477, 479, 480, 481, 500, 502, 506, 508, 509, 525, 526, 527, 530, 618, 650, 651, 656, 700, 716, 743, 748, 801, 805, 812, 878, 890, 956, 958, 962, 964, 965, 981, 982, 983, 986, 1026], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 72, 80, 82, 87, 91, 92, 94, 95, 99, 100, 103, 104, 108, 110, 112, 113, 114, 117, 120, 122, 131, 132, 133, 140, 144, 147, 149, 153, 155, 157, 158, 163, 165, 166, 167, 168, 170, 171, 172, 176, 180, 194, 195, 203, 207, 208, 211, 213, 218, 220, 222, 223, 229, 233, 236, 245, 251, 265, 276, 359, 373, 394, 405, 423, 458, 459, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 494, 496, 505, 508, 539, 559, 569, 570, 579, 583, 586, 589, 592, 596, 598, 599, 605, 609, 618, 632, 634, 636, 639, 643, 646, 647, 650, 652, 656, 657, 659, 660, 664, 681, 682, 686, 687, 688, 689, 691, 696, 700, 703, 712, 716, 725, 824, 834, 858, 873, 911, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 950, 961, 964, 996, 1026, 1034], "per": [13, 28, 31, 120, 122, 132, 153, 180, 181, 204, 218, 240, 242, 243, 251, 265, 289, 404, 407, 422, 496, 559, 618, 632, 683, 688, 707, 709, 710, 716, 872, 875, 890], "everi": [13, 99, 100, 110, 155, 208, 211, 224, 251, 299, 300, 301, 302, 303, 304, 339, 346, 359, 397, 398, 402, 403, 405, 407, 408, 418, 421, 505, 541, 569, 570, 618, 643, 650, 687, 716, 760, 761, 762, 763, 764, 805, 812, 824, 865, 866, 870, 871, 873, 875, 876, 886, 889, 961, 998, 1026], "process": [13, 28, 126, 251, 680, 681, 716], "liter": [14, 18, 30, 50, 103, 122, 123, 124, 125, 153, 167, 173, 174, 178, 179, 182, 192, 193, 197, 206, 210, 223, 228, 251, 261, 263, 283, 312, 352, 353, 360, 367, 370, 371, 377, 389, 392, 430, 448, 450, 454, 455, 461, 500, 515, 516, 536, 546, 554, 555, 558, 560, 562, 564, 565, 571, 572, 573, 574, 585, 586, 587, 589, 592, 594, 597, 600, 603, 604, 606, 607, 610, 618, 645, 675, 691, 694, 716, 719, 723, 724, 742, 774, 825, 839, 937, 938, 956, 971, 972, 1026, 1033], "left": [14, 52, 65, 117, 118, 155, 156, 169, 170, 223, 251, 354, 355, 356, 376, 377, 473, 474, 475, 476, 477, 479, 480, 481, 484, 511, 533, 544, 562, 569, 570, 573, 579, 596, 607, 609, 618, 650, 651, 655, 656, 691, 716, 820, 821, 822, 839, 935, 967, 989, 1009, 1026], "center": [14, 31, 251, 354, 355, 356, 472, 473, 474, 475, 476, 477, 479, 480, 481, 618, 820, 821, 822, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1026], "right": [14, 16, 31, 99, 100, 117, 118, 155, 156, 169, 170, 251, 354, 355, 356, 377, 403, 409, 424, 473, 474, 475, 476, 477, 479, 480, 481, 484, 493, 517, 562, 573, 607, 618, 650, 651, 655, 656, 716, 820, 821, 822, 839, 871, 877, 892, 935, 949, 973, 1026], "cell": 14, "align": [14, 31, 65, 72, 251, 533, 989], "keyerror": [14, 18], "recognis": [14, 18, 119], "column_abc": 14, "column_xyz": 14, "visibl": [15, 142, 251, 819, 1026], "eg": [15, 23, 31, 101, 251, 339, 525, 527, 546, 618, 981, 983], "low": [15, 126], "rang": [15, 31, 101, 137, 142, 155, 168, 251, 305, 316, 330, 336, 337, 339, 346, 347, 376, 558, 564, 572, 573, 574, 585, 586, 606, 607, 618, 650, 716, 765, 766, 778, 796, 802, 803, 805, 812, 813, 819, 911, 915, 1026], "100": [15, 31, 91, 94, 99, 100, 110, 113, 251, 508, 528, 533, 716, 924, 925, 927, 964, 984, 1026, 1034], "98": [15, 161, 251, 288, 495, 528, 540, 545, 618, 984], "99": [15, 31, 145, 146, 161, 164, 251, 259, 288, 360, 362, 495, 540, 545, 618, 644, 645, 716, 818, 825, 1026], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 72, 95, 101, 110, 122, 124, 134, 144, 152, 155, 156, 158, 160, 161, 162, 179, 183, 185, 189, 190, 197, 207, 228, 231, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 264, 273, 274, 275, 277, 293, 298, 300, 303, 306, 308, 309, 310, 312, 318, 331, 332, 338, 339, 346, 349, 372, 373, 376, 381, 389, 393, 394, 402, 408, 417, 418, 421, 427, 459, 460, 494, 533, 539, 553, 562, 569, 573, 576, 579, 581, 583, 587, 588, 605, 607, 618, 636, 650, 651, 652, 654, 659, 668, 669, 675, 681, 685, 686, 694, 698, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 719, 726, 754, 765, 767, 772, 774, 780, 804, 812, 815, 818, 834, 846, 861, 870, 876, 885, 886, 889, 895, 911, 937, 938, 996, 1026, 1034], "95": [15, 259, 618], "96": [15, 259, 618], "97": [15, 161, 251, 259, 618], "move": [16, 194, 251, 354, 355, 356, 473, 474, 476, 480, 618, 820, 821, 822, 924, 925, 927, 931, 1026], "inlin": [16, 194, 251, 500, 506, 507, 515, 956, 962, 963, 971], "parenthes": 16, "below": [17, 31, 102, 111, 140, 251, 362, 376, 573, 609, 618, 639, 716], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 95], "utf8_full_condens": [18, 95], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 501, 506, 509, 957, 962, 965], "rounded_corn": 18, "style": [18, 31, 184, 251], "border": 18, "line": [18, 31, 99, 100, 103, 110, 153, 163, 165, 251, 506, 962], "includ": [18, 26, 28, 30, 31, 70, 102, 111, 122, 132, 137, 142, 155, 194, 218, 219, 222, 251, 340, 377, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 518, 520, 521, 524, 569, 598, 599, 618, 632, 650, 688, 716, 766, 806, 819, 839, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 976, 977, 980, 1016, 1026], "divid": [18, 339, 346, 354, 355, 356, 390, 618, 805, 812, 820, 821, 822, 859, 1026], "dens": [18, 153, 251, 466, 618, 917, 1026], "space": [18, 155, 251, 650, 716], "horizont": [18, 72, 149, 160, 222, 251, 554, 555, 564, 565, 569, 570, 571, 576, 579, 589, 592, 596, 604], "markdown": 18, "compat": [18, 31, 35, 251, 500, 501, 506, 507, 515, 516, 681, 716, 719, 956, 957, 962, 963, 971, 972], "No": [18, 531, 987], "appli": [18, 28, 31, 50, 72, 110, 119, 122, 124, 149, 183, 251, 316, 320, 322, 323, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 350, 355, 356, 431, 460, 472, 473, 474, 476, 480, 515, 525, 526, 527, 530, 553, 569, 570, 579, 588, 596, 618, 652, 659, 660, 668, 716, 776, 777, 778, 782, 784, 785, 789, 791, 794, 796, 799, 802, 803, 806, 809, 813, 814, 816, 821, 822, 923, 924, 925, 927, 931, 971, 981, 982, 983, 986, 1026], "round": [18, 31, 67, 95, 251, 292, 366, 542, 618, 751, 830, 1026], "corner": [18, 95], "op": [18, 124, 251, 469, 525, 527, 618, 716, 981, 983, 1026], "one": [18, 29, 31, 55, 65, 80, 88, 90, 91, 92, 93, 94, 123, 124, 125, 128, 146, 147, 153, 154, 155, 156, 167, 176, 184, 192, 193, 198, 214, 217, 232, 251, 259, 362, 389, 423, 428, 472, 495, 507, 540, 573, 604, 609, 618, 645, 646, 649, 650, 651, 664, 676, 695, 699, 716, 725, 827, 855, 891, 896, 923, 963, 990, 1026], "more": [18, 31, 33, 35, 55, 65, 72, 87, 88, 89, 90, 91, 92, 93, 94, 101, 102, 108, 111, 122, 124, 128, 131, 136, 137, 167, 171, 176, 180, 192, 193, 195, 214, 220, 233, 251, 262, 265, 281, 293, 294, 295, 389, 390, 425, 428, 431, 457, 483, 493, 507, 525, 526, 527, 547, 604, 609, 618, 664, 681, 689, 716, 719, 726, 741, 754, 755, 756, 766, 855, 859, 893, 934, 949, 963, 981, 982, 983, 1011, 1026, 1034], "semigraph": 18, "box": [18, 131, 251], "draw": [18, 23, 24, 121, 483, 489, 618, 1034], "found": [18, 28, 52, 75, 84, 86, 91, 95, 141, 223, 251, 484, 509, 525, 527, 618, 691, 716, 935, 965, 981, 983, 1026, 1033], "unicod": 18, "block": [18, 154, 220, 251, 649, 672, 689, 696, 700, 716, 937, 938, 1026], "http": [18, 31, 89, 101, 130, 136, 251, 506, 962], "en": [18, 31, 251], "wikipedia": 18, "org": [18, 89, 101, 130, 136, 251], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 251], "etc": [19, 30, 31, 99, 102, 104, 108, 111, 112, 114, 251, 558, 719, 937, 938, 1026], "inform": [21, 70, 102, 111, 136, 251, 293, 294, 295, 390, 493, 500, 506, 507, 515, 573, 618, 669, 716, 754, 755, 756, 859, 949, 956, 962, 963, 971, 1026], "separ": [22, 28, 97, 99, 100, 110, 182, 184, 212, 219, 221, 251, 265, 405, 410, 505, 565, 569, 570, 618, 690, 716, 873, 878, 961, 994, 1003, 1026], "between": [22, 72, 119, 120, 122, 124, 136, 186, 243, 251, 290, 307, 377, 403, 409, 410, 424, 459, 464, 477, 483, 489, 499, 566, 568, 595, 598, 599, 618, 670, 710, 716, 748, 768, 839, 871, 877, 878, 892, 911, 916, 928, 955, 1026], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 126, 137, 146, 154, 155, 156, 184, 251, 293, 294, 300, 362, 423, 458, 466, 473, 485, 522, 601, 618, 645, 649, 650, 651, 681, 716, 754, 755, 760, 766, 827, 891, 917, 924, 939, 978, 1026], "both": [23, 28, 56, 155, 156, 169, 170, 177, 192, 251, 264, 377, 473, 474, 475, 476, 477, 479, 480, 481, 573, 607, 618, 628, 650, 651, 655, 656, 665, 716, 839, 848, 1026], "tbl_row": 23, "char": [24, 56, 73, 507, 513, 963, 969], "enabl": [25, 73, 127, 197, 228, 251, 485, 618, 675, 694, 716, 939, 1026], "addit": [25, 30, 31, 91, 102, 111, 120, 138, 143, 154, 182, 197, 198, 204, 221, 228, 231, 251, 258, 318, 357, 360, 458, 496, 500, 506, 507, 515, 554, 555, 559, 562, 563, 564, 565, 571, 577, 589, 592, 600, 603, 604, 618, 638, 642, 649, 675, 676, 683, 690, 694, 698, 716, 772, 780, 825, 956, 962, 963, 971, 1026], "verbos": [25, 128, 507, 963], "debug": [25, 636, 643, 660, 716, 1034], "log": [25, 67, 288, 351, 428, 450, 461, 545, 618, 747, 818, 1010, 1026], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 70, 88, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 105, 108, 109, 110, 111, 112, 114, 122, 167, 182, 188, 192, 193, 194, 196, 210, 211, 251, 433, 618, 672, 674, 716, 898, 1026], "show": [26, 31, 54, 140, 153, 171, 181, 251, 639, 669, 679, 716], "variabl": [26, 47, 52, 123, 126, 176, 212, 251, 664, 716, 1003, 1026, 1033], "restrict": [26, 522, 573, 978], "dictionari": [26, 31, 88, 90, 91, 92, 94, 99, 100, 105, 109, 110, 167, 182, 192, 193, 194, 210, 211, 251, 433, 618, 716, 766, 898, 1026], "those": [26, 31, 99, 194, 251, 466, 506, 618, 719, 917, 962, 1026], "been": [26, 31, 251, 466, 473, 474, 475, 476, 477, 479, 480, 481, 618, 917, 1026], "set_fmt_float": 26, "directli": [26, 52, 122, 124, 128, 194, 251, 354, 355, 356, 597, 618, 716, 820, 821, 822, 1026, 1034], "via": [26, 99, 100, 103, 110, 112, 113, 114, 167, 193, 251, 265, 618], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 98, 99, 103, 104, 105, 108, 109, 251], "bytesio": [27, 28, 31, 32, 35, 98, 99, 100, 103, 104, 108, 251], "compress": [27, 32, 35, 251, 680, 681, 716], "avrocompress": [27, 251], "uncompress": [27, 32, 35, 104, 112, 251, 681, 716], "write": [27, 28, 29, 30, 31, 32, 33, 35, 100, 104, 128, 251, 293, 294, 295, 446, 618, 658, 679, 681, 697, 716, 754, 755, 756, 1026], "apach": [27, 35, 98, 101, 251], "avro": [27, 98, 251, 629], "should": [27, 28, 31, 32, 33, 34, 35, 72, 88, 90, 92, 94, 102, 110, 119, 120, 124, 130, 131, 138, 155, 156, 167, 170, 192, 193, 194, 211, 212, 221, 224, 233, 251, 259, 265, 291, 304, 335, 339, 346, 349, 357, 383, 385, 404, 472, 473, 474, 475, 476, 477, 479, 480, 481, 484, 493, 563, 577, 584, 587, 598, 599, 609, 618, 638, 650, 651, 655, 656, 660, 679, 680, 681, 690, 697, 716, 719, 726, 750, 764, 765, 801, 805, 812, 815, 872, 915, 923, 924, 925, 926, 927, 928, 930, 931, 932, 935, 949, 1026], "snappi": [27, 35, 251, 681, 716], "deflat": [27, 251], "import": [27, 28, 31, 32, 35, 38, 65, 88, 92, 93, 110, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 137, 153, 155, 168, 170, 214, 215, 222, 224, 251, 305, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 573, 575, 607, 618, 629, 650, 656, 660, 716, 758, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 843, 847, 849, 850, 855, 923, 947, 999, 1026, 1034], "pathlib": [27, 28, 32, 35, 110, 251], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 157, 158, 159, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 195, 196, 197, 199, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 225, 226, 227, 230, 251, 260, 293, 294, 295, 335, 373, 375, 394, 400, 406, 407, 411, 412, 470, 486, 487, 499, 501, 503, 505, 507, 512, 518, 520, 522, 524, 529, 532, 539, 541, 554, 557, 561, 563, 566, 567, 568, 578, 582, 583, 589, 590, 591, 592, 593, 595, 600, 602, 605, 608, 609, 618, 637, 638, 639, 640, 646, 653, 654, 655, 667, 672, 674, 675, 689, 690, 693, 695, 697, 716, 719, 754, 801, 878, 921, 957, 959, 961, 963, 978, 985, 988, 1026], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 131, 135, 136, 138, 139, 140, 141, 144, 147, 148, 149, 150, 151, 152, 158, 160, 161, 162, 164, 169, 173, 174, 175, 178, 181, 184, 186, 188, 189, 190, 192, 195, 196, 197, 200, 201, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 220, 221, 225, 226, 230, 251, 260, 375, 412, 493, 503, 505, 520, 522, 554, 557, 561, 563, 566, 567, 568, 578, 583, 589, 590, 591, 592, 593, 600, 602, 605, 608, 609, 618, 637, 638, 639, 640, 646, 653, 654, 655, 667, 672, 674, 675, 689, 690, 693, 697, 716, 719, 878, 949, 959, 961, 978, 1026], "ham": [27, 28, 30, 32, 35, 135, 136, 138, 139, 140, 141, 147, 148, 150, 157, 158, 160, 169, 173, 174, 175, 178, 181, 186, 188, 190, 192, 195, 196, 197, 200, 201, 203, 205, 206, 207, 212, 213, 214, 215, 216, 220, 225, 226, 251, 563, 637, 638, 639, 640, 646, 655, 667, 672, 674, 675, 689, 695, 716], "d": [27, 28, 30, 32, 35, 56, 73, 91, 115, 137, 153, 155, 157, 158, 161, 169, 207, 209, 222, 226, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 258, 319, 342, 345, 377, 460, 488, 501, 507, 521, 525, 526, 527, 562, 581, 618, 650, 655, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 781, 808, 811, 839, 957, 963, 977, 981, 982, 983, 1026], "e": [27, 28, 30, 32, 35, 56, 73, 89, 99, 100, 103, 104, 108, 112, 114, 137, 153, 155, 156, 158, 170, 207, 209, 214, 222, 224, 251, 258, 265, 335, 339, 346, 351, 357, 377, 426, 433, 473, 474, 475, 476, 477, 479, 480, 481, 488, 493, 577, 609, 618, 650, 651, 656, 658, 672, 716, 719, 801, 805, 812, 818, 839, 936, 949, 1007, 1026], "dirpath": [27, 28, 32, 35, 110, 251], "new_fil": [27, 28, 32, 35, 251], "has_head": [28, 31, 99, 100, 103, 110, 251], "quot": [28, 99, 100, 110, 251], "batch_siz": [28, 99, 100, 113, 251], "1024": [28, 99, 100, 113, 251, 681, 716], "datetime_format": [28, 251], "date_format": [28, 251], "time_format": [28, 251], "float_precis": [28, 31, 251], "null_valu": [28, 99, 100, 110, 251], "textiowrapp": [28, 251], "comma": [28, 251], "csv": [28, 99, 100, 103, 110, 251, 629, 680, 681, 716], "result": [28, 33, 34, 65, 72, 92, 94, 101, 102, 110, 112, 114, 115, 124, 144, 155, 156, 169, 180, 194, 201, 215, 224, 231, 251, 265, 342, 345, 354, 355, 356, 360, 390, 423, 431, 458, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 485, 487, 520, 521, 527, 546, 558, 569, 570, 573, 588, 594, 597, 598, 599, 610, 618, 633, 650, 651, 655, 660, 669, 678, 680, 681, 697, 698, 716, 725, 726, 808, 811, 820, 821, 822, 859, 915, 921, 923, 924, 925, 926, 927, 928, 930, 931, 932, 939, 942, 976, 977, 983, 1007, 1026, 1033, 1034], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 72, 88, 89, 90, 91, 92, 93, 94, 99, 100, 102, 103, 104, 108, 110, 111, 112, 113, 114, 123, 130, 131, 132, 140, 144, 153, 155, 156, 158, 166, 167, 170, 172, 176, 180, 193, 194, 195, 203, 207, 211, 212, 214, 218, 219, 220, 222, 223, 251, 265, 293, 294, 295, 312, 331, 332, 338, 363, 390, 418, 423, 431, 433, 444, 458, 466, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 489, 493, 494, 508, 510, 512, 513, 518, 519, 520, 521, 522, 524, 525, 526, 527, 530, 554, 555, 556, 558, 560, 566, 567, 569, 571, 573, 579, 585, 586, 587, 589, 592, 594, 597, 598, 599, 603, 604, 607, 609, 610, 618, 632, 639, 641, 650, 651, 655, 656, 660, 664, 672, 681, 682, 688, 689, 691, 697, 700, 716, 719, 725, 726, 754, 755, 756, 765, 774, 797, 798, 804, 832, 834, 835, 858, 859, 861, 886, 891, 915, 917, 919, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 934, 935, 939, 945, 949, 950, 964, 966, 968, 969, 974, 975, 976, 977, 978, 980, 981, 982, 983, 986, 996, 1002, 1007, 1016, 1026, 1033], "instead": [28, 33, 34, 50, 54, 65, 72, 99, 108, 122, 131, 155, 156, 167, 170, 180, 182, 192, 193, 194, 197, 215, 224, 228, 251, 275, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 510, 512, 518, 524, 558, 560, 573, 585, 586, 589, 592, 594, 597, 603, 607, 610, 618, 644, 650, 651, 656, 675, 694, 697, 716, 719, 735, 765, 801, 805, 812, 915, 937, 938, 966, 968, 974, 980, 1008, 1026, 1033], "whether": [28, 92, 94, 124, 198, 251, 322, 338, 340, 395, 396, 438, 439, 485, 573, 607, 618, 660, 676, 716, 719, 765, 784, 804, 806, 863, 864, 915, 1026, 1033], "header": [28, 31, 35, 95, 99, 100, 103, 110, 141, 184, 219, 251, 681, 716], "field": [28, 57, 84, 86, 91, 214, 221, 251, 423, 433, 507, 508, 521, 522, 535, 569, 570, 588, 603, 618, 690, 716, 891, 977, 978, 992, 994], "symbol": [28, 251], "byte": [28, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 142, 251, 283, 286, 287, 510, 513, 681, 716, 742, 745, 746, 819, 966, 969, 1026], "specifi": [28, 31, 65, 75, 84, 86, 103, 122, 132, 138, 142, 143, 146, 154, 155, 156, 169, 182, 192, 194, 197, 198, 204, 218, 221, 228, 231, 251, 354, 355, 356, 357, 362, 433, 458, 469, 473, 474, 475, 476, 477, 479, 480, 481, 496, 511, 517, 554, 555, 559, 562, 563, 564, 565, 571, 573, 577, 589, 592, 600, 603, 604, 618, 632, 638, 642, 645, 649, 650, 651, 655, 675, 676, 683, 688, 690, 694, 698, 716, 819, 820, 821, 822, 827, 967, 973, 1026], "defin": [28, 31, 38, 119, 120, 122, 131, 155, 156, 180, 183, 233, 251, 265, 377, 422, 460, 473, 474, 475, 476, 477, 479, 480, 481, 556, 573, 587, 603, 607, 618, 650, 651, 668, 700, 716, 719, 726, 839, 890, 1026], "chrono": [28, 251, 342, 345, 525, 526, 527, 530, 808, 811, 981, 982, 983, 986], "rust": [28, 35, 81, 104, 108, 131, 233, 251, 726, 1026], "crate": [28, 251, 500, 501, 506, 507, 515, 516, 525, 526, 527, 530, 719, 956, 957, 962, 963, 971, 972, 981, 982, 983, 986], "fraction": [28, 117, 118, 195, 251, 340, 459, 483, 525, 527, 618, 806, 911, 934, 981, 983, 1026], "second": [28, 121, 155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 525, 527, 573, 574, 575, 606, 607, 609, 618, 650, 651, 656, 716, 801, 805, 812, 981, 983, 1034], "precis": [28, 31, 38, 39, 167, 193, 194, 211, 251, 311, 528, 719, 773, 984], "infer": [28, 88, 90, 91, 92, 93, 94, 99, 100, 103, 110, 113, 131, 251, 470, 508, 525, 526, 527, 528, 530, 597, 618, 716, 921, 964, 981, 982, 983, 984, 986, 1026], "maximum": [28, 99, 100, 110, 120, 121, 122, 124, 173, 251, 397, 434, 452, 466, 589, 618, 661, 716, 754, 786, 865, 899, 907, 912, 917, 1026], "timeunit": [28, 38, 40, 251, 311, 312, 344, 349, 527, 573, 719, 773, 774, 810, 815, 983], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 72, 91, 117, 122, 131, 133, 167, 168, 177, 180, 183, 192, 193, 194, 215, 222, 251, 634, 665, 668, 716, 719, 753, 1026, 1033, 1034], "datetim": [28, 31, 65, 95, 122, 137, 153, 155, 156, 168, 170, 224, 251, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 400, 473, 474, 475, 476, 477, 479, 480, 481, 525, 527, 544, 573, 575, 581, 587, 607, 618, 650, 651, 656, 716, 719, 771, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 855, 868, 869, 907, 908, 938, 981, 983, 1009, 1026], "place": [28, 132, 139, 160, 161, 184, 189, 194, 200, 201, 204, 218, 226, 251, 275, 410, 417, 486, 487, 495, 618, 632, 677, 678, 683, 688, 716, 735, 878, 885, 918, 920, 941, 942, 951, 1026], "float64": [28, 31, 91, 99, 122, 141, 142, 149, 196, 215, 228, 251, 267, 268, 269, 270, 271, 272, 290, 296, 297, 305, 340, 357, 383, 385, 465, 491, 492, 542, 543, 563, 577, 594, 597, 610, 618, 640, 674, 694, 716, 719, 806, 1008, 1013, 1026], "repres": [28, 48, 63, 88, 90, 92, 93, 94, 205, 225, 251, 383, 385, 498, 551, 554, 563, 566, 573, 577, 587, 598, 599, 602, 607, 608, 618, 684, 692, 716, 938, 953, 1015, 1026], "empti": [28, 79, 91, 99, 100, 103, 110, 133, 134, 155, 164, 176, 251, 587, 600, 634, 635, 650, 664, 716, 719, 753, 757, 842, 1026], "table_nam": [29, 31, 251], "connection_uri": [29, 101, 251], "if_exist": [29, 251], "dbwritemod": [29, 251], "fail": [29, 30, 89, 102, 104, 111, 130, 220, 251, 276, 423, 525, 526, 527, 530, 618, 689, 716, 726, 981, 982, 983, 986, 1026], "dbwriteengin": [29, 251], "sqlalchemi": [29, 251], "databas": [29, 101, 251, 629], "append": [29, 30, 122, 144, 169, 170, 251, 467, 573, 609, 618, 655, 656, 716, 1026], "creat": [29, 31, 88, 92, 94, 111, 120, 121, 122, 123, 124, 125, 133, 134, 155, 156, 181, 184, 224, 228, 251, 312, 339, 346, 423, 467, 473, 474, 476, 479, 480, 481, 519, 550, 564, 572, 573, 574, 575, 606, 607, 618, 634, 635, 641, 650, 651, 694, 716, 753, 757, 765, 770, 774, 805, 812, 909, 915, 918, 975, 1007, 1026, 1033, 1034], "connect": [29, 99, 101, 104, 108, 112, 114, 115, 251, 630], "uri": [29, 30, 101, 102, 111, 251], "postgresql": [29, 101, 251, 458, 618], "usernam": [29, 99, 101, 104, 108, 112, 114, 251], "password": [29, 99, 101, 104, 108, 112, 114, 251], "server": [29, 101, 251], "port": [29, 99, 101, 104, 108, 112, 114, 251], "replac": [29, 30, 99, 100, 110, 145, 146, 190, 219, 228, 251, 312, 338, 433, 516, 618, 644, 694, 716, 774, 804, 898, 937, 938, 972, 1026], "insert": [29, 99, 100, 104, 108, 110, 112, 113, 114, 161, 189, 219, 221, 251, 484, 499, 533, 618, 690, 716, 935, 955, 989, 1026], "mode": [29, 30, 50, 251, 507, 594, 597, 610, 618, 716, 963, 1026, 1033], "new": [29, 30, 31, 110, 128, 131, 140, 160, 161, 180, 181, 188, 189, 208, 221, 222, 228, 251, 260, 312, 359, 376, 432, 515, 516, 521, 522, 534, 535, 541, 618, 629, 639, 672, 687, 690, 694, 700, 716, 722, 770, 774, 824, 909, 920, 971, 972, 977, 978, 990, 992, 998, 1004, 1017, 1026, 1033], "alreadi": [29, 30, 251, 304, 404, 618, 764, 872, 1026], "adbc": [29, 101, 251], "deltalak": [30, 102, 111, 116, 251], "deltat": [30, 251], "ignor": [30, 121, 122, 124, 174, 206, 251, 306, 338, 354, 355, 356, 402, 452, 453, 618, 767, 804, 820, 821, 822, 870, 907, 908, 1026], "overwrite_schema": [30, 251], "storage_opt": [30, 99, 102, 104, 108, 111, 112, 114, 251], "delta_write_opt": [30, 251], "delta": [30, 40, 102, 111, 205, 225, 251, 479, 481, 498, 551, 566, 598, 599, 602, 608, 618, 629, 684, 692, 716, 930, 932, 953, 1015, 1026], "like": [30, 89, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 163, 165, 169, 214, 251, 310, 404, 445, 466, 506, 573, 604, 607, 618, 643, 671, 716, 772, 872, 917, 962, 1026], "categor": [30, 56, 73, 169, 212, 213, 251, 291, 433, 544, 618, 719, 749, 750, 765, 915, 1009, 1026], "protocol": [30, 89, 101, 130, 251], "object": [30, 31, 32, 35, 55, 72, 89, 90, 95, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 111, 120, 122, 124, 130, 154, 155, 156, 171, 194, 214, 215, 251, 573, 587, 607, 629, 650, 651, 671, 716, 719, 749, 771, 862, 954, 1002, 1026], "handl": [30, 72, 95, 99, 100, 110, 115, 251, 306, 402, 533, 618, 767, 870, 989, 1026], "throw": [30, 89, 251, 290, 508, 509, 618, 748, 964, 965, 1026], "add": [30, 31, 100, 131, 144, 155, 228, 229, 251, 462, 537, 575, 579, 609, 618, 650, 655, 694, 695, 696, 716, 725, 1026], "anyth": [30, 192, 251, 507, 963], "updat": [30, 251, 716], "extra": [30, 35, 99, 102, 103, 104, 108, 111, 112, 114, 144, 155, 251, 650, 681, 716, 725, 1026], "storag": [30, 99, 102, 104, 108, 111, 112, 114, 251], "backend": [30, 101, 102, 111, 251], "cloud": [30, 102, 111, 115, 251], "configur": [30, 102, 111, 251], "authent": [30, 102, 111, 251], "see": [30, 31, 38, 101, 102, 103, 111, 117, 118, 122, 124, 136, 169, 183, 251, 293, 294, 295, 362, 376, 390, 431, 493, 500, 506, 507, 515, 573, 596, 618, 719, 754, 755, 756, 859, 949, 956, 962, 963, 971, 1026, 1034], "here": [30, 31, 88, 90, 91, 92, 94, 101, 102, 111, 120, 122, 124, 251, 509, 716, 965], "gc": [30, 102, 111, 251], "azur": [30, 102, 111, 251], "keyword": [30, 53, 102, 108, 111, 136, 183, 192, 197, 228, 231, 251, 460, 600, 603, 618, 668, 675, 694, 698, 716, 1026], "argument": [30, 35, 99, 102, 108, 111, 136, 138, 143, 154, 155, 156, 174, 182, 183, 184, 197, 198, 204, 206, 215, 221, 224, 228, 231, 251, 339, 346, 357, 377, 458, 460, 473, 474, 475, 476, 477, 479, 480, 481, 496, 512, 518, 524, 554, 555, 559, 562, 563, 564, 565, 571, 573, 577, 589, 592, 597, 600, 603, 604, 607, 618, 638, 642, 649, 650, 651, 668, 675, 676, 683, 690, 694, 698, 716, 805, 812, 839, 968, 974, 980, 1008, 1026], "while": [30, 100, 102, 103, 111, 122, 124, 167, 176, 219, 251, 664, 716], "lake": [30, 102, 111, 251, 629], "instanti": [30, 31, 197, 228, 251, 675, 694, 716], "basic": [30, 31, 251, 1034], "filesystem": [30, 102, 111, 251], "table_path": [30, 102, 111, 251], "doe": [30, 65, 72, 82, 88, 90, 91, 92, 94, 95, 99, 100, 102, 103, 110, 111, 115, 117, 118, 144, 168, 169, 192, 193, 194, 220, 228, 251, 349, 423, 433, 548, 573, 578, 618, 643, 655, 660, 689, 694, 716, 725, 815, 832, 898, 944, 1016, 1026], "match": [30, 31, 38, 72, 82, 88, 90, 91, 92, 94, 117, 118, 146, 170, 192, 251, 439, 478, 500, 501, 504, 506, 507, 508, 509, 515, 516, 523, 525, 526, 527, 563, 618, 645, 656, 716, 719, 848, 855, 929, 956, 957, 960, 962, 963, 964, 965, 971, 972, 979, 981, 982, 983, 1026], "version": [30, 70, 102, 111, 116, 251, 331, 332, 525, 527, 573, 596, 597, 607, 797, 798, 981, 983], "old": [30, 188, 251, 672, 716], "existing_table_path": [30, 251], "store": [30, 99, 108, 144, 167, 193, 251, 725, 1026], "bucket": [30, 102, 111, 251, 339, 346, 805, 812, 835, 1026], "prefix": [30, 128, 251, 260, 287, 432, 523, 533, 537, 618, 719, 746, 979, 989], "aws_region": [30, 111, 251], "the_aws_region": [30, 251], "aws_access_key_id": [30, 102, 111, 251], "the_aws_access_key_id": [30, 102, 111, 251], "aws_secret_access_kei": [30, 102, 111, 251], "the_aws_secret_access_kei": [30, 102, 111, 251], "workbook": [31, 251], "worksheet": [31, 251], "posit": [31, 138, 143, 154, 182, 197, 198, 204, 221, 228, 231, 251, 354, 355, 356, 357, 458, 496, 514, 554, 555, 559, 562, 563, 564, 565, 571, 577, 589, 592, 600, 603, 604, 618, 638, 642, 649, 675, 676, 683, 690, 694, 698, 716, 820, 821, 822, 970, 1026], "tupl": [31, 101, 131, 167, 192, 193, 194, 199, 230, 251, 470, 618, 669, 679, 716, 719, 921, 1026], "a1": [31, 66, 68, 251], "table_styl": [31, 251], "column_format": [31, 251], "dtype_format": [31, 251], "oneormoredatatyp": [31, 120, 251, 855, 1026], "conditional_format": [31, 251], "conditionalformatdict": [31, 251], "column_tot": [31, 251], "columntotalsdefinit": [31, 251], "column_width": [31, 251], "row_tot": [31, 251], "rowtotalsdefinit": [31, 251], "row_height": [31, 251], "sparklin": [31, 251], "sequenc": [31, 57, 65, 71, 88, 90, 91, 92, 94, 97, 99, 100, 110, 120, 121, 122, 132, 137, 143, 144, 169, 170, 176, 180, 183, 184, 194, 204, 212, 218, 220, 221, 222, 223, 224, 251, 381, 423, 431, 460, 496, 535, 556, 559, 569, 570, 579, 581, 588, 596, 618, 632, 642, 655, 656, 668, 683, 688, 689, 690, 691, 716, 725, 766, 768, 891, 938, 992, 1026], "formula": [31, 251, 351, 618, 818, 1026], "autofilt": [31, 251], "autofit": [31, 251], "hidden_column": [31, 251], "hide_gridlin": [31, 251], "sheet_zoom": [31, 251], "excel": [31, 103, 251, 629], "open": [31, 99, 100, 103, 104, 108, 112, 114, 251], "xlsxwriter": [31, 116, 251], "ha": [31, 65, 110, 130, 155, 156, 224, 251, 265, 288, 304, 389, 442, 473, 474, 475, 476, 477, 479, 480, 481, 545, 556, 618, 650, 651, 700, 716, 747, 753, 764, 766, 832, 845, 1010, 1026], "close": [31, 155, 156, 251, 377, 428, 473, 474, 475, 476, 477, 479, 480, 481, 493, 573, 607, 618, 650, 651, 716, 839, 949, 1026], "xlsx": [31, 103, 251], "work": [31, 39, 100, 103, 189, 251, 265, 281, 292, 293, 294, 295, 357, 366, 404, 425, 458, 513, 547, 618, 741, 751, 754, 755, 756, 830, 872, 893, 969, 1011, 1026], "directori": [31, 108, 251], "sheet1": [31, 251], "valid": [31, 38, 50, 104, 108, 124, 128, 142, 169, 251, 304, 500, 501, 506, 507, 509, 515, 516, 573, 618, 655, 716, 719, 764, 819, 832, 956, 957, 962, 963, 965, 971, 972, 1026], "notat": [31, 251], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 120, 122, 123, 125, 155, 156, 251, 292, 340, 366, 367, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 514, 553, 558, 581, 585, 586, 597, 618, 650, 651, 716, 719, 733, 734, 751, 806, 830, 848, 919, 929, 938, 970, 1026, 1033, 1034], "medium": [31, 251], "kei": [31, 65, 70, 72, 155, 167, 169, 170, 177, 182, 184, 188, 191, 193, 194, 251, 603, 650, 655, 656, 665, 672, 673, 716], "follow": [31, 70, 99, 100, 102, 110, 111, 131, 155, 156, 170, 183, 224, 251, 265, 335, 339, 346, 460, 466, 473, 474, 475, 476, 477, 478, 479, 480, 481, 535, 546, 556, 573, 609, 611, 612, 614, 618, 619, 620, 624, 625, 626, 650, 651, 656, 668, 716, 801, 805, 812, 917, 937, 938, 1018, 1020, 1022, 1026, 1027, 1030, 1031, 1032, 1034], "first_column": [31, 251], "last_column": [31, 251], "banded_column": [31, 251], "banded_row": [31, 251], "sheet": [31, 103, 251], "chart": [31, 251, 669, 716], "subsequ": [31, 55, 187, 215, 251, 423, 641, 716], "colnam": [31, 110, 122, 141, 251, 640, 716], "given": [31, 50, 51, 65, 88, 90, 91, 92, 94, 99, 100, 110, 119, 120, 122, 123, 124, 125, 131, 132, 142, 143, 155, 156, 166, 182, 183, 192, 194, 200, 201, 204, 218, 223, 251, 265, 310, 313, 342, 344, 345, 351, 377, 400, 417, 423, 426, 458, 460, 466, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 507, 525, 527, 535, 573, 577, 597, 598, 599, 607, 618, 632, 642, 650, 651, 660, 668, 677, 678, 683, 688, 691, 700, 716, 719, 726, 765, 772, 775, 808, 810, 811, 818, 819, 835, 839, 858, 868, 885, 891, 894, 897, 909, 915, 917, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 935, 941, 942, 963, 981, 983, 1013, 1017, 1026, 1033, 1034], "dd": [31, 251], "mm": [31, 251], "yyyi": [31, 251], "00": [31, 122, 155, 170, 224, 251, 310, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 525, 527, 530, 573, 575, 607, 618, 650, 656, 716, 719, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 981, 983, 986], "overridden": [31, 88, 90, 92, 94, 126, 251, 716], "basi": [31, 122, 251], "param": [31, 88, 90, 91, 92, 94, 99, 100, 110, 121, 122, 124, 192, 251, 716], "It": [31, 131, 177, 183, 233, 251, 265, 289, 441, 573, 618, 660, 665, 700, 716, 937, 938, 1026], "also": [31, 55, 91, 110, 120, 121, 122, 123, 124, 128, 141, 154, 155, 156, 177, 180, 193, 197, 204, 228, 251, 300, 303, 338, 376, 377, 466, 473, 474, 475, 476, 477, 479, 480, 481, 496, 518, 524, 569, 570, 573, 579, 581, 596, 609, 617, 618, 623, 649, 650, 651, 665, 675, 683, 694, 695, 716, 719, 804, 839, 917, 980, 1026], "group": [31, 35, 50, 100, 154, 155, 156, 168, 180, 182, 184, 194, 222, 224, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251, 259, 265, 359, 365, 404, 458, 466, 495, 496, 500, 506, 507, 515, 540, 556, 618, 649, 650, 651, 681, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716, 719, 872, 956, 962, 963, 971], "float_dtyp": [31, 251], "simplifi": [31, 71, 251, 636, 641, 643, 669, 679, 680, 681, 716], "uniform": [31, 251], "condit": [31, 140, 147, 192, 251, 504, 523, 560, 579, 609, 639, 646, 716], "suppli": [31, 88, 90, 91, 92, 94, 192, 251, 460, 618, 716], "typenam": [31, 251], "3_color_scal": [31, 251], "data_bar": [31, 251], "make": [31, 57, 72, 88, 93, 99, 100, 104, 108, 112, 114, 177, 180, 187, 224, 251, 355, 356, 433, 458, 469, 483, 489, 521, 533, 618, 665, 716, 821, 822, 835, 898, 977, 989, 1026, 1034], "icon": [31, 251], "multipl": [31, 53, 71, 72, 99, 100, 110, 112, 113, 114, 120, 124, 132, 138, 142, 144, 147, 154, 155, 160, 168, 182, 184, 194, 197, 198, 204, 218, 228, 231, 251, 422, 438, 442, 449, 450, 458, 470, 473, 474, 475, 476, 477, 479, 480, 481, 496, 554, 555, 559, 563, 569, 570, 571, 579, 588, 589, 592, 596, 604, 609, 618, 632, 638, 646, 649, 650, 675, 676, 683, 688, 694, 698, 700, 716, 725, 819, 890, 903, 921, 1026], "singl": [31, 51, 65, 72, 99, 100, 101, 108, 110, 120, 138, 139, 140, 144, 151, 166, 169, 182, 192, 194, 204, 251, 265, 335, 363, 401, 422, 431, 467, 470, 496, 499, 552, 554, 555, 556, 559, 563, 564, 565, 571, 588, 589, 592, 604, 618, 638, 639, 655, 683, 716, 725, 801, 869, 890, 918, 921, 955, 1002, 1026], "across": [31, 65, 251, 554, 555, 571, 589, 592, 604], "effect": [31, 130, 149, 155, 214, 251, 265, 318, 573, 618, 650, 696, 716, 772, 780], "heatmap": [31, 251], "min": [31, 35, 137, 146, 155, 156, 184, 251, 293, 295, 301, 362, 458, 466, 476, 600, 607, 618, 645, 650, 651, 681, 716, 754, 756, 761, 766, 827, 917, 927, 1026, 1034], "entir": [31, 251], "final": [31, 65, 114, 251, 354, 355, 356, 618, 643, 716, 820, 821, 822, 1026], "made": [31, 251, 607, 1007, 1026], "up": [31, 57, 101, 167, 170, 193, 194, 211, 251, 265, 292, 533, 618, 655, 656, 660, 716, 719, 751, 989, 1026], "abov": [31, 251, 609], "order": [31, 50, 52, 65, 91, 117, 131, 132, 154, 155, 156, 182, 183, 184, 195, 198, 204, 214, 218, 220, 224, 251, 265, 275, 281, 291, 419, 425, 466, 483, 484, 485, 489, 495, 496, 535, 547, 548, 559, 618, 628, 632, 649, 650, 651, 664, 676, 680, 681, 683, 688, 689, 716, 726, 735, 741, 750, 765, 854, 887, 893, 915, 917, 922, 934, 935, 939, 951, 992, 1011, 1012, 1026], "than": [31, 87, 92, 94, 99, 100, 110, 115, 122, 124, 131, 133, 153, 154, 167, 170, 182, 192, 193, 195, 222, 233, 251, 265, 370, 371, 389, 392, 430, 444, 483, 493, 511, 517, 522, 533, 566, 573, 604, 618, 649, 656, 680, 681, 716, 726, 934, 949, 967, 973, 978, 989, 1026, 1034], "total": [31, 142, 251, 819, 1026], "export": [31, 167, 168, 193, 194, 211, 214, 251], "numer": [31, 170, 251, 258, 293, 294, 295, 367, 377, 428, 448, 450, 461, 469, 488, 536, 546, 618, 629, 656, 716, 719, 754, 755, 756, 766, 839, 853, 936, 943, 1026, 1034], "associ": [31, 51, 53, 65, 101, 121, 194, 251], "sum": [31, 50, 65, 142, 149, 154, 155, 156, 166, 184, 231, 251, 265, 302, 303, 351, 363, 423, 473, 476, 480, 552, 554, 569, 571, 579, 596, 618, 636, 641, 643, 649, 650, 651, 667, 669, 679, 698, 716, 719, 762, 763, 818, 819, 924, 925, 927, 930, 931, 932, 1026], "pass": [31, 35, 53, 65, 90, 101, 103, 110, 120, 122, 124, 132, 136, 138, 154, 155, 156, 158, 172, 182, 183, 197, 204, 207, 218, 224, 228, 231, 251, 265, 319, 338, 360, 375, 458, 460, 473, 474, 475, 476, 477, 479, 480, 481, 496, 512, 518, 524, 554, 555, 559, 563, 571, 573, 581, 589, 592, 603, 604, 618, 632, 638, 649, 650, 651, 653, 660, 668, 675, 679, 683, 688, 694, 698, 700, 716, 726, 781, 804, 825, 834, 861, 968, 974, 980, 996, 1026], "must": [31, 89, 90, 102, 111, 137, 143, 155, 156, 170, 177, 192, 251, 423, 431, 473, 474, 475, 476, 477, 479, 480, 481, 618, 642, 650, 651, 656, 660, 665, 716, 765, 766, 915, 1026], "funcnam": [31, 251], "averag": [31, 251, 354, 355, 356, 466, 618, 820, 821, 822, 917, 1026], "count_num": [31, 251], "count": [31, 50, 99, 100, 104, 108, 110, 112, 113, 114, 137, 155, 156, 170, 180, 181, 184, 219, 223, 224, 229, 233, 242, 251, 266, 299, 335, 393, 401, 451, 456, 473, 474, 475, 476, 477, 479, 480, 481, 501, 548, 550, 557, 593, 618, 650, 651, 656, 667, 691, 696, 700, 709, 716, 766, 801, 835, 869, 905, 910, 957, 1012, 1014, 1026], "std_dev": [31, 251], "var": [31, 125, 251, 481, 618, 716, 1026], "pixel": [31, 251], "unit": [31, 38, 40, 122, 124, 142, 251, 311, 312, 319, 344, 349, 429, 442, 525, 527, 549, 573, 581, 618, 669, 716, 773, 774, 781, 810, 815, 819, 897, 981, 983, 1013, 1026, 1034], "hand": [31, 99, 100, 110, 251, 403, 409, 424, 871, 877, 892], "side": [31, 155, 156, 251, 377, 403, 409, 424, 473, 474, 475, 476, 477, 479, 480, 481, 484, 618, 650, 651, 716, 839, 871, 877, 892, 935, 1026], "call": [31, 54, 100, 122, 124, 128, 131, 154, 155, 156, 171, 250, 251, 265, 300, 303, 589, 592, 618, 630, 649, 650, 651, 715, 716, 719, 726, 1026], "ad": [31, 91, 130, 155, 219, 228, 251, 264, 360, 569, 570, 618, 650, 694, 716, 825, 1026], "end": [31, 99, 100, 108, 110, 155, 251, 283, 286, 287, 310, 335, 339, 340, 357, 377, 418, 500, 504, 507, 519, 523, 558, 563, 573, 577, 585, 586, 607, 609, 618, 650, 652, 659, 669, 716, 719, 745, 772, 801, 805, 839, 886, 960, 963, 975, 979, 1026], "wise": [31, 65, 149, 251, 267, 268, 269, 270, 271, 272, 296, 297, 358, 427, 490, 491, 492, 542, 543, 569, 570, 579, 589, 592, 596, 618, 727, 728, 729, 730, 731, 732, 758, 759, 823, 895, 896, 946, 947, 948, 999, 1000, 1026], "particip": [31, 251], "distinct": [31, 124, 182, 251, 281, 425, 466, 575, 618, 741, 893, 917, 1026, 1034], "referenc": [31, 251, 535], "differ": [31, 99, 115, 117, 144, 155, 156, 167, 193, 194, 211, 219, 251, 306, 316, 335, 336, 338, 347, 353, 402, 433, 452, 453, 455, 483, 489, 525, 548, 573, 578, 581, 618, 641, 650, 651, 716, 719, 725, 726, 767, 778, 801, 802, 804, 813, 870, 907, 908, 936, 981, 1026], "row_index": [31, 251], "height": [31, 140, 251], "provid": [31, 53, 99, 100, 101, 102, 110, 111, 122, 124, 166, 251, 265, 284, 285, 423, 431, 502, 503, 506, 508, 509, 581, 603, 618, 629, 680, 681, 716, 726, 743, 744, 835, 858, 958, 959, 962, 964, 965, 1026, 1033, 1034], "intersect": [31, 251, 719], "bodi": [31, 251], "start": [31, 98, 99, 100, 101, 104, 108, 110, 112, 113, 114, 126, 154, 155, 171, 203, 224, 229, 251, 283, 286, 287, 316, 319, 320, 322, 323, 328, 330, 336, 337, 339, 340, 344, 346, 347, 348, 350, 357, 377, 418, 473, 474, 476, 479, 480, 481, 494, 500, 504, 507, 519, 523, 558, 563, 569, 573, 577, 579, 585, 586, 607, 609, 618, 649, 650, 669, 682, 696, 716, 719, 746, 773, 775, 778, 781, 782, 784, 789, 791, 794, 796, 799, 802, 803, 805, 806, 810, 812, 813, 814, 815, 816, 839, 886, 950, 960, 963, 975, 979, 1026, 1034], "zero": [31, 88, 89, 98, 99, 100, 104, 108, 121, 130, 146, 167, 192, 209, 214, 215, 251, 362, 423, 428, 484, 493, 533, 546, 618, 634, 645, 716, 753, 827, 891, 949, 989, 1002, 1007, 1008, 1026], "unless": [31, 65, 90, 215, 251, 518, 524, 597, 716, 980, 1008, 1016, 1026], "marker": [31, 251], "compliant": [31, 251], "case": [31, 65, 88, 90, 91, 92, 94, 114, 126, 131, 144, 155, 156, 167, 251, 310, 431, 432, 441, 442, 500, 507, 515, 618, 650, 651, 716, 719, 725, 772, 956, 963, 971, 1026], "three": [31, 217, 251, 423, 484, 618, 891], "avail": [31, 97, 101, 102, 111, 120, 128, 250, 251, 466, 611, 612, 614, 617, 618, 619, 620, 623, 624, 625, 626, 629, 630, 643, 715, 716, 719, 917, 1018, 1020, 1022, 1026, 1027, 1030, 1031, 1032], "insert_befor": [31, 251], "insert_aft": [31, 251], "respect": [31, 251], "direct": [31, 101, 108, 114, 222, 251], "far": [31, 251], "thei": [31, 91, 110, 117, 128, 171, 194, 251, 472, 618, 719, 923, 1026], "strongli": [31, 126, 131, 192, 233, 251, 265, 618, 726, 1026], "advis": [31, 171, 251, 289, 618], "structur": [31, 79, 83, 85, 144, 183, 194, 214, 251, 460, 618, 668, 716, 725, 1026], "your": [31, 65, 99, 100, 117, 118, 131, 167, 197, 228, 231, 251, 265, 289, 525, 526, 527, 618, 636, 652, 659, 660, 675, 694, 698, 716, 726, 981, 982, 983, 1026, 1034], "wherev": [31, 131, 233, 251, 265, 618, 726, 1026], "possibl": [31, 99, 131, 154, 167, 193, 220, 233, 251, 265, 429, 441, 522, 549, 618, 649, 689, 716, 726, 978, 1026], "simpl": [31, 124, 180, 251], "colx": [31, 55, 251, 719, 1034], "coli": [31, 251, 719, 1034], "after": [31, 55, 72, 91, 98, 99, 100, 104, 108, 110, 112, 113, 114, 144, 221, 250, 251, 357, 433, 458, 466, 533, 618, 690, 716, 725, 898, 917, 989, 1026], "befor": [31, 99, 110, 126, 128, 144, 155, 170, 221, 251, 302, 303, 304, 433, 458, 459, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 533, 538, 598, 599, 618, 650, 653, 656, 690, 716, 725, 762, 763, 764, 898, 911, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 989, 995, 1026], "most": [31, 52, 88, 99, 100, 101, 110, 251, 442, 449, 459, 522, 550, 618, 903, 911, 978, 1014, 1026, 1033], "mandatori": [31, 251], "return_dtyp": [31, 131, 251, 265, 431, 433, 556, 588, 618, 726, 898, 1026], "latter": [31, 144, 251, 725, 1026], "appropri": [31, 214, 251, 466, 618, 917, 1026], "pure": [31, 251], "actual": [31, 91, 103, 122, 124, 194, 251, 289, 618, 944, 1026], "indic": [31, 98, 99, 100, 104, 108, 110, 119, 120, 124, 155, 156, 170, 194, 198, 212, 224, 251, 276, 335, 339, 346, 379, 382, 383, 385, 386, 387, 422, 437, 440, 473, 474, 475, 476, 477, 479, 480, 481, 484, 490, 540, 559, 560, 618, 650, 651, 656, 676, 716, 719, 801, 805, 812, 843, 847, 849, 850, 851, 852, 890, 935, 946, 997, 1003, 1026, 1034], "calcul": [31, 65, 155, 205, 225, 251, 306, 354, 355, 356, 390, 402, 403, 429, 478, 493, 498, 549, 551, 554, 556, 566, 598, 599, 602, 608, 618, 650, 684, 692, 716, 767, 820, 821, 822, 859, 870, 871, 929, 949, 953, 1015, 1026], "individu": [31, 122, 156, 214, 251, 265, 507, 618, 651, 681, 716, 752, 963, 1026], "gridlin": [31, 251], "zoom": [31, 251], "level": [31, 35, 110, 112, 113, 114, 122, 131, 149, 180, 251, 363, 618, 652, 659, 681, 716], "definit": [31, 120, 251, 390, 618, 859, 1026], "take": [31, 122, 128, 149, 155, 177, 183, 184, 208, 214, 251, 335, 496, 541, 573, 576, 578, 618, 650, 665, 687, 716, 801, 998, 1017, 1026], "care": [31, 251, 265, 485, 618, 939, 1026], "rel": [31, 101, 102, 111, 117, 118, 251, 335, 354, 355, 356, 475, 477, 479, 481, 618, 801, 820, 821, 822, 1026], "readthedoc": [31, 251], "io": [31, 251], "working_with_conditional_format": [31, 251], "html": [31, 89, 130, 136, 251], "similarli": [31, 91, 155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "well": [31, 99, 100, 110, 143, 184, 251, 377, 573, 618, 642, 716, 839, 1026], "adjac": [31, 251], "two": [31, 55, 90, 92, 94, 101, 149, 176, 177, 184, 217, 232, 233, 251, 259, 307, 312, 423, 495, 540, 566, 568, 598, 599, 607, 618, 664, 665, 699, 700, 716, 768, 774, 891, 1026], "help": [31, 251, 643, 716], "appear": [31, 91, 117, 251, 548, 618, 1012, 1026], "working_with_sparklin": [31, 251], "inject": [31, 65, 251], "locat": [31, 144, 190, 216, 221, 251, 484, 618, 690, 716, 725, 935, 938, 997, 1026], "syntax": [31, 131, 180, 251, 500, 506, 507, 515, 679, 716, 956, 962, 963, 971, 1026], "ensur": [31, 73, 101, 121, 122, 124, 154, 182, 192, 251, 377, 550, 618, 649, 660, 716, 719, 1007, 1014, 1026], "correctli": [31, 251], "microsoft": [31, 116, 251], "com": [31, 101, 251, 354, 355, 356, 506, 507, 618, 820, 821, 822, 962, 963, 1026], "u": [31, 38, 40, 53, 95, 167, 193, 194, 211, 251, 311, 312, 319, 344, 349, 525, 527, 573, 581, 719, 773, 774, 781, 810, 815, 981, 983], "offic": [31, 251], "f5ed2452": [31, 251], "2337": [31, 251], "4f71": [31, 251], "bed3": [31, 251], "c8ae6d2b276": [31, 251], "random": [31, 120, 122, 124, 157, 195, 251, 372, 466, 483, 489, 618, 833, 917, 934, 945, 1026], "date": [31, 38, 65, 99, 100, 101, 110, 115, 122, 137, 153, 155, 156, 168, 170, 224, 251, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 400, 473, 474, 475, 476, 477, 479, 480, 481, 525, 526, 544, 573, 581, 587, 606, 618, 650, 651, 656, 716, 719, 772, 773, 774, 775, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 855, 868, 869, 907, 908, 938, 981, 982, 1009, 1026], "dtm": [31, 251, 312, 774], "2023": [31, 95, 116, 168, 251, 312, 573, 587, 719, 774], "num": [31, 217, 251, 377, 380, 533, 618, 839, 1026], "500": [31, 167, 223, 251, 643, 691, 716, 789, 791, 799, 806, 924, 925, 927, 1026], "val": [31, 191, 251, 291, 460, 544, 609, 618, 673, 716, 750], "10_000": [31, 251], "20_000": [31, 251], "30_000": [31, 251], "increas": [31, 65, 99, 108, 251, 304, 618, 764, 1026], "b4": [31, 251], "light": [31, 251], "twice": [31, 103, 251], "each": [31, 65, 100, 113, 117, 118, 120, 131, 153, 154, 155, 156, 168, 170, 182, 215, 221, 224, 230, 231, 233, 234, 236, 245, 251, 265, 335, 339, 346, 408, 421, 428, 466, 475, 477, 479, 481, 496, 507, 521, 522, 556, 559, 565, 573, 586, 603, 618, 650, 651, 656, 669, 690, 698, 700, 701, 703, 712, 716, 752, 801, 805, 812, 876, 889, 917, 963, 977, 978, 994, 1026, 1034], "titl": [31, 50, 251], "explicit": [31, 110, 120, 251, 596], "integr": [31, 251, 1034], "multi_fram": [31, 251], "wb": [31, 251], "coordin": [31, 251], "advanc": [31, 251, 423, 891, 1034], "min_color": [31, 251], "76933c": [31, 251], "mid_color": [31, 251], "c4d79b": [31, 251], "max_color": [31, 251], "ebf1d": [31, 251], "data_bar_2010": [31, 251], "bar_color": [31, 251], "9bbb59": [31, 251], "bar_negative_color_sam": [31, 251], "bar_negative_border_color_sam": [31, 251], "000": [31, 251, 1034], "white": [31, 251], "w": [31, 52, 53, 155, 194, 251, 506, 650, 716, 719, 962, 974], "get_worksheet_by_nam": [31, 251], "fmt_titl": [31, 251], "add_format": [31, 251], "font_color": [31, 251], "4f6228": [31, 251], "font_siz": [31, 251], "12": [31, 65, 95, 121, 122, 155, 156, 170, 224, 251, 302, 310, 312, 320, 323, 330, 331, 332, 337, 339, 346, 350, 459, 465, 480, 488, 528, 570, 572, 573, 574, 588, 607, 618, 650, 651, 652, 656, 659, 679, 686, 716, 719, 726, 765, 772, 774, 796, 805, 812, 933, 984, 1026, 1034], "ital": [31, 251], "bold": [31, 251], "customis": [31, 251], "trend": [31, 251], "win_loss": [31, 251], "subtl": [31, 251], "tone": [31, 251], "hidden": [31, 251], "id": [31, 72, 233, 251, 515, 516, 548, 550, 618, 700, 1012, 1026, 1034], "q1": [31, 251], "55": [31, 67, 251], "20": [31, 122, 144, 160, 161, 177, 183, 185, 189, 190, 251, 273, 274, 275, 306, 339, 346, 372, 376, 460, 473, 474, 476, 581, 587, 607, 618, 665, 668, 716, 719, 767, 812, 1026], "35": [31, 116, 251, 306, 618, 767, 1026], "q2": [31, 251], "30": [31, 144, 155, 160, 183, 189, 190, 210, 228, 251, 273, 274, 275, 306, 312, 317, 323, 331, 337, 338, 339, 346, 350, 372, 488, 573, 587, 607, 618, 650, 668, 694, 716, 719, 765, 767, 774, 779, 797, 804, 805, 812, 1026, 1034], "15": [31, 116, 121, 131, 155, 156, 161, 251, 304, 306, 332, 339, 346, 460, 480, 570, 597, 607, 618, 650, 651, 716, 719, 764, 767, 805, 812, 1026], "60": [31, 144, 251, 340, 341, 480, 525, 618, 802, 806, 807, 981], "q3": [31, 251], "40": [31, 144, 183, 251, 339, 346, 372, 528, 618, 668, 716, 785, 812, 984], "80": [31, 251], "q4": [31, 251], "75": [31, 137, 251, 262, 457, 473, 474, 475, 476, 479, 480, 481, 618, 766, 835, 915, 1026, 1034], "account": [31, 95, 101, 251, 335, 354, 355, 356, 618, 801, 820, 821, 822, 1026], "flavour": [31, 251], "integer_dtyp": [31, 197, 251, 675, 716, 719], "0_": [31, 251], "just": [31, 110, 176, 251, 664, 716], "unifi": [31, 251, 719], "multi": [31, 99, 100, 251, 357, 506, 589, 592, 618, 962], "2_color_scal": [31, 251], "95b3d7": [31, 251], "ffffff": [31, 251], "base": [31, 36, 140, 147, 155, 156, 251, 310, 318, 351, 354, 355, 356, 426, 427, 514, 618, 639, 646, 650, 651, 716, 719, 772, 780, 818, 820, 821, 822, 835, 894, 895, 915, 970, 1017, 1026, 1034], "standardis": [31, 251], "z": [31, 52, 72, 95, 120, 122, 142, 163, 165, 169, 176, 193, 194, 251, 258, 262, 291, 372, 399, 457, 469, 507, 525, 527, 597, 618, 655, 664, 682, 716, 719, 750, 827, 963, 981, 983, 1026, 1033], "score": [31, 251], "conjunct": [31, 103, 251], "a123": [31, 251], "b345": [31, 251], "c567": [31, 251], "d789": [31, 251], "e101": [31, 251], "45": [31, 156, 251, 312, 339, 346, 480, 501, 507, 587, 607, 618, 651, 716, 719, 774, 805, 812, 957, 963, 1034], "85": [31, 251, 1034], "font": [31, 251], "consola": [31, 251], "standard": [31, 116, 205, 214, 251, 323, 355, 479, 493, 498, 509, 602, 618, 684, 716, 785, 821, 949, 953, 965, 1026, 1034], "stdev": [31, 251], "ipccompress": [32, 251], "arrow": [32, 74, 88, 101, 104, 112, 194, 209, 251, 680, 716, 1002, 1007, 1026], "ipc": [32, 104, 105, 112, 115, 251, 629], "binari": [32, 251, 283, 285, 286, 287, 555, 742, 744, 745, 746], "feather": [32, 104, 112, 251, 629], "lz4": [32, 35, 251, 680, 681, 716], "zstd": [32, 35, 251, 680, 681, 716], "pretti": [33, 251], "row_ori": [33, 251], "iobas": [33, 34, 106, 107, 251, 446, 671, 697, 716], "serial": [33, 34, 251], "represent": [33, 34, 213, 251, 291, 316, 320, 323, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 350, 544, 618, 641, 658, 716, 750, 778, 782, 784, 785, 789, 791, 794, 796, 799, 802, 803, 806, 813, 814, 816, 1005, 1009, 1026], "orient": [33, 66, 68, 92, 94, 251, 716], "slower": [33, 92, 94, 131, 154, 182, 224, 233, 251, 649, 716, 726, 1026], "common": [33, 65, 72, 251, 573, 623], "write_ndjson": [33, 251], "newlin": [34, 107, 113, 251], "delimit": [34, 99, 100, 107, 110, 113, 184, 212, 251, 499, 955, 1003, 1026], "parquetcompress": [35, 251], "compression_level": [35, 251, 681, 716], "statist": [35, 99, 100, 108, 114, 137, 251, 355, 356, 390, 473, 474, 475, 476, 477, 478, 479, 480, 481, 493, 618, 681, 716, 766, 821, 822, 859, 929, 949, 1026], "row_group_s": [35, 251, 681, 716], "use_pyarrow": [35, 99, 104, 108, 251, 681, 716, 1006, 1007, 1026], "pyarrow_opt": [35, 102, 108, 111, 251], "parquet": [35, 108, 109, 114, 251, 629, 681, 716], "gzip": [35, 251, 681, 716], "lzo": [35, 251, 681, 716], "brotli": [35, 251, 681, 716], "choos": [35, 184, 251, 680, 681, 716], "good": [35, 167, 251, 680, 681, 716], "perform": [35, 65, 79, 89, 99, 100, 104, 108, 110, 112, 113, 114, 130, 131, 155, 156, 170, 187, 194, 233, 251, 265, 289, 458, 525, 526, 527, 618, 650, 651, 656, 680, 681, 696, 716, 726, 981, 982, 983, 1026], "fast": [35, 123, 125, 251, 360, 485, 618, 680, 681, 716, 825, 939, 1026, 1034], "decompress": [35, 251, 680, 681, 716], "backward": [35, 146, 170, 251, 282, 332, 362, 618, 645, 656, 681, 716, 798, 827, 1026], "guarante": [35, 89, 99, 100, 220, 251, 643, 681, 689, 716], "deal": [35, 167, 251, 338, 466, 525, 618, 681, 716, 804, 917, 981, 1026], "older": [35, 251, 681, 716], "reader": [35, 97, 99, 100, 104, 108, 251, 630, 681, 716], "higher": [35, 186, 243, 251, 464, 477, 595, 618, 670, 681, 710, 716, 916, 928, 1026], "mean": [35, 99, 100, 104, 108, 110, 137, 146, 154, 155, 156, 170, 184, 224, 231, 251, 335, 339, 346, 359, 362, 473, 474, 475, 476, 477, 479, 480, 481, 493, 506, 561, 573, 618, 645, 649, 650, 651, 656, 660, 681, 698, 716, 766, 801, 805, 812, 824, 827, 832, 925, 949, 962, 1026], "smaller": [35, 142, 251, 643, 681, 716, 819, 1026], "disk": [35, 104, 251, 679, 680, 681, 716], "11": [35, 116, 122, 156, 251, 308, 309, 323, 331, 332, 335, 339, 346, 376, 459, 466, 480, 494, 533, 553, 563, 604, 618, 636, 651, 652, 659, 669, 681, 686, 716, 719, 726, 801, 805, 812, 923, 1026], "22": [35, 121, 251, 339, 346, 349, 473, 474, 476, 479, 480, 481, 525, 563, 618, 681, 716, 719, 805, 812, 815, 981, 1034], "comput": [35, 71, 72, 76, 142, 154, 170, 215, 220, 231, 243, 251, 257, 267, 268, 269, 270, 271, 272, 278, 279, 280, 296, 297, 299, 300, 301, 302, 303, 307, 351, 358, 390, 403, 409, 413, 414, 415, 424, 426, 427, 428, 449, 458, 459, 463, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 490, 491, 492, 493, 497, 542, 543, 554, 555, 559, 566, 568, 571, 576, 589, 592, 598, 599, 604, 618, 649, 653, 655, 656, 681, 689, 695, 698, 710, 716, 721, 727, 728, 729, 730, 731, 732, 738, 739, 740, 758, 759, 760, 761, 762, 763, 768, 818, 819, 823, 859, 871, 877, 881, 882, 883, 892, 894, 895, 896, 903, 911, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 946, 947, 948, 949, 952, 999, 1000, 1008, 1026], "512": [35, 251, 461, 618, 911, 1026], "implement": [35, 89, 130, 131, 233, 251, 265, 618, 700, 726, 937, 938, 1026], "v": [35, 52, 53, 142, 251, 484, 618, 765, 935, 1026], "At": [35, 251], "moment": [35, 136, 251, 390, 493, 618, 859, 949, 1026], "pyarrow": [35, 88, 93, 99, 101, 102, 104, 108, 111, 115, 116, 168, 209, 214, 215, 251, 630, 1002, 1006, 1007, 1008, 1026], "write_t": [35, 251], "calendar": [37, 38, 155, 156, 170, 224, 251, 323, 335, 339, 346, 350, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 785, 801, 805, 812, 816], "time_unit": [38, 40, 95, 311, 312, 319, 344, 349, 525, 527, 573, 581, 719, 773, 774, 781, 810, 815, 981, 983], "time_zon": [38, 95, 313, 338, 527, 573, 719, 772, 775, 780, 804, 983], "timezon": [38, 573, 719], "m": [38, 40, 53, 169, 251, 310, 311, 312, 318, 319, 342, 344, 345, 349, 506, 525, 526, 527, 530, 573, 581, 655, 716, 719, 772, 773, 774, 780, 781, 808, 810, 811, 815, 962, 981, 982, 983, 986], "zone": [38, 310, 313, 338, 525, 527, 573, 772, 775, 804, 981, 983], "zoneinfo": [38, 719], "run": [38, 71, 123, 125, 131, 154, 171, 184, 220, 233, 251, 265, 304, 404, 600, 618, 636, 641, 643, 649, 660, 664, 669, 679, 680, 681, 689, 716, 719, 726, 764, 872, 1026, 1033, 1034], "available_timezon": [38, 719], "check": [38, 99, 100, 110, 117, 118, 150, 155, 156, 164, 166, 169, 251, 261, 263, 283, 286, 287, 377, 381, 400, 500, 504, 523, 618, 650, 651, 655, 660, 716, 723, 724, 742, 745, 746, 840, 842, 845, 846, 848, 853, 854, 855, 857, 858, 868, 936, 956, 960, 979, 1026], "128": [39, 67, 911, 1026], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 468, 500, 618, 919, 956, 1026], "neg": [39, 155, 156, 158, 172, 200, 201, 203, 207, 251, 417, 418, 460, 486, 487, 494, 519, 618, 650, 651, 677, 678, 682, 696, 716, 834, 861, 885, 886, 941, 942, 950, 975, 996, 1026], "scale": [39, 142, 251, 460, 528, 618, 819, 984, 1026], "experiment": [39, 115, 197, 222, 223, 228, 251, 304, 339, 473, 474, 475, 476, 477, 479, 480, 481, 618, 675, 691, 694, 716, 764, 805, 835, 915, 1026], "progress": 39, "expect": [39, 80, 82, 87, 265, 556, 587, 618, 658, 660, 716, 915, 1026], "32": [41, 44, 60, 67, 156, 166, 251, 450, 488, 618, 651, 716, 768, 802, 911, 928, 1026], "sign": [43, 44, 45, 46, 335, 468, 533, 618, 801, 848, 919, 989, 1026], "arrai": [47, 88, 92, 99, 100, 108, 142, 209, 214, 215, 251, 278, 279, 280, 281, 285, 293, 294, 295, 299, 300, 301, 302, 303, 399, 412, 413, 414, 415, 416, 419, 420, 427, 473, 474, 476, 480, 485, 501, 503, 506, 509, 576, 618, 716, 738, 739, 740, 741, 744, 754, 755, 756, 760, 761, 762, 763, 768, 819, 867, 880, 881, 882, 883, 884, 887, 888, 895, 896, 924, 925, 927, 930, 931, 932, 939, 944, 957, 959, 962, 965, 1002, 1007, 1008, 1016, 1026], "integer_list": 47, "float_list": 47, "wrap": [49, 95, 377, 618], "arbitrari": [49, 122, 719], "python": [49, 99, 100, 116, 131, 167, 193, 194, 211, 233, 251, 265, 312, 431, 556, 573, 607, 609, 618, 623, 700, 726, 774, 786, 787, 788, 793, 1006, 1026], "queri": [50, 52, 71, 101, 104, 110, 112, 113, 114, 144, 171, 183, 251, 265, 431, 433, 509, 618, 636, 641, 643, 652, 659, 669, 679, 696, 700, 716, 725, 726, 965, 1026, 1033], "eager": [50, 51, 52, 53, 54, 55, 155, 222, 251, 311, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 558, 560, 573, 581, 585, 586, 594, 597, 603, 607, 610, 617, 618, 650, 716, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816, 1033], "pars": [50, 99, 100, 103, 110, 112, 113, 132, 154, 197, 204, 218, 228, 231, 251, 377, 458, 496, 508, 514, 525, 527, 528, 554, 555, 559, 562, 564, 565, 571, 581, 589, 592, 600, 601, 603, 604, 618, 632, 649, 675, 683, 688, 694, 698, 716, 839, 964, 970, 981, 983, 984, 1026], "against": [50, 404, 716, 872, 1033, 1034], "eagerli": [50, 423], "unset": [50, 121, 338, 423, 804], "init": [50, 128], "eager_execut": [50, 1033], "itself": [50, 120, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 598, 599, 618, 658, 716, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1026, 1033], "alwai": [50, 99, 121, 131, 233, 251, 441, 525, 573, 609, 660, 716, 726, 981, 1026, 1033, 1034], "impact": [50, 155, 251, 650, 716, 1033], "declar": [50, 88, 90, 91, 92, 94, 251, 716], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1033], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 322, 324, 331, 332, 335, 719, 784, 797, 798, 801], "533316061": 50, "232338648": 50, "1970": [50, 115], "134821952": 50, "register_glob": [51, 53, 55, 1033], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1033], "frame_data": [51, 54], "execut": [51, 52, 54, 72, 171, 251, 289, 404, 618, 633, 660, 669, 716, 872, 1033], "collect": [51, 52, 55, 68, 71, 110, 111, 115, 122, 124, 138, 140, 171, 209, 251, 265, 381, 558, 564, 581, 603, 607, 618, 632, 638, 639, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 672, 673, 675, 677, 678, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 719, 846, 1026, 1033, 1034], "global": [52, 56, 73, 122, 127, 214, 251, 433, 618, 1033], "scope": [52, 55, 128, 628, 719, 1033], "automat": [52, 55, 88, 90, 91, 92, 94, 95, 99, 100, 101, 110, 122, 124, 126, 197, 228, 251, 433, 512, 518, 524, 618, 675, 694, 716, 898, 968, 974, 980, 1026, 1033], "map": [52, 53, 90, 91, 99, 100, 104, 105, 108, 109, 110, 112, 131, 141, 167, 188, 192, 193, 194, 210, 251, 339, 346, 432, 433, 458, 550, 556, 618, 640, 672, 716, 805, 812, 898, 1026, 1033], "recent": [52, 459, 618, 911, 1026, 1033], "df1": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 177, 215, 226, 251, 665, 716], "x": [52, 53, 65, 72, 95, 99, 100, 101, 110, 120, 122, 142, 160, 163, 165, 169, 176, 184, 193, 194, 251, 258, 262, 265, 305, 352, 353, 367, 370, 371, 372, 392, 399, 410, 428, 430, 431, 448, 450, 454, 455, 457, 461, 469, 490, 493, 521, 536, 544, 546, 553, 556, 569, 570, 579, 587, 588, 596, 618, 655, 660, 664, 682, 716, 719, 722, 726, 827, 857, 946, 949, 977, 1009, 1026, 1033], "df2": [52, 54, 55, 56, 65, 72, 73, 117, 144, 150, 215, 226, 251], "t": [52, 53, 72, 103, 110, 131, 155, 183, 220, 222, 251, 265, 304, 310, 318, 338, 351, 354, 355, 356, 404, 458, 460, 506, 512, 525, 527, 556, 609, 618, 650, 668, 689, 716, 719, 726, 764, 804, 818, 820, 821, 822, 872, 915, 936, 962, 968, 974, 981, 983, 1016, 1026], "join": [52, 56, 65, 71, 72, 73, 170, 223, 251, 376, 458, 618, 636, 641, 643, 656, 669, 679, 691, 695, 716], "named_fram": [53, 1033], "lf1": [53, 55], "o": [53, 104, 112, 288, 304, 505, 545, 618, 747, 764, 961, 980, 1010, 1026], "lf2": [53, 55, 716], "p": [53, 67, 183, 251, 460, 603, 618, 668, 716], "q": [53, 194, 251, 603, 618], "r": [53, 460, 501, 505, 506, 507, 515, 618, 719, 957, 961, 962, 963, 971], "lf3": [53, 716], "lf4": [53, 716], "either": [53, 122, 156, 166, 171, 174, 182, 192, 206, 214, 251, 525, 554, 559, 603, 651, 658, 716, 719, 981], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 609], "hello_world": 54, "baz": [54, 161, 162, 184, 221, 251, 520, 522, 654, 690, 716, 719, 978], "hello_data": 54, "foo_bar": [54, 587], "registr": [55, 629], "lifetim": [55, 128, 628], "context": [55, 56, 126, 180, 234, 251, 259, 265, 289, 298, 363, 404, 441, 495, 496, 550, 556, 567, 578, 581, 597, 600, 607, 617, 618, 628, 629, 695, 701, 716, 872, 1033], "manag": [55, 56, 628, 629, 1033], "often": [55, 128, 155, 156, 251, 401, 469, 618, 650, 651, 716, 869], "want": [55, 91, 131, 144, 180, 251, 265, 293, 294, 295, 363, 431, 433, 473, 474, 475, 476, 477, 479, 480, 481, 569, 579, 594, 597, 610, 618, 636, 652, 659, 716, 719, 725, 726, 754, 755, 756, 1007, 1026], "df0": [55, 177, 251, 665, 716], "exit": [55, 56, 128, 1033], "construct": [55, 88, 90, 91, 92, 93, 94, 251, 369, 433, 594, 597, 610, 618, 648, 671, 716, 1026], "persist": [55, 680, 681, 716], "through": [55, 719, 1026], "tbl0": 55, "remain": [55, 99, 100, 110, 142, 251, 521, 522, 660, 716, 819, 977, 978, 1026], "text": [55, 513, 515, 516, 969, 1034], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 126, 128, 155, 156, 251, 650, 651, 716], "cach": [56, 71, 73, 104, 110, 112, 114, 127, 433, 473, 474, 475, 476, 477, 479, 480, 481, 525, 526, 527, 530, 618, 628, 636, 641, 643, 669, 679, 716, 981, 982, 983, 986], "categori": [56, 73, 212, 251, 291, 618, 750, 765, 835, 915, 1026], "until": [56, 171, 251, 289, 573, 618], "finish": [56, 76, 144, 251, 725, 1026], "invalid": [56, 99, 100, 110, 508, 509, 514, 546, 573, 618, 964, 965, 970], "outermost": 56, "color": [56, 73, 233, 283, 285, 286, 287, 700], "red": [56, 73, 233, 700], "green": [56, 73, 233, 700], "blue": [56, 73, 283, 285, 286, 287], "orang": [56, 73, 135, 234, 235, 237, 238, 239, 241, 243, 244, 251, 701, 702, 704, 705, 706, 708, 710, 711], "uint8": [56, 73, 119, 121, 213, 214, 251, 302, 303, 433, 538, 553, 618, 719, 762, 763, 995, 1026, 1034], "yellow": [56, 73, 283, 285, 286, 287], "black": [56, 73, 131, 251, 283, 285, 286, 287], "succe": [56, 99, 100, 110], "df_join": [56, 73], "cat": [56, 73, 213, 251, 500, 529, 532, 544, 565, 614, 618, 719, 765, 835, 915, 956, 985, 988, 1022, 1026], "u8": [56, 73, 212, 213, 251, 433, 553, 618, 719, 1003, 1026, 1034], "schemadict": [57, 88, 90, 91, 92, 93, 94, 110, 196, 251, 603, 660, 674, 700, 716], "composit": [57, 121, 1034], "struct_seri": [57, 700], "dai": [58, 155, 156, 168, 170, 224, 251, 319, 323, 330, 331, 332, 335, 336, 337, 339, 344, 346, 347, 348, 350, 473, 474, 475, 476, 477, 479, 480, 481, 572, 573, 574, 575, 618, 650, 651, 656, 716, 797, 798, 801, 802, 805, 812, 814], "unsign": [59, 60, 61, 62, 468, 618, 848, 919, 1026], "could": [63, 76, 140, 155, 251, 290, 569, 579, 618, 639, 650, 716, 748, 1026], "static": [63, 700], "utf": 64, "frametyp": [65, 1033], "joinstrategi": [65, 169, 251, 655, 716], "outer": [65, 72, 169, 251, 655, 716], "descend": [65, 132, 198, 204, 218, 251, 275, 419, 466, 485, 495, 496, 559, 618, 632, 676, 683, 688, 716, 735, 854, 887, 917, 939, 951, 1026], "fill": [65, 72, 133, 145, 146, 201, 222, 251, 282, 300, 303, 361, 362, 368, 376, 473, 474, 476, 480, 487, 511, 517, 533, 580, 594, 597, 610, 618, 644, 645, 678, 695, 716, 826, 827, 909, 924, 925, 927, 930, 931, 932, 942, 967, 973, 989, 1026], "sort": [65, 66, 117, 121, 132, 155, 156, 170, 177, 183, 184, 198, 218, 224, 236, 245, 251, 275, 291, 363, 458, 485, 496, 550, 552, 559, 618, 632, 641, 650, 651, 656, 665, 668, 669, 676, 679, 688, 703, 712, 716, 719, 735, 750, 854, 939, 1011, 1014, 1026, 1034], "origin": [65, 99, 100, 220, 251, 338, 389, 433, 458, 468, 501, 506, 507, 509, 511, 517, 533, 618, 689, 716, 765, 804, 898, 915, 957, 962, 963, 965, 967, 973, 989, 1026], "In": [65, 102, 111, 114, 122, 124, 128, 131, 142, 144, 155, 156, 180, 214, 251, 265, 573, 618, 650, 651, 716, 725, 819, 918, 1026], "duplic": [65, 77, 163, 169, 170, 220, 251, 378, 618, 655, 656, 689, 716, 841, 915, 1026], "behaviour": [65, 72, 500, 506, 507, 515, 546, 618, 956, 962, 963, 971], "strategi": [65, 72, 99, 119, 120, 121, 122, 124, 146, 155, 169, 170, 179, 251, 265, 362, 423, 618, 645, 650, 655, 656, 716, 827, 891, 1026], "suitabl": [65, 72, 120, 131, 251, 265, 484, 618, 726, 935, 1026, 1034], "get": [65, 96, 105, 109, 126, 132, 135, 141, 151, 152, 155, 156, 158, 159, 163, 165, 166, 172, 179, 192, 196, 199, 203, 207, 218, 227, 236, 245, 251, 259, 273, 274, 275, 277, 281, 299, 300, 301, 302, 303, 319, 335, 364, 373, 378, 380, 388, 391, 394, 406, 411, 412, 425, 434, 435, 436, 441, 443, 447, 452, 453, 464, 494, 498, 510, 513, 538, 539, 547, 551, 573, 578, 583, 589, 590, 591, 592, 602, 605, 608, 618, 632, 637, 640, 647, 650, 651, 652, 657, 659, 674, 682, 686, 688, 693, 703, 712, 716, 733, 734, 735, 736, 737, 741, 752, 760, 761, 762, 763, 781, 801, 831, 834, 839, 841, 844, 856, 861, 874, 879, 880, 893, 899, 901, 902, 904, 907, 908, 912, 913, 916, 950, 953, 966, 969, 996, 1002, 1003, 1011, 1015, 1016, 1026], "speedup": [65, 131, 167, 251, 265, 618, 726, 1026], "receiv": [65, 110, 131, 183, 251, 460, 618, 668, 716, 1034], "now": [65, 156, 251, 525, 527, 618, 651, 716, 981, 983], "One": [65, 137, 180, 184, 251, 262, 457, 618, 719, 766, 1026], "whose": [65, 170, 184, 251, 357, 577, 618, 656, 716], "uniqu": [65, 119, 120, 121, 124, 165, 169, 180, 194, 242, 251, 266, 277, 380, 388, 451, 525, 526, 527, 530, 548, 550, 557, 593, 618, 655, 709, 716, 737, 766, 844, 856, 905, 915, 981, 982, 983, 986, 1012, 1014, 1026], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 132, 147, 149, 171, 204, 218, 251, 261, 262, 263, 283, 286, 287, 322, 363, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 395, 396, 400, 457, 496, 508, 552, 553, 559, 560, 603, 618, 632, 635, 646, 658, 683, 688, 716, 719, 723, 724, 736, 742, 784, 828, 839, 840, 841, 843, 844, 846, 847, 849, 850, 851, 852, 856, 863, 864, 868, 912, 913, 937, 956, 1017, 1026], "know": [65, 423, 513, 969, 1007, 1016, 1026], "first": [65, 99, 100, 103, 110, 113, 121, 131, 153, 155, 158, 170, 172, 179, 183, 184, 207, 212, 213, 219, 220, 224, 236, 251, 275, 277, 304, 332, 335, 339, 373, 380, 394, 404, 407, 408, 423, 433, 460, 484, 496, 506, 508, 509, 515, 516, 562, 569, 573, 579, 583, 609, 618, 636, 650, 652, 656, 659, 668, 689, 695, 703, 716, 719, 735, 764, 766, 798, 801, 805, 834, 844, 861, 872, 875, 876, 891, 898, 935, 962, 964, 965, 971, 972, 996, 1005, 1026, 1034], "2022": [65, 137, 153, 155, 156, 170, 224, 251, 312, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 525, 573, 575, 581, 618, 650, 651, 656, 716, 774, 785, 801, 805, 812, 981], "y": [65, 72, 95, 120, 122, 142, 163, 165, 169, 176, 184, 193, 194, 251, 258, 262, 342, 345, 352, 353, 370, 371, 392, 399, 410, 430, 454, 455, 457, 469, 525, 526, 527, 546, 553, 587, 618, 655, 664, 682, 716, 719, 722, 808, 811, 981, 982, 983, 1026], "df3": [65, 251], "set_tbl_format": 65, "09": [65, 122, 156, 251, 312, 323, 331, 332, 528, 651, 716, 778, 984], "01": [65, 122, 137, 153, 155, 156, 224, 251, 310, 311, 312, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 525, 526, 527, 530, 573, 575, 607, 618, 650, 651, 716, 719, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 981, 982, 983, 986], "02": [65, 153, 155, 156, 170, 224, 251, 311, 312, 319, 320, 321, 328, 329, 330, 331, 332, 335, 338, 339, 340, 341, 344, 346, 347, 349, 473, 474, 475, 476, 477, 479, 480, 481, 482, 525, 526, 527, 530, 573, 575, 607, 618, 650, 651, 656, 716, 719, 773, 774, 776, 777, 781, 782, 783, 786, 787, 788, 789, 791, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 891, 981, 982, 983, 986], "03": [65, 95, 155, 156, 224, 251, 311, 312, 313, 317, 319, 321, 329, 330, 331, 332, 338, 339, 340, 341, 342, 344, 345, 346, 347, 349, 473, 474, 476, 479, 480, 481, 526, 530, 573, 618, 650, 651, 716, 773, 774, 775, 778, 779, 781, 782, 783, 786, 787, 788, 789, 791, 793, 795, 796, 797, 798, 799, 802, 803, 804, 805, 806, 807, 808, 810, 811, 813, 814, 815, 982, 986], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 99, 100, 110, 220, 223, 224, 251, 389, 433, 562, 618, 689, 691, 716, 765, 898, 915, 1026], "easili": [65, 197, 228, 231, 251, 563, 603, 675, 694, 698, 716], "dot": [65, 618, 679, 716, 1026], "product": [65, 136, 251, 302, 307, 556, 618, 762, 768, 1026], "fill_nul": [65, 145, 251, 618, 644, 695, 716, 1026], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 110, 131, 149, 183, 233, 251, 265, 423, 431, 432, 460, 472, 556, 569, 570, 579, 588, 596, 618, 660, 668, 700, 716, 726, 891, 923, 1026], "decor": [66, 67, 68, 69, 122, 124, 131, 251, 265, 618, 628, 629, 726, 1026], "under": [66, 67, 68, 69, 611, 612, 614, 619, 620, 624, 625, 626, 1018, 1020, 1022, 1027, 1030, 1031, 1032], "access": [66, 67, 68, 69, 167, 192, 193, 251, 433, 618, 695, 716, 1034], "by_first_letter_of_column_nam": 66, "f": [66, 100, 137, 153, 168, 209, 219, 222, 251, 258, 265, 423, 488, 505, 525, 527, 556, 564, 588, 618, 891, 961, 981, 983], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 283, 286, 500, 504, 719, 960], "slice": [66, 71, 142, 158, 168, 207, 251, 408, 421, 472, 473, 474, 475, 476, 477, 479, 480, 481, 618, 636, 641, 643, 660, 669, 679, 680, 681, 716, 819, 834, 876, 889, 923, 924, 925, 926, 927, 928, 930, 931, 932, 996, 1026], "to_seri": [66, 151, 251, 525, 560, 597, 981], "xx": [66, 68, 121, 124, 719], "xy": [66, 68], "yy": [66, 68, 121, 124, 719], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 155, 156, 170, 224, 251, 282, 335, 339, 346, 466, 473, 474, 475, 476, 477, 479, 480, 481, 573, 618, 650, 651, 656, 716, 801, 805, 812, 917, 1026], "ceil": [67, 618, 1026], "previou": [67, 128, 459, 535, 618, 911, 1026], "floor": [67, 618, 1026], "nearest": [67, 170, 186, 243, 251, 292, 366, 464, 477, 595, 618, 656, 670, 710, 716, 751, 830, 838, 916, 928, 1026], "24": [67, 116, 131, 142, 155, 156, 170, 224, 251, 302, 304, 321, 335, 339, 346, 450, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 764, 783, 801, 805, 812, 858, 1026], "001": [67, 324, 325, 327, 334, 575, 790, 792, 800], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 122, 312, 316, 317, 330, 331, 335, 347, 525, 572, 573, 574, 581, 587, 719, 772, 774, 778, 779, 797, 801, 981, 1034], "42": [69, 156, 157, 177, 251, 651, 665, 716, 833, 1026], "961": 69, "1764": 69, "4160": 69, "build": [70, 89, 719, 1034], "wa": 70, "compil": [70, 397, 398, 865, 866], "gate": 70, "info": [70, 102, 111, 116, 322, 784], "otherwis": [70, 121, 126, 177, 194, 197, 251, 284, 293, 294, 295, 338, 354, 355, 356, 423, 460, 468, 500, 502, 554, 555, 571, 589, 592, 604, 609, 618, 665, 675, 716, 726, 743, 754, 755, 756, 804, 820, 821, 822, 891, 919, 937, 938, 956, 958, 1026], "depend": [70, 116, 265, 397, 398, 441, 466, 556, 578, 581, 618, 865, 866, 915, 917, 1026, 1034], "host": [70, 99, 104, 108, 112, 114], "git": 70, "lazy_fram": 71, "type_coercion": [71, 636, 641, 643, 669, 679, 680, 681, 716], "predicate_pushdown": [71, 636, 641, 643, 660, 669, 679, 680, 681, 716], "projection_pushdown": [71, 636, 641, 643, 660, 669, 679, 680, 681, 716], "simplify_express": [71, 636, 641, 643, 669, 679, 680, 681, 716], "no_optim": [71, 636, 643, 660, 669, 680, 681, 716], "slice_pushdown": [71, 636, 641, 643, 660, 669, 679, 680, 681, 716], "common_subplan_elimin": [71, 636, 641, 643, 669, 679, 716], "graph": [71, 171, 251, 653, 695, 716], "parallel": [71, 72, 97, 101, 108, 114, 155, 170, 171, 183, 251, 304, 404, 618, 629, 650, 655, 656, 700, 716, 764, 872, 1026], "threadpool": [71, 126], "coercion": [71, 469, 618, 636, 641, 643, 669, 679, 680, 681, 716], "optim": [71, 108, 110, 112, 113, 114, 167, 171, 183, 187, 193, 220, 251, 636, 641, 643, 660, 669, 679, 680, 681, 689, 696, 700, 716], "predic": [71, 110, 112, 113, 114, 115, 147, 166, 192, 251, 363, 552, 579, 618, 636, 641, 643, 646, 660, 669, 672, 679, 680, 681, 696, 716, 828, 937, 938, 1026], "pushdown": [71, 636, 641, 643, 660, 669, 672, 679, 680, 681, 696, 716, 937, 938, 1026], "project": [71, 110, 112, 113, 114, 265, 495, 496, 618, 636, 641, 643, 660, 669, 672, 679, 680, 681, 697, 716], "turn": [71, 99, 100, 110, 531, 550, 618, 636, 641, 643, 660, 669, 680, 681, 716, 987], "off": [71, 99, 100, 110, 550, 618, 636, 641, 643, 660, 669, 680, 681, 716], "Will": [71, 219, 251, 636, 641, 643, 669, 679, 716, 1026], "try": [71, 83, 85, 99, 100, 103, 104, 108, 110, 112, 114, 636, 641, 643, 669, 679, 716], "branch": [71, 636, 641, 643, 669, 679, 716], "subplan": [71, 636, 641, 643, 669, 679, 716], "occur": [71, 401, 449, 466, 618, 636, 641, 643, 669, 679, 716, 869, 903, 917, 1026], "union": [71, 72, 636, 641, 643, 669, 679, 716, 719], "part": [71, 88, 122, 507, 521, 522, 636, 641, 643, 669, 679, 695, 716, 778, 782, 789, 791, 794, 796, 799, 806, 816, 963, 977, 978], "fashion": [71, 169, 251, 636, 641, 643, 669, 679, 716], "item": [72, 100, 192, 195, 251, 359, 400, 407, 410, 483, 522, 618, 824, 868, 875, 878, 934, 978, 1026], "iter": [72, 123, 125, 132, 154, 155, 156, 167, 168, 182, 192, 193, 194, 197, 198, 204, 218, 219, 228, 230, 231, 251, 304, 357, 458, 496, 554, 555, 559, 562, 563, 564, 565, 571, 577, 589, 592, 600, 603, 604, 618, 632, 649, 650, 651, 675, 676, 683, 688, 694, 698, 716, 764, 1026, 1034], "polarstyp": 72, "concatmethod": 72, "vertic": [72, 144, 222, 226, 251, 499, 955], "rechunk": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 144, 251, 618, 725, 752, 904, 1026], "combin": [72, 83, 85, 155, 156, 157, 170, 224, 251, 262, 276, 335, 346, 457, 512, 518, 524, 573, 618, 650, 651, 656, 679, 716, 801, 805, 812, 968, 974, 980], "concaten": [72, 149, 183, 251, 460, 564, 565, 618, 668, 716, 752, 904, 1026], "diagon": [72, 219, 251], "vstack": [72, 144, 251], "vertical_relax": 72, "coerc": [72, 469, 618], "equal": [72, 73, 99, 100, 110, 117, 118, 150, 155, 170, 177, 251, 352, 353, 370, 392, 423, 455, 472, 473, 474, 475, 476, 477, 479, 480, 481, 510, 511, 517, 533, 558, 598, 599, 618, 650, 656, 665, 716, 891, 923, 924, 925, 926, 927, 928, 930, 931, 932, 936, 966, 967, 973, 989, 1026, 1034], "supertyp": [72, 146, 251, 264, 618, 645, 716], "find": [72, 148, 251, 484, 618, 935, 1026], "miss": [72, 99, 100, 110, 145, 251, 282, 354, 355, 356, 368, 376, 383, 385, 618, 644, 716, 820, 821, 822, 1016, 1026], "stack": [72, 160, 226, 251], "don": [72, 131, 220, 222, 251, 265, 304, 404, 458, 556, 618, 689, 716, 719, 726, 764, 872, 915, 936, 1016, 1026], "auto": [72, 88, 90, 91, 92, 94, 108, 114, 219, 251, 716, 1034], "logic": [72, 131, 233, 251, 262, 457, 544, 553, 618, 648, 655, 671, 697, 716, 726, 1009, 1026], "align_fram": 72, "pattern": [72, 99, 100, 110, 112, 113, 114, 167, 251, 439, 500, 501, 506, 507, 515, 516, 700, 719, 937, 938, 956, 957, 962, 963, 971, 972, 1026], "collis": 72, "need": [72, 95, 99, 100, 101, 103, 117, 118, 155, 156, 194, 202, 214, 251, 423, 433, 488, 510, 528, 594, 597, 610, 618, 650, 651, 716, 943, 966, 984, 1026], "sure": [72, 88, 93, 99, 100, 104, 108, 155, 156, 187, 251, 558, 650, 651, 716], "contigu": [72, 88, 93, 99, 100, 104, 108, 110, 112, 113, 114, 187, 251], "relev": 72, "df_h1": 72, "l1": 72, "l2": 72, "df_h2": 72, "r1": 72, "r2": 72, "r3": 72, "df_d1": 72, "df_d2": 72, "df_a1": 72, "df_a2": 72, "df_a3": 72, "disabl": [73, 127, 167, 251], "encount": [74, 155, 251, 452, 453, 508, 509, 566, 569, 579, 618, 650, 716, 907, 908, 964, 965, 1026], "certain": [78, 102, 111, 161, 224, 251, 563, 636, 669, 680, 681, 716, 1026], "least": [80, 122, 459, 550, 618, 911, 1014, 1026], "unexpect": [81, 251, 265, 431, 618, 726, 1026], "caus": [81, 89, 99, 100, 110, 130, 144, 251, 725, 1026], "panic": 81, "mismatch": 83, "incompat": 85, "pa": [88, 115], "chunkedarrai": [88, 179, 251, 768, 1026], "recordbatch": [88, 168, 251], "schemadefinit": [88, 90, 91, 92, 94, 251, 716], "schema_overrid": [88, 90, 91, 92, 93, 94, 168, 214, 251, 281, 716, 719, 741], "copi": [88, 89, 130, 133, 134, 168, 209, 214, 215, 228, 251, 360, 533, 618, 634, 635, 694, 716, 722, 753, 757, 770, 825, 989, 1002, 1007, 1008, 1026], "closest": 88, "pair": [88, 90, 91, 92, 94, 121, 188, 251, 672, 716, 1034], "sever": [88, 90, 91, 92, 94, 251, 716, 1034], "wai": [88, 90, 91, 92, 94, 138, 154, 168, 183, 204, 231, 251, 458, 460, 496, 506, 563, 618, 638, 649, 668, 683, 698, 700, 716, 962], "equival": [88, 90, 91, 92, 94, 102, 155, 166, 180, 251, 258, 262, 352, 353, 367, 370, 371, 392, 430, 448, 450, 454, 455, 457, 461, 513, 536, 546, 553, 618, 650, 716, 858, 969, 985, 987, 988, 1026], "form": [88, 90, 91, 92, 94, 167, 193, 222, 251, 459, 618, 716, 911, 1026], "them": [88, 90, 91, 92, 94, 110, 144, 155, 156, 170, 177, 224, 251, 377, 410, 452, 453, 458, 564, 618, 650, 651, 656, 665, 716, 719, 725, 878, 907, 908, 1026], "dimens": [88, 90, 92, 94, 251, 470, 618, 716, 921, 1026], "allow_copi": [89, 130], "interchang": [89, 130], "__dataframe__": 89, "convers": [89, 130, 168, 215, 251, 525, 526, 527, 530, 573, 629, 981, 982, 983, 986, 1006, 1007, 1008, 1026], "detail": [89, 101, 117, 118, 130, 251, 716, 1034], "latest": [89, 102, 111, 130, 368, 442, 618], "index": [89, 93, 96, 116, 130, 148, 155, 156, 161, 166, 167, 170, 184, 190, 192, 193, 203, 214, 216, 224, 229, 251, 259, 273, 274, 275, 277, 335, 397, 398, 407, 418, 422, 423, 473, 474, 475, 476, 477, 479, 480, 481, 484, 494, 506, 519, 540, 618, 650, 651, 656, 682, 696, 716, 733, 734, 735, 736, 737, 801, 858, 865, 866, 875, 886, 890, 891, 909, 935, 938, 950, 962, 975, 997, 1026], "runtimeerror": 89, "from_panda": [89, 103], "from_arrow": 89, "effici": [89, 168, 251], "clone": [90, 91, 92, 93, 94, 133, 214, 215, 251, 634, 716, 753, 1006, 1007, 1008, 1016, 1026], "dimension": [90, 92, 94, 214, 251, 716, 1026], "infer_schema_length": [91, 94, 99, 100, 103, 110, 113, 251, 508, 716, 964], "NOT": [91, 117, 118, 440, 1033], "typic": [91, 131, 251, 318, 719, 726, 780, 1026], "clearer": 91, "load": [91, 93, 102, 111, 123, 125, 251, 629, 652, 659, 716, 1034], "_partial_": [91, 251, 716], "omit": [91, 95, 120, 122, 124, 128, 180, 194, 251, 607, 719], "mani": [91, 94, 101, 144, 251, 508, 725, 964, 1026], "scan": [91, 94, 99, 100, 108, 110, 111, 112, 113, 114, 115, 155, 156, 251, 643, 650, 651, 652, 659, 716], "slow": [91, 94, 99, 100, 110, 265, 304, 618, 700, 764, 1026], "partial": 91, "present": [91, 117, 122, 381, 618, 1016, 1026], "np": [92, 147, 214, 251, 540, 618, 716, 843, 847, 849, 850, 923, 997, 1026], "ndarrai": [92, 147, 214, 251, 540, 618, 716, 768, 935, 938, 997, 1007, 1026], "numpi": [92, 116, 136, 214, 215, 251, 452, 453, 618, 716, 843, 847, 849, 850, 907, 908, 923, 1007, 1008, 1016, 1026], "columnar": [92, 94, 167, 193, 251], "interpret": [92, 94, 99, 100, 110, 251, 716], "yield": [92, 94, 99, 100, 110, 142, 144, 219, 251, 458, 618, 716, 725, 819, 1026], "conclus": [92, 94, 251, 716], "nan_to_nul": [93, 251, 716, 1026], "include_index": 93, "pd": [93, 103, 544, 618, 1008, 1009, 1026], "panda": [93, 103, 116, 155, 215, 251, 331, 332, 544, 618, 650, 716, 797, 798, 1008, 1009, 1026], "instal": [93, 99, 100, 101, 104, 108, 116, 136, 214, 215, 251, 679, 716, 1008, 1026], "datetimeindex": [93, 768, 1026], "nan": [93, 117, 118, 122, 130, 145, 215, 251, 308, 309, 352, 353, 361, 370, 371, 376, 383, 385, 386, 387, 392, 430, 434, 447, 452, 453, 454, 455, 546, 566, 618, 644, 716, 728, 732, 769, 826, 849, 850, 907, 908, 923, 1008, 1026, 1034], "convert": [93, 102, 103, 111, 130, 210, 211, 212, 213, 214, 217, 251, 305, 313, 342, 345, 423, 432, 465, 514, 525, 526, 527, 528, 530, 618, 716, 775, 808, 811, 891, 970, 981, 982, 983, 984, 986, 994, 1005, 1006, 1007, 1008, 1016, 1026], "pd_df": 93, "pd_seri": 93, "tbl": [95, 97, 100], "reconstruct": 95, "repr": [95, 122, 124], "trim": 95, "whitespac": [95, 512, 518, 524, 968, 974, 980], "prompt": 95, "extract": [95, 316, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336, 337, 340, 341, 347, 348, 350, 460, 507, 508, 509, 618, 776, 777, 778, 779, 782, 783, 785, 789, 790, 791, 792, 794, 795, 796, 799, 800, 802, 803, 806, 807, 809, 813, 814, 816, 963, 964, 965], "to_init_repr": [95, 251, 1026], "truncat": [95, 155, 251, 335, 650, 669, 716, 801], "identifi": [95, 176, 182, 220, 251, 664, 689, 716], "compound": [95, 194, 251, 719], "struct": [95, 180, 197, 217, 221, 228, 251, 423, 433, 508, 521, 522, 550, 569, 570, 571, 588, 618, 675, 690, 694, 700, 716, 891, 964, 977, 978], "neither": [95, 103, 195, 251, 423, 891], "source_ac": 95, "source_cha": 95, "ident": [95, 133, 134, 251, 342, 634, 635, 716, 753, 757, 808, 1026], "timestamp": [95, 338, 581, 804], "tor_id": 95, "nnel_id": 95, "\u03bc": [95, 122, 155, 156, 170, 224, 251, 310, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 525, 527, 573, 575, 581, 618, 650, 651, 656, 716, 719, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 812, 813, 814, 815, 816, 981, 983], "asia": [95, 719, 776, 777, 809], "tokyo": [95, 719], "123456780": 95, "9876543210": 95, "56": [95, 542, 607, 618], "59": [95, 121, 312, 328, 340, 574, 606, 607, 774, 794, 806], "663053": 95, "jst": [95, 719], "803065983": 95, "2055938745": 95, "38": [95, 122], "18": [95, 156, 177, 251, 303, 339, 346, 349, 376, 389, 525, 527, 573, 607, 618, 651, 665, 669, 716, 719, 815, 981, 983], "050545": 95, "source_actor_id": 95, "source_channel_id": 95, "sr": [95, 722, 1026], "to_list": [95, 156, 251, 651, 716, 956, 1026], "datatypeclass": 96, "uint32": [96, 116, 142, 251, 275, 316, 320, 324, 326, 328, 330, 333, 336, 337, 340, 347, 348, 397, 398, 412, 469, 501, 510, 513, 540, 544, 618, 719, 736, 748, 778, 782, 789, 791, 794, 796, 799, 802, 803, 806, 813, 814, 819, 848, 865, 866, 880, 936, 957, 1009, 1026], "regular": [96, 167, 192, 193, 224, 251, 357, 500, 501, 506, 507, 515, 516, 563, 577, 589, 592, 604, 618, 719, 956, 957, 962, 963, 971, 972], "uint64": [96, 157, 251, 372, 397, 398, 468, 618, 833, 865, 866, 919, 1026], "bigidx": 96, "read": [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 144, 251, 369, 431, 609, 618, 643, 648, 671, 716, 725, 1026], "batch": [97, 100, 113, 660, 716], "over": [97, 99, 100, 102, 110, 122, 131, 144, 167, 168, 192, 193, 194, 219, 230, 233, 251, 265, 304, 362, 376, 431, 432, 466, 472, 473, 474, 475, 476, 477, 479, 480, 481, 556, 569, 570, 579, 588, 596, 618, 700, 719, 725, 726, 764, 923, 924, 925, 927, 931, 1026], "fetch": [97, 110, 171, 251, 634, 636, 652, 659, 716], "ideal": 97, "read_csv_batch": [97, 630], "tpch": [97, 100], "tables_scale_100": [97, 100], "lineitem": [97, 100, 101], "try_parse_d": [97, 99, 100, 110], "n_row": [98, 99, 100, 104, 108, 110, 112, 113, 114, 168, 251, 643, 716], "accept": [98, 99, 100, 102, 104, 108, 132, 143, 154, 197, 204, 218, 228, 231, 251, 258, 357, 377, 458, 496, 553, 554, 555, 559, 562, 563, 564, 565, 571, 577, 589, 592, 600, 603, 604, 618, 632, 642, 649, 675, 683, 688, 694, 698, 716, 839, 1026], "stop": [98, 99, 100, 104, 108, 110, 112, 113, 114, 316, 319, 320, 322, 323, 328, 330, 336, 337, 339, 340, 344, 346, 347, 348, 350, 473, 474, 476, 479, 480, 481, 607, 618, 773, 775, 778, 781, 782, 784, 789, 791, 794, 796, 799, 802, 803, 805, 806, 810, 812, 813, 814, 815, 816], "textio": 99, "new_column": [99, 100, 103, 110, 189, 251], "comment_char": [99, 100, 110], "quote_char": [99, 100, 110], "skip_row": [99, 100, 110], "missing_utf8_is_empty_str": [99, 100, 110], "ignore_error": [99, 100, 110], "n_thread": [99, 100], "8192": 99, "csvencod": [99, 100, 110], "low_memori": [99, 100, 108, 110, 113, 114], "skip_rows_after_head": [99, 100, 110], "row_count_nam": [99, 100, 104, 108, 110, 112, 113, 114], "row_count_offset": [99, 100, 104, 108, 110, 112, 113, 114], "sample_s": [99, 100], "eol_char": [99, 100, 110], "we": [99, 100, 103, 110, 155, 156, 170, 224, 251, 265, 335, 339, 346, 404, 431, 473, 474, 475, 476, 477, 479, 480, 481, 514, 587, 609, 618, 650, 651, 656, 660, 716, 726, 801, 805, 812, 835, 872, 915, 970, 1026], "handler": [99, 100, 103], "g": [99, 100, 102, 103, 104, 108, 111, 112, 114, 155, 156, 170, 214, 222, 224, 251, 258, 265, 335, 339, 346, 357, 473, 474, 475, 476, 477, 479, 480, 481, 488, 577, 618, 650, 651, 656, 672, 716, 801, 805, 812, 936, 1007, 1026], "builtin": [99, 100, 103], "stringio": [99, 100], "fsspec": [99, 100, 104, 108, 111, 112, 114, 116], "remot": [99, 100, 104, 108], "autogener": [99, 100, 110], "column_x": [99, 100, 110], "enumer": [99, 100, 110, 168, 251], "shorter": [99, 100], "comment": [99, 100, 110], "instanc": [99, 100, 110, 122, 124, 128, 144, 149, 251, 290, 442, 473, 474, 475, 476, 477, 479, 480, 481, 569, 579, 618, 660, 696, 716, 725, 748, 1026], "special": [99, 100, 110, 507, 726, 963, 1026], "escap": [99, 100, 110], "dure": [99, 100, 110, 128, 144, 251, 725, 1026], "would": [99, 100, 110, 275, 407, 441, 466, 559, 573, 618, 719, 735, 875, 917, 1007, 1026], "prefer": [99, 100, 102, 110, 125, 131, 144, 167, 192, 193, 233, 251, 265, 472, 618, 716, 725, 726, 923, 1026, 1034], "treat": [99, 100, 110, 500, 515, 516, 956, 971, 972], "10000": [99, 168, 251, 533], "might": [99, 100, 110, 126, 214, 251, 265, 548, 618, 1008, 1026], "issu": [99, 100, 103, 110, 302, 303, 538, 618, 762, 763, 995, 1026], "iso8601": [99, 100, 110], "physic": [99, 100, 170, 251, 291, 544, 618, 633, 655, 656, 716, 750, 1009, 1026], "cpu": [99, 100], "system": [99, 100], "wrongli": 99, "done": [99, 100, 110, 115, 153, 170, 251, 264, 266, 290, 458, 511, 517, 557, 618, 656, 716, 748, 967, 973, 1026], "buffer": [99, 100, 142, 167, 251, 819, 1026], "modifi": [99, 100, 110, 126, 128, 160, 167, 226, 251, 276, 338, 349, 500, 506, 507, 515, 618, 804, 815, 920, 956, 962, 963, 971, 985, 987, 988, 1026], "upper": [99, 100, 142, 155, 251, 293, 294, 377, 423, 549, 558, 573, 585, 586, 607, 618, 650, 716, 755, 819, 839, 897, 1013, 1026], "bound": [99, 100, 142, 155, 251, 293, 294, 295, 377, 407, 422, 423, 429, 549, 558, 573, 585, 586, 607, 618, 650, 716, 755, 756, 819, 839, 875, 890, 897, 1013, 1026], "lossi": [99, 100, 110], "decod": [99, 100], "reduc": [99, 100, 108, 110, 112, 113, 114, 238, 239, 241, 244, 488, 579, 618, 681, 705, 706, 708, 711, 716, 900, 914, 943, 995, 1026], "usag": [99, 100, 110, 122, 124, 202, 251, 719, 944, 1026], "expens": [99, 100, 108, 110, 113, 114, 123, 125, 131, 155, 156, 167, 192, 193, 194, 219, 220, 251, 265, 618, 650, 651, 689, 716, 725, 726, 1026, 1034], "aggreg": [99, 100, 108, 149, 155, 156, 173, 174, 175, 178, 180, 184, 185, 186, 205, 206, 222, 225, 231, 232, 235, 237, 251, 259, 363, 374, 431, 458, 472, 473, 474, 475, 476, 477, 479, 480, 481, 550, 554, 555, 569, 570, 571, 579, 584, 589, 592, 596, 604, 618, 650, 651, 660, 661, 662, 663, 666, 667, 670, 684, 685, 692, 698, 699, 702, 704, 716, 836, 923, 924, 925, 927, 930, 931, 932, 1026], "nativ": [99, 104, 108, 120, 131, 167, 193, 194, 211, 233, 251, 265, 618, 623, 726, 1026, 1034], "parser": 99, "even": [99, 460, 618, 915, 1026], "regard": [99, 566], "sens": [99, 104, 108, 112, 114, 177, 224, 251, 458, 618, 665, 716], "particular": [99, 104, 108, 112, 114, 142, 251, 819, 1026], "skip": [99, 100, 103, 108, 110, 114, 222, 251, 726, 1026], "offset": [99, 100, 104, 108, 110, 112, 113, 114, 155, 156, 203, 224, 229, 251, 310, 318, 331, 332, 335, 339, 346, 418, 494, 519, 525, 527, 573, 618, 650, 651, 682, 696, 716, 772, 780, 797, 798, 801, 805, 812, 886, 950, 975, 981, 983, 1026], "row_count": [99, 100, 104, 108, 110, 112, 113, 114], "sampl": [99, 100, 233, 251, 493, 618, 700, 949, 1026], "estim": [99, 100, 142, 251, 266, 355, 356, 390, 557, 618, 716, 819, 821, 822, 859, 1026], "alloc": [99, 100, 142, 187, 251, 819, 1026], "scan_csv": [99, 100, 680, 681, 716], "lazili": [99, 100, 110, 111, 112, 113, 114, 433, 618], "glob": [99, 100, 110, 112, 113, 114], "continu": [99, 108, 493, 618, 765, 915, 949, 1026], "benchmark": [99, 108, 289, 618], "50000": 100, "batchedcsvread": [100, 629], "upon": 100, "creation": 100, "gather": 100, "next_batch": 100, "big": 100, "interest": 100, "seen_group": 100, "big_fil": 100, "df_current_batch": 100, "concat": [100, 752, 904, 1026], "partition_df": 100, "partition_bi": [100, 168, 251], "as_dict": [100, 182, 251], "fh": 100, "write_csv": [100, 110, 251], "els": [100, 609], "partition_on": 101, "partition_rang": 101, "partition_num": 101, "dbreadengin": 101, "connectorx": [101, 116], "raw": 101, "driver": 101, "user": [101, 131, 183, 233, 251, 265, 431, 460, 485, 556, 573, 618, 668, 700, 716, 726, 939, 1026], "snowflak": 101, "warehous": 101, "role": 101, "partit": [101, 102, 108, 111, 115, 168, 182, 251], "transfer": 101, "document": [101, 103, 342, 345, 509, 525, 526, 527, 530, 808, 811, 965, 981, 982, 983, 986], "redshift": 101, "mysql": 101, "mariadb": 101, "clickhous": 101, "oracl": 101, "bigqueri": 101, "pleas": [101, 155, 251, 650, 716], "doc": [101, 136, 251], "github": 101, "sfu": 101, "db": 101, "connector": 101, "destin": 101, "limit": [101, 110, 146, 251, 282, 293, 294, 295, 362, 368, 618, 645, 652, 681, 716, 754, 755, 756, 827, 1026], "small": [101, 121, 171, 251, 339, 643, 716, 1034], "still": 101, "develop": [101, 122, 124], "partition_col": 101, "explicitli": [101, 120, 122, 128, 433, 603, 618, 628], "test_tabl": 101, "compani": 101, "testdb": 101, "public": [101, 251, 618, 629, 716, 1026], "myrol": 101, "delta_table_opt": [102, 111], "root": [102, 111, 389, 432, 443, 462, 497, 537, 617, 618, 952, 1026], "absolut": [102, 111, 117, 118, 257, 354, 355, 356, 618, 721, 820, 821, 822, 1026], "sinc": [102, 111, 319, 525, 527, 573, 581, 597, 607, 781, 981, 983], "avoid": [102, 193, 251], "year": [102, 111, 155, 156, 170, 224, 251, 322, 323, 335, 336, 339, 346, 347, 473, 474, 475, 476, 477, 479, 480, 481, 572, 573, 574, 618, 650, 651, 656, 716, 784, 785, 801, 802, 805, 812, 813], "2021": [102, 111, 137, 153, 155, 224, 251, 525, 587, 650, 716, 719, 776, 777, 785, 809, 855, 981, 1026], "aw": [102, 111], "googl": [102, 111], "service_account": [102, 111], "service_account_json_absolute_path": [102, 111], "az": [102, 111], "adl": [102, 111], "abf": [102, 111], "azure_storage_account_nam": [102, 111], "azure_storage_account_kei": [102, 111], "without_fil": [102, 111], "track": [102, 111, 131, 251, 423, 1033], "sheet_id": 103, "sheet_nam": 103, "xlsx2csv_option": 103, "read_csv_opt": 103, "noreturn": 103, "xlsx2csv": [103, 116], "read_csv": [103, 110], "nor": [103, 195, 251], "skip_empty_lin": 103, "my": [103, 115, 531, 987], "datasheet": 103, "correct": [103, 355, 356, 390, 478, 493, 618, 660, 716, 821, 822, 859, 929, 949, 1026], "look": [103, 283, 423, 742], "whole": [103, 495, 496, 506, 618, 700, 716, 962], "With": [103, 131, 166, 251, 265, 473, 474, 475, 476, 477, 479, 480, 481, 618, 726, 858, 1026], "1000": [103, 142, 213, 251, 324, 325, 533, 790, 1005, 1026, 1034], "spreadsheet": [103, 184, 251], "xl": 103, "xlsm": 103, "xlsb": 103, "odf": 103, "od": 103, "odt": 103, "memory_map": [104, 108, 112], "v2": [104, 112], "greatli": [104, 112], "improv": [104, 112, 681, 716], "repeat": [104, 112, 467, 469, 594, 610, 618], "page": [104, 108, 112, 114, 251, 618, 629, 681, 716, 1026], "give": [104, 108, 112, 113, 114, 176, 220, 251, 319, 390, 469, 546, 618, 629, 664, 689, 716, 781, 859, 1026], "That": [104, 660, 716], "filenam": 104, "my_fil": 104, "write_ipc": [104, 251], "read_ndjson": 106, "parallelstrategi": [108, 114], "use_statist": [108, 114], "awar": [108, 167, 193, 194, 211, 251, 525, 527, 981, 983], "stabl": [108, 136, 195, 251, 428, 618, 664, 716], "row_group": [108, 114], "pressur": [108, 113, 114, 488, 618, 681, 716, 943, 1026], "read_tabl": 108, "with_column_nam": 110, "push": [110, 112, 113, 114, 115], "down": [110, 112, 113, 114, 115, 366, 618, 830, 1026], "therebi": [110, 112, 113, 114], "potenti": [110, 112, 113, 114, 167, 192, 194, 251], "overhead": [110, 112, 113, 114], "realloc": [110, 112, 113, 144, 251, 725, 1026], "headerless": 110, "unlik": [110, 155, 251, 650, 716], "fewer": [110, 618, 915, 1026], "my_long_fil": 110, "doesn": [110, 155, 251, 351, 618, 650, 716, 818, 1016, 1026], "thing": [110, 578], "less": [110, 170, 251, 392, 430, 511, 517, 522, 533, 618, 656, 716, 967, 973, 978, 989, 1034], "breezah": 110, "languag": [110, 155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "hard": [110, 660, 716], "mydf": 110, "lambda": [110, 131, 149, 183, 233, 251, 265, 354, 355, 356, 423, 431, 432, 472, 556, 569, 570, 579, 588, 596, 618, 660, 668, 700, 716, 726, 820, 821, 822, 891, 1026], "lower": [110, 155, 186, 243, 251, 293, 295, 377, 429, 432, 464, 468, 477, 558, 573, 585, 586, 595, 607, 618, 643, 650, 670, 710, 716, 756, 839, 897, 916, 919, 928, 1013, 1026], "simpli": [110, 458, 569, 579, 618], "idx": [110, 155, 168, 251, 423, 650, 716, 891, 938, 1026], "uint16": [110, 302, 303, 538, 618, 719, 762, 763, 995, 1026], "u16": [110, 122, 1034], "eu": 111, "central": [111, 390, 493, 618, 859, 949, 1026], "allow_pyarrow_filt": 115, "comparison": 115, "dset": 115, "folder": 115, "05": [115, 117, 118, 122, 170, 224, 251, 312, 313, 317, 338, 340, 342, 345, 573, 656, 716, 719, 774, 775, 776, 777, 778, 779, 804, 805, 808, 809, 811, 812, 814], "04": [115, 155, 224, 251, 312, 313, 316, 317, 321, 328, 329, 330, 331, 332, 336, 338, 339, 340, 341, 342, 345, 347, 348, 349, 525, 573, 575, 650, 716, 719, 775, 779, 783, 789, 791, 794, 795, 796, 797, 798, 799, 803, 804, 806, 807, 808, 811, 813, 814, 815, 981], "stdout": [116, 128, 153, 251, 444], "17": [116, 122, 231, 482, 581, 597, 607, 618, 698, 758, 805, 1026, 1034], "platform": 116, "linux": 116, "90": [116, 528, 984], "wsl2": 116, "x86_64": 116, "glibc2": 116, "main": 116, "apr": 116, "14": [116, 122, 131, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 310, 323, 376, 466, 607, 618, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 719, 772, 805], "44": [116, 177, 251, 307, 618, 665, 716], "51": 116, "gcc": 116, "matplotlib": [116, 669, 679, 716], "check_dtyp": [117, 118], "check_exact": [117, 118], "rtol": [117, 118], "1e": [117, 118], "atol": [117, 118], "08": [117, 118, 122, 156, 251, 312, 339, 525, 573, 575, 607, 651, 716, 719, 805, 812, 981], "nans_compare_equ": [117, 118], "check_column_ord": 117, "check_row_ord": 117, "assertionerror": [117, 118], "compar": [117, 118, 150, 251, 352, 353, 370, 371, 392, 430, 454, 455, 555, 618, 936, 1026], "exactli": [117, 118, 121, 122, 124, 521, 522, 944, 977, 978, 1026], "toler": [117, 118, 170, 251, 656, 716], "inexact": [117, 118], "assert": [117, 118, 120, 122, 124, 156, 251, 629, 651, 716, 719, 832, 1026], "irrespect": 117, "unsort": 117, "check_nam": 118, "s1": [118, 149, 251, 858, 891, 1008, 1017, 1026], "searchstrategi": [119, 121, 122, 124], "null_prob": [119, 122, 124], "percentag": [119, 122, 124, 459, 618, 911, 1026], "chanc": [119, 122, 124, 1034], "independ": [119, 120, 122, 124], "flag": [119, 485, 500, 506, 507, 515, 618, 641, 660, 716, 939, 956, 962, 963, 971, 1026], "hypothesi": [119, 120, 121, 122, 123, 124, 1034], "sampled_from": [119, 1034], "unique_small_int": 119, "ccy": [119, 1034], "gbp": [119, 1034], "eur": [119, 137, 153, 251, 1034], "jpy": [119, 1034], "min_col": [120, 122], "max_col": [120, 122], "standalon": [120, 122], "mincol": 120, "assign": [120, 155, 251, 423, 458, 466, 521, 522, 618, 650, 716, 765, 891, 898, 915, 917, 977, 978, 1026], "exact": [120, 122, 124, 202, 251, 525, 526, 527, 546, 618, 981, 982, 983], "minimum": [120, 121, 122, 124, 149, 178, 251, 354, 355, 356, 447, 453, 466, 592, 618, 666, 681, 716, 754, 793, 820, 821, 822, 908, 913, 917, 1026, 1034], "especi": 120, "test_unique_xyz": 120, "assert_someth": 120, "punctuat": 120, "test_special_char_colname_init": 120, "inner_dtyp": [121, 124], "select_from": [121, 124], "min_siz": [121, 122, 124, 1034], "max_siz": [121, 122, 124, 1034], "anoth": [121, 154, 251, 304, 311, 422, 437, 440, 618, 649, 695, 716, 764, 773, 890, 936, 1026], "randomli": 121, "innermost": 121, "2x": 121, "lst": 121, "11330": 121, "24030": 121, "116": 121, "zz": [121, 124], "uint8_pair": [121, 1034], "uint": [121, 1034], "zip": [121, 1034], "131": 121, "176": 121, "149": [121, 1034], "max_data_s": [122, 124], "include_col": 122, "allow_infin": [122, 124], "allowed_dtyp": [122, 124, 1034], "excluded_dtyp": [122, 124], "describ": [122, 153, 251, 1026], "desir": [122, 423, 573, 891], "n_chunk": [122, 124, 251, 1026], "randomis": 122, "onto": 122, "pct": 122, "preced": [122, 719], "disallow": [122, 124], "inf": [122, 124, 272, 379, 382, 546, 618, 732, 765, 835, 843, 847, 897, 911, 915, 1013, 1026], "exclud": [122, 124, 300, 303, 377, 563, 618, 839, 855, 1026], "deploi": [122, 124], "characterist": [122, 124], "concret": [122, 124], "test_repr": 122, "isinst": [122, 124, 251], "0x11f561580": 122, "known": [122, 423, 700, 891], "0565": 122, "34715": 122, "5844": 122, "33": [122, 177, 251, 482, 563, 618, 665, 716, 928, 1026], "076854": 122, "3382": 122, "48662": 122, "7540": 122, "29": [122, 155, 156, 170, 224, 251, 310, 331, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 607, 618, 650, 651, 656, 716, 772, 797, 801, 805, 812], "836271": 122, "4063": 122, "06": [122, 224, 251, 312, 323, 337, 338, 350, 607, 719, 804, 805, 814], "39092": 122, "1889": 122, "13": [122, 133, 134, 145, 146, 152, 156, 161, 171, 179, 228, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 472, 528, 564, 569, 579, 607, 608, 618, 634, 635, 644, 645, 651, 658, 694, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 726, 805, 812, 813, 984, 1026], "41": [122, 480, 618, 1034], "874455": 122, "15836": 122, "1755e": 122, "575050513": 122, "profil": [123, 125, 716], "balanc": [123, 125, 1034], "set_environ": 123, "polars_hypothesis_profil": [123, 125], "1500": 123, "constructor": 124, "normal": [124, 155, 251, 351, 390, 493, 618, 650, 716, 818, 859, 949, 1026], "test_repr_is_valid_str": 124, "experi": 124, "create_list_strategi": [124, 1034], "polars_max_thread": 126, "behind": 126, "lock": 126, "reason": 126, "pyspark": 126, "udf": [126, 131, 183, 233, 251, 265, 460, 556, 618, 668, 700, 716, 726, 1026], "similar": [126, 149, 170, 251, 342, 345, 458, 609, 618, 656, 716, 808, 811], "recommend": [126, 167, 183, 251, 573, 719], "initi": [128, 569, 579, 609], "whatev": 128, "were": 128, "enter": 128, "advantag": [128, 183, 251], "initialis": [128, 716, 1033], "set_": 128, "set_verbos": 128, "do_various_th": 128, "restor": 128, "cleaner": 128, "breviti": 128, "vein": 128, "durat": [128, 170, 224, 251, 310, 317, 318, 321, 325, 327, 329, 334, 341, 349, 544, 573, 607, 618, 656, 716, 719, 772, 779, 780, 783, 790, 792, 795, 800, 807, 815, 1009, 1026], "set_ascii_t": 128, "write_ascii_frame_to_stdout": 128, "sy": 128, "nan_as_nul": 130, "_pyarrowdatafram": 130, "nullabl": 130, "extens": [130, 215, 251, 1008, 1026], "propag": [130, 174, 206, 251, 353, 452, 453, 455, 618, 907, 908, 1026], "inference_s": [131, 251], "256": [131, 251, 911, 1026], "almost": [131, 233, 251, 525, 526, 527, 573, 726, 981, 982, 983, 1026], "_significantly_": [131, 233, 251, 726, 1026], "intens": [131, 233, 251, 458, 618, 726, 1026], "becaus": [131, 142, 155, 171, 222, 233, 251, 404, 483, 489, 573, 618, 650, 700, 716, 726, 819, 872, 1026], "forc": [131, 170, 233, 251, 655, 656, 700, 716, 726, 1026], "materi": [131, 233, 251, 669, 700, 716, 719, 726, 1026], "parallelis": [131, 233, 251, 726, 1026], "optimis": [131, 194, 233, 251, 716, 726, 937, 938, 1026], "achiev": [131, 233, 251, 265, 618, 726, 1026], "best": [131, 233, 251, 265, 618, 726, 1026], "tri": [131, 251], "arbitrarili": [131, 251], "rearrang": [131, 251], "transform": [131, 251, 431, 529, 531, 532, 618], "preserv": [131, 214, 215, 251, 490, 618, 946, 1008, 1026], "lru_cach": [131, 251, 265, 618, 726, 1026], "magnitud": [131, 251, 265, 618, 726, 1026], "column_1": [131, 219, 251], "better": [131, 214, 233, 251, 265, 550, 618, 700, 937, 938, 1026], "scalar": [131, 166, 192, 251, 484, 556, 587, 618, 858, 935, 1026], "k": [132, 194, 218, 251, 288, 291, 390, 545, 618, 632, 688, 716, 747, 750, 859, 1010, 1026], "intoexpr": [132, 154, 155, 156, 197, 204, 218, 228, 231, 251, 264, 377, 401, 403, 409, 424, 458, 487, 496, 554, 555, 558, 559, 562, 564, 565, 569, 571, 579, 585, 586, 589, 592, 597, 600, 603, 604, 609, 618, 632, 646, 649, 650, 651, 675, 683, 688, 694, 698, 716, 839, 1026], "nulls_last": [132, 204, 218, 251, 275, 495, 618, 632, 683, 688, 716, 735, 1026], "smallest": [132, 218, 251, 288, 618, 632, 688, 716, 747, 1026], "largest": [132, 155, 156, 170, 218, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 545, 618, 632, 650, 651, 656, 688, 716, 801, 805, 812, 1010, 1026], "top": [132, 218, 251, 632, 688, 716], "last": [132, 158, 170, 172, 184, 194, 204, 207, 218, 220, 245, 251, 275, 304, 316, 331, 336, 347, 407, 421, 495, 522, 539, 573, 605, 618, 632, 656, 683, 686, 688, 689, 712, 716, 719, 735, 764, 778, 797, 802, 813, 834, 861, 875, 889, 978, 996, 1026], "top_k": [132, 251, 288, 618, 632, 716, 747, 1026], "greater": [133, 170, 251, 370, 371, 493, 522, 618, 656, 716, 949, 978, 1026], "cheap": [133, 134, 251, 634, 635, 716, 725, 753, 757, 1026], "deepcopi": [133, 134, 251, 634, 635, 716, 753, 757, 1026], "clear": [134, 251, 635, 716, 757, 1026], "properti": [135, 141, 159, 196, 199, 227, 251, 637, 640, 674, 693, 716, 719, 1034], "appl": [135, 160, 169, 188, 190, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 462, 471, 504, 523, 537, 618, 655, 672, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 960, 979], "banana": [135, 210, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 462, 471, 537, 618, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711], "pairwis": [136, 251], "pearson": [136, 251, 390, 493, 566, 618, 859, 949, 1026], "correl": [136, 251, 566, 598], "coeffici": [136, 251, 493, 618, 949, 1026], "corrcoef": [136, 251], "percentil": [137, 251, 766, 1026], "summari": [137, 251, 766, 1026], "glimps": [137, 158, 251], "usd": [137, 153, 251, 1034], "2020": [137, 153, 156, 251, 313, 317, 318, 321, 324, 325, 327, 329, 334, 338, 341, 342, 345, 525, 526, 527, 651, 716, 719, 775, 779, 780, 783, 790, 792, 795, 800, 804, 807, 808, 811, 981, 982, 983], "null_count": [137, 140, 251, 304, 618, 716, 764, 766, 1026], "266667": [137, 251], "666667": [137, 174, 225, 239, 251, 354, 618, 692, 706, 716], "std": [137, 251, 472, 479, 618, 716, 766, 930, 1026], "101514": [137, 251], "707107": [137, 251, 355, 479, 618, 821, 1026], "57735": [137, 251], "median": [137, 184, 251, 362, 475, 618, 695, 716, 766, 926, 1026], "more_column": [138, 143, 198, 221, 251, 357, 577, 618, 638, 642, 676, 690, 716], "Or": [138, 154, 155, 156, 170, 204, 224, 231, 251, 458, 496, 563, 609, 618, 638, 649, 650, 651, 656, 683, 698, 716], "subset": [140, 180, 220, 251, 639, 689, 716], "snippet": [140, 251, 639, 716], "is_nul": [140, 251, 618, 639, 716, 1026], "sizeunit": [142, 251, 819, 1026], "heap": [142, 251, 819, 1026], "its": [142, 251, 312, 339, 346, 496, 618, 774, 805, 812, 819, 1026], "bitmap": [142, 251, 819, 1026], "therefor": [142, 251, 609, 819, 1026], "structarrai": [142, 251, 819, 1026], "constant": [142, 156, 251, 310, 360, 618, 651, 716, 772, 819, 825, 1026], "unchang": [142, 251, 544, 618, 660, 700, 716, 819, 1009, 1026], "capac": [142, 202, 251, 819, 944, 1026], "ffi": [142, 251, 819, 1026], "kb": [142, 251, 819, 1026], "mb": [142, 251, 819, 1026], "gb": [142, 251, 819, 1026], "tb": [142, 251, 819, 1026], "revers": [142, 251, 299, 300, 301, 302, 303, 432, 462, 537, 618, 716, 760, 761, 762, 763, 1026], "1_000_000": [142, 251, 819, 1026], "25888898": [142, 251], "689577102661133": [142, 251], "long": [143, 176, 222, 251, 642, 664, 716], "letter": [143, 236, 245, 251, 357, 507, 577, 618, 642, 703, 712, 716, 719, 963], "thu": [144, 251, 566, 725, 1026], "faster": [144, 214, 222, 251, 265, 472, 513, 548, 618, 680, 681, 716, 725, 726, 923, 969, 1026], "onlin": [144, 251, 725, 1026], "rerun": [144, 251, 725, 1026], "evalu": [145, 147, 170, 251, 262, 276, 304, 375, 377, 381, 395, 396, 423, 433, 457, 554, 555, 558, 560, 573, 576, 585, 586, 594, 597, 603, 607, 609, 610, 618, 646, 653, 655, 656, 716, 736, 764, 863, 864, 1017, 1026], "fill_valu": [145, 201, 222, 251, 487, 618, 678, 716, 942, 1026], "Not": [145, 251, 383, 385, 433, 618, 644, 716], "To": [145, 251, 308, 309, 335, 362, 500, 506, 507, 515, 531, 604, 618, 644, 716, 801, 956, 962, 963, 971, 987], "fillnullstrategi": [146, 251, 362, 618, 645, 716, 827, 1026], "matches_supertyp": [146, 251, 645, 716], "forward": [146, 170, 251, 331, 362, 368, 618, 645, 656, 716, 797, 827, 1026], "consecut": [146, 251, 282, 362, 368, 499, 618, 645, 716, 827, 955, 1026], "fill_nan": [146, 251, 618, 716, 1026], "OR": [147, 251, 555, 646, 716, 719], "reduct": [149, 251], "supercast": [149, 251], "parent": [149, 251], "rule": [149, 251], "arithmet": [149, 251], "zip_with": [149, 251, 1026], "foo11": [149, 251], "bar22": [149, 251], "null_equ": [150, 251, 936, 1026], "retriev": [151, 251, 397, 398, 534, 865, 866, 990], "return_as_str": [153, 251, 444], "preview": [153, 251], "wide": [153, 176, 222, 251, 664, 716], "nice": [153, 251], "few": [153, 251], "rather": [153, 170, 251, 444, 533, 656, 716, 989], "head": [153, 172, 207, 251, 264, 394, 618, 659, 716, 861, 996, 1026], "tail": [153, 158, 251, 264, 493, 618, 716, 834, 949, 1026], "more_bi": [154, 182, 204, 251, 496, 618, 649, 683, 716], "maintain_ord": [154, 182, 184, 220, 224, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 251, 259, 265, 281, 425, 540, 547, 567, 618, 636, 641, 643, 649, 669, 679, 680, 681, 689, 699, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 716, 741, 765, 893, 915, 1011, 1026], "consist": [154, 182, 251, 525, 649, 716, 981], "agg": [154, 155, 156, 251, 259, 265, 363, 365, 495, 496, 540, 552, 567, 618, 636, 641, 643, 649, 650, 651, 669, 679, 716, 719], "index_column": [155, 156, 251, 650, 651, 716], "timedelta": [155, 156, 224, 251, 316, 319, 320, 323, 328, 330, 335, 336, 337, 339, 340, 344, 346, 347, 348, 350, 473, 474, 475, 476, 477, 479, 480, 481, 573, 607, 618, 650, 651, 716, 786, 788, 793, 801, 805, 812, 907, 908, 1026], "period": [155, 156, 200, 201, 251, 339, 346, 354, 355, 356, 417, 459, 486, 487, 573, 607, 618, 650, 651, 677, 678, 716, 805, 812, 820, 821, 822, 885, 911, 941, 942, 1026], "include_boundari": [155, 251, 650, 716], "closedinterv": [155, 156, 251, 377, 473, 474, 475, 476, 477, 479, 480, 481, 573, 607, 618, 650, 651, 716, 839, 1026], "start_bi": [155, 251, 650, 716], "startbi": [155, 251, 650, 716], "window": [155, 156, 251, 304, 339, 346, 354, 355, 356, 458, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 564, 573, 598, 599, 607, 618, 650, 651, 716, 764, 805, 812, 820, 821, 822, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1026], "check_sort": [155, 156, 251, 650, 651, 716], "dynamicgroupbi": [155, 251], "groupbi": [155, 156, 180, 251, 259, 265, 304, 363, 365, 404, 458, 495, 496, 540, 552, 556, 567, 618, 636, 641, 643, 650, 651, 669, 679, 716, 719, 764, 872, 1026], "member": [155, 251, 650, 716, 846, 1026], "seen": [155, 251, 282, 368, 618, 650, 716], "roll": [155, 156, 251, 331, 332, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 564, 598, 599, 618, 650, 651, 716, 797, 798, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1026], "slot": [155, 251, 304, 306, 402, 618, 650, 716, 764, 767, 870, 1026], "interv": [155, 156, 224, 251, 322, 339, 340, 346, 377, 473, 474, 475, 476, 477, 479, 480, 481, 573, 607, 618, 650, 651, 716, 765, 778, 781, 782, 784, 789, 791, 794, 796, 799, 802, 803, 805, 806, 810, 812, 813, 814, 816, 839, 915, 1026], "1n": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "nanosecond": [155, 156, 170, 224, 251, 335, 339, 340, 346, 473, 474, 475, 476, 477, 479, 480, 481, 575, 618, 650, 651, 656, 716, 801, 805, 806, 812], "1u": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "microsecond": [155, 156, 170, 224, 251, 335, 339, 340, 346, 473, 474, 475, 476, 477, 479, 480, 481, 574, 575, 606, 618, 650, 651, 656, 669, 716, 801, 805, 812], "1m": [155, 156, 170, 224, 251, 324, 325, 327, 334, 335, 339, 341, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 790, 792, 800, 801, 805, 807, 812], "millisecond": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 575, 618, 650, 651, 656, 716, 801, 805, 812], "minut": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 573, 574, 575, 606, 607, 618, 650, 651, 656, 716, 801, 805, 812], "1h": [155, 156, 170, 224, 251, 318, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 607, 618, 650, 651, 656, 716, 780, 782, 801, 805, 812], "hour": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 573, 574, 575, 606, 607, 618, 650, 651, 656, 716, 801, 805, 812], "1d": [155, 156, 170, 224, 251, 311, 321, 329, 335, 339, 346, 349, 473, 474, 475, 476, 477, 479, 480, 481, 573, 587, 618, 650, 651, 656, 716, 773, 781, 783, 786, 787, 788, 793, 795, 801, 805, 810, 812, 814, 815], "1w": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "week": [155, 156, 170, 224, 251, 335, 339, 346, 348, 473, 474, 475, 476, 477, 479, 480, 481, 575, 618, 650, 651, 656, 716, 801, 805, 812, 814], "1mo": [155, 156, 170, 224, 251, 313, 317, 331, 332, 335, 338, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 573, 618, 650, 651, 656, 716, 775, 779, 796, 797, 798, 801, 802, 803, 804, 805, 812, 813], "month": [155, 156, 170, 224, 251, 316, 331, 332, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 572, 573, 574, 618, 650, 651, 656, 716, 778, 797, 798, 801, 805, 812], "1q": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "quarter": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "1y": [155, 156, 170, 224, 251, 322, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 573, 618, 650, 651, 656, 716, 784, 801, 805, 812, 816], "1i": [155, 156, 170, 224, 251, 335, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801], "3d12h4m25": [155, 156, 170, 224, 251, 339, 346, 573, 650, 651, 656, 716, 805, 812], "suffix": [155, 156, 169, 170, 197, 224, 228, 231, 251, 260, 286, 335, 339, 346, 383, 385, 386, 387, 432, 458, 462, 471, 473, 474, 475, 476, 477, 479, 480, 481, 504, 618, 650, 651, 655, 656, 675, 694, 695, 698, 716, 719, 745, 801, 805, 812, 960], "_satur": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 573, 618, 650, 651, 656, 716, 801, 805, 812], "satur": [155, 156, 170, 224, 251, 335, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 801, 805, 812], "28": [155, 156, 170, 210, 224, 251, 258, 335, 338, 339, 346, 349, 473, 474, 475, 476, 477, 479, 480, 481, 573, 618, 650, 651, 656, 716, 801, 804, 805, 812, 815, 1034], "correspond": [155, 156, 170, 214, 224, 251, 323, 335, 339, 346, 466, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 785, 801, 805, 812, 917, 1026], "due": [155, 156, 170, 194, 224, 251, 290, 318, 335, 338, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 483, 489, 618, 650, 651, 656, 716, 748, 780, 801, 804, 805, 812, 1026], "daylight": [155, 156, 170, 224, 251, 310, 318, 335, 338, 339, 346, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 651, 656, 716, 780, 801, 804, 805, 812], "10i": [155, 156, 251, 650, 651, 716], "ascend": [155, 156, 251, 650, 651, 716], "dynam": [155, 251, 423, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 716, 891], "matter": [155, 156, 167, 193, 194, 211, 251, 650, 651, 716], "_lower_bound": [155, 251, 650, 716], "_upper_bound": [155, 251, 650, 716], "harder": [155, 251, 650, 716], "tempor": [155, 156, 167, 193, 194, 211, 251, 377, 473, 474, 475, 476, 477, 479, 480, 481, 573, 607, 618, 629, 650, 651, 716, 719, 839, 855, 1026], "inclus": [155, 156, 251, 377, 473, 474, 475, 476, 477, 479, 480, 481, 520, 521, 558, 585, 586, 618, 650, 651, 716, 839, 976, 977, 1026], "datapoint": [155, 251, 650, 716], "mondai": [155, 251, 346, 348, 650, 716, 812, 814], "tuesdai": [155, 251, 650, 716], "wednesdai": [155, 251, 650, 716], "thursdai": [155, 251, 650, 716], "fridai": [155, 251, 650, 716], "saturdai": [155, 251, 650, 716], "sundai": [155, 251, 348, 650, 716, 814], "weekli": [155, 251, 346, 650, 716, 812], "sorted": [155, 156, 251, 650, 651, 716], "metadata": [155, 156, 251, 650, 651, 716], "verifi": [155, 156, 251, 650, 651, 716], "incorrectli": [155, 156, 251, 423, 650, 651, 716], "incorrect": [155, 156, 251, 349, 485, 618, 650, 651, 700, 716, 815, 939, 1026], "re": [155, 214, 251, 331, 332, 650, 716, 797, 798, 1033], "come": [155, 251, 331, 332, 390, 618, 630, 650, 715, 716, 797, 798, 859, 1026], "set_index": [155, 251, 650, 716], "resampl": [155, 251, 650, 716], "reset_index": [155, 251, 650, 716], "though": [155, 251, 650, 716], "evenli": [155, 251, 650, 716], "upsampl": [155, 251, 650, 716], "date_rang": [155, 224, 251, 311, 313, 316, 317, 319, 320, 321, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 618, 650, 716, 772, 773, 775, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 810, 812, 813, 814, 815, 816], "30m": [155, 251, 339, 346, 650, 716, 805, 812], "time_min": [155, 251, 650, 716], "time_max": [155, 251, 650, 716], "23": [155, 156, 251, 312, 320, 339, 473, 474, 476, 479, 480, 481, 574, 606, 607, 618, 650, 651, 716, 774, 782, 1034], "boundari": [155, 251, 293, 294, 295, 618, 650, 716, 754, 755, 756, 835, 1026], "time_count": [155, 251, 650, 716], "_lower_boundari": [155, 251, 650, 716], "_upper_boundari": [155, 251, 650, 716], "lower_bound": [155, 251, 293, 295, 377, 618, 650, 716, 754, 756, 839, 1013, 1026], "upper_bound": [155, 251, 293, 294, 377, 423, 618, 650, 716, 754, 755, 839, 897, 1026], "time_agg_list": [155, 251, 650, 716], "arang": [155, 222, 251, 650, 716], "2i": [155, 251, 650, 716], "3i": [155, 251, 650, 716], "a_agg_list": [155, 251, 650, 716], "rollinggroupbi": [156, 251], "dynamic_groupbi": [156, 251, 651, 716], "groupby_dynam": [156, 251, 651, 716], "t_0": [156, 251, 473, 474, 475, 476, 477, 479, 480, 481, 618, 651, 716], "t_1": [156, 251, 473, 474, 475, 476, 477, 479, 480, 481, 618, 651, 716], "t_n": [156, 251, 473, 474, 475, 476, 477, 479, 480, 481, 618, 651, 716], "19": [156, 170, 251, 339, 474, 476, 528, 607, 618, 651, 656, 716, 805, 812, 984], "43": [156, 251, 303, 480, 618, 651, 716], "strptime": [156, 251, 338, 651, 716, 804], "set_sort": [156, 170, 224, 251, 618, 651, 656, 716, 1026], "2d": [156, 214, 251, 587, 651, 716, 772, 778], "sum_a": [156, 251, 651, 716], "min_a": [156, 251, 651, 716], "max_a": [156, 251, 651, 716], "seed": [157, 195, 251, 372, 466, 483, 489, 618, 833, 917, 934, 945, 1026], "seed_1": [157, 251, 372, 618, 833, 1026], "seed_2": [157, 251, 372, 618, 833, 1026], "seed_3": [157, 251, 372, 618, 833, 1026], "hash": [157, 251, 618, 1026], "u64": [157, 251, 372, 468, 618, 669, 716, 833, 1026], "10783150408545073287": [157, 251], "1438741209321515184": [157, 251], "10047419486152048166": [157, 251], "2047317070637311557": [157, 251], "ab": [158, 172, 207, 228, 251, 534, 535, 618, 694, 716, 834, 861, 996, 1026], "grown": [160, 251], "intermedi": [162, 251, 654, 716, 838, 1026, 1034], "linear": [162, 186, 243, 251, 376, 399, 436, 464, 477, 564, 565, 595, 618, 654, 670, 710, 716, 838, 867, 916, 928, 1026], "mask": [163, 165, 251, 283, 284, 286, 287, 378, 380, 388, 400, 500, 502, 618, 742, 743, 828, 839, 841, 844, 856, 868, 912, 913, 937, 956, 958, 1017, 1026], "visual": [163, 165, 251], "buffer_s": [167, 251], "intern": [167, 251], "veri": [167, 219, 251, 265, 618, 635, 700, 716, 757, 1026], "fit": [167, 202, 222, 251, 488, 597, 618, 943, 944, 1026], "signific": [167, 251, 265, 618], "4x": [167, 251], "materialis": [167, 168, 192, 193, 194, 251], "rows_by_kei": [167, 193, 251], "iter_row": [168, 192, 193, 194, 251], "17_500": [168, 251], "klmnoopqrstuvwxyz": [168, 251], "__name__": [168, 251], "7500": [168, 251], "15_000": [168, 251], "record_batch": [168, 251], "to_arrow": [168, 251, 1026], "to_batch": [168, 251], "date32": [168, 251], "large_str": [168, 209, 215, 251], "15000": [168, 251], "2500": [168, 251], "left_on": [169, 170, 251, 655, 656, 716], "right_on": [169, 170, 251, 655, 656, 716], "_right": [169, 170, 251, 655, 656, 716], "joinvalid": [169, 251, 655, 716], "semi": [169, 251, 655, 716], "anti": [169, 251, 655, 700, 716, 937, 938, 1026], "cross": [169, 251, 655, 716], "many_to_mani": [169, 251, 655, 716], "one_to_on": [169, 251, 655, 716], "one_to_mani": [169, 251, 655, 716], "many_to_on": [169, 251, 655, 716], "join_asof": [169, 251, 655, 716], "stringcach": [169, 251, 629], "other_df": [169, 251], "by_left": [170, 251, 656, 716], "by_right": [170, 251, 656, 716], "asofjoinstrategi": [170, 251, 656, 716], "allow_parallel": [170, 251, 655, 656, 716], "force_parallel": [170, 251, 655, 656, 716], "asof": [170, 251, 656, 716], "asof_join": [170, 251], "search": [170, 251, 656, 716], "distanc": [170, 251, 656, 716, 835, 1026], "plan": [170, 171, 251, 633, 641, 648, 655, 656, 671, 679, 697, 716], "gdp": [170, 251, 656, 716], "2016": [170, 251, 656, 716], "2017": [170, 251, 656, 716], "2018": [170, 251, 338, 656, 716, 804], "2019": [170, 251, 656, 716], "record": [170, 214, 251, 656, 716], "jan": [170, 251, 656, 716], "1st": [170, 251, 573, 656, 716], "4164": [170, 251, 656, 716], "4411": [170, 251, 656, 716], "4566": [170, 251, 656, 716], "4696": [170, 251, 656, 716], "popul": [170, 251, 656, 716], "12th": [170, 251, 656, 716], "82": [170, 251, 656, 716], "66": [170, 251, 480, 553, 618, 656, 716, 928, 1026], "83": [170, 251, 656, 716], "52": [170, 228, 251, 482, 618, 656, 694, 716], "request": [171, 251], "describe_plan": [171, 251], "unoptim": [171, 251], "describe_optimized_plan": [171, 251], "show_graph": [171, 251, 716], "un": [171, 251], "graphviz": [171, 251, 679, 716], "axi": [173, 174, 176, 178, 206, 251, 664, 716], "null_strategi": [174, 206, 251], "nullstrategi": [174, 206, 251], "spam": [174, 251, 507, 963], "id_var": [176, 251, 664, 716], "value_var": [176, 251, 664, 716], "variable_nam": [176, 251, 664, 716], "value_nam": [176, 251, 664, 716], "unpivot": [176, 251, 664, 716], "leav": [176, 251, 423, 664, 716], "massag": [176, 251, 664, 716], "measur": [176, 251, 664, 716], "merg": [177, 251, 665, 716], "caller": [177, 251, 423, 660, 665, 700, 716], "respons": [177, 251, 665, 716], "steve": [177, 251, 665, 716], "elis": [177, 251, 665, 716], "bob": [177, 251, 665, 716], "ag": [177, 251, 665, 716], "anna": [177, 251, 665, 716], "megan": [177, 251, 665, 716], "thoma": [177, 251, 665, 716], "21": [177, 206, 251, 473, 474, 476, 479, 480, 481, 581, 618, 665, 716, 719], "what": [180, 251, 1007, 1016, 1026], "pack": [180, 251], "expr_unique_subset": [180, 251], "df_nuniqu": [180, 251], "df_agg_nuniqu": [180, 251], "offer": [183, 251, 460, 618, 668, 716], "fulli": [183, 195, 251], "cast_str_to_int": [183, 251, 668, 716], "col_nam": [183, 251, 432, 618, 668, 716], "tdf": [183, 251, 668, 716], "aggregate_funct": [184, 251], "pivotagg": [184, 251], "nodefault": [184, 251], "_nodefault": [184, 251], "no_default": [184, 251], "sort_column": [184, 251], "predefin": [184, 251], "predict": [184, 187, 224, 251, 483, 489, 618], "transpos": [184, 251], "discoveri": [184, 251], "col1": [184, 222, 251, 716, 1034], "col2": [184, 222, 251, 716, 1034], "col3": [184, 251, 1034], "tanh": [184, 251, 618, 1026], "998347": [184, 251], "964028": [184, 251], "999954": [184, 251], "interpol": [186, 243, 251, 362, 436, 464, 477, 595, 618, 670, 710, 716, 916, 928, 1026], "rollinginterpolationmethod": [186, 243, 251, 464, 477, 595, 618, 670, 710, 716, 916, 928, 1026], "midpoint": [186, 243, 251, 464, 477, 595, 618, 670, 710, 716, 916, 928, 1026], "by_pred": [192, 251], "accord": [192, 251, 433, 573, 618, 785], "never": [192, 251, 573], "mutual": [192, 251], "exclus": [192, 251, 553, 558, 585, 586, 618], "addition": [192, 251], "clariti": [192, 251], "toomanyrowsreturnederror": [192, 251, 629], "norowsreturnederror": [192, 251, 629], "inherit": [192, 251], "rowserror": [192, 251, 629], "selectortyp": [194, 251, 719], "include_kei": [194, 251], "high": [194, 251], "cost": [194, 251], "reoconstruct": [194, 251], "defaultdict": [194, 251], "assum": [194, 251, 618, 660, 700, 716], "with_replac": [195, 251, 483, 618, 934, 1026], "shuffl": [195, 233, 251, 483, 618, 700, 934, 1026], "modul": [195, 251, 483, 489, 617, 618, 719, 934, 945, 1026], "named_expr": [197, 228, 251, 600, 603, 675, 694, 716], "threshold": [197, 251, 675, 716], "set_auto_structifi": [197, 228, 251, 675, 694, 716], "auto_structifi": [197, 228, 251, 675, 694, 716], "is_odd": [197, 251, 675, 716], "_is_odd": [197, 251, 675, 716], "shift_and_fil": [200, 251, 618, 716, 1026], "shift": [201, 251, 306, 402, 459, 487, 564, 618, 678, 716, 767, 870, 911, 942, 1026], "shrink": [202, 251, 488, 618, 943, 944, 1026], "hold": [202, 251], "ddof": [205, 225, 251, 479, 481, 498, 551, 566, 598, 599, 602, 608, 618, 684, 692, 716, 930, 932, 953, 1015, 1026], "deviat": [205, 251, 355, 479, 498, 602, 618, 684, 716, 821, 953, 1026], "degre": [205, 225, 251, 465, 479, 481, 498, 551, 566, 598, 599, 602, 608, 618, 684, 692, 716, 930, 932, 953, 1015, 1026], "freedom": [205, 225, 251, 479, 481, 498, 551, 566, 598, 599, 602, 608, 618, 684, 692, 716, 930, 932, 953, 1015, 1026], "divisor": [205, 225, 251, 479, 481, 498, 551, 566, 598, 599, 602, 608, 618, 684, 692, 716, 930, 932, 953, 1015, 1026], "816497": [205, 251], "16a": [206, 251], "27b": [206, 251], "38c": [206, 251], "nth": [208, 251, 522, 541, 618, 687, 716, 978, 998, 1026], "mostli": [209, 251, 363, 618], "categoricaltyp": [209, 251], "as_seri": [210, 251], "fruit": [210, 251, 462, 471, 504, 523, 537, 618, 960, 979], "car": [210, 251, 462, 471, 537, 618], "beetl": [210, 251, 462, 471, 537, 618], "audi": [210, 251, 462, 471, 537, 618], "300": [210, 251, 924, 925, 927, 1026], "drop_first": [212, 251], "dummi": [212, 251, 1003, 1026], "foo_1": [212, 251], "foo_2": [212, 251], "bar_3": [212, 251], "bar_4": [212, 251], "ham_a": [212, 251], "ham_b": [212, 251], "instantiat": [213, 251, 1005, 1026], "from_repr": [213, 251, 1005, 1026], "df_from_str_repr": [213, 251], "eval": [213, 251, 576, 1005, 1026], "indexord": [214, 251], "fortran": [214, 251], "downstream": [214, 251, 485, 618, 939, 1026], "applic": [214, 251, 473, 474, 475, 476, 477, 479, 480, 481, 618], "prevent": [214, 251, 302, 303, 389, 538, 618, 716, 762, 763, 995, 1026], "reshap": [214, 251, 405, 618, 873, 1026], "ll": [214, 251], "u1": [214, 251], "f4": [214, 251], "view": [214, 251, 1007, 1026], "recarrai": [214, 251], "rec": [214, 251], "use_pyarrow_extension_arrai": [215, 251, 1008, 1026], "trigger": [215, 251, 1008, 1026], "sent": [215, 251, 1007, 1008, 1026], "pandas_df1": [215, 251], "pandas_df2": [215, 251], "pandas_df2_pa": [215, 251], "na": [215, 251, 1008, 1026], "get_column": [216, 251, 604], "four": [217, 251], "five": [217, 251, 1034], "bottom_k": [218, 251, 545, 618, 688, 716, 1010, 1026], "include_head": [219, 251], "header_nam": [219, 251], "column_nam": [219, 251], "perhap": [219, 251], "column_2": [219, 251], "name_gener": [219, 251], "base_nam": [219, 251], "my_column_": [219, 251], "my_column_0": [219, 251], "my_column_1": [219, 251], "my_column_2": [219, 251], "uniquekeepstrategi": [220, 251, 689, 716], "kept": [220, 251, 689, 716], "decompos": [221, 251, 690, 716], "t_a": [221, 251, 690, 716], "t_b": [221, 251, 690, 716], "t_c": [221, 251, 690, 716], "t_d": [221, 251, 690, 716], "womp": [221, 251, 690, 716], "t_": [221, 251, 690, 716], "t_struct": [221, 251, 690, 716], "step": [222, 251, 558, 585, 586], "unstackdirect": [222, 251], "much": [222, 251, 304, 422, 618, 764, 890, 1026], "pivot": [222, 251], "phase": [222, 251], "subject": [222, 251], "ascii_uppercas": [222, 251], "h": [222, 251, 258, 342, 345, 488, 525, 527, 530, 618, 981, 983, 986], "col1_0": [222, 251], "col1_1": [222, 251], "col1_2": [222, 251], "col2_0": [222, 251], "col2_1": [222, 251], "col2_2": [222, 251], "syntact": [223, 251, 577, 578, 582, 594, 595, 600, 610, 691, 716, 952, 1026], "sugar": [223, 251, 577, 578, 582, 594, 595, 600, 610, 691, 716, 952, 1026], "coalesc": [223, 251, 525, 691, 716, 981], "400": [223, 251, 691, 716, 924, 925, 927, 1026], "600": [223, 251, 691, 716, 719], "700": [223, 251, 691, 716], "new_df": [223, 251, 691, 716], "time_column": [224, 251], "frequenc": [224, 251], "forward_fil": [224, 251, 300, 303, 618], "varianc": [225, 251, 356, 390, 481, 551, 608, 618, 692, 716, 822, 859, 932, 1015, 1026], "grow": [226, 251], "is_not": [228, 251, 618, 694, 716], "not_c": [228, 251, 694, 716], "diff": [228, 251, 317, 321, 325, 327, 329, 334, 341, 403, 618, 694, 716, 779, 783, 790, 792, 795, 800, 807, 871, 1026], "_diff": [228, 251, 694, 716], "row_nr": [229, 251, 433, 473, 474, 476, 479, 480, 481, 618, 696, 716, 938, 1026], "named_agg": [231, 698], "_sum": [231, 698], "_mean_squar": [231, 698], "b_sum": [231, 698], "c_mean_squar": [231, 698], "sub": [233, 278, 279, 280, 618, 738, 739, 740], "triangl": [233, 700], "group_df": [233, 700], "int_rang": [233, 700], "deem": [234, 298, 567, 618, 701], "nr": [236, 245, 703, 712], "maxim": [238, 273, 618, 705, 733, 1026], "833333": [239, 706], "minim": [241, 274, 398, 488, 496, 618, 708, 734, 866, 902, 943, 1026], "overview": [251, 618, 629, 716, 1026, 1034], "frameinittyp": [251, 716], "variou": [251, 618, 716, 719, 1026], "entri": [251, 716, 1033], "behavior": [251, 265, 422, 556, 618, 890], "mydatafram": 251, "notic": [251, 716, 1026], "df4": 251, "df5": 251, "df6": 251, "corr": 251, "drop_in_plac": 251, "drop_nul": [251, 308, 618, 716, 1026], "estimated_s": [251, 1026], "explod": [251, 365, 458, 470, 618, 716, 921, 1026], "find_idx_by_nam": 251, "fold": [251, 442, 562, 569, 570, 596], "frame_equ": [251, 339, 346], "groupby_rol": [251, 473, 474, 475, 476, 477, 479, 480, 481, 618, 650, 716], "hash_row": 251, "hstack": 251, "insert_at_idx": 251, "is_dupl": [251, 618, 1026], "is_empti": [251, 1026], "is_uniqu": [251, 618, 1026], "iter_slic": 251, "melt": [251, 716], "merge_sort": [251, 716], "n_uniqu": [251, 618, 1026], "pipe": [251, 618, 716], "quantil": [251, 477, 618, 716, 915, 928, 1026], "replace_at_idx": 251, "shrink_to_fit": [251, 1026], "take_everi": [251, 618, 716, 1026], "to_dict": 251, "to_dummi": [251, 1026], "to_numpi": [251, 431, 618, 1026], "to_panda": [251, 1026], "to_struct": [251, 507], "unnest": [251, 507, 521, 522, 535, 716, 891, 977, 978], "unstack": 251, "write_avro": 251, "write_databas": 251, "write_delta": 251, "write_excel": 251, "write_json": [251, 671, 716], "write_parquet": 251, "cumprod": [258, 618, 1026], "ghi": [258, 507, 618, 719, 963], "94": [259, 618], "map_alia": [260, 462, 537, 618], "confus": [261, 383, 385, 618], "tt": [261, 618], "tf": [261, 263, 618], "ff": [261, 263, 618], "upcast": [264, 618], "skip_nul": [265, 618, 726, 1026], "pass_nam": [265, 618], "applystrategi": [265, 618], "thread_loc": [265, 618], "unknown": [265, 433, 506, 587, 618, 962], "stage": [265, 618], "speed": [265, 618, 681, 716], "code": [265, 283, 285, 286, 287, 485, 618, 658, 716, 939, 1026], "amount": [265, 618], "releas": [265, 618, 1034], "gil": [265, 618], "bug": [265, 431, 618, 660, 700, 716, 726, 1026], "discourag": [265, 618], "loop": [265, 618], "a_times_2": [265, 618], "approx": [266, 557, 618, 716], "hyperloglog": [266, 557, 618, 716], "algorithm": [266, 557, 618, 716], "cardin": [266, 557, 618, 716], "invers": [267, 268, 269, 270, 271, 272, 618, 727, 728, 729, 730, 731, 732, 1026], "cosin": [267, 268, 296, 297, 431, 618, 727, 728, 758, 759, 1026], "570796": [267, 269, 618, 727, 729, 1026], "hyperbol": [268, 270, 272, 297, 492, 543, 618, 728, 730, 732, 759, 948, 1000, 1026], "sine": [269, 270, 431, 491, 492, 618, 729, 730, 947, 948, 1026], "881374": [270, 618, 730, 1026], "tangent": [271, 272, 542, 543, 618, 731, 732, 999, 1000, 1026], "785398": [271, 618, 731, 1026], "arg_wher": [276, 618], "maintain": [281, 425, 484, 547, 618, 680, 681, 716, 741, 893, 935, 1011, 1026], "substr": [283, 286, 287, 500, 504, 515, 516, 520, 521, 522, 523, 719, 742, 745, 746, 956, 960, 971, 972, 976, 977, 978, 979], "ends_with": [283, 287, 500, 523, 719, 979], "x00": [283, 285, 286, 287], "xff": [283, 285, 286, 287], "hex": [283, 284, 285, 286, 287, 502, 503, 514, 743, 744, 958, 959, 970], "code_encoded_hex": [283, 285, 286, 287], "contains_ff": [283, 286, 287], "starts_with_ff": [283, 286, 287], "ends_with_ff": [283, 286, 287], "000000": [283, 285, 286, 287], "ffff00": [283, 285, 286, 287], "0000ff": [283, 285, 286, 287], "transferencod": [284, 285, 502, 503, 743, 744, 958, 959], "strict": [284, 290, 500, 502, 514, 525, 526, 527, 530, 618, 743, 748, 936, 956, 958, 970, 981, 982, 983, 986, 1026], "base64": [284, 285, 502, 503, 743, 744, 958, 959], "anywher": [286, 287, 525, 526, 527, 981, 982, 983], "complex": [288, 304, 545, 618, 747, 764, 1010, 1026], "frac": [288, 354, 355, 356, 493, 545, 618, 747, 820, 821, 822, 949, 1010, 1026], "hurt": [289, 618], "lot": [289, 618], "content": [289, 489, 550, 618, 945, 1026], "problem": [289, 618], "overflow": [290, 302, 303, 514, 538, 618, 748, 762, 763, 970, 995, 1026], "categoricalord": [291, 750], "lexic": [291, 719, 750], "foo_clip": [293, 294, 295, 618], "clip": [294, 295, 618, 755, 756, 1026], "543081": [297, 618, 759, 1026], "cumul": [299, 300, 301, 302, 303, 569, 570, 571, 618, 760, 761, 762, 763, 1026], "a_revers": [299, 300, 301, 302, 303, 432, 471, 537, 618], "value_cummax": [300, 618], "value_cummax_all_fil": [300, 618], "value_cumsum": [303, 618], "value_cumsum_all_fil": [303, 618], "min_period": [304, 354, 355, 356, 472, 473, 474, 475, 476, 477, 479, 480, 481, 598, 599, 618, 764, 820, 821, 822, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1026], "slide": [304, 618, 764, 1026], "realli": [304, 618, 764, 1026], "visit": [304, 618, 764, 1026], "radian": [305, 618], "pi": [305, 618, 758, 947, 999, 1026], "720": [305, 465, 618], "540": [305, 465, 618], "360": [305, 465, 618], "180": [305, 323, 337, 350, 465, 618], "null_behavior": [306, 402, 618, 767, 870, 1026], "nullbehavior": [306, 402, 618, 767, 870, 1026], "th": [306, 402, 403, 493, 618, 767, 870, 871, 949, 1026], "discret": [306, 351, 402, 403, 618, 765, 767, 818, 835, 870, 871, 915, 1026], "drop_nan": [309, 618, 1026], "utc": [310, 313, 318, 338, 525, 527, 719, 772, 775, 780, 804, 981, 983], "usual": [310, 772], "vari": [310, 573, 772, 1034], "rare": [310, 772], "countri": [310, 772], "switch": [310, 772], "samoa": [310, 772], "apia": [310, 772], "did": [310, 507, 772, 963], "2011": [310, 772], "dst_offset": [310, 772], "2012": [310, 772], "replace_time_zon": [310, 318, 776, 777, 809], "pacif": [310, 772], "11h": [310, 772], "13h": [310, 772], "lose": [311, 773], "2001": [311, 316, 319, 320, 322, 323, 328, 330, 335, 336, 337, 339, 340, 344, 346, 347, 348, 349, 350, 473, 474, 476, 479, 480, 481, 525, 618, 773, 778, 781, 782, 784, 786, 787, 788, 789, 791, 793, 794, 796, 799, 801, 802, 803, 805, 806, 810, 812, 813, 814, 815, 816, 981], "time_unit_m": [311, 773], "time_unit_n": [311, 773], "naiv": [312, 525, 527, 774, 981, 983], "compon": [312, 340, 525, 527, 575, 774, 806, 981, 983], "resolv": 312, "tm": [312, 719], "456000": [312, 774], "101000": 312, "456": [312, 719, 774, 1004, 1026], "07": [312, 316, 336, 338, 339, 346, 348, 525, 573, 581, 607, 719, 774, 778, 804, 814, 981], "101": [312, 514, 970, 1034], "d1": 312, "d2": 312, "d3": 312, "europ": [313, 318, 338, 775, 780, 804], "london": [313, 318, 338, 775, 780, 804], "gmt": [313, 318, 338, 775, 780, 804], "bst": [313, 318, 338, 775, 780, 804], "weekdai": [316, 336], "day_of_month": [316, 336, 348], "ordinal_dai": [316, 348], "day_of_year": [316, 336, 348], "days_diff": 317, "base_utc_offset": [318, 780], "26": [318, 780], "0m": [318, 780], "epochtimeunit": [319, 581, 781], "unix": [319, 581, 781], "epoch_n": [319, 781], "epoch_": [319, 781], "978307200000000": [319, 344, 781, 810], "978307200": [319, 781], "978393600000000": [319, 344, 781, 810], "978393600": [319, 781], "978480000000000": [319, 344, 781, 810], "978480000": [319, 781], "hours_diff": 321, "leap": [322, 335, 573, 784, 801], "2002": [322, 323, 335, 337, 350, 784, 801, 816], "iso": [323, 347, 348, 785, 813, 814], "2006": [323, 335, 801], "2004": [323, 335, 801], "2005": [323, 335, 801], "1_001": [324, 325, 327, 334], "002": [324, 325, 327, 334, 575, 790, 792, 800], "003": [324, 325, 327, 334], "3000": 324, "997": [324, 325, 327, 334], "997000": 324, "998": [324, 325, 327, 334], "998000": 324, "999": [324, 325, 327, 334, 719, 1034], "999000": [324, 719], "microseconds_diff": 325, "milliseconds_diff": 327, "minutes_diff": 329, "1440": [329, 795], "think": [331, 332, 797, 798], "vectoris": [331, 332, 797, 798], "tseri": [331, 332, 797, 798], "monthend": [331, 797], "rollforward": [331, 797], "monthbegin": [332, 798], "rollback": [332, 798], "nanoseconds_diff": 334, "1000000": [334, 533, 800], "minu": [335, 801], "dictat": [335, 801], "date_plus_1i": [335, 801], "1y2mo": [335, 801], "date_min": 335, "1998": [335, 801], "1999": [335, 719, 801], "2003": [335, 581, 801], "ordin": [336, 466, 618, 802, 917, 1026], "366": [336, 802], "use_earliest": [338, 804], "convert_time_zon": [338, 804], "ambigu": [338, 804], "sai": [338, 804], "earliest": [338, 804], "london_timezon": [338, 804], "amsterdam": [338, 804], "london_to_amsterdam": [338, 804], "cet": [338, 804], "cest": [338, 804], "dst": [338, 804], "ts_local": [338, 804], "brussel": [338, 804], "half": [339, 354, 355, 356, 618, 805, 820, 821, 822, 1026], "225": [339, 346], "to_fram": [339, 346, 525, 937, 938, 977, 978, 981, 1026], "10m": [339, 346, 805, 812], "milli": [340, 806], "micro": [340, 806], "456789": 340, "654321": 340, "111110": 340, "765431": 340, "sec": [340, 1034], "11111": 340, "seconds_diff": 341, "to_str": [342, 808], "datetime_str": [342, 345], "timestamp_n": [344, 810], "timestamp_m": 344, "978307200000": 344, "978393600000": 344, "978480000000": 344, "strftime": [345, 811], "53": [347, 813], "time_unit_u": [349, 815], "32971": [349, 815], "32974": [349, 815], "32976": [349, 815], "718281828459045": [351, 426, 618, 818, 894, 1026], "pk": [351, 618, 818, 1026], "probabl": [351, 618, 818, 1026], "459148": [351, 618], "754888": [351, 618], "eq": [353, 618, 1026], "span": [354, 355, 356, 618, 820, 821, 822, 1026], "half_lif": [354, 355, 356, 618, 820, 821, 822, 1026], "adjust": [354, 355, 356, 493, 618, 820, 821, 822, 949, 1026], "ignore_nul": [354, 355, 356, 618, 820, 821, 822, 1016, 1026], "exponenti": [354, 355, 356, 358, 461, 618, 820, 821, 822, 823, 1026], "weight": [354, 355, 356, 472, 473, 474, 475, 476, 477, 479, 480, 481, 493, 618, 820, 821, 822, 923, 924, 925, 926, 927, 928, 930, 931, 932, 949, 1026], "decai": [354, 355, 356, 618, 820, 821, 822, 1026], "term": [354, 355, 356, 510, 513, 618, 820, 821, 822, 966, 969, 1026], "mass": [354, 355, 356, 618, 820, 821, 822, 1026], "gamma": [354, 355, 356, 618, 820, 821, 822, 1026], "foral": [354, 355, 356, 618, 820, 821, 822, 1026], "geq": [354, 355, 356, 618, 820, 821, 822, 1026], "theta": [354, 355, 356, 618, 820, 821, 822, 1026], "life": [354, 355, 356, 618, 820, 821, 822, 1026], "exp": [354, 355, 356, 618, 820, 821, 822, 1026], "ln": [354, 355, 356, 618, 820, 821, 822, 1026], "smooth": [354, 355, 356, 618, 820, 821, 822, 1026], "factor": [354, 355, 356, 544, 618, 820, 821, 822, 1009, 1026], "leq": [354, 355, 356, 618, 820, 821, 822, 1026], "imbal": [354, 355, 356, 618, 820, 821, 822, 1026], "ew": [354, 355, 356, 618, 820, 821, 822, 1026], "w_i": [354, 355, 356, 618, 820, 821, 822, 1026], "recurs": [354, 355, 356, 618, 820, 821, 822, 1026], "y_0": [354, 355, 356, 618, 820, 821, 822, 1026], "x_0": [354, 355, 356, 618, 820, 821, 822, 1026], "y_t": [354, 355, 356, 618, 820, 821, 822, 1026], "y_": [354, 355, 356, 618, 820, 821, 822, 1026], "x_t": [354, 355, 356, 618, 820, 821, 822, 1026], "observ": [354, 355, 356, 618, 820, 821, 822, 1026], "x_2": [354, 355, 356, 618, 820, 821, 822, 1026], "428571": [354, 618], "bia": [355, 356, 390, 478, 493, 618, 821, 822, 859, 929, 949, 1026], "unbias": [355, 356, 618, 821, 822, 1026], "963624": [355, 618, 821, 1026], "928571": [356, 618, 822, 1026], "wildcard": [357, 563, 569, 570, 579, 596, 618], "regex": [357, 439, 500, 501, 504, 506, 507, 515, 516, 523, 577, 604, 618, 719, 956, 957, 960, 962, 963, 971, 972, 979], "aa": [357, 500, 577, 618, 956], "ba": [357, 577, 618, 719], "cc": [357, 577, 618], "718282": [358, 618], "389056": [358, 618], "54": [358, 618, 1034], "59815": [358, 618], "expand": [359, 438, 439, 469, 618, 824, 1026], "pythonliter": [360, 589, 592, 618, 825, 899, 902, 1026], "extrem": [360, 618, 825, 1026], "group_col": [363, 552, 618], "g1": [363, 552, 618], "g2": [363, 552, 618], "lt": [363, 552, 618, 1026], "gte": [363, 552, 618], "exprlistnamespac": [365, 618], "divis": [367, 546, 618], "truediv": [367, 618], "9774092659964970114": [372, 618], "13614470193936745724": [372, 618], "1101441246220388612": [372, 618], "11638928888656214026": [372, 618], "13382926553367784577": [372, 618], "cumsum": [375, 536, 618, 653, 716, 858, 1026], "interpolationmethod": [376, 618, 838, 1026], "regrid": [376, 618], "grid": [376, 618], "df_original_grid": [376, 618], "grid_point": [376, 618], "df_new_grid": [376, 618], "conflat": [377, 618], "finit": [379, 546, 566, 618, 843, 1026], "primit": [381, 618, 1007, 1026], "optional_memb": [381, 618, 846, 1026], "infinit": [382, 546, 618, 847, 1026], "_isnan": [383, 618], "b_isnan": [383, 618], "negat": [384, 618], "_is_not_nan": [385, 618], "b_is_not_nan": [385, 618], "_not_nul": [386, 618], "a_not_nul": [386, 618], "b_not_nul": [386, 618], "_isnul": [387, 618], "a_isnul": [387, 618], "b_isnul": [387, 618], "undo": [389, 445, 618], "duplicateerror": [389, 618, 629], "occurr": [389, 618, 835, 1026], "333333": [389, 618, 911, 932, 1026], "fisher": [390, 493, 618, 859, 949, 1026], "fourth": [390, 618, 859, 1026], "subtract": [390, 536, 618, 859, 1026], "distribut": [390, 493, 618, 859, 949, 1026], "elimin": [390, 618, 859, 1026], "bias": [390, 493, 618, 859, 949, 1026], "scipi": [390, 493, 618, 859, 949, 1026], "stat": [390, 493, 618, 859, 949, 1026], "153061": [390, 618], "sublist": [397, 398, 400, 402, 403, 406, 407, 408, 410, 411, 418, 421, 422, 423, 846, 865, 866, 868, 870, 871, 874, 875, 876, 878, 879, 886, 889, 890, 891, 1026], "membership": [400, 868], "listcol": 401, "number_of_two": 401, "blindli": [404, 872], "worth": [404, 872], "enough": [404, 493, 618, 872, 949, 1026], "concat_list": [404, 576, 872], "rank": [404, 566, 576, 618, 872, 1026], "exprnamespac": 405, "flat": [405, 470, 618, 873, 921, 1026], "taken": [418, 519, 540, 618, 886, 975], "null_on_oob": [422, 890], "cheaper": [422, 890], "n_field_strategi": [423, 891], "tostructstrategi": [423, 891], "first_non_nul": [423, 891], "max_width": [423, 891], "field_0": [423, 891], "field_1": [423, 891], "field_n": [423, 891], "pre": [423, 594, 597, 610], "n0": 423, "n1": 423, "logarithm": [426, 427, 428, 618, 894, 895, 896, 1026], "584963": [426, 618], "30103": [427, 618], "60206": [427, 618], "natur": [428, 618, 896, 1026], "plu": [428, 618, 896, 1026], "693147": [428, 618], "098612": [428, 618], "386294": [428, 618], "lowest": [429, 618], "9223372036854775808": [429, 618], "agg_list": [431, 618], "elementwis": [431, 472, 473, 474, 476, 480, 618, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1026], "third": [431, 607, 618], "parti": [431, 618], "book": [431, 618], "map_dict": [431, 618, 1026], "argmax": [431, 618], "_revers": [432, 471, 537, 618], "rsplit": [432, 618], "b_revers": [432, 471, 537, 618], "remap": [433, 618, 898, 1026], "lookup": [433, 618, 898, 1026], "country_code_dict": [433, 618], "ca": [433, 618], "canada": [433, 618], "de": [433, 618], "germani": [433, 618], "fr": [433, 618], "franc": [433, 618], "country_cod": [433, 618], "rest": [433, 618], "exprmetanamespac": [437, 440], "computeerror": [441, 514, 629, 970], "tree": 444, "keep_nam": [445, 618], "modulu": [448, 618], "xlog2": [450, 461, 618], "poison": [452, 453, 618, 907, 908, 1026], "nanmax": [452, 453, 618, 907, 908, 1026], "wherea": [452, 453, 573, 618, 652, 659, 716, 907, 908, 1026], "inequ": [454, 618], "ne": [455, 618, 1026], "more_expr": [458, 554, 555, 559, 562, 564, 565, 571, 589, 592, 604, 618], "mapping_strategi": [458, 618], "windowmappingstrategi": [458, 618], "group_to_row": [458, 618], "outcom": [458, 618], "group_dtyp": [458, 618], "warn": [458, 618], "flatten": [458, 618], "_max": [458, 618], "c_max": [458, 618], "_min": [458, 618], "c_min": [458, 618], "percent": [459, 618, 911, 1026], "090909": [459, 618], "extract_numb": [460, 618], "digit": [460, 482, 507, 533, 618, 933, 957, 963, 989, 1026, 1034], "scale_negative_even": [460, 618], "expon": [461, 618, 1026], "reverse_": [462, 618], "reverse_a": [462, 618], "reverse_fruit": [462, 618], "reverse_b": [462, 618], "reverse_car": [462, 618], "566371": [465, 618], "424778": [465, 618], "283185": [465, 618], "141593": [465, 618, 727, 1026], "rankmethod": [466, 618, 917, 1026], "ti": [466, 618, 917, 1026], "competit": [466, 618, 917, 1026], "highest": [466, 549, 566, 618, 716, 917, 1026], "immedi": [466, 558, 560, 573, 585, 586, 594, 597, 603, 607, 610, 618, 917, 1026], "64bit": [468, 618, 919, 1026], "safe": [468, 525, 527, 618, 919, 981, 983, 1007, 1026], "fruits_revers": [471, 537, 618], "cars_revers": [471, 537, 618], "window_s": [472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 598, 599, 618, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1026], "rolling_min": [472, 618, 923, 1026], "rolling_max": [472, 618, 923, 1026], "rolling_mean": [472, 618, 923, 1026], "rolling_sum": [472, 618, 923, 1026], "multipli": [472, 473, 474, 476, 479, 480, 481, 618, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1026], "label": [472, 473, 474, 475, 476, 477, 479, 480, 481, 618, 669, 716, 765, 915, 923, 924, 925, 926, 927, 928, 930, 931, 932, 1026], "358899": [472, 618], "041452": [472, 618], "567764": [472, 618], "travers": [473, 474, 476, 480, 618, 924, 925, 927, 930, 931, 932, 1026], "vector": [473, 474, 476, 480, 618, 924, 925, 927, 930, 931, 932, 1026], "endpoint": [473, 474, 475, 476, 477, 479, 480, 481, 618], "5h": [473, 474, 475, 476, 477, 479, 480, 481, 618], "df_tempor": [473, 474, 476, 479, 480, 481, 618], "closur": [473, 474, 479, 480, 481, 618], "rolling_row_max": [473, 618], "2h": [473, 474, 476, 479, 480, 481, 618], "rolling_row_mean": [474, 618], "contribut": [475, 477, 479, 481, 618], "rolling_row_min": [476, 618], "625": [477, 618], "skew": [478, 618, 929, 1026], "381802": [478, 618, 929, 1026], "47033": [478, 618, 929, 1026], "38180177416060584": [478, 618, 929, 1026], "47033046033698594": [478, 618, 929, 1026], "433013": [479, 618, 684, 716], "rolling_row_std": [479, 618], "rolling_row_sum": [480, 618], "39": [480, 581, 618], "63": [480, 618], "69": [480, 618], "1875": [481, 618, 692, 716], "rolling_row_var": [481, 618], "fixed_se": [483, 489, 618], "increment": [483, 489, 618], "schedul": [483, 489, 618], "searchsortedsid": [484, 618, 935, 1026], "leftmost": [484, 618, 935, 1026], "rightmost": [484, 618, 935, 1026], "six": [484, 618], "extrema": [488, 618, 943, 1026], "112": [488, 618, 1034], "129": [488, 618], "i8": [488, 594, 597, 610, 618, 767, 922, 1013, 1026], "8589934592": [488, 618], "1073741824": [488, 618], "175201": [492, 618, 948, 1026], "about": [493, 500, 506, 507, 515, 618, 949, 956, 962, 963, 971, 1026, 1034], "unimod": [493, 618, 949, 1026], "skewtest": [493, 618, 949, 1026], "speak": [493, 618, 949, 1026], "g_1": [493, 618, 949, 1026], "m_3": [493, 618, 949, 1026], "m_2": [493, 618, 949, 1026], "m_i": [493, 618, 949, 1026], "sum_": [493, 618, 949, 1026], "texttt": [493, 618, 949, 1026], "k_3": [493, 618, 949, 1026], "k_2": [493, 618, 949, 1026], "sqrt": [493, 618, 949, 1026], "343622": [493, 618], "value1": [496, 618], "value2": [496, 618], "attain": [496, 618], "414214": [497, 618, 952, 1026], "sensit": [500, 507, 515, 956, 963, 971], "ilmsuxu": [500, 506, 507, 515, 956, 962, 963, 971], "default_match": 500, "insensitive_match": 500, "section": [500, 506, 507, 515, 956, 962, 963, 971], "crab": [500, 956], "dog": [500, 529, 532, 565, 956, 985, 988], "rab": [500, 956], "success": [501, 507, 957, 963], "overlap": [501, 507, 957, 963], "captur": [501, 506, 507, 957, 962, 963], "123": [501, 507, 516, 719, 957, 963, 972, 1004, 1026], "bla": [501, 507, 957, 963], "asd": [501, 507, 957, 963], "678": [501, 507, 957, 963], "910t": [501, 507, 957, 963], "count_digit": 501, "666f6f": [503, 959], "626172": [503, 959], "mango": [504, 523, 960, 979], "go": [504, 960], "has_suffix": 504, "group_index": [506, 962], "nthose": [506, 962], "nodd": [506, 962], "nthe": [506, 962], "url": [506, 962], "vote": [506, 962], "ballon_dor": [506, 962], "404": [506, 962], "ref": [506, 962], "candid": [506, 962], "messi": [506, 962], "ronaldo": [506, 962], "email": [507, 963], "real": [507, 963], "some_account": [507, 963], "somewher": [507, 963], "net": [507, 963], "jkl": [507, 963], "uvw": [507, 963], "co": [507, 618, 963, 1026], "uk": [507, 963], "address": 507, "xi": [507, 963], "insensit": [507, 515, 719, 956, 963, 971], "quantifi": [507, 963], "email_part": [507, 963], "extracted_nr": 507, "910": [507, 963], "json_path_match": [508, 964], "jsonpath": [508, 509, 964, 965], "json_path": [509, 965], "regardless": [509, 965], "json_val": [509, 965], "n_char": [510, 966], "caf\u00e9": [510, 513, 966, 969], "345": [510, 513, 966, 969], "\u6771\u4eac": [510, 513, 966, 969], "nchar": [510, 513], "fill_char": [511, 517, 967, 973], "justifi": [511, 517, 967, 973], "pad": [511, 517, 533, 967, 973, 989], "cow": [511, 517, 967, 973], "monkei": [511, 517, 967, 973], "hippopotamu": [511, 517, 967, 973], "strip": [512, 518, 968, 974], "tworld": [512, 968, 980], "wod": [512, 968], "rld": [512, 524, 968], "radix": [514, 970], "parseerror": [514, 970], "becom": [514, 970], "silent": [514, 970], "bin": [514, 553, 612, 618, 765, 835, 915, 970, 1020, 1026], "110": [514, 970], "010": [514, 970], "fa1e": [514, 970], "ff00": [514, 970], "cafe": [514, 970], "64030": [514, 970], "65280": [514, 970], "51966": [514, 970], "replace_al": [515, 971], "citi": 515, "philadelphia": 515, "season": 515, "spring": 515, "summer": 515, "autumn": 515, "winter": 515, "weather": [515, 971], "raini": [515, 971], "sunni": [515, 971], "cloudi": 515, "snowi": 515, "foggi": [515, 971], "123abc": [515, 971], "abc456": [515, 971], "abcabc": [516, 972], "123a123": [516, 972], "bc": [516, 604, 972], "trail": [518, 524, 974, 980], "oldw": 518, "he": 518, "subslic": [519, 975], "pear": [519, 975], "papaya": [519, 975], "dragonfruit": [519, 975], "s_slice": 519, "ear": [519, 975], "aya": [519, 975], "uit": [519, 975], "ya": [519, 975], "onf": [519, 975], "a_1": [521, 977, 1003, 1026], "d_4": [521, 977], "rename_field": [521, 522, 977, 978], "first_part": [521, 522, 977, 978], "second_part": [521, 522, 977, 978], "remaind": [522, 978], "app": [523, 979], "has_prefix": 523, "nworld": 524, "ow": 524, "hell": [524, 980], "polarstemporaltyp": [525, 981], "introduc": [525, 526, 527, 981, 982, 983], "penalti": [525, 526, 527, 981, 982, 983], "clean": [525, 526, 527, 981, 982, 983], "beforehand": [525, 526, 527, 981, 982, 983], "certainli": [525, 526, 527, 981, 982, 983], "deprec": [525, 527, 573, 597, 607, 981, 983], "3f": [525, 527, 981, 983], "00z": [525, 527, 981, 983], "sun": [525, 981], "jul": [525, 981], "34": [525, 981], "inference_length": [528, 984], "3420": [528, 984], "120134": [528, 984], "3212": [528, 984], "143": [528, 984, 1034], "lowercas": [529, 985], "variant": [529, 531, 532], "titlecas": [531, 987], "sing": [531, 987], "welcom": [531, 987], "THERE": [531, 987], "NO": [531, 719, 987], "There": [531, 987], "uppercas": [532, 988], "100000": 533, "0010": 533, "0001": 533, "00000": 533, "00001": 533, "cd": [534, 535], "struct_col": [534, 535], "www": 535, "xxx": 535, "yyi": 535, "zzz": 535, "obvious": 535, "structfieldnotfounderror": [535, 629], "761594": [543, 618, 1000, 1026], "replic": [544, 618, 1009, 1026], "vals_phys": [544, 618], "floordiv": [546, 618], "ieee": [546, 618], "754": [546, 618], "mathemat": [546, 576, 618], "undefin": [546, 618], "On": [546, 618], "operand": [546, 618], "infin": [546, 618], "value_count": [548, 618, 1026], "9223372036854775807": [549, 618], "multithread": [550, 618], "binary_str": [553, 618], "zfill": [553, 618], "250": [553, 618, 925, 1026, 1034], "bin_x": [553, 618], "bin_i": [553, 618], "xor_xi": [553, 618], "bin_xor_xi": [553, 618], "00001010": [553, 618], "00000001": [553, 618], "00001011": [553, 618], "00001000": [553, 618], "00000010": [553, 618], "11111010": [553, 618], "00000011": [553, 618], "249": [553, 618], "11111001": [553, 618], "01000010": [553, 618], "00000100": [553, 618], "70": [553, 618], "01000110": [553, 618], "bitwis": [554, 555], "AND": [554, 719], "returns_scalar": 556, "product_a": 556, "49": 556, "Be": 558, "arg_tru": [560, 618, 1026], "more_nam": 563, "hamburg": 563, "lag": 564, "mimic": 564, "a_lag_": 564, "a_rol": 564, "swim": 565, "walk": 565, "full_sent": 565, "correlationmethod": 566, "propagate_nan": 566, "spearman": 566, "larger": [566, 680, 681, 716], "544705": 566, "covari": [568, 599], "acc": [569, 570, 579, 596], "include_init": 569, "accumul": [569, 570, 579, 596], "fn": [569, 570, 579, 596], "new_valu": [569, 570, 579, 596], "cumreduc": 569, "further": [573, 1008, 1026], "granular": 573, "finer": 573, "permut": 573, "februari": 573, "febrari": 573, "28th": 573, "march": 573, "31st": 573, "approach": 573, "prior": 573, "began": 573, "januari": 573, "1mo_satur": 573, "month_end": 573, "routin": 573, "1985": 573, "america": 573, "new_york": 573, "est": 573, "999999": [574, 606, 607], "tbl_width_char": 575, "120": 575, "add_week": 575, "add_dai": 575, "add_second": 575, "add_milli": 575, "add_hour": 575, "a_b_doubl": 576, "f_string": 580, "placehold": 580, "hello_": 580, "_world": 580, "foo_": 580, "_bar_": 580, "foo_a_bar_1": 580, "foo_b_bar_2": 580, "foo_c_bar_3": 580, "epoch": 581, "timestep": 581, "1666683077": 581, "1666683099": 581, "12345": [581, 751, 830, 933, 1026], "12346": 581, "agg_group": [582, 618], "polarsintegertyp": 586, "allow_object": 587, "valueexcept": 587, "test_func": 588, "polarsexprtyp": [594, 597, 610], "605551": 602, "605551275463989": 602, "my_struct": 603, "1h30m25": 607, "lf": [607, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 672, 673, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 693, 694, 695, 696, 697, 716, 1033, 1034], "6h": 607, "5h59m": 607, "1h29m": 607, "58": 607, "57": [607, 933, 1026, 1034], "chain": 609, "isn": 609, "thens": 609, "elif": 609, "pick": 609, "arr": [611, 1007, 1018, 1026], "sometim": 617, "and_": 618, "approx_uniqu": [618, 716], "arcco": [618, 1026], "arccosh": [618, 1026], "arcsin": [618, 1026], "arcsinh": [618, 1026], "arctan": [618, 1026], "arctanh": [618, 1026], "arg_max": [618, 1026], "arg_min": [618, 1026], "arg_sort": [618, 1026], "arg_uniqu": [618, 1026], "backward_fil": 618, "clip_max": [618, 1026], "clip_min": [618, 1026], "cosh": [618, 1026], "cumcount": 618, "cummax": [618, 1026], "cummin": [618, 1026], "cumulative_ev": [618, 1026], "cut": [618, 1026], "left_clos": [618, 765, 915, 1026], "prob": [618, 915, 1026], "entropi": [618, 1026], "eq_miss": [618, 1026], "ewm_mean": [618, 1026], "ewm_std": [618, 1026], "ewm_var": [618, 1026], "extend_const": [618, 1026], "from_json": [618, 671, 716], "ge": [618, 1026], "gt": [618, 1026], "implod": [618, 1026], "inspect": [618, 716], "is_between": [618, 1026], "is_finit": [618, 1026], "is_first": [618, 1026], "is_in": [618, 1026], "is_infinit": [618, 1026], "is_nan": [618, 1026], "is_not_nan": [618, 1026], "is_not_nul": [618, 1026], "kurtosi": [618, 1026], "le": [618, 1026], "log10": [618, 1026], "log1p": [618, 1026], "mod": 618, "mul": 618, "nan_max": [618, 1026], "nan_min": [618, 1026], "ne_miss": [618, 1026], "or_": 618, "pct_chang": [618, 1026], "pow": [618, 1026], "qcut": [618, 1026], "allow_dupl": [618, 915, 1026], "lo": 618, "reinterpret": [618, 1026], "repeat_bi": 618, "rolling_appli": [618, 1026], "rolling_median": [618, 1026], "rolling_quantil": [618, 1026], "rolling_skew": [618, 1026], "rolling_std": [618, 1026], "rolling_var": [618, 1026], "search_sort": [618, 1026], "shrink_dtyp": [618, 1026], "sin": [618, 1026], "sinh": [618, 1026], "sort_bi": 618, "tan": [618, 1026], "to_phys": [618, 1026], "unique_count": [618, 1026], "xor": 618, "expos": 629, "miscellan": 629, "arrowerror": 629, "columnnotfounderror": 629, "invalidoperationerror": 629, "nodataerror": 629, "polarspanicerror": 629, "schemaerror": 629, "schemafieldnotfounderror": 629, "shapeerror": 629, "parametr": 629, "build_info": 629, "get_index_typ": 629, "show_vers": 629, "threadpool_s": 629, "sqlcontext": [629, 1033], "hit": [633, 716], "node": [633, 653, 660, 664, 669, 672, 716], "huge": [636, 716], "saver": [636, 716], "purpos": [643, 716], "influenc": [643, 660, 716], "read_json": [648, 697, 716], "lazygroupbi": [649, 650, 651, 716], "other_lf": [655, 716], "validate_output_schema": [660, 716], "streamabl": [660, 664, 716], "past": [660, 716], "paramount": [660, 716], "elig": [660, 716], "invari": [660, 716], "upheld": [660, 716], "prune": [660, 716], "show_plot": [669, 716], "truncate_nod": [669, 716], "figsiz": [669, 679, 716], "gantt": [669, 716], "plot": [669, 679, 716], "groupby_partit": [669, 716], "470": [669, 716], "475": [669, 716], "1964": [669, 716], "swap": [672, 716], "output_path": [679, 716], "raw_output": [679, 716], "figur": [679, 716], "ram": [680, 681, 716], "slightli": [680, 681, 716], "my_larger_than_ram_fil": [680, 681, 716], "data_pagesize_limit": [681, 716], "290994": [684, 716], "118034": [684, 716], "extern": [695, 716], "lf_other": [695, 716], "afoo": [695, 716], "cfoo": [695, 716], "train_lf": [695, 716], "feature_0": [695, 716], "feature_1": [695, 716], "test_lf": [695, 716], "_train": [695, 716], "feature_0_train": [695, 716], "dataframescan": [697, 716], "output_schema": [697, 716], "opaqu": 700, "idiomat": 700, "my_column": 700, "lf5": 716, "lf6": 716, "explain": 716, "sink_ipc": 716, "sink_parquet": 716, "with_context": 716, "intuit": 719, "relat": 719, "broadcast": 719, "emploi": 719, "complement": 719, "plenti": 719, "cde": 719, "fgg": 719, "jjk": 719, "lmn": 719, "opp": 719, "qqr": 719, "by_dtyp": 719, "as_expr": 719, "dispatch": 719, "2024": 719, "1_234_500": 719, "5_000_555": 719, "1234500": 719, "5000555": 719, "2010": 719, "4_500_000": 719, "4500000": 719, "3265500": 719, "by_nam": 719, "zap": 719, "tstamp_tokyo": 719, "987654": 719, "123465": 719, "tstamp_utc": 719, "2025": 719, "666000": 719, "tstamp": 719, "600000": 719, "123000": 719, "666": 719, "is_selector": 719, "obj": 719, "selector_column_nam": 719, "colz": [719, 1034], "include_categor": 719, "set_ord": 719, "2345": 719, "3456": 719, "new_aliased_sr": [722, 1026], "append_chunk": [725, 1026], "super": [725, 1026], "292432": [728, 1026], "549306": [732, 1026], "catnamespac": 749, "56789": [751, 830, 933, 1026], "901234": [751, 830, 933, 1026], "1232e": [758, 1026], "break_point_label": [765, 915, 1026], "break_point": [765, 835, 915, 1026], "category_label": [765, 915, 1026], "breakpoint": [765, 915, 1026], "quick": [766, 1026, 1034], "series_num": [766, 1026], "581139": [766, 1026], "series_str": [766, 1026], "datetimenamespac": 771, "ser": [772, 776, 777, 780, 809], "kathmandu": [776, 777, 809], "0545": [776, 777, 809], "500m": [789, 791, 799, 806], "500000": 789, "2m": 794, "500000000": 799, "date_minus_1y_2mon": 801, "165": [805, 812], "series_equ": [805, 812, 1026], "timestamp_u": 810, "978307200000000000": 810, "978393600000000000": 810, "978480000000000000": 810, "005": [818, 1026], "06293300616044681": [818, 1026], "65": [818, 1026], "8568409950394724": [818, 1026], "4000000": [819, 1026], "814697265625": [819, 1026], "bitmask": [832, 1026], "swiftli": [832, 1026], "10734580197236529959": [833, 1026], "3022416320763508302": [833, 1026], "13756996518000038261": [833, 1026], "bin_count": [835, 1026], "a_count": [835, 1026], "fall": [839, 1026], "listnamespac": 862, "field_2": 891, "n00": 891, "n01": 891, "n02": 891, "2147483648": [897, 1026], "iso3166": [898, 1026], "tur": [898, 987, 1026], "jpn": [898, 1026], "nld": [898, 1026], "country_lookup": [898, 1026], "japan": [898, 1026], "t\u00fcrkiy": [898, 1026], "netherland": [898, 1026], "unrecognis": [898, 1026], "unspecifi": [898, 1026], "country_nam": [898, 1026], "166667": [911, 1026], "142857": [911, 1026], "peak": [912, 913, 1026], "nanstd": [923, 1026], "858612": [923, 1026], "200": [924, 925, 927, 1026], "150": [925, 1026], "350": [925, 1026], "450": [925, 1026], "dev": [930, 1026], "527525": [930, 1026], "frequent": [937, 938, 1026], "mutat": [938, 1026], "2246e": [947, 999, 1026], "stringnamespac": 954, "orld": 974, "6331e16": [999, 1026], "lib": [1002, 1026], "int64arrai": [1002, 1026], "a_2": [1003, 1026], "a_3": [1003, 1026], "s_from_str_repr": [1005, 1026], "zero_copy_onli": [1007, 1026], "writabl": [1007, 1026], "complet": [1007, 1026], "presenc": [1007, 1026], "immut": [1007, 1026], "127": [1013, 1026], "seriesview": [1016, 1026], "arraylik": 1026, "dtype_if_empti": 1026, "position": 1026, "scenario": 1026, "chunk_length": 1026, "get_chunk": 1026, "has_valid": 1026, "hist": 1026, "is_boolean": 1026, "is_float": 1026, "is_integ": 1026, "is_numer": [1026, 1034], "is_sort": 1026, "is_tempor": 1026, "is_utf8": 1026, "new_from_index": 1026, "peak_max": 1026, "peak_min": 1026, "power": 1026, "set_at_idx": 1026, "two_a": 1033, "__enter__": 1033, "__exit__": 1033, "exc_typ": 1033, "baseexcept": 1033, "exc_val": 1033, "exc_tb": 1033, "tracebacktyp": 1033, "guid": 1034, "easi": 1034, "approxim": 1034, "own": 1034, "machin": 1034, "xdist": 1034, "significantli": 1034, "hardwar": 1034, "setup": 1034, "numeric_dtyp": 1034, "null_probabililti": 1034, "test_numer": 1034, "col0": 1034, "col4": 1034, "29096": 1034, "485": 1034, "2147483647": 1034, "8257e14": 1034, "7508": 1034, "37338": 1034, "7264": 1034, "321": 1034, "16996": 1034, "121": 1034, "361": 1034, "63204": 1034, "1443e235": 1034, "conform": 1034, "ascii_lett": 1034, "id_char": 1034, "alphabet": 1034, "price": 1034, "min_valu": 1034, "max_valu": 1034, "test_price_calcul": 1034, "a101": 1034, "8nin": 1034, "qhoo": 1034, "714": 1034, "544": 1034, "i0e0": 1034, "0000": 1034, "test_miscellan": 1034, "235": 1034, "87": 1034, "186": 1034, "174": 1034, "179": 1034, "213": 1034, "221": 1034, "86": 1034, "255": 1034}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1033, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [554, 4, 1, "", "all"], [555, 4, 1, "", "any"], [556, 4, 1, "", "apply"], [557, 4, 1, "", "approx_unique"], [558, 4, 1, "", "arange"], [559, 4, 1, "", "arg_sort_by"], [560, 4, 1, "", "arg_where"], [561, 4, 1, "", "avg"], [70, 4, 1, "", "build_info"], [562, 4, 1, "", "coalesce"], [563, 4, 1, "", "col"], [71, 4, 1, "", "collect_all"], [72, 4, 1, "", "concat"], [564, 4, 1, "", "concat_list"], [565, 4, 1, "", "concat_str"], [566, 4, 1, "", "corr"], [567, 4, 1, "", "count"], [568, 4, 1, "", "cov"], [569, 4, 1, "", "cumfold"], [570, 4, 1, "", "cumreduce"], [571, 4, 1, "", "cumsum"], [572, 4, 1, "", "date"], [573, 4, 1, "", "date_range"], [574, 4, 1, "", "datetime"], [575, 4, 1, "", "duration"], [576, 4, 1, "", "element"], [73, 4, 1, "", "enable_string_cache"], [577, 4, 1, "", "exclude"], [578, 4, 1, "", "first"], [579, 4, 1, "", "fold"], [580, 4, 1, "", "format"], [88, 4, 1, "", "from_arrow"], [89, 4, 1, "", "from_dataframe"], [90, 4, 1, "", "from_dict"], [91, 4, 1, "", "from_dicts"], [581, 4, 1, "", "from_epoch"], [92, 4, 1, "", "from_numpy"], [93, 4, 1, "", "from_pandas"], [94, 4, 1, "", "from_records"], [95, 4, 1, "", "from_repr"], [96, 4, 1, "", "get_index_type"], [582, 4, 1, "", "groups"], [583, 4, 1, "", "head"], [584, 4, 1, "", "implode"], [585, 4, 1, "", "int_range"], [586, 4, 1, "", "int_ranges"], [587, 4, 1, "", "lit"], [588, 4, 1, "", "map"], [589, 4, 1, "", "max"], [590, 4, 1, "", "mean"], [591, 4, 1, "", "median"], [592, 4, 1, "", "min"], [593, 4, 1, "", "n_unique"], [594, 4, 1, "", "ones"], [595, 4, 1, "", "quantile"], [98, 4, 1, "", "read_avro"], [99, 4, 1, "", "read_csv"], [100, 4, 1, "", "read_csv_batched"], [101, 4, 1, "", "read_database"], [102, 4, 1, "", "read_delta"], [103, 4, 1, "", "read_excel"], [104, 4, 1, "", "read_ipc"], [105, 4, 1, "", "read_ipc_schema"], [106, 4, 1, "", "read_json"], [107, 4, 1, "", "read_ndjson"], [108, 4, 1, "", "read_parquet"], [109, 4, 1, "", "read_parquet_schema"], [596, 4, 1, "", "reduce"], [597, 4, 1, "", "repeat"], [598, 4, 1, "", "rolling_corr"], [599, 4, 1, "", "rolling_cov"], [110, 4, 1, "", "scan_csv"], [111, 4, 1, "", "scan_delta"], [112, 4, 1, "", "scan_ipc"], [113, 4, 1, "", "scan_ndjson"], [114, 4, 1, "", "scan_parquet"], [115, 4, 1, "", "scan_pyarrow_dataset"], [600, 4, 1, "", "select"], [719, 6, 0, "-", "selectors"], [116, 4, 1, "", "show_versions"], [601, 4, 1, "", "sql_expr"], [602, 4, 1, "", "std"], [603, 4, 1, "", "struct"], [604, 4, 1, "", "sum"], [605, 4, 1, "", "tail"], [126, 4, 1, "", "threadpool_size"], [606, 4, 1, "", "time"], [607, 4, 1, "", "time_range"], [127, 4, 1, "", "using_string_cache"], [608, 4, 1, "", "var"], [609, 4, 1, "", "when"], [610, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[130, 1, 1, "", "__dataframe__"], [131, 1, 1, "", "apply"], [132, 1, 1, "", "bottom_k"], [133, 1, 1, "", "clear"], [134, 1, 1, "", "clone"], [135, 2, 1, "", "columns"], [136, 1, 1, "", "corr"], [137, 1, 1, "", "describe"], [138, 1, 1, "", "drop"], [139, 1, 1, "", "drop_in_place"], [140, 1, 1, "", "drop_nulls"], [141, 2, 1, "", "dtypes"], [142, 1, 1, "", "estimated_size"], [143, 1, 1, "", "explode"], [144, 1, 1, "", "extend"], [145, 1, 1, "", "fill_nan"], [146, 1, 1, "", "fill_null"], [147, 1, 1, "", "filter"], [148, 1, 1, "", "find_idx_by_name"], [149, 1, 1, "", "fold"], [150, 1, 1, "", "frame_equal"], [151, 1, 1, "", "get_column"], [152, 1, 1, "", "get_columns"], [153, 1, 1, "", "glimpse"], [154, 1, 1, "", "groupby"], [155, 1, 1, "", "groupby_dynamic"], [156, 1, 1, "", "groupby_rolling"], [157, 1, 1, "", "hash_rows"], [158, 1, 1, "", "head"], [159, 2, 1, "", "height"], [160, 1, 1, "", "hstack"], [161, 1, 1, "", "insert_at_idx"], [162, 1, 1, "", "interpolate"], [163, 1, 1, "", "is_duplicated"], [164, 1, 1, "", "is_empty"], [165, 1, 1, "", "is_unique"], [166, 1, 1, "", "item"], [167, 1, 1, "", "iter_rows"], [168, 1, 1, "", "iter_slices"], [169, 1, 1, "", "join"], [170, 1, 1, "", "join_asof"], [171, 1, 1, "", "lazy"], [172, 1, 1, "", "limit"], [173, 1, 1, "", "max"], [174, 1, 1, "", "mean"], [175, 1, 1, "", "median"], [176, 1, 1, "", "melt"], [177, 1, 1, "", "merge_sorted"], [178, 1, 1, "", "min"], [179, 1, 1, "", "n_chunks"], [180, 1, 1, "", "n_unique"], [181, 1, 1, "", "null_count"], [182, 1, 1, "", "partition_by"], [183, 1, 1, "", "pipe"], [184, 1, 1, "", "pivot"], [185, 1, 1, "", "product"], [186, 1, 1, "", "quantile"], [187, 1, 1, "", "rechunk"], [188, 1, 1, "", "rename"], [189, 1, 1, "", "replace"], [190, 1, 1, "", "replace_at_idx"], [191, 1, 1, "", "reverse"], [192, 1, 1, "", "row"], [193, 1, 1, "", "rows"], [194, 1, 1, "", "rows_by_key"], [195, 1, 1, "", "sample"], [196, 2, 1, "", "schema"], [197, 1, 1, "", "select"], [198, 1, 1, "", "set_sorted"], [199, 2, 1, "", "shape"], [200, 1, 1, "", "shift"], [201, 1, 1, "", "shift_and_fill"], [202, 1, 1, "", "shrink_to_fit"], [203, 1, 1, "", "slice"], [204, 1, 1, "", "sort"], [205, 1, 1, "", "std"], [206, 1, 1, "", "sum"], [207, 1, 1, "", "tail"], [208, 1, 1, "", "take_every"], [209, 1, 1, "", "to_arrow"], [210, 1, 1, "", "to_dict"], [211, 1, 1, "", "to_dicts"], [212, 1, 1, "", "to_dummies"], [213, 1, 1, "", "to_init_repr"], [214, 1, 1, "", "to_numpy"], [215, 1, 1, "", "to_pandas"], [216, 1, 1, "", "to_series"], [217, 1, 1, "", "to_struct"], [218, 1, 1, "", "top_k"], [219, 1, 1, "", "transpose"], [220, 1, 1, "", "unique"], [221, 1, 1, "", "unnest"], [222, 1, 1, "", "unstack"], [223, 1, 1, "", "update"], [224, 1, 1, "", "upsample"], [225, 1, 1, "", "var"], [226, 1, 1, "", "vstack"], [227, 2, 1, "", "width"], [228, 1, 1, "", "with_columns"], [229, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[257, 1, 1, "", "abs"], [258, 1, 1, "", "add"], [259, 1, 1, "", "agg_groups"], [260, 1, 1, "", "alias"], [261, 1, 1, "", "all"], [262, 1, 1, "", "and_"], [263, 1, 1, "", "any"], [264, 1, 1, "", "append"], [265, 1, 1, "", "apply"], [266, 1, 1, "", "approx_unique"], [267, 1, 1, "", "arccos"], [268, 1, 1, "", "arccosh"], [269, 1, 1, "", "arcsin"], [270, 1, 1, "", "arcsinh"], [271, 1, 1, "", "arctan"], [272, 1, 1, "", "arctanh"], [273, 1, 1, "", "arg_max"], [274, 1, 1, "", "arg_min"], [275, 1, 1, "", "arg_sort"], [276, 1, 1, "", "arg_true"], [277, 1, 1, "", "arg_unique"], [282, 1, 1, "", "backward_fill"], [288, 1, 1, "", "bottom_k"], [289, 1, 1, "", "cache"], [290, 1, 1, "", "cast"], [292, 1, 1, "", "ceil"], [293, 1, 1, "", "clip"], [294, 1, 1, "", "clip_max"], [295, 1, 1, "", "clip_min"], [296, 1, 1, "", "cos"], [297, 1, 1, "", "cosh"], [298, 1, 1, "", "count"], [299, 1, 1, "", "cumcount"], [300, 1, 1, "", "cummax"], [301, 1, 1, "", "cummin"], [302, 1, 1, "", "cumprod"], [303, 1, 1, "", "cumsum"], [304, 1, 1, "", "cumulative_eval"], [305, 1, 1, "", "degrees"], [306, 1, 1, "", "diff"], [307, 1, 1, "", "dot"], [308, 1, 1, "", "drop_nans"], [309, 1, 1, "", "drop_nulls"], [351, 1, 1, "", "entropy"], [352, 1, 1, "", "eq"], [353, 1, 1, "", "eq_missing"], [354, 1, 1, "", "ewm_mean"], [355, 1, 1, "", "ewm_std"], [356, 1, 1, "", "ewm_var"], [357, 1, 1, "", "exclude"], [358, 1, 1, "", "exp"], [359, 1, 1, "", "explode"], [360, 1, 1, "", "extend_constant"], [361, 1, 1, "", "fill_nan"], [362, 1, 1, "", "fill_null"], [363, 1, 1, "", "filter"], [364, 1, 1, "", "first"], [365, 1, 1, "", "flatten"], [366, 1, 1, "", "floor"], [367, 1, 1, "", "floordiv"], [368, 1, 1, "", "forward_fill"], [369, 1, 1, "", "from_json"], [370, 1, 1, "", "ge"], [371, 1, 1, "", "gt"], [372, 1, 1, "", "hash"], [373, 1, 1, "", "head"], [374, 1, 1, "", "implode"], [375, 1, 1, "", "inspect"], [376, 1, 1, "", "interpolate"], [377, 1, 1, "", "is_between"], [378, 1, 1, "", "is_duplicated"], [379, 1, 1, "", "is_finite"], [380, 1, 1, "", "is_first"], [381, 1, 1, "", "is_in"], [382, 1, 1, "", "is_infinite"], [383, 1, 1, "", "is_nan"], [384, 1, 1, "", "is_not"], [385, 1, 1, "", "is_not_nan"], [386, 1, 1, "", "is_not_null"], [387, 1, 1, "", "is_null"], [388, 1, 1, "", "is_unique"], [389, 1, 1, "", "keep_name"], [390, 1, 1, "", "kurtosis"], [391, 1, 1, "", "last"], [392, 1, 1, "", "le"], [393, 1, 1, "", "len"], [394, 1, 1, "", "limit"], [426, 1, 1, "", "log"], [427, 1, 1, "", "log10"], [428, 1, 1, "", "log1p"], [429, 1, 1, "", "lower_bound"], [430, 1, 1, "", "lt"], [431, 1, 1, "", "map"], [432, 1, 1, "", "map_alias"], [433, 1, 1, "", "map_dict"], [434, 1, 1, "", "max"], [435, 1, 1, "", "mean"], [436, 1, 1, "", "median"], [447, 1, 1, "", "min"], [448, 1, 1, "", "mod"], [449, 1, 1, "", "mode"], [450, 1, 1, "", "mul"], [451, 1, 1, "", "n_unique"], [452, 1, 1, "", "nan_max"], [453, 1, 1, "", "nan_min"], [454, 1, 1, "", "ne"], [455, 1, 1, "", "ne_missing"], [456, 1, 1, "", "null_count"], [457, 1, 1, "", "or_"], [458, 1, 1, "", "over"], [459, 1, 1, "", "pct_change"], [460, 1, 1, "", "pipe"], [461, 1, 1, "", "pow"], [462, 1, 1, "", "prefix"], [463, 1, 1, "", "product"], [464, 1, 1, "", "quantile"], [465, 1, 1, "", "radians"], [466, 1, 1, "", "rank"], [467, 1, 1, "", "rechunk"], [468, 1, 1, "", "reinterpret"], [469, 1, 1, "", "repeat_by"], [470, 1, 1, "", "reshape"], [471, 1, 1, "", "reverse"], [472, 1, 1, "", "rolling_apply"], [473, 1, 1, "", "rolling_max"], [474, 1, 1, "", "rolling_mean"], [475, 1, 1, "", "rolling_median"], [476, 1, 1, "", "rolling_min"], [477, 1, 1, "", "rolling_quantile"], [478, 1, 1, "", "rolling_skew"], [479, 1, 1, "", "rolling_std"], [480, 1, 1, "", "rolling_sum"], [481, 1, 1, "", "rolling_var"], [482, 1, 1, "", "round"], [483, 1, 1, "", "sample"], [484, 1, 1, "", "search_sorted"], [485, 1, 1, "", "set_sorted"], [486, 1, 1, "", "shift"], [487, 1, 1, "", "shift_and_fill"], [488, 1, 1, "", "shrink_dtype"], [489, 1, 1, "", "shuffle"], [490, 1, 1, "", "sign"], [491, 1, 1, "", "sin"], [492, 1, 1, "", "sinh"], [493, 1, 1, "", "skew"], [494, 1, 1, "", "slice"], [495, 1, 1, "", "sort"], [496, 1, 1, "", "sort_by"], [497, 1, 1, "", "sqrt"], [498, 1, 1, "", "std"], [536, 1, 1, "", "sub"], [537, 1, 1, "", "suffix"], [538, 1, 1, "", "sum"], [539, 1, 1, "", "tail"], [540, 1, 1, "", "take"], [541, 1, 1, "", "take_every"], [542, 1, 1, "", "tan"], [543, 1, 1, "", "tanh"], [544, 1, 1, "", "to_physical"], [545, 1, 1, "", "top_k"], [546, 1, 1, "", "truediv"], [547, 1, 1, "", "unique"], [548, 1, 1, "", "unique_counts"], [549, 1, 1, "", "upper_bound"], [550, 1, 1, "", "value_counts"], [551, 1, 1, "", "var"], [552, 1, 1, "", "where"], [553, 1, 1, "", "xor"]], "polars.Expr.arr": [[278, 1, 1, "", "max"], [279, 1, 1, "", "min"], [280, 1, 1, "", "sum"], [281, 1, 1, "", "unique"]], "polars.Expr.bin": [[283, 1, 1, "", "contains"], [284, 1, 1, "", "decode"], [285, 1, 1, "", "encode"], [286, 1, 1, "", "ends_with"], [287, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[291, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[310, 1, 1, "", "base_utc_offset"], [311, 1, 1, "", "cast_time_unit"], [312, 1, 1, "", "combine"], [313, 1, 1, "", "convert_time_zone"], [314, 1, 1, "", "date"], [315, 1, 1, "", "datetime"], [316, 1, 1, "", "day"], [317, 1, 1, "", "days"], [318, 1, 1, "", "dst_offset"], [319, 1, 1, "", "epoch"], [320, 1, 1, "", "hour"], [321, 1, 1, "", "hours"], [322, 1, 1, "", "is_leap_year"], [323, 1, 1, "", "iso_year"], [324, 1, 1, "", "microsecond"], [325, 1, 1, "", "microseconds"], [326, 1, 1, "", "millisecond"], [327, 1, 1, "", "milliseconds"], [328, 1, 1, "", "minute"], [329, 1, 1, "", "minutes"], [330, 1, 1, "", "month"], [331, 1, 1, "", "month_end"], [332, 1, 1, "", "month_start"], [333, 1, 1, "", "nanosecond"], [334, 1, 1, "", "nanoseconds"], [335, 1, 1, "", "offset_by"], [336, 1, 1, "", "ordinal_day"], [337, 1, 1, "", "quarter"], [338, 1, 1, "", "replace_time_zone"], [339, 1, 1, "", "round"], [340, 1, 1, "", "second"], [341, 1, 1, "", "seconds"], [342, 1, 1, "", "strftime"], [343, 1, 1, "", "time"], [344, 1, 1, "", "timestamp"], [345, 1, 1, "", "to_string"], [346, 1, 1, "", "truncate"], [347, 1, 1, "", "week"], [348, 1, 1, "", "weekday"], [349, 1, 1, "", "with_time_unit"], [350, 1, 1, "", "year"]], "polars.Expr.list": [[395, 1, 1, "", "all"], [396, 1, 1, "", "any"], [397, 1, 1, "", "arg_max"], [398, 1, 1, "", "arg_min"], [399, 1, 1, "", "concat"], [400, 1, 1, "", "contains"], [401, 1, 1, "", "count_match"], [402, 1, 1, "", "diff"], [403, 1, 1, "", "difference"], [404, 1, 1, "", "eval"], [405, 1, 1, "", "explode"], [406, 1, 1, "", "first"], [407, 1, 1, "", "get"], [408, 1, 1, "", "head"], [409, 1, 1, "", "intersection"], [410, 1, 1, "", "join"], [411, 1, 1, "", "last"], [412, 1, 1, "", "lengths"], [413, 1, 1, "", "max"], [414, 1, 1, "", "mean"], [415, 1, 1, "", "min"], [416, 1, 1, "", "reverse"], [417, 1, 1, "", "shift"], [418, 1, 1, "", "slice"], [419, 1, 1, "", "sort"], [420, 1, 1, "", "sum"], [421, 1, 1, "", "tail"], [422, 1, 1, "", "take"], [423, 1, 1, "", "to_struct"], [424, 1, 1, "", "union"], [425, 1, 1, "", "unique"]], "polars.Expr.meta": [[437, 1, 1, "", "eq"], [438, 1, 1, "", "has_multiple_outputs"], [439, 1, 1, "", "is_regex_projection"], [440, 1, 1, "", "ne"], [441, 1, 1, "", "output_name"], [442, 1, 1, "", "pop"], [443, 1, 1, "", "root_names"], [444, 1, 1, "", "tree_format"], [445, 1, 1, "", "undo_aliases"], [446, 1, 1, "", "write_json"]], "polars.Expr.str": [[499, 1, 1, "", "concat"], [500, 1, 1, "", "contains"], [501, 1, 1, "", "count_match"], [502, 1, 1, "", "decode"], [503, 1, 1, "", "encode"], [504, 1, 1, "", "ends_with"], [505, 1, 1, "", "explode"], [506, 1, 1, "", "extract"], [507, 1, 1, "", "extract_all"], [508, 1, 1, "", "json_extract"], [509, 1, 1, "", "json_path_match"], [510, 1, 1, "", "lengths"], [511, 1, 1, "", "ljust"], [512, 1, 1, "", "lstrip"], [513, 1, 1, "", "n_chars"], [514, 1, 1, "", "parse_int"], [515, 1, 1, "", "replace"], [516, 1, 1, "", "replace_all"], [517, 1, 1, "", "rjust"], [518, 1, 1, "", "rstrip"], [519, 1, 1, "", "slice"], [520, 1, 1, "", "split"], [521, 1, 1, "", "split_exact"], [522, 1, 1, "", "splitn"], [523, 1, 1, "", "starts_with"], [524, 1, 1, "", "strip"], [525, 1, 1, "", "strptime"], [526, 1, 1, "", "to_date"], [527, 1, 1, "", "to_datetime"], [528, 1, 1, "", "to_decimal"], [529, 1, 1, "", "to_lowercase"], [530, 1, 1, "", "to_time"], [531, 1, 1, "", "to_titlecase"], [532, 1, 1, "", "to_uppercase"], [533, 1, 1, "", "zfill"]], "polars.Expr.struct": [[534, 1, 1, "", "field"], [535, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[632, 1, 1, "", "bottom_k"], [633, 1, 1, "", "cache"], [634, 1, 1, "", "clear"], [635, 1, 1, "", "clone"], [636, 1, 1, "", "collect"], [637, 2, 1, "", "columns"], [638, 1, 1, "", "drop"], [639, 1, 1, "", "drop_nulls"], [640, 2, 1, "", "dtypes"], [641, 1, 1, "", "explain"], [642, 1, 1, "", "explode"], [643, 1, 1, "", "fetch"], [644, 1, 1, "", "fill_nan"], [645, 1, 1, "", "fill_null"], [646, 1, 1, "", "filter"], [647, 1, 1, "", "first"], [648, 1, 1, "", "from_json"], [649, 1, 1, "", "groupby"], [650, 1, 1, "", "groupby_dynamic"], [651, 1, 1, "", "groupby_rolling"], [652, 1, 1, "", "head"], [653, 1, 1, "", "inspect"], [654, 1, 1, "", "interpolate"], [655, 1, 1, "", "join"], [656, 1, 1, "", "join_asof"], [657, 1, 1, "", "last"], [658, 1, 1, "", "lazy"], [659, 1, 1, "", "limit"], [660, 1, 1, "", "map"], [661, 1, 1, "", "max"], [662, 1, 1, "", "mean"], [663, 1, 1, "", "median"], [664, 1, 1, "", "melt"], [665, 1, 1, "", "merge_sorted"], [666, 1, 1, "", "min"], [667, 1, 1, "", "null_count"], [668, 1, 1, "", "pipe"], [669, 1, 1, "", "profile"], [670, 1, 1, "", "quantile"], [671, 1, 1, "", "read_json"], [672, 1, 1, "", "rename"], [673, 1, 1, "", "reverse"], [674, 2, 1, "", "schema"], [675, 1, 1, "", "select"], [676, 1, 1, "", "set_sorted"], [677, 1, 1, "", "shift"], [678, 1, 1, "", "shift_and_fill"], [679, 1, 1, "", "show_graph"], [680, 1, 1, "", "sink_ipc"], [681, 1, 1, "", "sink_parquet"], [682, 1, 1, "", "slice"], [683, 1, 1, "", "sort"], [684, 1, 1, "", "std"], [685, 1, 1, "", "sum"], [686, 1, 1, "", "tail"], [687, 1, 1, "", "take_every"], [688, 1, 1, "", "top_k"], [689, 1, 1, "", "unique"], [690, 1, 1, "", "unnest"], [691, 1, 1, "", "update"], [692, 1, 1, "", "var"], [693, 2, 1, "", "width"], [694, 1, 1, "", "with_columns"], [695, 1, 1, "", "with_context"], [696, 1, 1, "", "with_row_count"], [697, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1033, 1, 1, "", "__enter__"], [1033, 1, 1, "", "__exit__"], [1033, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[721, 1, 1, "", "abs"], [722, 1, 1, "", "alias"], [723, 1, 1, "", "all"], [724, 1, 1, "", "any"], [725, 1, 1, "", "append"], [726, 1, 1, "", "apply"], [727, 1, 1, "", "arccos"], [728, 1, 1, "", "arccosh"], [729, 1, 1, "", "arcsin"], [730, 1, 1, "", "arcsinh"], [731, 1, 1, "", "arctan"], [732, 1, 1, "", "arctanh"], [733, 1, 1, "", "arg_max"], [734, 1, 1, "", "arg_min"], [735, 1, 1, "", "arg_sort"], [736, 1, 1, "", "arg_true"], [737, 1, 1, "", "arg_unique"], [747, 1, 1, "", "bottom_k"], [748, 1, 1, "", "cast"], [749, 3, 1, "", "cat"], [751, 1, 1, "", "ceil"], [752, 1, 1, "", "chunk_lengths"], [753, 1, 1, "", "clear"], [754, 1, 1, "", "clip"], [755, 1, 1, "", "clip_max"], [756, 1, 1, "", "clip_min"], [757, 1, 1, "", "clone"], [758, 1, 1, "", "cos"], [759, 1, 1, "", "cosh"], [760, 1, 1, "", "cummax"], [761, 1, 1, "", "cummin"], [762, 1, 1, "", "cumprod"], [763, 1, 1, "", "cumsum"], [764, 1, 1, "", "cumulative_eval"], [765, 1, 1, "", "cut"], [766, 1, 1, "", "describe"], [767, 1, 1, "", "diff"], [768, 1, 1, "", "dot"], [769, 1, 1, "", "drop_nans"], [770, 1, 1, "", "drop_nulls"], [771, 3, 1, "", "dt"], [817, 3, 1, "", "dtype"], [818, 1, 1, "", "entropy"], [819, 1, 1, "", "estimated_size"], [820, 1, 1, "", "ewm_mean"], [821, 1, 1, "", "ewm_std"], [822, 1, 1, "", "ewm_var"], [823, 1, 1, "", "exp"], [824, 1, 1, "", "explode"], [825, 1, 1, "", "extend_constant"], [826, 1, 1, "", "fill_nan"], [827, 1, 1, "", "fill_null"], [828, 1, 1, "", "filter"], [829, 3, 1, "", "flags"], [830, 1, 1, "", "floor"], [831, 1, 1, "", "get_chunks"], [832, 1, 1, "", "has_validity"], [833, 1, 1, "", "hash"], [834, 1, 1, "", "head"], [835, 1, 1, "", "hist"], [836, 1, 1, "", "implode"], [837, 3, 1, "", "inner_dtype"], [838, 1, 1, "", "interpolate"], [839, 1, 1, "", "is_between"], [840, 1, 1, "", "is_boolean"], [841, 1, 1, "", "is_duplicated"], [842, 1, 1, "", "is_empty"], [843, 1, 1, "", "is_finite"], [844, 1, 1, "", "is_first"], [845, 1, 1, "", "is_float"], [846, 1, 1, "", "is_in"], [847, 1, 1, "", "is_infinite"], [848, 1, 1, "", "is_integer"], [849, 1, 1, "", "is_nan"], [850, 1, 1, "", "is_not_nan"], [851, 1, 1, "", "is_not_null"], [852, 1, 1, "", "is_null"], [853, 1, 1, "", "is_numeric"], [854, 1, 1, "", "is_sorted"], [855, 1, 1, "", "is_temporal"], [856, 1, 1, "", "is_unique"], [857, 1, 1, "", "is_utf8"], [858, 1, 1, "", "item"], [859, 1, 1, "", "kurtosis"], [860, 1, 1, "", "len"], [861, 1, 1, "", "limit"], [862, 3, 1, "", "list"], [894, 1, 1, "", "log"], [895, 1, 1, "", "log10"], [896, 1, 1, "", "log1p"], [897, 1, 1, "", "lower_bound"], [898, 1, 1, "", "map_dict"], [899, 1, 1, "", "max"], [900, 1, 1, "", "mean"], [901, 1, 1, "", "median"], [902, 1, 1, "", "min"], [903, 1, 1, "", "mode"], [904, 1, 1, "", "n_chunks"], [905, 1, 1, "", "n_unique"], [906, 3, 1, "", "name"], [907, 1, 1, "", "nan_max"], [908, 1, 1, "", "nan_min"], [909, 1, 1, "", "new_from_index"], [910, 1, 1, "", "null_count"], [911, 1, 1, "", "pct_change"], [912, 1, 1, "", "peak_max"], [913, 1, 1, "", "peak_min"], [914, 1, 1, "", "product"], [915, 1, 1, "", "qcut"], [916, 1, 1, "", "quantile"], [917, 1, 1, "", "rank"], [918, 1, 1, "", "rechunk"], [919, 1, 1, "", "reinterpret"], [920, 1, 1, "", "rename"], [921, 1, 1, "", "reshape"], [922, 1, 1, "", "reverse"], [923, 1, 1, "", "rolling_apply"], [924, 1, 1, "", "rolling_max"], [925, 1, 1, "", "rolling_mean"], [926, 1, 1, "", "rolling_median"], [927, 1, 1, "", "rolling_min"], [928, 1, 1, "", "rolling_quantile"], [929, 1, 1, "", "rolling_skew"], [930, 1, 1, "", "rolling_std"], [931, 1, 1, "", "rolling_sum"], [932, 1, 1, "", "rolling_var"], [933, 1, 1, "", "round"], [934, 1, 1, "", "sample"], [935, 1, 1, "", "search_sorted"], [936, 1, 1, "", "series_equal"], [937, 1, 1, "", "set"], [938, 1, 1, "", "set_at_idx"], [939, 1, 1, "", "set_sorted"], [940, 3, 1, "", "shape"], [941, 1, 1, "", "shift"], [942, 1, 1, "", "shift_and_fill"], [943, 1, 1, "", "shrink_dtype"], [944, 1, 1, "", "shrink_to_fit"], [945, 1, 1, "", "shuffle"], [946, 1, 1, "", "sign"], [947, 1, 1, "", "sin"], [948, 1, 1, "", "sinh"], [949, 1, 1, "", "skew"], [950, 1, 1, "", "slice"], [951, 1, 1, "", "sort"], [952, 1, 1, "", "sqrt"], [953, 1, 1, "", "std"], [954, 3, 1, "", "str"], [995, 1, 1, "", "sum"], [996, 1, 1, "", "tail"], [997, 1, 1, "", "take"], [998, 1, 1, "", "take_every"], [999, 1, 1, "", "tan"], [1000, 1, 1, "", "tanh"], [1001, 3, 1, "", "time_unit"], [1002, 1, 1, "", "to_arrow"], [1003, 1, 1, "", "to_dummies"], [1004, 1, 1, "", "to_frame"], [1005, 1, 1, "", "to_init_repr"], [1006, 1, 1, "", "to_list"], [1007, 1, 1, "", "to_numpy"], [1008, 1, 1, "", "to_pandas"], [1009, 1, 1, "", "to_physical"], [1010, 1, 1, "", "top_k"], [1011, 1, 1, "", "unique"], [1012, 1, 1, "", "unique_counts"], [1013, 1, 1, "", "upper_bound"], [1014, 1, 1, "", "value_counts"], [1015, 1, 1, "", "var"], [1016, 1, 1, "", "view"], [1017, 1, 1, "", "zip_with"]], "polars.Series.arr": [[738, 1, 1, "", "max"], [739, 1, 1, "", "min"], [740, 1, 1, "", "sum"], [741, 1, 1, "", "unique"]], "polars.Series.bin": [[742, 1, 1, "", "contains"], [743, 1, 1, "", "decode"], [744, 1, 1, "", "encode"], [745, 1, 1, "", "ends_with"], [746, 1, 1, "", "starts_with"]], "polars.Series.cat": [[750, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[772, 1, 1, "", "base_utc_offset"], [773, 1, 1, "", "cast_time_unit"], [774, 1, 1, "", "combine"], [775, 1, 1, "", "convert_time_zone"], [776, 1, 1, "", "date"], [777, 1, 1, "", "datetime"], [778, 1, 1, "", "day"], [779, 1, 1, "", "days"], [780, 1, 1, "", "dst_offset"], [781, 1, 1, "", "epoch"], [782, 1, 1, "", "hour"], [783, 1, 1, "", "hours"], [784, 1, 1, "", "is_leap_year"], [785, 1, 1, "", "iso_year"], [786, 1, 1, "", "max"], [787, 1, 1, "", "mean"], [788, 1, 1, "", "median"], [789, 1, 1, "", "microsecond"], [790, 1, 1, "", "microseconds"], [791, 1, 1, "", "millisecond"], [792, 1, 1, "", "milliseconds"], [793, 1, 1, "", "min"], [794, 1, 1, "", "minute"], [795, 1, 1, "", "minutes"], [796, 1, 1, "", "month"], [797, 1, 1, "", "month_end"], [798, 1, 1, "", "month_start"], [799, 1, 1, "", "nanosecond"], [800, 1, 1, "", "nanoseconds"], [801, 1, 1, "", "offset_by"], [802, 1, 1, "", "ordinal_day"], [803, 1, 1, "", "quarter"], [804, 1, 1, "", "replace_time_zone"], [805, 1, 1, "", "round"], [806, 1, 1, "", "second"], [807, 1, 1, "", "seconds"], [808, 1, 1, "", "strftime"], [809, 1, 1, "", "time"], [810, 1, 1, "", "timestamp"], [811, 1, 1, "", "to_string"], [812, 1, 1, "", "truncate"], [813, 1, 1, "", "week"], [814, 1, 1, "", "weekday"], [815, 1, 1, "", "with_time_unit"], [816, 1, 1, "", "year"]], "polars.Series.list": [[863, 1, 1, "", "all"], [864, 1, 1, "", "any"], [865, 1, 1, "", "arg_max"], [866, 1, 1, "", "arg_min"], [867, 1, 1, "", "concat"], [868, 1, 1, "", "contains"], [869, 1, 1, "", "count_match"], [870, 1, 1, "", "diff"], [871, 1, 1, "", "difference"], [872, 1, 1, "", "eval"], [873, 1, 1, "", "explode"], [874, 1, 1, "", "first"], [875, 1, 1, "", "get"], [876, 1, 1, "", "head"], [877, 1, 1, "", "intersection"], [878, 1, 1, "", "join"], [879, 1, 1, "", "last"], [880, 1, 1, "", "lengths"], [881, 1, 1, "", "max"], [882, 1, 1, "", "mean"], [883, 1, 1, "", "min"], [884, 1, 1, "", "reverse"], [885, 1, 1, "", "shift"], [886, 1, 1, "", "slice"], [887, 1, 1, "", "sort"], [888, 1, 1, "", "sum"], [889, 1, 1, "", "tail"], [890, 1, 1, "", "take"], [891, 1, 1, "", "to_struct"], [892, 1, 1, "", "union"], [893, 1, 1, "", "unique"]], "polars.Series.str": [[955, 1, 1, "", "concat"], [956, 1, 1, "", "contains"], [957, 1, 1, "", "count_match"], [958, 1, 1, "", "decode"], [959, 1, 1, "", "encode"], [960, 1, 1, "", "ends_with"], [961, 1, 1, "", "explode"], [962, 1, 1, "", "extract"], [963, 1, 1, "", "extract_all"], [964, 1, 1, "", "json_extract"], [965, 1, 1, "", "json_path_match"], [966, 1, 1, "", "lengths"], [967, 1, 1, "", "ljust"], [968, 1, 1, "", "lstrip"], [969, 1, 1, "", "n_chars"], [970, 1, 1, "", "parse_int"], [971, 1, 1, "", "replace"], [972, 1, 1, "", "replace_all"], [973, 1, 1, "", "rjust"], [974, 1, 1, "", "rstrip"], [975, 1, 1, "", "slice"], [976, 1, 1, "", "split"], [977, 1, 1, "", "split_exact"], [978, 1, 1, "", "splitn"], [979, 1, 1, "", "starts_with"], [980, 1, 1, "", "strip"], [981, 1, 1, "", "strptime"], [982, 1, 1, "", "to_date"], [983, 1, 1, "", "to_datetime"], [984, 1, 1, "", "to_decimal"], [985, 1, 1, "", "to_lowercase"], [986, 1, 1, "", "to_time"], [987, 1, 1, "", "to_titlecase"], [988, 1, 1, "", "to_uppercase"], [989, 1, 1, "", "zfill"]], "polars.Series.struct": [[990, 1, 1, "", "field"], [991, 3, 1, "", "fields"], [992, 1, 1, "", "rename_fields"], [993, 3, 1, "", "schema"], [994, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[230, 1, 1, "", "__iter__"], [231, 1, 1, "", "agg"], [232, 1, 1, "", "all"], [233, 1, 1, "", "apply"], [234, 1, 1, "", "count"], [235, 1, 1, "", "first"], [236, 1, 1, "", "head"], [237, 1, 1, "", "last"], [238, 1, 1, "", "max"], [239, 1, 1, "", "mean"], [240, 1, 1, "", "median"], [241, 1, 1, "", "min"], [242, 1, 1, "", "n_unique"], [243, 1, 1, "", "quantile"], [244, 1, 1, "", "sum"], [245, 1, 1, "", "tail"]], "polars.exceptions": [[74, 5, 1, "", "ArrowError"], [75, 5, 1, "", "ColumnNotFoundError"], [76, 5, 1, "", "ComputeError"], [77, 5, 1, "", "DuplicateError"], [78, 5, 1, "", "InvalidOperationError"], [79, 5, 1, "", "NoDataError"], [80, 5, 1, "", "NoRowsReturnedError"], [81, 5, 1, "", "PolarsPanicError"], [82, 5, 1, "", "RowsError"], [83, 5, 1, "", "SchemaError"], [84, 5, 1, "", "SchemaFieldNotFoundError"], [85, 5, 1, "", "ShapeError"], [86, 5, 1, "", "StructFieldNotFoundError"], [87, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[97, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[698, 1, 1, "", "agg"], [699, 1, 1, "", "all"], [700, 1, 1, "", "apply"], [701, 1, 1, "", "count"], [702, 1, 1, "", "first"], [703, 1, 1, "", "head"], [704, 1, 1, "", "last"], [705, 1, 1, "", "max"], [706, 1, 1, "", "mean"], [707, 1, 1, "", "median"], [708, 1, 1, "", "min"], [709, 1, 1, "", "n_unique"], [710, 1, 1, "", "quantile"], [711, 1, 1, "", "sum"], [712, 1, 1, "", "tail"]], "polars.selectors": [[719, 4, 1, "", "all"], [719, 4, 1, "", "by_dtype"], [719, 4, 1, "", "by_name"], [719, 4, 1, "", "contains"], [719, 4, 1, "", "datetime"], [719, 4, 1, "", "ends_with"], [719, 4, 1, "", "first"], [719, 4, 1, "", "float"], [719, 4, 1, "", "integer"], [719, 4, 1, "", "is_selector"], [719, 4, 1, "", "last"], [719, 4, 1, "", "matches"], [719, 4, 1, "", "numeric"], [719, 4, 1, "", "selector_column_names"], [719, 4, 1, "", "starts_with"], [719, 4, 1, "", "string"], [719, 4, 1, "", "temporal"]], "polars.testing": [[117, 4, 1, "", "assert_frame_equal"], [118, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[119, 0, 1, "", "column"], [120, 4, 1, "", "columns"], [121, 4, 1, "", "create_list_strategy"], [122, 4, 1, "", "dataframes"], [123, 4, 1, "", "load_profile"], [124, 4, 1, "", "series"], [125, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[119, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 144], "api": [1, 66, 67, 68, 69, 629], "provid": 1, "new": 1, "function": [1, 128, 617, 628, 719], "avail": 1, "registr": 1, "exampl": [1, 719, 1034], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1034], "arrai": [2, 611, 1018], "binari": [3, 612, 623, 1020], "boolean": [4, 613, 1021], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 128], "activate_decim": 6, "load": [7, 128], "restore_default": 8, "save": [9, 128], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 128], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 251], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 446, 697], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 314, 572, 776], "datetim": [38, 315, 574, 777], "decim": 39, "durat": [40, 575], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 619, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 1027], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 628], "struct": [57, 534, 535, 603, 625, 990, 991, 992, 993, 994, 1031], "time": [58, 343, 606, 809], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "build_info": 70, "collect_al": 71, "concat": [72, 399, 499, 867, 955], "enable_string_cach": 73, "except": [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 255], "arrowerror": 74, "columnnotfounderror": 75, "computeerror": 76, "duplicateerror": 77, "invalidoperationerror": 78, "nodataerror": 79, "norowsreturnederror": 80, "polarspanicerror": 81, "rowserror": 82, "schemaerror": 83, "schemafieldnotfounderror": 84, "shapeerror": 85, "structfieldnotfounderror": 86, "toomanyrowsreturnederror": 87, "from_arrow": 88, "from_datafram": 89, "from_dict": [90, 91], "from_numpi": 92, "from_panda": 93, "from_record": 94, "from_repr": 95, "get_index_typ": 96, "io": 97, "csv": [97, 630], "batched_read": 97, "batchedcsvread": [97, 630], "next_batch": 97, "read_avro": 98, "read_csv": 99, "read_csv_batch": 100, "read_databas": 101, "read_delta": 102, "read_excel": 103, "read_ipc": 104, "read_ipc_schema": 105, "read_json": [106, 671], "read_ndjson": 107, "read_parquet": 108, "read_parquet_schema": 109, "scan_csv": 110, "scan_delta": 111, "scan_ipc": 112, "scan_ndjson": 113, "scan_parquet": 114, "scan_pyarrow_dataset": 115, "show_vers": 116, "test": [117, 118, 119, 120, 121, 122, 123, 124, 125, 1034], "assert_frame_equ": 117, "assert_series_equ": 118, "parametr": [119, 120, 121, 122, 123, 124, 125, 1034], "column": [119, 120, 135, 615, 637], "create_list_strategi": 121, "load_profil": 123, "seri": [124, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1026], "set_profil": 125, "threadpool_s": 126, "using_string_cach": 127, "option": 128, "current": 128, "us": 128, "context": 128, "manag": 128, "decor": 128, "aggreg": [129, 256, 631, 720], "__dataframe__": 130, "appli": [131, 233, 265, 556, 700, 726], "bottom_k": [132, 288, 632, 747], "clear": [133, 634, 753], "clone": [134, 635, 757], "corr": [136, 566], "describ": [137, 766], "drop": [138, 638], "drop_in_plac": 139, "drop_nul": [140, 309, 639, 770], "dtype": [141, 640, 817], "estimated_s": [142, 819], "explod": [143, 359, 405, 505, 642, 824, 873, 961], "fill_nan": [145, 361, 644, 826], "fill_nul": [146, 362, 645, 827], "filter": [147, 363, 646, 828], "find_idx_by_nam": 148, "fold": [149, 579], "frame_equ": 150, "get_column": [151, 152], "glimps": 153, "groupbi": [154, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 250, 649, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715], "groupby_dynam": [155, 650], "groupby_rol": [156, 651], "hash_row": 157, "head": [158, 236, 373, 408, 583, 652, 703, 834, 876], "height": 159, "hstack": 160, "insert_at_idx": 161, "interpol": [162, 376, 654, 838], "is_dupl": [163, 378, 841], "is_empti": [164, 842], "is_uniqu": [165, 388, 856], "item": [166, 858], "iter_row": 167, "iter_slic": 168, "join": [169, 410, 655, 878], "join_asof": [170, 656], "lazi": [171, 658], "limit": [172, 394, 659, 861], "max": [173, 238, 278, 413, 434, 589, 661, 705, 738, 786, 881, 899], "mean": [174, 239, 414, 435, 590, 662, 706, 787, 882, 900], "median": [175, 240, 436, 591, 663, 707, 788, 901], "melt": [176, 664], "merge_sort": [177, 665], "min": [178, 241, 279, 415, 447, 592, 666, 708, 739, 793, 883, 902], "n_chunk": [179, 904], "n_uniqu": [180, 242, 451, 593, 709, 905], "null_count": [181, 456, 667, 910], "partition_bi": 182, "pipe": [183, 460, 668], "pivot": 184, "product": [185, 463, 914], "quantil": [186, 243, 464, 595, 670, 710, 916], "rechunk": [187, 467, 918], "renam": [188, 672, 920], "replac": [189, 515, 971], "replace_at_idx": 190, "revers": [191, 416, 471, 673, 884, 922], "row": [192, 193], "rows_by_kei": 194, "sampl": [195, 483, 934], "schema": [196, 674, 993], "select": [197, 253, 600, 622, 675, 718, 1029], "set_sort": [198, 485, 676, 939], "shape": [199, 940], "shift": [200, 417, 486, 677, 885, 941], "shift_and_fil": [201, 487, 678, 942], "shrink_to_fit": [202, 944], "slice": [203, 418, 494, 519, 682, 886, 950, 975], "sort": [204, 419, 495, 683, 887, 951], "std": [205, 498, 602, 684, 953], "sum": [206, 244, 280, 420, 538, 604, 685, 711, 740, 888, 995], "tail": [207, 245, 421, 539, 605, 686, 712, 889, 996], "take_everi": [208, 541, 687, 998], "to_arrow": [209, 1002], "to_dict": [210, 211], "to_dummi": [212, 1003], "to_init_repr": [213, 1005], "to_numpi": [214, 1007], "to_panda": [215, 1008], "to_seri": 216, "to_struct": [217, 423, 891], "top_k": [218, 545, 688, 1010], "transpos": 219, "uniqu": [220, 281, 425, 547, 689, 741, 893, 1011], "unnest": [221, 690, 994], "unstack": 222, "updat": [223, 691], "upsampl": 224, "var": [225, 551, 608, 692, 1015], "vstack": 226, "width": [227, 693], "with_column": [228, 694], "with_row_count": [229, 696], "__iter__": 230, "agg": [231, 698], "all": [232, 261, 395, 554, 699, 723, 863], "count": [234, 298, 567, 701], "first": [235, 364, 406, 578, 647, 702, 874], "last": [237, 391, 411, 657, 704, 879], "attribut": [246, 713, 1019], "comput": [247, 616, 1023], "descript": [248, 714, 1024], "export": [249, 1025], "miscellan": [252, 621, 628, 717, 1028], "manipul": [253, 622, 718, 1029], "data": 254, "type": 254, "numer": [254, 623], "tempor": [254, 626, 1032], "nest": 254, "other": 254, "expr": [257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553], "ab": [257, 721], "add": 258, "agg_group": 259, "alia": [260, 722], "and_": 262, "ani": [263, 396, 555, 724, 864], "append": [264, 725], "approx_uniqu": [266, 557], "arcco": [267, 727], "arccosh": [268, 728], "arcsin": [269, 729], "arcsinh": [270, 730], "arctan": [271, 731], "arctanh": [272, 732], "arg_max": [273, 397, 733, 865], "arg_min": [274, 398, 734, 866], "arg_sort": [275, 735], "arg_tru": [276, 736], "arg_uniqu": [277, 737], "arr": [278, 279, 280, 281, 738, 739, 740, 741], "backward_fil": 282, "bin": [283, 284, 285, 286, 287, 742, 743, 744, 745, 746], "contain": [283, 400, 500, 742, 868, 956], "decod": [284, 502, 743, 958], "encod": [285, 503, 744, 959], "ends_with": [286, 504, 745, 960], "starts_with": [287, 523, 746, 979], "cach": [289, 633], "cast": [290, 748], "cat": [291, 749, 750], "set_ord": [291, 750], "ceil": [292, 751], "clip": [293, 754], "clip_max": [294, 755], "clip_min": [295, 756], "co": [296, 758], "cosh": [297, 759], "cumcount": 299, "cummax": [300, 760], "cummin": [301, 761], "cumprod": [302, 762], "cumsum": [303, 571, 763], "cumulative_ev": [304, 764], "degre": 305, "diff": [306, 402, 767, 870], "dot": [307, 768], "drop_nan": [308, 769], "dt": [310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816], "base_utc_offset": [310, 772], "cast_time_unit": [311, 773], "combin": [312, 774], "convert_time_zon": [313, 775], "dai": [316, 317, 778, 779], "dst_offset": [318, 780], "epoch": [319, 781], "hour": [320, 321, 782, 783], "is_leap_year": [322, 784], "iso_year": [323, 785], "microsecond": [324, 325, 789, 790], "millisecond": [326, 327, 791, 792], "minut": [328, 329, 794, 795], "month": [330, 796], "month_end": [331, 797], "month_start": [332, 798], "nanosecond": [333, 334, 799, 800], "offset_bi": [335, 801], "ordinal_dai": [336, 802], "quarter": [337, 803], "replace_time_zon": [338, 804], "round": [339, 482, 805, 933], "second": [340, 341, 806, 807], "strftime": [342, 808], "timestamp": [344, 810], "to_str": [345, 811], "truncat": [346, 812], "week": [347, 813], "weekdai": [348, 814], "with_time_unit": [349, 815], "year": [350, 816], "entropi": [351, 818], "eq": [352, 437], "eq_miss": 353, "ewm_mean": [354, 820], "ewm_std": [355, 821], "ewm_var": [356, 822], "exclud": [357, 577], "exp": [358, 823], "extend_const": [360, 825], "flatten": 365, "floor": [366, 830], "floordiv": 367, "forward_fil": 368, "from_json": [369, 648], "ge": 370, "gt": 371, "hash": [372, 833], "implod": [374, 584, 836], "inspect": [375, 653], "is_between": [377, 839], "is_finit": [379, 843], "is_first": [380, 844], "is_in": [381, 846], "is_infinit": [382, 847], "is_nan": [383, 849], "is_not": 384, "is_not_nan": [385, 850], "is_not_nul": [386, 851], "is_nul": [387, 852], "keep_nam": 389, "kurtosi": [390, 859], "le": 392, "len": [393, 860], "count_match": [401, 501, 869, 957], "differ": [403, 871], "eval": [404, 872], "get": [407, 875], "intersect": [409, 877], "length": [412, 510, 880, 966], "take": [422, 540, 890, 997], "union": [424, 892], "log": [426, 894], "log10": [427, 895], "log1p": [428, 896], "lower_bound": [429, 897], "lt": 430, "map": [431, 588, 660], "map_alia": 432, "map_dict": [433, 898], "meta": [437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 620], "has_multiple_output": 438, "is_regex_project": 439, "ne": [440, 454], "output_nam": 441, "pop": 442, "root_nam": 443, "tree_format": 444, "undo_alias": 445, "mod": 448, "mode": [449, 903], "mul": 450, "nan_max": [452, 907], "nan_min": [453, 908], "ne_miss": 455, "or_": 457, "over": 458, "pct_chang": [459, 911], "pow": 461, "prefix": 462, "radian": 465, "rank": [466, 917], "reinterpret": [468, 919], "repeat_bi": 469, "reshap": [470, 921], "rolling_appli": [472, 923], "rolling_max": [473, 924], "rolling_mean": [474, 925], "rolling_median": [475, 926], "rolling_min": [476, 927], "rolling_quantil": [477, 928], "rolling_skew": [478, 929], "rolling_std": [479, 930], "rolling_sum": [480, 931], "rolling_var": [481, 932], "search_sort": [484, 935], "shrink_dtyp": [488, 943], "shuffl": [489, 945], "sign": [490, 946], "sin": [491, 947], "sinh": [492, 948], "skew": [493, 949], "sort_bi": 496, "sqrt": [497, 952], "str": [499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989], "extract": [506, 962], "extract_al": [507, 963], "json_extract": [508, 964], "json_path_match": [509, 965], "ljust": [511, 967], "lstrip": [512, 968], "n_char": [513, 969], "parse_int": [514, 970], "replace_al": [516, 972], "rjust": [517, 973], "rstrip": [518, 974], "split": [520, 976], "split_exact": [521, 977], "splitn": [522, 978], "strip": [524, 980], "strptime": [525, 981], "to_dat": [526, 982], "to_datetim": [527, 983], "to_decim": [528, 984], "to_lowercas": [529, 985], "to_tim": [530, 986], "to_titlecas": [531, 987], "to_uppercas": [532, 988], "zfill": [533, 989], "field": [534, 990, 991], "rename_field": [535, 992], "sub": 536, "suffix": 537, "tan": [542, 999], "tanh": [543, 1000], "to_phys": [544, 1009], "truediv": 546, "unique_count": [548, 1012], "upper_bound": [549, 1013], "value_count": [550, 1014], "where": 552, "xor": 553, "arang": 558, "arg_sort_bi": 559, "arg_wher": 560, "avg": 561, "coalesc": 562, "col": 563, "concat_list": 564, "concat_str": 565, "cov": 568, "cumfold": 569, "cumreduc": 570, "date_rang": 573, "element": 576, "format": 580, "from_epoch": 581, "group": 582, "int_rang": [585, 586], "lit": 587, "ones": 594, "reduc": 596, "repeat": 597, "rolling_corr": 598, "rolling_cov": 599, "sql_expr": 601, "time_rang": 607, "when": 609, "zero": 610, "categori": [614, 1022], "name": [615, 906], "express": 618, "oper": [623, 719], "conjunct": 623, "comparison": 623, "string": [624, 1030], "window": 627, "convers": 628, "parallel": 628, "refer": 629, "input": 630, "output": 630, "feather": 630, "ipc": 630, "parquet": 630, "databas": 630, "json": 630, "avro": 630, "excel": 630, "delta": 630, "lake": 630, "dataset": 630, "lazyfram": [632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 716], "collect": 636, "explain": 641, "fetch": 643, "profil": [669, 1034], "show_graph": 679, "sink_ipc": 680, "sink_parquet": 681, "with_context": 695, "lazygroupbi": [698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712], "read": 717, "write": 717, "logic": 717, "plan": 717, "selector": 719, "import": 719, "set": [719, 937], "chunk_length": 752, "cut": 765, "flag": 829, "get_chunk": 831, "has_valid": 832, "hist": 835, "inner_dtyp": 837, "is_boolean": 840, "is_float": 845, "is_integ": 848, "is_numer": 853, "is_sort": 854, "is_tempor": 855, "is_utf8": 857, "new_from_index": 909, "peak_max": 912, "peak_min": 913, "qcut": 915, "series_equ": 936, "set_at_idx": 938, "time_unit": 1001, "to_fram": 1004, "to_list": 1006, "view": 1016, "zip_with": 1017, "sql": 1033, "method": 1033, "assert": 1034, "primit": 1034, "strategi": 1034, "helper": 1034, "util": 1035}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.testing.parametric.columns": [[120, "polars-testing-parametric-columns"]], "polars.DataFrame.drop_in_place": [[139, "polars-dataframe-drop-in-place"]], "polars.DataFrame.clone": [[134, "polars-dataframe-clone"]], "polars.show_versions": [[116, "polars-show-versions"]], "Aggregation": [[129, "aggregation"], [720, "aggregation"], [631, "aggregation"], [256, "aggregation"]], "polars.scan_pyarrow_dataset": [[115, "polars-scan-pyarrow-dataset"]], "polars.exceptions.InvalidOperationError": [[78, "polars-exceptions-invalidoperationerror"]], "polars.exceptions.StructFieldNotFoundError": [[86, "polars-exceptions-structfieldnotfounderror"]], "polars.read_json": [[106, "polars-read-json"]], "polars.exceptions.ComputeError": [[76, "polars-exceptions-computeerror"]], "polars.get_index_type": [[96, "polars-get-index-type"]], "polars.exceptions.PolarsPanicError": [[81, "polars-exceptions-polarspanicerror"]], "polars.DataFrame.drop_nulls": [[140, "polars-dataframe-drop-nulls"]], "polars.read_parquet": [[108, "polars-read-parquet"]], "polars.read_ipc": [[104, "polars-read-ipc"]], "polars.testing.assert_frame_equal": [[117, "polars-testing-assert-frame-equal"]], "polars.DataFrame.apply": [[131, "polars-dataframe-apply"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[97, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.testing.parametric.create_list_strategy": [[121, "polars-testing-parametric-create-list-strategy"]], "polars.read_database": [[101, "polars-read-database"]], "polars.read_ndjson": [[107, "polars-read-ndjson"]], "polars.threadpool_size": [[126, "polars-threadpool-size"]], "polars.scan_parquet": [[114, "polars-scan-parquet"]], "polars.collect_all": [[71, "polars-collect-all"]], "polars.exceptions.SchemaError": [[83, "polars-exceptions-schemaerror"]], "polars.exceptions.ColumnNotFoundError": [[75, "polars-exceptions-columnnotfounderror"]], "polars.from_dicts": [[91, "polars-from-dicts"]], "polars.enable_string_cache": [[73, "polars-enable-string-cache"]], "polars.read_delta": [[102, "polars-read-delta"]], "polars.scan_delta": [[111, "polars-scan-delta"]], "polars.testing.parametric.series": [[124, "polars-testing-parametric-series"]], "polars.read_csv": [[99, "polars-read-csv"]], "polars.testing.parametric.set_profile": [[125, "polars-testing-parametric-set-profile"]], "polars.exceptions.NoRowsReturnedError": [[80, "polars-exceptions-norowsreturnederror"]], "polars.DataFrame.bottom_k": [[132, "polars-dataframe-bottom-k"]], "polars.read_excel": [[103, "polars-read-excel"]], "polars.from_numpy": [[92, "polars-from-numpy"]], "polars.DataFrame.columns": [[135, "polars-dataframe-columns"]], "polars.from_dict": [[90, "polars-from-dict"]], "polars.DataFrame.__dataframe__": [[130, "polars-dataframe-dataframe"]], "polars.from_arrow": [[88, "polars-from-arrow"]], "polars.exceptions.NoDataError": [[79, "polars-exceptions-nodataerror"]], "polars.read_parquet_schema": [[109, "polars-read-parquet-schema"]], "polars.DataFrame.describe": [[137, "polars-dataframe-describe"]], "polars.from_records": [[94, "polars-from-records"]], "polars.exceptions.ShapeError": [[85, "polars-exceptions-shapeerror"]], "polars.testing.parametric.column": [[119, "polars-testing-parametric-column"]], "polars.read_avro": [[98, "polars-read-avro"]], "polars.read_ipc_schema": [[105, "polars-read-ipc-schema"]], "polars.concat": [[72, "polars-concat"]], "polars.exceptions.ArrowError": [[74, "polars-exceptions-arrowerror"]], "polars.DataFrame.corr": [[136, "polars-dataframe-corr"]], "Config": [[128, "config"]], "Config options": [[128, "config-options"]], "Config load, save, and current state": [[128, "config-load-save-and-current-state"]], "Use as a context manager": [[128, "use-as-a-context-manager"]], "Use as a function decorator": [[128, "use-as-a-function-decorator"]], "polars.exceptions.DuplicateError": [[77, "polars-exceptions-duplicateerror"]], "polars.exceptions.TooManyRowsReturnedError": [[87, "polars-exceptions-toomanyrowsreturnederror"]], "polars.testing.parametric.dataframes": [[122, "polars-testing-parametric-dataframes"]], "polars.from_pandas": [[93, "polars-from-pandas"]], "polars.DataFrame.clear": [[133, "polars-dataframe-clear"]], "polars.exceptions.RowsError": [[82, "polars-exceptions-rowserror"]], "polars.exceptions.SchemaFieldNotFoundError": [[84, "polars-exceptions-schemafieldnotfounderror"]], "polars.DataFrame.dtypes": [[141, "polars-dataframe-dtypes"]], "polars.scan_ipc": [[112, "polars-scan-ipc"]], "polars.from_dataframe": [[89, "polars-from-dataframe"]], "polars.testing.assert_series_equal": [[118, "polars-testing-assert-series-equal"]], "polars.from_repr": [[95, "polars-from-repr"]], "polars.read_csv_batched": [[100, "polars-read-csv-batched"]], "polars.using_string_cache": [[127, "polars-using-string-cache"]], "polars.testing.parametric.load_profile": [[123, "polars-testing-parametric-load-profile"]], "polars.DataFrame.drop": [[138, "polars-dataframe-drop"]], "polars.scan_ndjson": [[113, "polars-scan-ndjson"]], "polars.scan_csv": [[110, "polars-scan-csv"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.List": [[47, "polars-list"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Duration": [[40, "polars-duration"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.Int16": [[43, "polars-int16"]], "polars.Object": [[49, "polars-object"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Float64": [[42, "polars-float64"]], "polars.build_info": [[70, "polars-build-info"]], "polars.DataType": [[36, "polars-datatype"]], "polars.Date": [[37, "polars-date"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.Null": [[48, "polars-null"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Struct": [[57, "polars-struct"]], "polars.Float32": [[41, "polars-float32"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.Int32": [[44, "polars-int32"]], "polars.Time": [[58, "polars-time"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.Int8": [[46, "polars-int8"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.Int64": [[45, "polars-int64"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1034, "examples"], [719, "examples"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.Series.str.decode": [[958, "polars-series-str-decode"]], "polars.Series.str.explode": [[961, "polars-series-str-explode"]], "polars.Series.rolling_quantile": [[928, "polars-series-rolling-quantile"]], "polars.Series.str.replace_all": [[972, "polars-series-str-replace-all"]], "polars.Series.rolling_apply": [[923, "polars-series-rolling-apply"]], "polars.Series.str.slice": [[975, "polars-series-str-slice"]], "polars.Series.str.replace": [[971, "polars-series-str-replace"]], "polars.Series.str.split": [[976, "polars-series-str-split"]], "polars.Series.struct.field": [[990, "polars-series-struct-field"]], "polars.Series.struct.schema": [[993, "polars-series-struct-schema"]], "polars.Series.sin": [[947, "polars-series-sin"]], "polars.Series.str.to_datetime": [[983, "polars-series-str-to-datetime"]], "polars.Series.sort": [[951, "polars-series-sort"]], "polars.Series.rolling_var": [[932, "polars-series-rolling-var"]], "polars.Series.sinh": [[948, "polars-series-sinh"]], "polars.Series.slice": [[950, "polars-series-slice"]], "polars.Series.str.count_match": [[957, "polars-series-str-count-match"]], "polars.Series.str.encode": [[959, "polars-series-str-encode"]], "polars.Series.str.concat": [[955, "polars-series-str-concat"]], "polars.Series.set": [[937, "polars-series-set"]], "polars.Series.str.ends_with": [[960, "polars-series-str-ends-with"]], "polars.Series.shape": [[940, "polars-series-shape"]], "polars.Series.skew": [[949, "polars-series-skew"]], "polars.Series.str.lengths": [[966, "polars-series-str-lengths"]], "polars.Series.str.to_titlecase": [[987, "polars-series-str-to-titlecase"]], "polars.Series.str.to_decimal": [[984, "polars-series-str-to-decimal"]], "polars.Series.str.zfill": [[989, "polars-series-str-zfill"]], "polars.Series.sqrt": [[952, "polars-series-sqrt"]], "polars.Series.sign": [[946, "polars-series-sign"]], "polars.Series.str": [[954, "polars-series-str"]], "polars.Series.rolling_min": [[927, "polars-series-rolling-min"]], "polars.Series.str.parse_int": [[970, "polars-series-str-parse-int"]], "polars.Series.rolling_median": [[926, "polars-series-rolling-median"]], "polars.Series.struct.rename_fields": [[992, "polars-series-struct-rename-fields"]], "polars.Series.str.to_date": [[982, "polars-series-str-to-date"]], "polars.Series.str.extract_all": [[963, "polars-series-str-extract-all"]], "polars.Series.rolling_mean": [[925, "polars-series-rolling-mean"]], "polars.Series.shift": [[941, "polars-series-shift"]], "polars.Series.struct.fields": [[991, "polars-series-struct-fields"]], "polars.Series.shuffle": [[945, "polars-series-shuffle"]], "polars.Series.str.contains": [[956, "polars-series-str-contains"]], "polars.Series.shrink_to_fit": [[944, "polars-series-shrink-to-fit"]], "polars.Series.str.n_chars": [[969, "polars-series-str-n-chars"]], "polars.Series.rolling_sum": [[931, "polars-series-rolling-sum"]], "polars.Series.rolling_skew": [[929, "polars-series-rolling-skew"]], "polars.Series.search_sorted": [[935, "polars-series-search-sorted"]], "polars.Series.set_at_idx": [[938, "polars-series-set-at-idx"]], "polars.Series.rolling_max": [[924, "polars-series-rolling-max"]], "polars.Series.str.json_path_match": [[965, "polars-series-str-json-path-match"]], "polars.Series.str.lstrip": [[968, "polars-series-str-lstrip"]], "polars.Series.str.split_exact": [[977, "polars-series-str-split-exact"]], "polars.Series.round": [[933, "polars-series-round"]], "polars.Series.str.strptime": [[981, "polars-series-str-strptime"]], "polars.Series.str.to_time": [[986, "polars-series-str-to-time"]], "polars.Series.sample": [[934, "polars-series-sample"]], "polars.Series.str.strip": [[980, "polars-series-str-strip"]], "polars.Series.series_equal": [[936, "polars-series-series-equal"]], "polars.Series.shift_and_fill": [[942, "polars-series-shift-and-fill"]], "polars.Series.shrink_dtype": [[943, "polars-series-shrink-dtype"]], "polars.Series.str.ljust": [[967, "polars-series-str-ljust"]], "polars.Series.std": [[953, "polars-series-std"]], "polars.Series.str.to_uppercase": [[988, "polars-series-str-to-uppercase"]], "polars.Series.str.rjust": [[973, "polars-series-str-rjust"]], "polars.Series.str.json_extract": [[964, "polars-series-str-json-extract"]], "polars.Series.str.splitn": [[978, "polars-series-str-splitn"]], "polars.Series.set_sorted": [[939, "polars-series-set-sorted"]], "polars.Series.str.to_lowercase": [[985, "polars-series-str-to-lowercase"]], "polars.Series.str.rstrip": [[974, "polars-series-str-rstrip"]], "polars.Series.str.extract": [[962, "polars-series-str-extract"]], "polars.Series.rolling_std": [[930, "polars-series-rolling-std"]], "polars.Series.str.starts_with": [[979, "polars-series-str-starts-with"]], "polars.Series.null_count": [[910, "polars-series-null-count"]], "polars.Series.list": [[862, "polars-series-list"]], "polars.Series.list.mean": [[882, "polars-series-list-mean"]], "polars.Series.mean": [[900, "polars-series-mean"]], "polars.Series.list.any": [[864, "polars-series-list-any"]], "polars.Series.list.to_struct": [[891, "polars-series-list-to-struct"]], "polars.Series.list.sort": [[887, "polars-series-list-sort"]], "polars.Series.max": [[899, "polars-series-max"]], "polars.Series.min": [[902, "polars-series-min"]], "polars.Series.limit": [[861, "polars-series-limit"]], "polars.Series.is_unique": [[856, "polars-series-is-unique"]], "polars.Series.list.last": [[879, "polars-series-list-last"]], "polars.Series.log": [[894, "polars-series-log"]], "polars.Series.list.arg_max": [[865, "polars-series-list-arg-max"]], "polars.Series.list.unique": [[893, "polars-series-list-unique"]], "polars.Series.list.difference": [[871, "polars-series-list-difference"]], "polars.Series.list.reverse": [[884, "polars-series-list-reverse"]], "polars.Series.median": [[901, "polars-series-median"]], "polars.Series.rank": [[917, "polars-series-rank"]], "polars.Series.list.max": [[881, "polars-series-list-max"]], "polars.Series.quantile": [[916, "polars-series-quantile"]], "polars.Series.map_dict": [[898, "polars-series-map-dict"]], "polars.Series.list.sum": [[888, "polars-series-list-sum"]], "polars.Series.rechunk": [[918, "polars-series-rechunk"]], "polars.Series.list.union": [[892, "polars-series-list-union"]], "polars.Series.n_unique": [[905, "polars-series-n-unique"]], "polars.Series.qcut": [[915, "polars-series-qcut"]], "polars.Series.log1p": [[896, "polars-series-log1p"]], "polars.Series.list.join": [[878, "polars-series-list-join"]], "polars.Series.is_sorted": [[854, "polars-series-is-sorted"]], "polars.Series.name": [[906, "polars-series-name"]], "polars.Series.is_null": [[852, "polars-series-is-null"]], "polars.Series.is_numeric": [[853, "polars-series-is-numeric"]], "polars.Series.list.lengths": [[880, "polars-series-list-lengths"]], "polars.Series.is_temporal": [[855, "polars-series-is-temporal"]], "polars.Series.reinterpret": [[919, "polars-series-reinterpret"]], "polars.Series.list.all": [[863, "polars-series-list-all"]], "polars.Series.list.arg_min": [[866, "polars-series-list-arg-min"]], "polars.Series.list.count_match": [[869, "polars-series-list-count-match"]], "polars.Series.list.eval": [[872, "polars-series-list-eval"]], "polars.Series.list.get": [[875, "polars-series-list-get"]], "polars.Series.pct_change": [[911, "polars-series-pct-change"]], "polars.Series.peak_max": [[912, "polars-series-peak-max"]], "polars.Series.reshape": [[921, "polars-series-reshape"]], "polars.Series.list.tail": [[889, "polars-series-list-tail"]], "polars.Series.product": [[914, "polars-series-product"]], "polars.Series.log10": [[895, "polars-series-log10"]], "polars.Series.list.explode": [[873, "polars-series-list-explode"]], "polars.Series.len": [[860, "polars-series-len"]], "polars.Series.list.contains": [[868, "polars-series-list-contains"]], "polars.Series.new_from_index": [[909, "polars-series-new-from-index"]], "polars.Series.mode": [[903, "polars-series-mode"]], "polars.Series.n_chunks": [[904, "polars-series-n-chunks"]], "polars.Series.lower_bound": [[897, "polars-series-lower-bound"]], "polars.Series.nan_max": [[907, "polars-series-nan-max"]], "polars.Series.kurtosis": [[859, "polars-series-kurtosis"]], "polars.Series.list.min": [[883, "polars-series-list-min"]], "polars.Series.rename": [[920, "polars-series-rename"]], "polars.Series.item": [[858, "polars-series-item"]], "polars.Series.list.shift": [[885, "polars-series-list-shift"]], "polars.Series.list.take": [[890, "polars-series-list-take"]], "polars.Series.nan_min": [[908, "polars-series-nan-min"]], "polars.Series.list.head": [[876, "polars-series-list-head"]], "polars.Series.list.concat": [[867, "polars-series-list-concat"]], "polars.Series.list.diff": [[870, "polars-series-list-diff"]], "polars.Series.reverse": [[922, "polars-series-reverse"]], "polars.Series.list.slice": [[886, "polars-series-list-slice"]], "polars.Series.list.first": [[874, "polars-series-list-first"]], "polars.Series.list.intersection": [[877, "polars-series-list-intersection"]], "polars.Series.peak_min": [[913, "polars-series-peak-min"]], "polars.Series.is_utf8": [[857, "polars-series-is-utf8"]], "polars.Series.dt.seconds": [[807, "polars-series-dt-seconds"]], "polars.Series.ewm_mean": [[820, "polars-series-ewm-mean"]], "polars.Series.is_not_nan": [[850, "polars-series-is-not-nan"]], "polars.Series.dt.strftime": [[808, "polars-series-dt-strftime"]], "polars.Series.dt.second": [[806, "polars-series-dt-second"]], "polars.Series.dt.minutes": [[795, "polars-series-dt-minutes"]], "polars.Series.hist": [[835, "polars-series-hist"]], "polars.Series.dt.to_string": [[811, "polars-series-dt-to-string"]], "polars.Series.filter": [[828, "polars-series-filter"]], "polars.Series.is_empty": [[842, "polars-series-is-empty"]], "polars.Series.is_not_null": [[851, "polars-series-is-not-null"]], "polars.Series.dt.year": [[816, "polars-series-dt-year"]], "polars.Series.ewm_var": [[822, "polars-series-ewm-var"]], "polars.Series.dt.is_leap_year": [[784, "polars-series-dt-is-leap-year"]], "polars.Series.dt.truncate": [[812, "polars-series-dt-truncate"]], "polars.Series.dt.nanoseconds": [[800, "polars-series-dt-nanoseconds"]], "polars.Series.is_finite": [[843, "polars-series-is-finite"]], "polars.Series.dt.hour": [[782, "polars-series-dt-hour"]], "polars.Series.dt.microsecond": [[789, "polars-series-dt-microsecond"]], "polars.Series.head": [[834, "polars-series-head"]], "polars.Series.hash": [[833, "polars-series-hash"]], "polars.Series.dt.max": [[786, "polars-series-dt-max"]], "polars.Series.dt.iso_year": [[785, "polars-series-dt-iso-year"]], "polars.Series.is_first": [[844, "polars-series-is-first"]], "polars.Series.dtype": [[817, "polars-series-dtype"]], "polars.Series.dt.week": [[813, "polars-series-dt-week"]], "polars.Series.is_infinite": [[847, "polars-series-is-infinite"]], "polars.Series.dt.epoch": [[781, "polars-series-dt-epoch"]], "polars.Series.get_chunks": [[831, "polars-series-get-chunks"]], "polars.Series.interpolate": [[838, "polars-series-interpolate"]], "polars.Series.dt.with_time_unit": [[815, "polars-series-dt-with-time-unit"]], "polars.Series.dt.round": [[805, "polars-series-dt-round"]], "polars.Series.is_float": [[845, "polars-series-is-float"]], "polars.Series.dt.replace_time_zone": [[804, "polars-series-dt-replace-time-zone"]], "polars.Series.is_integer": [[848, "polars-series-is-integer"]], "polars.Series.implode": [[836, "polars-series-implode"]], "polars.Series.dt.quarter": [[803, "polars-series-dt-quarter"]], "polars.Series.dt.microseconds": [[790, "polars-series-dt-microseconds"]], "polars.Series.estimated_size": [[819, "polars-series-estimated-size"]], "polars.Series.fill_null": [[827, "polars-series-fill-null"]], "polars.Series.floor": [[830, "polars-series-floor"]], "polars.Series.dt.millisecond": [[791, "polars-series-dt-millisecond"]], "polars.Series.dt.month_end": [[797, "polars-series-dt-month-end"]], "polars.Series.dt.nanosecond": [[799, "polars-series-dt-nanosecond"]], "polars.Series.is_duplicated": [[841, "polars-series-is-duplicated"]], "polars.Series.is_in": [[846, "polars-series-is-in"]], "polars.Series.extend_constant": [[825, "polars-series-extend-constant"]], "polars.Series.dt.milliseconds": [[792, "polars-series-dt-milliseconds"]], "polars.Series.dt.mean": [[787, "polars-series-dt-mean"]], "polars.Series.dt.minute": [[794, "polars-series-dt-minute"]], "polars.Series.dt.month": [[796, "polars-series-dt-month"]], "polars.Series.dt.weekday": [[814, "polars-series-dt-weekday"]], "polars.Series.is_boolean": [[840, "polars-series-is-boolean"]], "polars.Series.dt.month_start": [[798, "polars-series-dt-month-start"]], "polars.Series.has_validity": [[832, "polars-series-has-validity"]], "polars.Series.dt.min": [[793, "polars-series-dt-min"]], "polars.Series.dt.ordinal_day": [[802, "polars-series-dt-ordinal-day"]], "polars.Series.exp": [[823, "polars-series-exp"]], "polars.Series.dt.time": [[809, "polars-series-dt-time"]], "polars.Series.is_between": [[839, "polars-series-is-between"]], "polars.Series.dt.offset_by": [[801, "polars-series-dt-offset-by"]], "polars.Series.ewm_std": [[821, "polars-series-ewm-std"]], "polars.Series.flags": [[829, "polars-series-flags"]], "polars.Series.inner_dtype": [[837, "polars-series-inner-dtype"]], "polars.Series.dt.timestamp": [[810, "polars-series-dt-timestamp"]], "polars.Series.is_nan": [[849, "polars-series-is-nan"]], "polars.Series.dt.median": [[788, "polars-series-dt-median"]], "polars.Series.entropy": [[818, "polars-series-entropy"]], "polars.Series.dt.hours": [[783, "polars-series-dt-hours"]], "polars.Series.fill_nan": [[826, "polars-series-fill-nan"]], "polars.Series.explode": [[824, "polars-series-explode"]], "Miscellaneous": [[1028, "miscellaneous"], [717, "miscellaneous"], [628, "miscellaneous"], [621, "miscellaneous"], [252, "miscellaneous"]], "polars.Series.to_init_repr": [[1005, "polars-series-to-init-repr"]], "Series": [[1026, "series"]], "String": [[1030, "string"], [624, "string"]], "polars.Series.take": [[997, "polars-series-take"]], "Descriptive": [[1024, "descriptive"], [714, "descriptive"], [248, "descriptive"]], "List": [[1027, "list"], [619, "list"]], "SQL": [[1033, "sql"]], "Methods": [[1033, "methods"]], "polars.Series.tan": [[999, "polars-series-tan"]], "Computation": [[1023, "computation"], [616, "computation"], [247, "computation"]], "polars.Series.to_arrow": [[1002, "polars-series-to-arrow"]], "polars.Series.unique_counts": [[1012, "polars-series-unique-counts"]], "Binary": [[1020, "binary"], [612, "binary"], [623, "binary"]], "polars.Series.to_numpy": [[1007, "polars-series-to-numpy"]], "polars.Series.view": [[1016, "polars-series-view"]], "Temporal": [[1032, "temporal"], [626, "temporal"], [254, "temporal"]], "polars.Series.to_physical": [[1009, "polars-series-to-physical"]], "polars.Series.unique": [[1011, "polars-series-unique"]], "polars.Series.zip_with": [[1017, "polars-series-zip-with"]], "Attributes": [[1019, "attributes"], [713, "attributes"], [246, "attributes"]], "polars.Series.to_list": [[1006, "polars-series-to-list"]], "Array": [[1018, "array"], [611, "array"]], "polars.Series.tanh": [[1000, "polars-series-tanh"]], "Struct": [[1031, "struct"], [625, "struct"]], "polars.Series.struct.unnest": [[994, "polars-series-struct-unnest"]], "Boolean": [[1021, "boolean"], [613, "boolean"]], "Utils": [[1035, "utils"]], "polars.Series.to_dummies": [[1003, "polars-series-to-dummies"]], "polars.Series.take_every": [[998, "polars-series-take-every"]], "polars.Series.to_pandas": [[1008, "polars-series-to-pandas"]], "polars.Series.upper_bound": [[1013, "polars-series-upper-bound"]], "Categories": [[1022, "categories"], [614, "categories"]], "polars.Series.time_unit": [[1001, "polars-series-time-unit"]], "Export": [[1025, "export"], [249, "export"]], "Manipulation/selection": [[1029, "manipulation-selection"], [718, "manipulation-selection"], [622, "manipulation-selection"], [253, "manipulation-selection"]], "polars.Series.top_k": [[1010, "polars-series-top-k"]], "polars.Series.to_frame": [[1004, "polars-series-to-frame"]], "polars.Series.var": [[1015, "polars-series-var"]], "polars.Series.value_counts": [[1014, "polars-series-value-counts"]], "polars.Series.tail": [[996, "polars-series-tail"]], "Testing": [[1034, "testing"]], "Asserts": [[1034, "asserts"]], "Parametric testing": [[1034, "parametric-testing"]], "Polars primitives": [[1034, "polars-primitives"]], "Strategy helpers": [[1034, "strategy-helpers"]], "Profiles": [[1034, "profiles"]], "polars.Series.sum": [[995, "polars-series-sum"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[700, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[704, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.update": [[691, "polars-lazyframe-update"]], "polars.LazyFrame.inspect": [[653, "polars-lazyframe-inspect"]], "polars.LazyFrame.rename": [[672, "polars-lazyframe-rename"]], "polars.LazyFrame.slice": [[682, "polars-lazyframe-slice"]], "polars.LazyFrame.fetch": [[643, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[645, "polars-lazyframe-fill-null"]], "polars.LazyFrame.select": [[675, "polars-lazyframe-select"]], "polars.LazyFrame.unique": [[689, "polars-lazyframe-unique"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[705, "polars-lazyframe-groupby-lazygroupby-max"]], "polars.LazyFrame.pipe": [[668, "polars-lazyframe-pipe"]], "polars.LazyFrame.melt": [[664, "polars-lazyframe-melt"]], "polars.LazyFrame.dtypes": [[640, "polars-lazyframe-dtypes"]], "polars.LazyFrame.shift_and_fill": [[678, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.join": [[655, "polars-lazyframe-join"]], "polars.LazyFrame.show_graph": [[679, "polars-lazyframe-show-graph"]], "polars.LazyFrame.groupby_dynamic": [[650, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.std": [[684, "polars-lazyframe-std"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[708, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[699, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.LazyFrame.schema": [[674, "polars-lazyframe-schema"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[702, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.top_k": [[688, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[703, "polars-lazyframe-groupby-lazygroupby-head"]], "polars.LazyFrame.width": [[693, "polars-lazyframe-width"]], "polars.LazyFrame.sink_ipc": [[680, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.head": [[652, "polars-lazyframe-head"]], "polars.LazyFrame.median": [[663, "polars-lazyframe-median"]], "polars.LazyFrame.take_every": [[687, "polars-lazyframe-take-every"]], "polars.LazyFrame.max": [[661, "polars-lazyframe-max"]], "polars.LazyFrame.drop_nulls": [[639, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.sum": [[685, "polars-lazyframe-sum"]], "polars.LazyFrame.with_columns": [[694, "polars-lazyframe-with-columns"]], "polars.LazyFrame.merge_sorted": [[665, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.limit": [[659, "polars-lazyframe-limit"]], "polars.LazyFrame.interpolate": [[654, "polars-lazyframe-interpolate"]], "polars.LazyFrame.sink_parquet": [[681, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.sort": [[683, "polars-lazyframe-sort"]], "polars.LazyFrame.groupby": [[649, "polars-lazyframe-groupby"]], "polars.LazyFrame.explain": [[641, "polars-lazyframe-explain"]], "polars.LazyFrame.fill_nan": [[644, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.read_json": [[671, "polars-lazyframe-read-json"]], "polars.LazyFrame.tail": [[686, "polars-lazyframe-tail"]], "polars.LazyFrame.unnest": [[690, "polars-lazyframe-unnest"]], "polars.LazyFrame.with_row_count": [[696, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.profile": [[669, "polars-lazyframe-profile"]], "polars.LazyFrame.first": [[647, "polars-lazyframe-first"]], "polars.LazyFrame.min": [[666, "polars-lazyframe-min"]], "polars.LazyFrame.filter": [[646, "polars-lazyframe-filter"]], "polars.LazyFrame.explode": [[642, "polars-lazyframe-explode"]], "polars.LazyFrame.from_json": [[648, "polars-lazyframe-from-json"]], "polars.LazyFrame.write_json": [[697, "polars-lazyframe-write-json"]], "polars.LazyFrame.map": [[660, "polars-lazyframe-map"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[709, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.mean": [[662, "polars-lazyframe-mean"]], "polars.LazyFrame.groupby_rolling": [[651, "polars-lazyframe-groupby-rolling"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[698, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.shift": [[677, "polars-lazyframe-shift"]], "polars.LazyFrame.reverse": [[673, "polars-lazyframe-reverse"]], "polars.LazyFrame.quantile": [[670, "polars-lazyframe-quantile"]], "polars.LazyFrame.lazy": [[658, "polars-lazyframe-lazy"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[706, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.with_context": [[695, "polars-lazyframe-with-context"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[707, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.last": [[657, "polars-lazyframe-last"]], "polars.LazyFrame.null_count": [[667, "polars-lazyframe-null-count"]], "polars.LazyFrame.var": [[692, "polars-lazyframe-var"]], "polars.LazyFrame.join_asof": [[656, "polars-lazyframe-join-asof"]], "polars.LazyFrame.set_sorted": [[676, "polars-lazyframe-set-sorted"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[701, "polars-lazyframe-groupby-lazygroupby-count"]], "polars.Series.abs": [[721, "polars-series-abs"]], "polars.Series.arr.min": [[739, "polars-series-arr-min"]], "polars.Series.clone": [[757, "polars-series-clone"]], "polars.Series.cumulative_eval": [[764, "polars-series-cumulative-eval"]], "polars.Series.bin.ends_with": [[745, "polars-series-bin-ends-with"]], "polars.Series.dt.base_utc_offset": [[772, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.cast_time_unit": [[773, "polars-series-dt-cast-time-unit"]], "polars.Series.bin.encode": [[744, "polars-series-bin-encode"]], "polars.Series.dt.days": [[779, "polars-series-dt-days"]], "polars.Series.arr.sum": [[740, "polars-series-arr-sum"]], "GroupBy": [[715, "groupby"], [250, "groupby"]], "polars.Series.diff": [[767, "polars-series-diff"]], "polars.Series.cos": [[758, "polars-series-cos"]], "polars.Series.all": [[723, "polars-series-all"]], "polars.Series.dt.datetime": [[777, "polars-series-dt-datetime"]], "polars.Series.cummin": [[761, "polars-series-cummin"]], "polars.Series.clear": [[753, "polars-series-clear"]], "polars.Series.dt.convert_time_zone": [[775, "polars-series-dt-convert-time-zone"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[712, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.alias": [[722, "polars-series-alias"]], "polars.Series.chunk_lengths": [[752, "polars-series-chunk-lengths"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[710, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.Series.arccosh": [[728, "polars-series-arccosh"]], "polars.Series.cat.set_ordering": [[750, "polars-series-cat-set-ordering"]], "Selectors": [[719, "selectors"]], "Importing": [[719, "importing"]], "Set operations": [[719, "set-operations"]], "Functions": [[719, "functions"], [628, "functions"], [617, "functions"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[711, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.Series.cumprod": [[762, "polars-series-cumprod"]], "polars.Series.dt.dst_offset": [[780, "polars-series-dt-dst-offset"]], "polars.Series.drop_nulls": [[770, "polars-series-drop-nulls"]], "polars.Series.cat": [[749, "polars-series-cat"]], "polars.Series.cumsum": [[763, "polars-series-cumsum"]], "polars.Series.arr.unique": [[741, "polars-series-arr-unique"]], "polars.Series.cut": [[765, "polars-series-cut"]], "polars.Series.clip_min": [[756, "polars-series-clip-min"]], "LazyFrame": [[716, "lazyframe"]], "polars.Series.arctanh": [[732, "polars-series-arctanh"]], "polars.Series.clip": [[754, "polars-series-clip"]], "polars.Series.describe": [[766, "polars-series-describe"]], "polars.Series.dt.day": [[778, "polars-series-dt-day"]], "polars.Series.arg_unique": [[737, "polars-series-arg-unique"]], "polars.Series.cast": [[748, "polars-series-cast"]], "polars.Series.arctan": [[731, "polars-series-arctan"]], "polars.Series.dt": [[771, "polars-series-dt"]], "Read/write logical plan": [[717, "read-write-logical-plan"]], "polars.Series.arg_min": [[734, "polars-series-arg-min"]], "polars.Series.arg_max": [[733, "polars-series-arg-max"]], "polars.Series.arg_sort": [[735, "polars-series-arg-sort"]], "polars.Series.cummax": [[760, "polars-series-cummax"]], "polars.Series.dot": [[768, "polars-series-dot"]], "polars.Series.dt.date": [[776, "polars-series-dt-date"]], "polars.Series.any": [[724, "polars-series-any"]], "polars.Series.bin.contains": [[742, "polars-series-bin-contains"]], "polars.Series.ceil": [[751, "polars-series-ceil"]], "polars.Series.bin.starts_with": [[746, "polars-series-bin-starts-with"]], "polars.Series.clip_max": [[755, "polars-series-clip-max"]], "polars.Series.append": [[725, "polars-series-append"]], "polars.Series.dt.combine": [[774, "polars-series-dt-combine"]], "polars.Series.drop_nans": [[769, "polars-series-drop-nans"]], "polars.Series.arcsinh": [[730, "polars-series-arcsinh"]], "polars.Series.cosh": [[759, "polars-series-cosh"]], "polars.Series.arg_true": [[736, "polars-series-arg-true"]], "polars.Series.apply": [[726, "polars-series-apply"]], "polars.Series.arr.max": [[738, "polars-series-arr-max"]], "polars.Series.arcsin": [[729, "polars-series-arcsin"]], "polars.Series.arccos": [[727, "polars-series-arccos"]], "polars.Series.bottom_k": [[747, "polars-series-bottom-k"]], "polars.Series.bin.decode": [[743, "polars-series-bin-decode"]], "polars.col": [[563, "polars-col"]], "polars.Expr.str.contains": [[500, "polars-expr-str-contains"]], "polars.Expr.str.to_uppercase": [[532, "polars-expr-str-to-uppercase"]], "polars.Expr.struct.field": [[534, "polars-expr-struct-field"]], "polars.Expr.str.rjust": [[517, "polars-expr-str-rjust"]], "polars.Expr.str.strptime": [[525, "polars-expr-str-strptime"]], "polars.Expr.std": [[498, "polars-expr-std"]], "polars.Expr.str.extract": [[506, "polars-expr-str-extract"]], "polars.Expr.struct.rename_fields": [[535, "polars-expr-struct-rename-fields"]], "polars.Expr.sub": [[536, "polars-expr-sub"]], "polars.Expr.str.starts_with": [[523, "polars-expr-str-starts-with"]], "polars.Expr.str.to_lowercase": [[529, "polars-expr-str-to-lowercase"]], "polars.arange": [[558, "polars-arange"]], "polars.Expr.str.count_match": [[501, "polars-expr-str-count-match"]], "polars.Expr.str.explode": [[505, "polars-expr-str-explode"]], "polars.Expr.suffix": [[537, "polars-expr-suffix"]], "polars.corr": [[566, "polars-corr"]], "polars.Expr.str.concat": [[499, "polars-expr-str-concat"]], "polars.Expr.sum": [[538, "polars-expr-sum"]], "polars.Expr.xor": [[553, "polars-expr-xor"]], "polars.arg_where": [[560, "polars-arg-where"]], "polars.Expr.where": [[552, "polars-expr-where"]], "polars.Expr.str.n_chars": [[513, "polars-expr-str-n-chars"]], "polars.any": [[555, "polars-any"]], "polars.all": [[554, "polars-all"]], "polars.count": [[567, "polars-count"]], "polars.Expr.str.slice": [[519, "polars-expr-str-slice"]], "polars.Expr.str.to_decimal": [[528, "polars-expr-str-to-decimal"]], "polars.Expr.unique_counts": [[548, "polars-expr-unique-counts"]], "polars.Expr.top_k": [[545, "polars-expr-top-k"]], "polars.Expr.str.extract_all": [[507, "polars-expr-str-extract-all"]], "polars.concat_list": [[564, "polars-concat-list"]], "polars.concat_str": [[565, "polars-concat-str"]], "polars.Expr.str.decode": [[502, "polars-expr-str-decode"]], "polars.Expr.str.json_extract": [[508, "polars-expr-str-json-extract"]], "polars.Expr.sqrt": [[497, "polars-expr-sqrt"]], "polars.Expr.unique": [[547, "polars-expr-unique"]], "polars.Expr.tan": [[542, "polars-expr-tan"]], "polars.Expr.value_counts": [[550, "polars-expr-value-counts"]], "polars.Expr.str.replace": [[515, "polars-expr-str-replace"]], "polars.Expr.str.split_exact": [[521, "polars-expr-str-split-exact"]], "polars.Expr.str.splitn": [[522, "polars-expr-str-splitn"]], "polars.Expr.str.strip": [[524, "polars-expr-str-strip"]], "polars.Expr.str.parse_int": [[514, "polars-expr-str-parse-int"]], "polars.Expr.str.encode": [[503, "polars-expr-str-encode"]], "polars.Expr.truediv": [[546, "polars-expr-truediv"]], "polars.avg": [[561, "polars-avg"]], "polars.Expr.str.replace_all": [[516, "polars-expr-str-replace-all"]], "polars.Expr.str.to_titlecase": [[531, "polars-expr-str-to-titlecase"]], "polars.Expr.tail": [[539, "polars-expr-tail"]], "polars.Expr.take": [[540, "polars-expr-take"]], "polars.Expr.take_every": [[541, "polars-expr-take-every"]], "polars.Expr.str.to_datetime": [[527, "polars-expr-str-to-datetime"]], "polars.Expr.str.to_time": [[530, "polars-expr-str-to-time"]], "polars.Expr.var": [[551, "polars-expr-var"]], "polars.Expr.str.split": [[520, "polars-expr-str-split"]], "polars.Expr.to_physical": [[544, "polars-expr-to-physical"]], "polars.Expr.str.lengths": [[510, "polars-expr-str-lengths"]], "polars.Expr.str.lstrip": [[512, "polars-expr-str-lstrip"]], "polars.Expr.str.zfill": [[533, "polars-expr-str-zfill"]], "polars.Expr.str.ends_with": [[504, "polars-expr-str-ends-with"]], "polars.apply": [[556, "polars-apply"]], "polars.Expr.str.ljust": [[511, "polars-expr-str-ljust"]], "polars.coalesce": [[562, "polars-coalesce"]], "polars.Expr.tanh": [[543, "polars-expr-tanh"]], "polars.Expr.str.rstrip": [[518, "polars-expr-str-rstrip"]], "polars.arg_sort_by": [[559, "polars-arg-sort-by"]], "polars.Expr.str.to_date": [[526, "polars-expr-str-to-date"]], "polars.Expr.str.json_path_match": [[509, "polars-expr-str-json-path-match"]], "polars.Expr.upper_bound": [[549, "polars-expr-upper-bound"]], "polars.approx_unique": [[557, "polars-approx-unique"]], "polars.Expr.over": [[458, "polars-expr-over"]], "polars.Expr.rolling_min": [[476, "polars-expr-rolling-min"]], "polars.Expr.meta.eq": [[437, "polars-expr-meta-eq"]], "polars.Expr.meta.tree_format": [[444, "polars-expr-meta-tree-format"]], "polars.Expr.shuffle": [[489, "polars-expr-shuffle"]], "polars.Expr.meta.undo_aliases": [[445, "polars-expr-meta-undo-aliases"]], "polars.Expr.mod": [[448, "polars-expr-mod"]], "polars.Expr.nan_min": [[453, "polars-expr-nan-min"]], "polars.Expr.log10": [[427, "polars-expr-log10"]], "polars.Expr.reinterpret": [[468, "polars-expr-reinterpret"]], "polars.Expr.rolling_median": [[475, "polars-expr-rolling-median"]], "polars.Expr.rolling_skew": [[478, "polars-expr-rolling-skew"]], "polars.Expr.prefix": [[462, "polars-expr-prefix"]], "polars.Expr.sinh": [[492, "polars-expr-sinh"]], "polars.Expr.meta.output_name": [[441, "polars-expr-meta-output-name"]], "polars.Expr.meta.has_multiple_outputs": [[438, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.shrink_dtype": [[488, "polars-expr-shrink-dtype"]], "polars.Expr.reverse": [[471, "polars-expr-reverse"]], "polars.Expr.null_count": [[456, "polars-expr-null-count"]], "polars.Expr.min": [[447, "polars-expr-min"]], "polars.Expr.n_unique": [[451, "polars-expr-n-unique"]], "polars.Expr.repeat_by": [[469, "polars-expr-repeat-by"]], "polars.Expr.rolling_quantile": [[477, "polars-expr-rolling-quantile"]], "polars.Expr.sample": [[483, "polars-expr-sample"]], "polars.Expr.log1p": [[428, "polars-expr-log1p"]], "polars.Expr.sign": [[490, "polars-expr-sign"]], "polars.Expr.slice": [[494, "polars-expr-slice"]], "polars.Expr.log": [[426, "polars-expr-log"]], "polars.Expr.sort_by": [[496, "polars-expr-sort-by"]], "polars.Expr.mul": [[450, "polars-expr-mul"]], "polars.Expr.lt": [[430, "polars-expr-lt"]], "polars.Expr.ne_missing": [[455, "polars-expr-ne-missing"]], "polars.Expr.meta.is_regex_projection": [[439, "polars-expr-meta-is-regex-projection"]], "polars.Expr.lower_bound": [[429, "polars-expr-lower-bound"]], "polars.Expr.map": [[431, "polars-expr-map"]], "polars.Expr.or_": [[457, "polars-expr-or"]], "polars.Expr.pct_change": [[459, "polars-expr-pct-change"]], "polars.Expr.pipe": [[460, "polars-expr-pipe"]], "polars.Expr.rolling_mean": [[474, "polars-expr-rolling-mean"]], "polars.Expr.round": [[482, "polars-expr-round"]], "polars.Expr.sort": [[495, "polars-expr-sort"]], "polars.Expr.rolling_apply": [[472, "polars-expr-rolling-apply"]], "polars.Expr.rank": [[466, "polars-expr-rank"]], "polars.Expr.shift": [[486, "polars-expr-shift"]], "polars.Expr.sin": [[491, "polars-expr-sin"]], "polars.Expr.set_sorted": [[485, "polars-expr-set-sorted"]], "polars.Expr.rolling_std": [[479, "polars-expr-rolling-std"]], "polars.Expr.pow": [[461, "polars-expr-pow"]], "polars.Expr.rolling_sum": [[480, "polars-expr-rolling-sum"]], "polars.Expr.radians": [[465, "polars-expr-radians"]], "polars.Expr.search_sorted": [[484, "polars-expr-search-sorted"]], "polars.Expr.reshape": [[470, "polars-expr-reshape"]], "polars.Expr.meta.ne": [[440, "polars-expr-meta-ne"]], "polars.Expr.map_dict": [[433, "polars-expr-map-dict"]], "polars.Expr.quantile": [[464, "polars-expr-quantile"]], "polars.Expr.rolling_var": [[481, "polars-expr-rolling-var"]], "polars.Expr.product": [[463, "polars-expr-product"]], "polars.Expr.rolling_max": [[473, "polars-expr-rolling-max"]], "polars.Expr.median": [[436, "polars-expr-median"]], "polars.Expr.meta.pop": [[442, "polars-expr-meta-pop"]], "polars.Expr.nan_max": [[452, "polars-expr-nan-max"]], "polars.Expr.skew": [[493, "polars-expr-skew"]], "polars.Expr.meta.write_json": [[446, "polars-expr-meta-write-json"]], "polars.Expr.map_alias": [[432, "polars-expr-map-alias"]], "polars.Expr.mode": [[449, "polars-expr-mode"]], "polars.Expr.mean": [[435, "polars-expr-mean"]], "polars.Expr.ne": [[454, "polars-expr-ne"]], "polars.Expr.shift_and_fill": [[487, "polars-expr-shift-and-fill"]], "polars.Expr.max": [[434, "polars-expr-max"]], "polars.Expr.meta.root_names": [[443, "polars-expr-meta-root-names"]], "polars.Expr.rechunk": [[467, "polars-expr-rechunk"]], "polars.Expr.limit": [[394, "polars-expr-limit"]], "polars.Expr.implode": [[374, "polars-expr-implode"]], "polars.Expr.list.slice": [[418, "polars-expr-list-slice"]], "polars.Expr.filter": [[363, "polars-expr-filter"]], "polars.Expr.fill_nan": [[361, "polars-expr-fill-nan"]], "polars.Expr.list.lengths": [[412, "polars-expr-list-lengths"]], "polars.Expr.list.count_match": [[401, "polars-expr-list-count-match"]], "polars.Expr.is_duplicated": [[378, "polars-expr-is-duplicated"]], "polars.Expr.le": [[392, "polars-expr-le"]], "polars.Expr.is_not_null": [[386, "polars-expr-is-not-null"]], "polars.Expr.list.shift": [[417, "polars-expr-list-shift"]], "polars.Expr.list.explode": [[405, "polars-expr-list-explode"]], "polars.Expr.list.sum": [[420, "polars-expr-list-sum"]], "polars.Expr.interpolate": [[376, "polars-expr-interpolate"]], "polars.Expr.len": [[393, "polars-expr-len"]], "polars.Expr.kurtosis": [[390, "polars-expr-kurtosis"]], "polars.Expr.list.unique": [[425, "polars-expr-list-unique"]], "polars.Expr.is_not_nan": [[385, "polars-expr-is-not-nan"]], "polars.Expr.list.get": [[407, "polars-expr-list-get"]], "polars.Expr.list.max": [[413, "polars-expr-list-max"]], "polars.Expr.list.reverse": [[416, "polars-expr-list-reverse"]], "polars.Expr.explode": [[359, "polars-expr-explode"]], "polars.Expr.floor": [[366, "polars-expr-floor"]], "polars.Expr.list.last": [[411, "polars-expr-list-last"]], "polars.Expr.ewm_std": [[355, "polars-expr-ewm-std"]], "polars.Expr.is_between": [[377, "polars-expr-is-between"]], "polars.Expr.list.to_struct": [[423, "polars-expr-list-to-struct"]], "polars.Expr.list.head": [[408, "polars-expr-list-head"]], "polars.Expr.from_json": [[369, "polars-expr-from-json"]], "polars.Expr.list.min": [[415, "polars-expr-list-min"]], "polars.Expr.inspect": [[375, "polars-expr-inspect"]], "polars.Expr.is_nan": [[383, "polars-expr-is-nan"]], "polars.Expr.list.tail": [[421, "polars-expr-list-tail"]], "polars.Expr.is_not": [[384, "polars-expr-is-not"]], "polars.Expr.floordiv": [[367, "polars-expr-floordiv"]], "polars.Expr.gt": [[371, "polars-expr-gt"]], "polars.Expr.list.concat": [[399, "polars-expr-list-concat"]], "polars.Expr.list.union": [[424, "polars-expr-list-union"]], "polars.Expr.last": [[391, "polars-expr-last"]], "polars.Expr.list.mean": [[414, "polars-expr-list-mean"]], "polars.Expr.list.take": [[422, "polars-expr-list-take"]], "polars.Expr.is_infinite": [[382, "polars-expr-is-infinite"]], "polars.Expr.list.eval": [[404, "polars-expr-list-eval"]], "polars.Expr.is_unique": [[388, "polars-expr-is-unique"]], "polars.Expr.exp": [[358, "polars-expr-exp"]], "polars.Expr.is_finite": [[379, "polars-expr-is-finite"]], "polars.Expr.list.all": [[395, "polars-expr-list-all"]], "polars.Expr.list.intersection": [[409, "polars-expr-list-intersection"]], "polars.Expr.list.contains": [[400, "polars-expr-list-contains"]], "polars.Expr.fill_null": [[362, "polars-expr-fill-null"]], "polars.Expr.hash": [[372, "polars-expr-hash"]], "polars.Expr.keep_name": [[389, "polars-expr-keep-name"]], "polars.Expr.is_first": [[380, "polars-expr-is-first"]], "polars.Expr.is_in": [[381, "polars-expr-is-in"]], "polars.Expr.is_null": [[387, "polars-expr-is-null"]], "polars.Expr.first": [[364, "polars-expr-first"]], "polars.Expr.list.join": [[410, "polars-expr-list-join"]], "polars.Expr.list.any": [[396, "polars-expr-list-any"]], "polars.Expr.exclude": [[357, "polars-expr-exclude"]], "polars.Expr.list.arg_max": [[397, "polars-expr-list-arg-max"]], "polars.Expr.list.sort": [[419, "polars-expr-list-sort"]], "polars.Expr.list.first": [[406, "polars-expr-list-first"]], "polars.Expr.head": [[373, "polars-expr-head"]], "polars.Expr.list.diff": [[402, "polars-expr-list-diff"]], "polars.Expr.list.difference": [[403, "polars-expr-list-difference"]], "polars.Expr.forward_fill": [[368, "polars-expr-forward-fill"]], "polars.Expr.list.arg_min": [[398, "polars-expr-list-arg-min"]], "polars.Expr.flatten": [[365, "polars-expr-flatten"]], "polars.Expr.ewm_var": [[356, "polars-expr-ewm-var"]], "polars.Expr.ge": [[370, "polars-expr-ge"]], "polars.Expr.extend_constant": [[360, "polars-expr-extend-constant"]], "polars.Expr.dt.strftime": [[342, "polars-expr-dt-strftime"]], "polars.Expr.dt.with_time_unit": [[349, "polars-expr-dt-with-time-unit"]], "polars.Expr.cat.set_ordering": [[291, "polars-expr-cat-set-ordering"]], "polars.Expr.clip_min": [[295, "polars-expr-clip-min"]], "polars.Expr.dt.month_start": [[332, "polars-expr-dt-month-start"]], "polars.Expr.bottom_k": [[288, "polars-expr-bottom-k"]], "polars.Expr.count": [[298, "polars-expr-count"]], "polars.Expr.dt.seconds": [[341, "polars-expr-dt-seconds"]], "polars.Expr.dt.quarter": [[337, "polars-expr-dt-quarter"]], "polars.Expr.dt.replace_time_zone": [[338, "polars-expr-dt-replace-time-zone"]], "polars.Expr.clip_max": [[294, "polars-expr-clip-max"]], "polars.Expr.diff": [[306, "polars-expr-diff"]], "polars.Expr.cumulative_eval": [[304, "polars-expr-cumulative-eval"]], "polars.Expr.dt.microseconds": [[325, "polars-expr-dt-microseconds"]], "polars.Expr.dt.millisecond": [[326, "polars-expr-dt-millisecond"]], "polars.Expr.degrees": [[305, "polars-expr-degrees"]], "polars.Expr.cos": [[296, "polars-expr-cos"]], "polars.Expr.bin.ends_with": [[286, "polars-expr-bin-ends-with"]], "polars.Expr.bin.encode": [[285, "polars-expr-bin-encode"]], "polars.Expr.ceil": [[292, "polars-expr-ceil"]], "polars.Expr.dt.days": [[317, "polars-expr-dt-days"]], "polars.Expr.dt.milliseconds": [[327, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.minute": [[328, "polars-expr-dt-minute"]], "polars.Expr.dt.month": [[330, "polars-expr-dt-month"]], "polars.Expr.dt.second": [[340, "polars-expr-dt-second"]], "polars.Expr.dt.cast_time_unit": [[311, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.day": [[316, "polars-expr-dt-day"]], "polars.Expr.dot": [[307, "polars-expr-dot"]], "polars.Expr.dt.hour": [[320, "polars-expr-dt-hour"]], "polars.Expr.cummax": [[300, "polars-expr-cummax"]], "polars.Expr.dt.datetime": [[315, "polars-expr-dt-datetime"]], "polars.Expr.dt.epoch": [[319, "polars-expr-dt-epoch"]], "polars.Expr.dt.hours": [[321, "polars-expr-dt-hours"]], "polars.Expr.dt.is_leap_year": [[322, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.minutes": [[329, "polars-expr-dt-minutes"]], "polars.Expr.entropy": [[351, "polars-expr-entropy"]], "polars.Expr.bin.decode": [[284, "polars-expr-bin-decode"]], "polars.Expr.dt.base_utc_offset": [[310, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.truncate": [[346, "polars-expr-dt-truncate"]], "polars.Expr.dt.week": [[347, "polars-expr-dt-week"]], "polars.Expr.cummin": [[301, "polars-expr-cummin"]], "polars.Expr.drop_nans": [[308, "polars-expr-drop-nans"]], "polars.Expr.cast": [[290, "polars-expr-cast"]], "polars.Expr.drop_nulls": [[309, "polars-expr-drop-nulls"]], "polars.Expr.cumprod": [[302, "polars-expr-cumprod"]], "polars.Expr.dt.round": [[339, "polars-expr-dt-round"]], "polars.Expr.cumcount": [[299, "polars-expr-cumcount"]], "polars.Expr.dt.offset_by": [[335, "polars-expr-dt-offset-by"]], "polars.Expr.eq": [[352, "polars-expr-eq"]], "polars.Expr.dt.timestamp": [[344, "polars-expr-dt-timestamp"]], "polars.Expr.dt.year": [[350, "polars-expr-dt-year"]], "polars.Expr.dt.ordinal_day": [[336, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.convert_time_zone": [[313, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.nanosecond": [[333, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.time": [[343, "polars-expr-dt-time"]], "polars.Expr.cosh": [[297, "polars-expr-cosh"]], "polars.Expr.dt.dst_offset": [[318, "polars-expr-dt-dst-offset"]], "polars.Expr.cache": [[289, "polars-expr-cache"]], "polars.Expr.dt.iso_year": [[323, "polars-expr-dt-iso-year"]], "polars.Expr.dt.to_string": [[345, "polars-expr-dt-to-string"]], "polars.Expr.ewm_mean": [[354, "polars-expr-ewm-mean"]], "polars.Expr.cumsum": [[303, "polars-expr-cumsum"]], "polars.Expr.dt.weekday": [[348, "polars-expr-dt-weekday"]], "polars.Expr.dt.date": [[314, "polars-expr-dt-date"]], "polars.Expr.eq_missing": [[353, "polars-expr-eq-missing"]], "polars.Expr.dt.microsecond": [[324, "polars-expr-dt-microsecond"]], "polars.Expr.dt.month_end": [[331, "polars-expr-dt-month-end"]], "polars.Expr.dt.combine": [[312, "polars-expr-dt-combine"]], "polars.Expr.bin.starts_with": [[287, "polars-expr-bin-starts-with"]], "polars.Expr.clip": [[293, "polars-expr-clip"]], "polars.Expr.dt.nanoseconds": [[334, "polars-expr-dt-nanoseconds"]], "polars.reduce": [[596, "polars-reduce"]], "polars.LazyFrame.clone": [[635, "polars-lazyframe-clone"]], "polars.rolling_corr": [[598, "polars-rolling-corr"]], "polars.zeros": [[610, "polars-zeros"]], "polars.repeat": [[597, "polars-repeat"]], "polars.when": [[609, "polars-when"]], "polars.sql_expr": [[601, "polars-sql-expr"]], "polars.LazyFrame.drop": [[638, "polars-lazyframe-drop"]], "polars.LazyFrame.bottom_k": [[632, "polars-lazyframe-bottom-k"]], "polars.duration": [[575, "polars-duration"]], "polars.median": [[591, "polars-median"]], "polars.time": [[606, "polars-time"]], "polars.LazyFrame.columns": [[637, "polars-lazyframe-columns"]], "polars.lit": [[587, "polars-lit"]], "polars.element": [[576, "polars-element"]], "polars.int_ranges": [[586, "polars-int-ranges"]], "polars.LazyFrame.clear": [[634, "polars-lazyframe-clear"]], "Operators": [[623, "operators"]], "Conjunction": [[623, "conjunction"]], "Comparison": [[623, "comparison"]], "Numeric": [[623, "numeric"], [254, "numeric"]], "Columns / names": [[615, "columns-names"]], "polars.fold": [[579, "polars-fold"]], "polars.sum": [[604, "polars-sum"]], "Input/output": [[630, "input-output"]], "CSV": [[630, "csv"]], "Feather/ IPC": [[630, "feather-ipc"]], "Parquet": [[630, "parquet"]], "Database": [[630, "database"]], "JSON": [[630, "json"]], "AVRO": [[630, "avro"]], "Excel": [[630, "excel"]], "Delta Lake": [[630, "delta-lake"]], "Datasets": [[630, "datasets"]], "BatchedCsvReader": [[630, "batchedcsvreader"]], "polars.LazyFrame.collect": [[636, "polars-lazyframe-collect"]], "polars.std": [[602, "polars-std"]], "polars.ones": [[594, "polars-ones"]], "Expressions": [[618, "expressions"]], "polars.struct": [[603, "polars-struct"]], "polars.cumfold": [[569, "polars-cumfold"]], "Window": [[627, "window"]], "polars.map": [[588, "polars-map"]], "polars.groups": [[582, "polars-groups"]], "polars.quantile": [[595, "polars-quantile"]], "polars.datetime": [[574, "polars-datetime"]], "polars.from_epoch": [[581, "polars-from-epoch"]], "polars.max": [[589, "polars-max"]], "polars.cumsum": [[571, "polars-cumsum"]], "polars.mean": [[590, "polars-mean"]], "Conversion": [[628, "conversion"]], "Parallelization": [[628, "parallelization"]], "StringCache": [[628, "stringcache"]], "polars.cov": [[568, "polars-cov"]], "polars.LazyFrame.cache": [[633, "polars-lazyframe-cache"]], "polars.select": [[600, "polars-select"]], "polars.rolling_cov": [[599, "polars-rolling-cov"]], "polars.date": [[572, "polars-date"]], "polars.format": [[580, "polars-format"]], "polars.implode": [[584, "polars-implode"]], "polars.exclude": [[577, "polars-exclude"]], "polars.time_range": [[607, "polars-time-range"]], "polars.var": [[608, "polars-var"]], "polars.cumreduce": [[570, "polars-cumreduce"]], "Meta": [[620, "meta"]], "API reference": [[629, "api-reference"]], "polars.n_unique": [[593, "polars-n-unique"]], "polars.tail": [[605, "polars-tail"]], "polars.int_range": [[585, "polars-int-range"]], "polars.date_range": [[573, "polars-date-range"]], "polars.min": [[592, "polars-min"]], "polars.first": [[578, "polars-first"]], "polars.head": [[583, "polars-head"]], "polars.DataFrame.mean": [[174, "polars-dataframe-mean"]], "polars.DataFrame.schema": [[196, "polars-dataframe-schema"]], "polars.DataFrame.to_arrow": [[209, "polars-dataframe-to-arrow"]], "polars.DataFrame.fill_null": [[146, "polars-dataframe-fill-null"]], "polars.DataFrame.tail": [[207, "polars-dataframe-tail"]], "polars.DataFrame.groupby_dynamic": [[155, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.quantile": [[186, "polars-dataframe-quantile"]], "polars.DataFrame.null_count": [[181, "polars-dataframe-null-count"]], "polars.DataFrame.select": [[197, "polars-dataframe-select"]], "polars.DataFrame.std": [[205, "polars-dataframe-std"]], "polars.DataFrame.explode": [[143, "polars-dataframe-explode"]], "polars.DataFrame.median": [[175, "polars-dataframe-median"]], "polars.DataFrame.limit": [[172, "polars-dataframe-limit"]], "polars.DataFrame.min": [[178, "polars-dataframe-min"]], "polars.DataFrame.pivot": [[184, "polars-dataframe-pivot"]], "polars.DataFrame.is_duplicated": [[163, "polars-dataframe-is-duplicated"]], "polars.DataFrame.item": [[166, "polars-dataframe-item"]], "polars.DataFrame.n_unique": [[180, "polars-dataframe-n-unique"]], "polars.DataFrame.reverse": [[191, "polars-dataframe-reverse"]], "polars.DataFrame.shift_and_fill": [[201, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.glimpse": [[153, "polars-dataframe-glimpse"]], "polars.DataFrame.iter_rows": [[167, "polars-dataframe-iter-rows"]], "polars.DataFrame.sum": [[206, "polars-dataframe-sum"]], "polars.DataFrame.rechunk": [[187, "polars-dataframe-rechunk"]], "polars.DataFrame.row": [[192, "polars-dataframe-row"]], "polars.DataFrame.lazy": [[171, "polars-dataframe-lazy"]], "polars.DataFrame.is_unique": [[165, "polars-dataframe-is-unique"]], "polars.DataFrame.to_dict": [[210, "polars-dataframe-to-dict"]], "polars.DataFrame.find_idx_by_name": [[148, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.height": [[159, "polars-dataframe-height"]], "polars.DataFrame.extend": [[144, "polars-dataframe-extend"]], "polars.DataFrame.sample": [[195, "polars-dataframe-sample"]], "polars.DataFrame.shift": [[200, "polars-dataframe-shift"]], "polars.DataFrame.shrink_to_fit": [[202, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sort": [[204, "polars-dataframe-sort"]], "polars.DataFrame.estimated_size": [[142, "polars-dataframe-estimated-size"]], "polars.DataFrame.get_columns": [[152, "polars-dataframe-get-columns"]], "polars.DataFrame.melt": [[176, "polars-dataframe-melt"]], "polars.DataFrame.frame_equal": [[150, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby_rolling": [[156, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.n_chunks": [[179, "polars-dataframe-n-chunks"]], "polars.DataFrame.to_dicts": [[211, "polars-dataframe-to-dicts"]], "polars.DataFrame.join": [[169, "polars-dataframe-join"]], "polars.DataFrame.fill_nan": [[145, "polars-dataframe-fill-nan"]], "polars.DataFrame.pipe": [[183, "polars-dataframe-pipe"]], "polars.DataFrame.slice": [[203, "polars-dataframe-slice"]], "polars.DataFrame.iter_slices": [[168, "polars-dataframe-iter-slices"]], "polars.DataFrame.filter": [[147, "polars-dataframe-filter"]], "polars.DataFrame.hash_rows": [[157, "polars-dataframe-hash-rows"]], "polars.DataFrame.replace": [[189, "polars-dataframe-replace"]], "polars.DataFrame.groupby": [[154, "polars-dataframe-groupby"]], "polars.DataFrame.partition_by": [[182, "polars-dataframe-partition-by"]], "polars.DataFrame.replace_at_idx": [[190, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.set_sorted": [[198, "polars-dataframe-set-sorted"]], "polars.DataFrame.shape": [[199, "polars-dataframe-shape"]], "polars.DataFrame.get_column": [[151, "polars-dataframe-get-column"]], "polars.DataFrame.interpolate": [[162, "polars-dataframe-interpolate"]], "polars.DataFrame.max": [[173, "polars-dataframe-max"]], "polars.DataFrame.insert_at_idx": [[161, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.product": [[185, "polars-dataframe-product"]], "polars.DataFrame.rename": [[188, "polars-dataframe-rename"]], "polars.DataFrame.join_asof": [[170, "polars-dataframe-join-asof"]], "polars.DataFrame.head": [[158, "polars-dataframe-head"]], "polars.DataFrame.is_empty": [[164, "polars-dataframe-is-empty"]], "polars.DataFrame.merge_sorted": [[177, "polars-dataframe-merge-sorted"]], "polars.DataFrame.rows": [[193, "polars-dataframe-rows"]], "polars.DataFrame.rows_by_key": [[194, "polars-dataframe-rows-by-key"]], "polars.DataFrame.take_every": [[208, "polars-dataframe-take-every"]], "polars.DataFrame.hstack": [[160, "polars-dataframe-hstack"]], "polars.DataFrame.fold": [[149, "polars-dataframe-fold"]], "polars.DataFrame.to_dummies": [[212, "polars-dataframe-to-dummies"]], "polars.dataframe.groupby.GroupBy.mean": [[239, "polars-dataframe-groupby-groupby-mean"]], "polars.dataframe.groupby.GroupBy.apply": [[233, "polars-dataframe-groupby-groupby-apply"]], "polars.dataframe.groupby.GroupBy.last": [[237, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.min": [[241, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arg_min": [[274, "polars-expr-arg-min"]], "Data types": [[254, "data-types"]], "Nested": [[254, "nested"]], "Other": [[254, "other"]], "polars.dataframe.groupby.GroupBy.head": [[236, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.append": [[264, "polars-expr-append"]], "polars.Expr.approx_unique": [[266, "polars-expr-approx-unique"]], "polars.Expr.arg_true": [[276, "polars-expr-arg-true"]], "polars.Expr.bin.contains": [[283, "polars-expr-bin-contains"]], "polars.Expr.arr.max": [[278, "polars-expr-arr-max"]], "polars.Expr.add": [[258, "polars-expr-add"]], "polars.Expr.arccosh": [[268, "polars-expr-arccosh"]], "polars.DataFrame.transpose": [[219, "polars-dataframe-transpose"]], "polars.dataframe.groupby.GroupBy.max": [[238, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.arccos": [[267, "polars-expr-arccos"]], "polars.Expr.arcsin": [[269, "polars-expr-arcsin"]], "polars.dataframe.groupby.GroupBy.__iter__": [[230, "polars-dataframe-groupby-groupby-iter"]], "polars.Expr.arctanh": [[272, "polars-expr-arctanh"]], "polars.Expr.arr.unique": [[281, "polars-expr-arr-unique"]], "polars.Expr.arr.min": [[279, "polars-expr-arr-min"]], "polars.DataFrame.to_struct": [[217, "polars-dataframe-to-struct"]], "polars.DataFrame.upsample": [[224, "polars-dataframe-upsample"]], "polars.Expr.arr.sum": [[280, "polars-expr-arr-sum"]], "polars.DataFrame.width": [[227, "polars-dataframe-width"]], "polars.dataframe.groupby.GroupBy.agg": [[231, "polars-dataframe-groupby-groupby-agg"]], "Exceptions": [[255, "exceptions"]], "polars.Expr.abs": [[257, "polars-expr-abs"]], "polars.Expr.any": [[263, "polars-expr-any"]], "polars.DataFrame.to_series": [[216, "polars-dataframe-to-series"]], "polars.DataFrame.update": [[223, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.count": [[234, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.backward_fill": [[282, "polars-expr-backward-fill"]], "polars.DataFrame.with_row_count": [[229, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.tail": [[245, "polars-dataframe-groupby-groupby-tail"]], "polars.DataFrame.vstack": [[226, "polars-dataframe-vstack"]], "polars.DataFrame.to_numpy": [[214, "polars-dataframe-to-numpy"]], "polars.Expr.agg_groups": [[259, "polars-expr-agg-groups"]], "polars.dataframe.groupby.GroupBy.first": [[235, "polars-dataframe-groupby-groupby-first"]], "polars.DataFrame.with_columns": [[228, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.median": [[240, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.unnest": [[221, "polars-dataframe-unnest"]], "polars.DataFrame.unstack": [[222, "polars-dataframe-unstack"]], "polars.DataFrame.unique": [[220, "polars-dataframe-unique"]], "DataFrame": [[251, "dataframe"]], "polars.Expr.arg_max": [[273, "polars-expr-arg-max"]], "polars.dataframe.groupby.GroupBy.sum": [[244, "polars-dataframe-groupby-groupby-sum"]], "polars.DataFrame.top_k": [[218, "polars-dataframe-top-k"]], "polars.Expr.and_": [[262, "polars-expr-and"]], "polars.Expr.apply": [[265, "polars-expr-apply"]], "polars.Expr.alias": [[260, "polars-expr-alias"]], "polars.dataframe.groupby.GroupBy.n_unique": [[242, "polars-dataframe-groupby-groupby-n-unique"]], "polars.dataframe.groupby.GroupBy.quantile": [[243, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.all": [[232, "polars-dataframe-groupby-groupby-all"]], "polars.Expr.all": [[261, "polars-expr-all"]], "polars.Expr.arctan": [[271, "polars-expr-arctan"]], "polars.Expr.arg_sort": [[275, "polars-expr-arg-sort"]], "polars.Expr.arcsinh": [[270, "polars-expr-arcsinh"]], "polars.Expr.arg_unique": [[277, "polars-expr-arg-unique"]], "polars.DataFrame.to_pandas": [[215, "polars-dataframe-to-pandas"]], "polars.DataFrame.var": [[225, "polars-dataframe-var"]], "polars.DataFrame.to_init_repr": [[213, "polars-dataframe-to-init-repr"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[70, "polars.build_info"]], "collect_all() (in module polars)": [[71, "polars.collect_all"]], "concat() (in module polars)": [[72, "polars.concat"]], "enable_string_cache() (in module polars)": [[73, "polars.enable_string_cache"]], "arrowerror": [[74, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[75, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[76, "polars.exceptions.ComputeError"]], "duplicateerror": [[77, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[78, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[79, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[80, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[81, "polars.exceptions.PolarsPanicError"]], "rowserror": [[82, "polars.exceptions.RowsError"]], "schemaerror": [[83, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[84, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[85, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[86, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[87, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[88, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[89, "polars.from_dataframe"]], "from_dict() (in module polars)": [[90, "polars.from_dict"]], "from_dicts() (in module polars)": [[91, "polars.from_dicts"]], "from_numpy() (in module polars)": [[92, "polars.from_numpy"]], "from_pandas() (in module polars)": [[93, "polars.from_pandas"]], "from_records() (in module polars)": [[94, "polars.from_records"]], "from_repr() (in module polars)": [[95, "polars.from_repr"]], "get_index_type() (in module polars)": [[96, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[97, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[98, "polars.read_avro"]], "read_csv() (in module polars)": [[99, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[100, "polars.read_csv_batched"]], "read_database() (in module polars)": [[101, "polars.read_database"]], "read_delta() (in module polars)": [[102, "polars.read_delta"]], "read_excel() (in module polars)": [[103, "polars.read_excel"]], "read_ipc() (in module polars)": [[104, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[105, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[106, "polars.read_json"]], "read_ndjson() (in module polars)": [[107, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[108, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[109, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[110, "polars.scan_csv"]], "scan_delta() (in module polars)": [[111, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[112, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[113, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[114, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[115, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[116, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[117, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[118, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[119, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[119, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[120, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[121, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[122, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[126, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[127, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[130, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[131, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[132, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[133, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[134, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[135, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[136, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[137, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[138, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[139, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[140, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[141, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[142, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[143, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[144, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[145, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[146, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[147, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[148, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[149, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[150, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[151, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[152, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[153, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[154, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[155, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[156, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[157, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[158, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[159, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[160, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[161, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[162, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[163, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[164, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[165, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[166, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[167, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[168, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[169, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[170, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[171, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[172, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[173, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[174, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[175, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[176, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[177, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[178, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[179, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[181, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[182, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[183, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[184, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[185, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[186, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[187, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[188, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[189, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[190, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[191, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[192, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[193, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[194, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[195, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[196, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[197, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[198, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[199, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[200, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[201, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[202, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[203, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[204, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[205, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[206, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[207, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[208, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[209, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[210, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[211, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[212, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[213, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[214, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[215, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[216, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[217, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[218, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[219, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[220, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[221, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[222, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[223, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[224, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[225, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[226, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[227, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[228, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[229, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[230, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[231, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[232, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[233, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[257, "polars.Expr.abs"]], "add() (polars.expr method)": [[258, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[259, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[260, "polars.Expr.alias"]], "all() (polars.expr method)": [[261, "polars.Expr.all"]], "and_() (polars.expr method)": [[262, "polars.Expr.and_"]], "any() (polars.expr method)": [[263, "polars.Expr.any"]], "append() (polars.expr method)": [[264, "polars.Expr.append"]], "apply() (polars.expr method)": [[265, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[266, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[267, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[268, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[269, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[270, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[271, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[272, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[273, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[274, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[275, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[276, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[277, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[278, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[279, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[280, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[281, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[282, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[283, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[284, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[285, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[286, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[287, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[288, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[289, "polars.Expr.cache"]], "cast() (polars.expr method)": [[290, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[291, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[292, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[293, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[294, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[295, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[296, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[297, "polars.Expr.cosh"]], "count() (polars.expr method)": [[298, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[299, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[300, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[301, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[302, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[303, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[304, "polars.Expr.cumulative_eval"]], "degrees() (polars.expr method)": [[305, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[306, "polars.Expr.diff"]], "dot() (polars.expr method)": [[307, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[308, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[309, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[310, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[311, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[312, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[313, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[314, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[315, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[316, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[317, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[318, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[319, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[320, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[321, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[322, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[323, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[324, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[325, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[328, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[329, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[330, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[331, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[332, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[333, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[335, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[336, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[337, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[338, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[339, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[340, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[341, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[342, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[343, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[344, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[345, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[346, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[347, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[348, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[349, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[350, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[351, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[352, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[353, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[354, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[355, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[356, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[357, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[358, "polars.Expr.exp"]], "explode() (polars.expr method)": [[359, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[360, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[361, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[362, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[363, "polars.Expr.filter"]], "first() (polars.expr method)": [[364, "polars.Expr.first"]], "flatten() (polars.expr method)": [[365, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[366, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[367, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[368, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[369, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[370, "polars.Expr.ge"]], "gt() (polars.expr method)": [[371, "polars.Expr.gt"]], "hash() (polars.expr method)": [[372, "polars.Expr.hash"]], "head() (polars.expr method)": [[373, "polars.Expr.head"]], "implode() (polars.expr method)": [[374, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[375, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[376, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[377, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[378, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[379, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[380, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[381, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[382, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[383, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[384, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[385, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[386, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[387, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[388, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[389, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[390, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[391, "polars.Expr.last"]], "le() (polars.expr method)": [[392, "polars.Expr.le"]], "len() (polars.expr method)": [[393, "polars.Expr.len"]], "limit() (polars.expr method)": [[394, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[395, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[396, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[397, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[398, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[399, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[400, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[401, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[402, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[403, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[404, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[405, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[406, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[407, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[408, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[409, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[410, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[411, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[412, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[413, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[414, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[415, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[416, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[417, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[418, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[419, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[420, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[421, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[422, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[423, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[424, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[425, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[426, "polars.Expr.log"]], "log10() (polars.expr method)": [[427, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[428, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[429, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[430, "polars.Expr.lt"]], "map() (polars.expr method)": [[431, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[432, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[433, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[434, "polars.Expr.max"]], "mean() (polars.expr method)": [[435, "polars.Expr.mean"]], "median() (polars.expr method)": [[436, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[437, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[438, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[439, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[440, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[441, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[442, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[443, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[444, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[445, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[446, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[447, "polars.Expr.min"]], "mod() (polars.expr method)": [[448, "polars.Expr.mod"]], "mode() (polars.expr method)": [[449, "polars.Expr.mode"]], "mul() (polars.expr method)": [[450, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[451, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[452, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[453, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[454, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[455, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[456, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[457, "polars.Expr.or_"]], "over() (polars.expr method)": [[458, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[459, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[460, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[461, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[462, "polars.Expr.prefix"]], "product() (polars.expr method)": [[463, "polars.Expr.product"]], "quantile() (polars.expr method)": [[464, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[465, "polars.Expr.radians"]], "rank() (polars.expr method)": [[466, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[467, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[468, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[469, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[470, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[471, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[472, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[473, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[474, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[475, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[476, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[477, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[478, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[479, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[480, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[481, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[482, "polars.Expr.round"]], "sample() (polars.expr method)": [[483, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[484, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[485, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[486, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[487, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[488, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[489, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[490, "polars.Expr.sign"]], "sin() (polars.expr method)": [[491, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[492, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[493, "polars.Expr.skew"]], "slice() (polars.expr method)": [[494, "polars.Expr.slice"]], "sort() (polars.expr method)": [[495, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[496, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[497, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[498, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[499, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[500, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[501, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[502, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[503, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[504, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[505, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[506, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[507, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[508, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[509, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[510, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[511, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[512, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[513, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[514, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[515, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[516, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[517, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[518, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[519, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[520, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[521, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[522, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[523, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[524, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[525, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[526, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[527, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[528, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[529, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[530, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[531, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[532, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[533, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[534, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[535, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[536, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[537, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[538, "polars.Expr.sum"]], "tail() (polars.expr method)": [[539, "polars.Expr.tail"]], "take() (polars.expr method)": [[540, "polars.Expr.take"]], "take_every() (polars.expr method)": [[541, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[542, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[543, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[544, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[545, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[546, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[547, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[548, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[549, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[550, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[551, "polars.Expr.var"]], "where() (polars.expr method)": [[552, "polars.Expr.where"]], "xor() (polars.expr method)": [[553, "polars.Expr.xor"]], "all() (in module polars)": [[554, "polars.all"]], "any() (in module polars)": [[555, "polars.any"]], "apply() (in module polars)": [[556, "polars.apply"]], "approx_unique() (in module polars)": [[557, "polars.approx_unique"]], "arange() (in module polars)": [[558, "polars.arange"]], "arg_sort_by() (in module polars)": [[559, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[560, "polars.arg_where"]], "avg() (in module polars)": [[561, "polars.avg"]], "coalesce() (in module polars)": [[562, "polars.coalesce"]], "col() (in module polars)": [[563, "polars.col"]], "concat_list() (in module polars)": [[564, "polars.concat_list"]], "concat_str() (in module polars)": [[565, "polars.concat_str"]], "corr() (in module polars)": [[566, "polars.corr"]], "count() (in module polars)": [[567, "polars.count"]], "cov() (in module polars)": [[568, "polars.cov"]], "cumfold() (in module polars)": [[569, "polars.cumfold"]], "cumreduce() (in module polars)": [[570, "polars.cumreduce"]], "cumsum() (in module polars)": [[571, "polars.cumsum"]], "date() (in module polars)": [[572, "polars.date"]], "date_range() (in module polars)": [[573, "polars.date_range"]], "datetime() (in module polars)": [[574, "polars.datetime"]], "duration() (in module polars)": [[575, "polars.duration"]], "element() (in module polars)": [[576, "polars.element"]], "exclude() (in module polars)": [[577, "polars.exclude"]], "first() (in module polars)": [[578, "polars.first"]], "fold() (in module polars)": [[579, "polars.fold"]], "format() (in module polars)": [[580, "polars.format"]], "from_epoch() (in module polars)": [[581, "polars.from_epoch"]], "groups() (in module polars)": [[582, "polars.groups"]], "head() (in module polars)": [[583, "polars.head"]], "implode() (in module polars)": [[584, "polars.implode"]], "int_range() (in module polars)": [[585, "polars.int_range"]], "int_ranges() (in module polars)": [[586, "polars.int_ranges"]], "lit() (in module polars)": [[587, "polars.lit"]], "map() (in module polars)": [[588, "polars.map"]], "max() (in module polars)": [[589, "polars.max"]], "mean() (in module polars)": [[590, "polars.mean"]], "median() (in module polars)": [[591, "polars.median"]], "min() (in module polars)": [[592, "polars.min"]], "n_unique() (in module polars)": [[593, "polars.n_unique"]], "ones() (in module polars)": [[594, "polars.ones"]], "quantile() (in module polars)": [[595, "polars.quantile"]], "reduce() (in module polars)": [[596, "polars.reduce"]], "repeat() (in module polars)": [[597, "polars.repeat"]], "rolling_corr() (in module polars)": [[598, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[599, "polars.rolling_cov"]], "select() (in module polars)": [[600, "polars.select"]], "sql_expr() (in module polars)": [[601, "polars.sql_expr"]], "std() (in module polars)": [[602, "polars.std"]], "struct() (in module polars)": [[603, "polars.struct"]], "sum() (in module polars)": [[604, "polars.sum"]], "tail() (in module polars)": [[605, "polars.tail"]], "time() (in module polars)": [[606, "polars.time"]], "time_range() (in module polars)": [[607, "polars.time_range"]], "var() (in module polars)": [[608, "polars.var"]], "when() (in module polars)": [[609, "polars.when"]], "zeros() (in module polars)": [[610, "polars.zeros"]], "bottom_k() (polars.lazyframe method)": [[632, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[633, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[634, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[635, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[636, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[637, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[638, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[639, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[640, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[641, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[642, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[643, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[644, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[645, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[646, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[647, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[648, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[649, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[650, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[651, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[652, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[653, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[654, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[655, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[656, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[657, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[658, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[659, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[660, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[661, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[662, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[663, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[664, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[665, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[666, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[667, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[668, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[669, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[670, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[671, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[672, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[673, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[674, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[675, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[676, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[677, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[678, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[679, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[680, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[681, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[682, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[683, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[684, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[685, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[686, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[687, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[688, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[689, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[690, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[691, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[692, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[693, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[694, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[695, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[696, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[697, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[698, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[699, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[700, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[701, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[702, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[703, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[704, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[705, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[706, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[707, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[708, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[709, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[710, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[711, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[712, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[719, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[719, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[719, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[719, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[719, "polars.selectors.datetime"]], "ends_with() (in module polars.selectors)": [[719, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[719, "polars.selectors.first"]], "float() (in module polars.selectors)": [[719, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[719, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[719, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[719, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[719, "polars.selectors.matches"]], "module": [[719, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[719, "polars.selectors.numeric"]], "polars.selectors": [[719, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[719, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[719, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[719, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[719, "polars.selectors.temporal"]], "abs() (polars.series method)": [[721, "polars.Series.abs"]], "alias() (polars.series method)": [[722, "polars.Series.alias"]], "all() (polars.series method)": [[723, "polars.Series.all"]], "any() (polars.series method)": [[724, "polars.Series.any"]], "append() (polars.series method)": [[725, "polars.Series.append"]], "apply() (polars.series method)": [[726, "polars.Series.apply"]], "arccos() (polars.series method)": [[727, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[728, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[729, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[730, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[731, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[732, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[733, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[734, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[735, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[736, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[737, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[738, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[739, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[740, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[741, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[742, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[743, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[744, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[745, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[746, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[747, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[748, "polars.Series.cast"]], "cat (polars.series attribute)": [[749, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[750, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[751, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[752, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[753, "polars.Series.clear"]], "clip() (polars.series method)": [[754, "polars.Series.clip"]], "clip_max() (polars.series method)": [[755, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[756, "polars.Series.clip_min"]], "clone() (polars.series method)": [[757, "polars.Series.clone"]], "cos() (polars.series method)": [[758, "polars.Series.cos"]], "cosh() (polars.series method)": [[759, "polars.Series.cosh"]], "cummax() (polars.series method)": [[760, "polars.Series.cummax"]], "cummin() (polars.series method)": [[761, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[762, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[763, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[764, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[765, "polars.Series.cut"]], "describe() (polars.series method)": [[766, "polars.Series.describe"]], "diff() (polars.series method)": [[767, "polars.Series.diff"]], "dot() (polars.series method)": [[768, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[769, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[770, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[771, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[772, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[773, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[774, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[775, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[776, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[777, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[778, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[779, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[780, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[781, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[782, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[783, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[784, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[785, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[786, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[787, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[788, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[789, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[790, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[791, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[792, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[793, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[794, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[795, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[796, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[797, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[798, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[799, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[800, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[801, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[802, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[803, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[804, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[805, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[806, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[807, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[808, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[809, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[810, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[811, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[812, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[813, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[814, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[815, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[816, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[817, "polars.Series.dtype"]], "entropy() (polars.series method)": [[818, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[819, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[820, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[821, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[822, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[823, "polars.Series.exp"]], "explode() (polars.series method)": [[824, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[825, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[826, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[827, "polars.Series.fill_null"]], "filter() (polars.series method)": [[828, "polars.Series.filter"]], "flags (polars.series attribute)": [[829, "polars.Series.flags"]], "floor() (polars.series method)": [[830, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[831, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[832, "polars.Series.has_validity"]], "hash() (polars.series method)": [[833, "polars.Series.hash"]], "head() (polars.series method)": [[834, "polars.Series.head"]], "hist() (polars.series method)": [[835, "polars.Series.hist"]], "implode() (polars.series method)": [[836, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[837, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[838, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[839, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[840, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[841, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[842, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[843, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[844, "polars.Series.is_first"]], "is_float() (polars.series method)": [[845, "polars.Series.is_float"]], "is_in() (polars.series method)": [[846, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[847, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[848, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[849, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[850, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[851, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[852, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[853, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[854, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[855, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[856, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[857, "polars.Series.is_utf8"]], "item() (polars.series method)": [[858, "polars.Series.item"]], "kurtosis() (polars.series method)": [[859, "polars.Series.kurtosis"]], "len() (polars.series method)": [[860, "polars.Series.len"]], "limit() (polars.series method)": [[861, "polars.Series.limit"]], "list (polars.series attribute)": [[862, "polars.Series.list"]], "all() (polars.series.list method)": [[863, "polars.Series.list.all"]], "any() (polars.series.list method)": [[864, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[865, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[866, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[867, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[868, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[869, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[870, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[871, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[872, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[873, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[874, "polars.Series.list.first"]], "get() (polars.series.list method)": [[875, "polars.Series.list.get"]], "head() (polars.series.list method)": [[876, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[877, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[878, "polars.Series.list.join"]], "last() (polars.series.list method)": [[879, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[880, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[881, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[882, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[883, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[884, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[885, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[886, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[887, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[888, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[889, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[890, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[891, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[892, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[893, "polars.Series.list.unique"]], "log() (polars.series method)": [[894, "polars.Series.log"]], "log10() (polars.series method)": [[895, "polars.Series.log10"]], "log1p() (polars.series method)": [[896, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[897, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[898, "polars.Series.map_dict"]], "max() (polars.series method)": [[899, "polars.Series.max"]], "mean() (polars.series method)": [[900, "polars.Series.mean"]], "median() (polars.series method)": [[901, "polars.Series.median"]], "min() (polars.series method)": [[902, "polars.Series.min"]], "mode() (polars.series method)": [[903, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[904, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[905, "polars.Series.n_unique"]], "name (polars.series attribute)": [[906, "polars.Series.name"]], "nan_max() (polars.series method)": [[907, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[908, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[909, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[910, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[911, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[912, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[913, "polars.Series.peak_min"]], "product() (polars.series method)": [[914, "polars.Series.product"]], "qcut() (polars.series method)": [[915, "polars.Series.qcut"]], "quantile() (polars.series method)": [[916, "polars.Series.quantile"]], "rank() (polars.series method)": [[917, "polars.Series.rank"]], "rechunk() (polars.series method)": [[918, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[919, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[920, "polars.Series.rename"]], "reshape() (polars.series method)": [[921, "polars.Series.reshape"]], "reverse() (polars.series method)": [[922, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[923, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[924, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[925, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[926, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[927, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[928, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[929, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[930, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[931, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[932, "polars.Series.rolling_var"]], "round() (polars.series method)": [[933, "polars.Series.round"]], "sample() (polars.series method)": [[934, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[935, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[936, "polars.Series.series_equal"]], "set() (polars.series method)": [[937, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[938, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[939, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[940, "polars.Series.shape"]], "shift() (polars.series method)": [[941, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[942, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[943, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[944, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[945, "polars.Series.shuffle"]], "sign() (polars.series method)": [[946, "polars.Series.sign"]], "sin() (polars.series method)": [[947, "polars.Series.sin"]], "sinh() (polars.series method)": [[948, "polars.Series.sinh"]], "skew() (polars.series method)": [[949, "polars.Series.skew"]], "slice() (polars.series method)": [[950, "polars.Series.slice"]], "sort() (polars.series method)": [[951, "polars.Series.sort"]], "sqrt() (polars.series method)": [[952, "polars.Series.sqrt"]], "std() (polars.series method)": [[953, "polars.Series.std"]], "str (polars.series attribute)": [[954, "polars.Series.str"]], "concat() (polars.series.str method)": [[955, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[956, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[957, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[958, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[959, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[960, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[961, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[962, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[963, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[964, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[965, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[966, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[967, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[968, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[969, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[970, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[971, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[972, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[973, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[974, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[975, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[976, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[977, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[978, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[979, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[980, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[981, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[982, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[983, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[984, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[985, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[986, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[987, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[988, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[989, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[990, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[991, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[992, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[993, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[994, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[995, "polars.Series.sum"]], "tail() (polars.series method)": [[996, "polars.Series.tail"]], "take() (polars.series method)": [[997, "polars.Series.take"]], "take_every() (polars.series method)": [[998, "polars.Series.take_every"]], "tan() (polars.series method)": [[999, "polars.Series.tan"]], "tanh() (polars.series method)": [[1000, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[1001, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[1002, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1003, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1004, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1005, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1006, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1007, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1008, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1009, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1010, "polars.Series.top_k"]], "unique() (polars.series method)": [[1011, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1012, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1013, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1014, "polars.Series.value_counts"]], "var() (polars.series method)": [[1015, "polars.Series.var"]], "view() (polars.series method)": [[1016, "polars.Series.view"]], "zip_with() (polars.series method)": [[1017, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1033, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1033, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1033, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1033, "polars.SQLContext.__init__"]]}})