Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.date_range", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.time_range", "reference/api/polars.using_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cache", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.difference", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.intersection", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.union", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.difference", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.intersection", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.union", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.date_range.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.time_range.rst", "reference/api/polars.using_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cache.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.difference.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.intersection.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.union.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.difference.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.intersection.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.union.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.date_range", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.time_range", "polars.using_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.bottom_k", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.dataframe.groupby.GroupBy.__iter__", "polars.dataframe.groupby.GroupBy.agg", "polars.dataframe.groupby.GroupBy.all", "polars.dataframe.groupby.GroupBy.apply", "polars.dataframe.groupby.GroupBy.count", "polars.dataframe.groupby.GroupBy.first", "polars.dataframe.groupby.GroupBy.head", "polars.dataframe.groupby.GroupBy.last", "polars.dataframe.groupby.GroupBy.max", "polars.dataframe.groupby.GroupBy.mean", "polars.dataframe.groupby.GroupBy.median", "polars.dataframe.groupby.GroupBy.min", "polars.dataframe.groupby.GroupBy.n_unique", "polars.dataframe.groupby.GroupBy.quantile", "polars.dataframe.groupby.GroupBy.sum", "polars.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cache", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.ge", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.diff", "polars.Expr.list.difference", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.intersection", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_struct", "polars.Expr.list.union", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_dict", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.any", "polars.apply", "polars.approx_unique", "polars.arange", "polars.arg_sort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.time", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.lazyframe.groupby.LazyGroupBy.agg", "polars.lazyframe.groupby.LazyGroupBy.all", "polars.lazyframe.groupby.LazyGroupBy.apply", "polars.lazyframe.groupby.LazyGroupBy.count", "polars.lazyframe.groupby.LazyGroupBy.first", "polars.lazyframe.groupby.LazyGroupBy.head", "polars.lazyframe.groupby.LazyGroupBy.last", "polars.lazyframe.groupby.LazyGroupBy.max", "polars.lazyframe.groupby.LazyGroupBy.mean", "polars.lazyframe.groupby.LazyGroupBy.median", "polars.lazyframe.groupby.LazyGroupBy.min", "polars.lazyframe.groupby.LazyGroupBy.n_unique", "polars.lazyframe.groupby.LazyGroupBy.quantile", "polars.lazyframe.groupby.LazyGroupBy.sum", "polars.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.diff", "polars.Series.list.difference", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.intersection", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_struct", "polars.Series.list.union", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 91, 118, 135, 136, 237, 255, 269, 610, 718, 1014], "refer": [0, 31, 102, 103, 106, 141, 255, 344, 347, 433, 465, 505, 524, 525, 526, 529, 610, 798, 801, 905, 969, 970, 971, 974, 1014], "input": [0, 65, 93, 102, 103, 106, 136, 137, 148, 159, 187, 201, 208, 222, 232, 235, 255, 262, 269, 359, 379, 427, 442, 457, 495, 552, 553, 554, 555, 557, 558, 560, 561, 562, 563, 569, 574, 575, 583, 584, 587, 594, 597, 598, 610, 621, 624, 634, 641, 667, 675, 680, 686, 690, 708, 718, 829, 883, 884, 886, 1014], "output": [0, 26, 28, 31, 32, 33, 34, 74, 106, 130, 136, 160, 161, 172, 182, 189, 198, 201, 228, 232, 255, 264, 269, 431, 432, 441, 549, 555, 564, 583, 610, 621, 642, 643, 652, 656, 657, 667, 686, 689, 692, 708, 718, 1002, 1014], "seri": [0, 1, 2, 23, 57, 66, 67, 68, 69, 70, 73, 74, 90, 92, 95, 97, 100, 121, 125, 130, 132, 136, 144, 152, 154, 156, 157, 161, 162, 165, 166, 168, 170, 178, 179, 183, 194, 195, 210, 214, 217, 220, 221, 236, 255, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280, 287, 295, 296, 300, 301, 309, 314, 316, 320, 323, 327, 329, 331, 336, 340, 341, 343, 348, 351, 361, 362, 368, 377, 379, 381, 382, 383, 384, 385, 387, 388, 389, 397, 398, 399, 405, 408, 410, 417, 418, 421, 422, 423, 429, 431, 460, 464, 465, 466, 467, 468, 469, 471, 477, 483, 484, 487, 490, 491, 498, 513, 518, 524, 525, 526, 529, 533, 539, 540, 541, 542, 548, 553, 554, 555, 556, 557, 559, 565, 567, 568, 569, 575, 576, 578, 580, 582, 583, 584, 585, 586, 587, 588, 590, 591, 594, 596, 597, 598, 599, 601, 610, 621, 638, 643, 691, 708, 1006, 1008, 1010, 1013, 1015, 1018, 1019, 1020, 1022], "datafram": [0, 1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 47, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 70, 72, 73, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 120, 122, 123, 130, 133, 253, 254, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 580, 583, 584, 585, 586, 587, 588, 590, 594, 595, 596, 597, 598, 599, 601, 602, 610, 621, 628, 630, 634, 635, 639, 642, 647, 648, 649, 650, 652, 656, 657, 661, 665, 672, 673, 674, 675, 681, 682, 683, 686, 687, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 717, 718, 732, 733, 742, 757, 758, 794, 825, 860, 903, 953, 965, 966, 982, 991, 992, 1002, 1014, 1021, 1022], "lazyfram": [0, 1, 50, 51, 53, 55, 65, 66, 67, 68, 69, 72, 73, 113, 114, 115, 116, 117, 118, 120, 125, 130, 176, 188, 255, 365, 423, 610, 621, 707, 711, 1021, 1022], "express": [0, 70, 72, 74, 100, 122, 125, 127, 130, 132, 136, 137, 148, 150, 152, 159, 185, 189, 197, 201, 208, 222, 232, 235, 237, 255, 262, 264, 265, 266, 268, 269, 280, 293, 297, 298, 299, 302, 308, 311, 315, 333, 334, 337, 344, 354, 355, 359, 362, 364, 365, 369, 371, 372, 373, 377, 379, 383, 386, 391, 394, 395, 401, 404, 423, 429, 430, 431, 432, 433, 437, 438, 439, 440, 441, 442, 445, 447, 449, 453, 454, 456, 457, 459, 460, 461, 462, 468, 482, 483, 484, 486, 488, 493, 495, 499, 500, 505, 506, 507, 508, 514, 515, 535, 536, 539, 545, 546, 548, 551, 552, 553, 554, 557, 558, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 573, 574, 575, 576, 577, 578, 582, 583, 584, 587, 590, 591, 592, 593, 594, 595, 597, 598, 600, 602, 609, 621, 624, 628, 633, 634, 635, 638, 641, 661, 667, 670, 671, 672, 673, 675, 680, 686, 687, 690, 692, 708, 711, 718, 746, 747, 748, 756, 765, 787, 788, 791, 815, 829, 857, 860, 923, 930, 944, 945, 950, 951, 952, 953, 959, 960, 1014], "selector": [0, 598, 621], "extend": [0, 93, 255, 362, 610, 621, 717, 815, 1014], "function": [0, 31, 65, 66, 67, 68, 69, 91, 97, 102, 103, 106, 113, 123, 136, 141, 147, 154, 181, 188, 189, 219, 223, 226, 227, 237, 255, 265, 269, 308, 341, 356, 357, 358, 423, 431, 432, 457, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 543, 553, 554, 555, 567, 568, 569, 575, 576, 578, 583, 584, 587, 590, 598, 610, 621, 652, 656, 660, 683, 692, 708, 718, 756, 795, 809, 810, 811, 812, 825, 879, 903, 911, 925, 926, 932, 937, 996, 1014, 1022], "data": [0, 1, 6, 16, 19, 29, 30, 31, 32, 36, 50, 56, 65, 66, 68, 73, 75, 80, 81, 85, 87, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 120, 121, 123, 124, 125, 127, 132, 135, 136, 139, 149, 158, 159, 160, 161, 172, 173, 174, 176, 187, 188, 192, 197, 198, 206, 213, 218, 219, 232, 234, 253, 255, 266, 269, 282, 283, 284, 285, 289, 294, 314, 342, 351, 354, 355, 372, 373, 378, 385, 387, 394, 425, 430, 453, 454, 456, 457, 465, 481, 482, 492, 505, 506, 524, 525, 526, 529, 543, 545, 546, 552, 557, 561, 582, 591, 610, 621, 626, 627, 635, 641, 642, 643, 660, 672, 673, 686, 708, 717, 718, 732, 733, 740, 745, 749, 762, 764, 805, 825, 881, 905, 921, 922, 932, 937, 969, 970, 971, 974, 994, 995, 996, 997, 999, 1004, 1013, 1014, 1021], "type": [0, 1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 72, 74, 80, 90, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 113, 114, 119, 120, 121, 124, 125, 130, 132, 136, 154, 158, 160, 161, 162, 173, 174, 213, 219, 221, 224, 255, 269, 294, 295, 297, 298, 299, 316, 320, 323, 327, 329, 331, 336, 340, 343, 359, 374, 381, 383, 384, 410, 423, 433, 468, 519, 520, 521, 524, 543, 555, 557, 561, 570, 571, 572, 574, 575, 582, 591, 600, 610, 621, 628, 633, 635, 642, 643, 647, 661, 671, 672, 673, 681, 708, 740, 742, 746, 747, 748, 766, 770, 773, 780, 782, 785, 790, 794, 797, 823, 866, 879, 932, 964, 965, 966, 969, 994, 995, 997, 1005, 1014, 1021], "config": [0, 65, 201, 232, 255, 572, 621, 667, 686, 708], "except": [0, 163, 175, 177, 211, 255, 574, 621, 648, 708, 711, 824, 851, 984, 995, 1004, 1014], "test": [0, 106, 621, 644, 651, 708], "util": [0, 97, 578, 621, 635, 708], "sql": [0, 29, 50, 54, 104, 174, 255, 595, 621], "These": [1, 31, 133, 255, 348, 609, 795, 802], "allow": [1, 30, 31, 56, 80, 91, 113, 115, 116, 117, 118, 125, 127, 135, 172, 175, 176, 197, 198, 199, 219, 224, 234, 255, 269, 337, 344, 347, 431, 467, 482, 524, 525, 526, 610, 647, 648, 652, 656, 672, 673, 681, 687, 708, 711, 718, 791, 798, 801, 907, 922, 924, 969, 970, 971, 996, 1014, 1022], "you": [1, 13, 31, 35, 55, 65, 73, 90, 92, 93, 94, 96, 100, 102, 103, 106, 107, 111, 113, 120, 132, 133, 136, 145, 149, 160, 161, 172, 185, 197, 198, 215, 218, 223, 237, 255, 269, 297, 298, 299, 333, 334, 340, 344, 347, 365, 379, 404, 423, 431, 433, 467, 472, 473, 474, 475, 476, 478, 479, 480, 509, 512, 524, 526, 557, 567, 576, 591, 610, 628, 631, 642, 643, 644, 648, 651, 671, 673, 708, 711, 717, 718, 746, 747, 748, 787, 788, 794, 798, 801, 829, 860, 907, 954, 957, 969, 971, 995, 1004, 1014, 1022], "regist": [1, 50, 52, 53, 54, 55, 66, 67, 68, 69, 126, 128, 1021], "custom": [1, 31, 66, 67, 68, 69, 126, 127, 128, 136, 237, 255, 269, 344, 347, 423, 431, 471, 555, 583, 610, 652, 692, 708, 718, 798, 801, 879, 911, 1014, 1022], "dedic": [1, 91, 172, 198, 255], "namespac": [1, 254, 609, 621, 707], "underli": [1, 76, 83, 90, 92, 93, 94, 96, 111, 122, 125, 127, 149, 172, 173, 198, 213, 255, 288, 314, 315, 319, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 340, 342, 349, 350, 351, 352, 467, 481, 499, 501, 610, 708, 711, 717, 735, 764, 765, 769, 772, 774, 775, 779, 781, 784, 786, 789, 792, 793, 794, 796, 803, 804, 805, 806, 907, 921, 932, 944, 946, 990, 995, 1014], "polar": [1, 255, 609, 610, 615, 621, 708, 711, 1014, 1021], "class": [1, 2, 3, 4, 5, 15, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 95, 122, 123, 219, 255, 610, 615, 621, 708, 994, 995, 1014, 1021], "without": [1, 6, 97, 105, 108, 112, 114, 118, 226, 227, 255, 269, 308, 341, 472, 473, 474, 475, 476, 478, 479, 480, 594, 610, 683, 708, 756, 762, 795, 825, 903, 1014], "requir": [1, 30, 31, 35, 65, 95, 120, 121, 141, 197, 219, 255, 285, 356, 357, 358, 425, 487, 524, 525, 526, 546, 591, 610, 673, 708, 733, 810, 811, 812, 881, 931, 969, 970, 971, 995, 996, 999, 1014], "subclass": [1, 255], "mixin": 1, "expr": [1, 65, 66, 67, 68, 69, 70, 74, 100, 130, 132, 148, 150, 152, 174, 175, 185, 189, 197, 201, 232, 255, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 610, 611, 612, 615, 616, 617, 618, 634, 636, 638, 647, 648, 662, 667, 670, 686, 708, 711, 756, 765, 816, 857, 860, 864, 874, 877, 930, 944, 948, 967, 985, 1014], "ar": [1, 6, 11, 15, 18, 26, 30, 31, 55, 56, 65, 73, 74, 75, 82, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 118, 120, 121, 123, 125, 133, 135, 136, 137, 141, 145, 147, 150, 154, 159, 160, 161, 172, 174, 175, 176, 181, 182, 187, 189, 197, 198, 201, 202, 208, 214, 219, 222, 227, 228, 232, 235, 255, 265, 304, 306, 307, 312, 313, 341, 348, 353, 355, 356, 357, 358, 379, 381, 383, 384, 385, 387, 388, 389, 392, 423, 433, 454, 457, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 489, 492, 494, 495, 507, 509, 512, 513, 524, 526, 537, 553, 554, 557, 558, 560, 562, 563, 564, 569, 584, 587, 594, 597, 598, 602, 603, 604, 606, 609, 610, 611, 612, 615, 616, 617, 618, 621, 624, 631, 636, 641, 642, 643, 644, 647, 648, 651, 652, 656, 657, 661, 664, 667, 668, 672, 673, 675, 680, 683, 686, 687, 690, 708, 711, 715, 717, 754, 755, 795, 802, 808, 809, 810, 811, 812, 822, 829, 833, 836, 837, 839, 840, 841, 842, 849, 879, 905, 909, 911, 917, 934, 937, 952, 954, 957, 958, 969, 971, 983, 995, 996, 1004, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1020, 1022], "all": [1, 8, 15, 18, 23, 26, 31, 36, 52, 65, 72, 74, 90, 93, 95, 96, 102, 103, 105, 106, 107, 111, 113, 115, 116, 122, 123, 127, 142, 145, 151, 163, 168, 170, 172, 173, 176, 177, 181, 184, 185, 192, 197, 198, 207, 211, 216, 224, 226, 228, 255, 266, 267, 268, 286, 302, 308, 313, 359, 364, 370, 374, 376, 378, 381, 384, 388, 389, 391, 395, 404, 410, 420, 423, 431, 432, 448, 455, 461, 465, 470, 487, 493, 495, 500, 506, 507, 508, 511, 514, 515, 517, 523, 536, 549, 561, 569, 574, 576, 581, 590, 597, 598, 602, 610, 615, 621, 628, 631, 633, 635, 637, 652, 656, 661, 671, 674, 681, 687, 708, 711, 756, 758, 762, 824, 831, 846, 851, 860, 866, 876, 879, 905, 938, 945, 951, 952, 953, 956, 959, 960, 962, 968, 984, 1014, 1021, 1022], "support": [1, 30, 31, 35, 73, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 106, 114, 122, 127, 133, 135, 172, 173, 174, 198, 207, 208, 215, 219, 255, 418, 457, 493, 495, 518, 561, 610, 615, 647, 674, 675, 708, 711, 874, 938, 963, 996, 1014, 1021], "target": [1, 30, 31, 71, 74, 255, 505, 524, 525, 526, 950, 969, 970, 971], "thi": [1, 6, 8, 12, 13, 26, 28, 30, 31, 33, 35, 39, 50, 51, 55, 56, 65, 72, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 127, 129, 130, 133, 135, 136, 141, 145, 146, 147, 149, 154, 159, 160, 161, 162, 166, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 187, 190, 191, 192, 197, 198, 199, 201, 205, 207, 209, 210, 213, 215, 218, 219, 223, 224, 226, 227, 228, 229, 230, 232, 233, 237, 238, 254, 255, 265, 268, 269, 270, 279, 285, 292, 293, 295, 302, 308, 314, 325, 333, 334, 337, 340, 341, 344, 347, 351, 355, 361, 377, 378, 379, 383, 395, 403, 404, 405, 409, 410, 419, 423, 424, 425, 428, 429, 431, 437, 438, 439, 440, 441, 442, 451, 452, 454, 457, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 486, 487, 488, 493, 494, 495, 505, 510, 511, 516, 517, 523, 524, 526, 527, 532, 544, 546, 547, 548, 549, 553, 554, 556, 557, 562, 565, 567, 569, 575, 576, 578, 584, 587, 591, 594, 598, 610, 621, 622, 625, 628, 631, 633, 635, 641, 642, 643, 645, 647, 648, 652, 656, 657, 661, 664, 667, 670, 671, 672, 673, 674, 681, 683, 686, 687, 688, 689, 692, 693, 707, 708, 711, 717, 718, 727, 733, 739, 742, 756, 762, 764, 765, 775, 787, 788, 791, 794, 795, 798, 801, 805, 809, 814, 821, 822, 825, 830, 835, 836, 838, 843, 845, 847, 848, 850, 859, 860, 861, 865, 866, 875, 880, 881, 885, 887, 888, 889, 890, 892, 893, 895, 896, 898, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 915, 918, 919, 920, 922, 925, 926, 927, 930, 931, 932, 933, 938, 939, 941, 950, 955, 956, 961, 962, 968, 969, 971, 972, 977, 978, 982, 983, 990, 992, 994, 995, 996, 998, 999, 1001, 1003, 1004, 1014, 1021, 1022], "featur": [1, 35, 39, 56, 71, 255], "i": [1, 6, 12, 13, 15, 28, 30, 31, 32, 33, 34, 39, 50, 55, 56, 65, 70, 71, 72, 73, 74, 77, 79, 80, 82, 86, 88, 90, 91, 92, 93, 94, 95, 96, 99, 102, 103, 104, 105, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 127, 129, 130, 135, 136, 145, 147, 155, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 185, 187, 188, 189, 197, 198, 199, 207, 208, 209, 210, 211, 213, 219, 223, 224, 226, 227, 228, 229, 237, 238, 254, 255, 262, 265, 267, 268, 269, 270, 280, 293, 302, 308, 315, 324, 337, 341, 344, 348, 356, 357, 358, 361, 374, 377, 379, 392, 404, 407, 418, 422, 423, 428, 431, 433, 437, 440, 442, 457, 465, 467, 469, 472, 473, 474, 475, 476, 478, 479, 480, 482, 483, 484, 488, 489, 492, 493, 494, 495, 497, 499, 500, 505, 506, 508, 510, 511, 513, 514, 516, 517, 518, 521, 523, 524, 525, 526, 529, 532, 549, 550, 553, 554, 556, 557, 561, 562, 564, 565, 567, 568, 569, 576, 582, 584, 587, 591, 592, 593, 594, 596, 598, 601, 602, 610, 628, 631, 633, 635, 641, 642, 643, 646, 647, 648, 650, 652, 656, 657, 661, 671, 672, 673, 674, 675, 676, 681, 683, 684, 689, 692, 693, 708, 711, 716, 717, 718, 756, 765, 774, 791, 795, 798, 802, 809, 810, 811, 812, 814, 822, 823, 824, 825, 828, 830, 832, 838, 843, 844, 845, 847, 848, 849, 851, 860, 863, 874, 878, 879, 903, 905, 907, 909, 918, 920, 922, 923, 924, 925, 926, 927, 933, 934, 937, 938, 941, 944, 945, 950, 951, 953, 955, 956, 958, 959, 961, 962, 963, 966, 968, 969, 970, 971, 974, 977, 984, 990, 995, 996, 1002, 1003, 1004, 1014, 1021, 1022], "primarili": 1, "intend": [1, 74], "us": [1, 10, 12, 13, 18, 23, 24, 28, 29, 31, 35, 50, 51, 52, 53, 55, 56, 65, 73, 74, 91, 93, 94, 96, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 126, 127, 129, 130, 132, 136, 143, 145, 150, 151, 154, 159, 160, 161, 168, 170, 172, 173, 175, 179, 181, 184, 185, 188, 189, 197, 198, 199, 201, 208, 209, 210, 216, 217, 219, 223, 224, 226, 227, 228, 229, 232, 235, 237, 255, 263, 269, 270, 280, 288, 289, 293, 295, 308, 312, 313, 340, 344, 347, 351, 353, 356, 357, 358, 364, 365, 378, 379, 392, 404, 423, 431, 433, 436, 457, 465, 467, 469, 472, 473, 474, 475, 476, 478, 479, 480, 482, 484, 487, 488, 492, 494, 495, 497, 499, 501, 502, 503, 505, 506, 507, 509, 510, 514, 516, 518, 520, 522, 524, 525, 526, 529, 550, 553, 554, 555, 556, 557, 561, 563, 564, 567, 569, 576, 578, 582, 584, 587, 591, 592, 593, 594, 596, 597, 598, 601, 609, 610, 620, 621, 628, 630, 631, 636, 637, 641, 642, 643, 644, 648, 650, 651, 656, 667, 673, 675, 676, 681, 683, 684, 686, 690, 692, 708, 711, 718, 735, 736, 742, 756, 794, 798, 801, 805, 808, 810, 811, 812, 816, 817, 822, 825, 829, 849, 860, 879, 886, 905, 907, 909, 922, 925, 926, 927, 931, 933, 937, 941, 944, 946, 947, 950, 951, 952, 954, 955, 959, 961, 963, 965, 969, 970, 971, 974, 985, 991, 993, 994, 995, 996, 1003, 1004, 1014, 1021, 1022], "librari": [1, 76, 83, 431, 610, 1022], "author": 1, "domain": [1, 506, 951], "specif": [1, 26, 30, 31, 90, 92, 94, 96, 102, 104, 105, 114, 124, 125, 172, 255, 344, 347, 471, 524, 525, 526, 529, 610, 708, 798, 801, 911, 969, 970, 971, 974, 1014, 1022], "capabl": [1, 31, 255], "which": [1, 9, 18, 27, 28, 31, 32, 33, 34, 35, 65, 66, 67, 68, 69, 93, 102, 103, 104, 105, 106, 113, 114, 120, 126, 128, 137, 145, 149, 160, 161, 175, 218, 222, 224, 228, 255, 265, 337, 341, 344, 348, 362, 379, 381, 384, 385, 387, 388, 389, 423, 442, 472, 473, 474, 475, 476, 478, 479, 480, 513, 602, 610, 624, 631, 633, 642, 643, 648, 672, 673, 680, 681, 689, 708, 717, 791, 795, 798, 802, 815, 829, 833, 837, 839, 840, 841, 842, 879, 925, 958, 1014, 1022], "mai": [1, 30, 39, 73, 74, 90, 92, 93, 94, 96, 102, 105, 107, 114, 115, 118, 136, 147, 149, 160, 161, 175, 204, 205, 219, 226, 227, 228, 255, 269, 308, 314, 325, 337, 341, 348, 417, 422, 423, 431, 441, 472, 473, 474, 475, 476, 478, 479, 480, 485, 486, 524, 526, 567, 568, 576, 590, 610, 642, 643, 648, 652, 669, 670, 673, 683, 688, 692, 708, 717, 718, 756, 764, 775, 791, 795, 802, 809, 825, 873, 878, 903, 929, 930, 969, 971, 1014, 1022], "exist": [1, 29, 30, 31, 65, 105, 114, 125, 232, 255, 287, 290, 291, 315, 686, 708, 765], "belong": [1, 160, 255, 642, 708], "core": [1, 219, 255, 1022], "cannot": [1, 91, 102, 103, 106, 107, 120, 129, 136, 199, 237, 255, 288, 433, 482, 501, 520, 534, 610, 671, 708, 718, 735, 922, 946, 965, 1014], "overrid": [1, 31, 90, 92, 93, 94, 95, 96, 102, 122, 123, 127, 129, 255, 433, 610, 708, 886, 1014], "str": [1, 7, 9, 12, 14, 15, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 50, 51, 52, 53, 54, 55, 56, 65, 66, 67, 68, 69, 71, 74, 75, 90, 92, 93, 94, 96, 97, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 125, 126, 127, 128, 130, 133, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 153, 154, 156, 158, 159, 160, 161, 163, 165, 168, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 187, 189, 191, 193, 194, 195, 196, 197, 198, 199, 202, 204, 205, 207, 208, 209, 210, 211, 214, 215, 216, 217, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 269, 287, 289, 290, 291, 311, 316, 337, 340, 341, 344, 347, 348, 359, 361, 365, 367, 371, 377, 379, 386, 399, 400, 407, 408, 410, 418, 421, 423, 432, 433, 441, 443, 445, 457, 459, 461, 468, 470, 472, 473, 474, 475, 476, 478, 479, 480, 486, 487, 494, 495, 533, 534, 536, 539, 551, 552, 553, 555, 556, 559, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 585, 586, 588, 589, 590, 591, 592, 593, 595, 596, 597, 599, 600, 601, 610, 616, 624, 628, 629, 630, 631, 633, 634, 635, 638, 640, 641, 642, 643, 645, 647, 648, 656, 657, 661, 663, 664, 665, 668, 670, 671, 672, 673, 674, 675, 680, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 740, 757, 758, 766, 791, 794, 795, 798, 801, 802, 814, 817, 856, 857, 866, 879, 886, 895, 896, 903, 908, 925, 926, 978, 980, 991, 992, 993, 1014, 1018, 1021, 1022], "dt": [1, 65, 74, 161, 255, 572, 618, 643, 708, 711, 1020], "attempt": [1, 74, 218, 255], "do": [1, 31, 65, 72, 73, 100, 113, 132, 149, 160, 161, 175, 189, 213, 223, 226, 255, 308, 404, 457, 511, 517, 523, 591, 610, 628, 633, 642, 643, 648, 652, 661, 671, 672, 673, 708, 711, 717, 756, 860, 956, 962, 968, 995, 1004, 1014], "so": [1, 56, 104, 113, 129, 158, 160, 161, 189, 255, 280, 293, 379, 407, 423, 511, 517, 523, 610, 642, 643, 708, 863, 956, 962, 968], "rais": [1, 14, 18, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 120, 121, 189, 197, 255, 288, 340, 422, 441, 499, 501, 513, 524, 525, 526, 529, 582, 735, 794, 878, 944, 946, 958, 969, 970, 971, 974, 995, 1004, 1014], "an": [1, 6, 26, 29, 30, 31, 39, 66, 68, 69, 70, 72, 74, 76, 80, 81, 83, 90, 100, 102, 103, 104, 105, 106, 108, 111, 113, 115, 123, 125, 127, 130, 132, 136, 138, 139, 147, 150, 152, 154, 160, 161, 172, 173, 175, 185, 189, 195, 197, 213, 218, 226, 232, 237, 255, 264, 265, 269, 288, 294, 297, 298, 299, 303, 304, 305, 306, 307, 308, 315, 340, 344, 351, 362, 364, 365, 371, 391, 401, 404, 407, 422, 423, 431, 432, 442, 462, 471, 472, 473, 474, 475, 476, 478, 479, 480, 499, 501, 506, 524, 525, 526, 529, 539, 545, 553, 554, 557, 561, 569, 573, 578, 582, 584, 587, 590, 591, 594, 597, 598, 602, 610, 621, 626, 627, 628, 633, 635, 638, 642, 643, 648, 652, 661, 671, 686, 687, 692, 708, 711, 718, 735, 740, 745, 746, 747, 748, 749, 752, 753, 754, 755, 756, 765, 794, 798, 805, 809, 815, 838, 857, 860, 863, 878, 911, 912, 913, 914, 915, 916, 918, 919, 920, 925, 926, 944, 946, 951, 969, 970, 971, 974, 995, 1004, 1014, 1021], "attributeerror": 1, "howev": [1, 74, 93, 147, 255, 809, 1014], "can": [1, 13, 31, 55, 65, 74, 81, 93, 102, 103, 106, 107, 111, 113, 115, 117, 118, 123, 124, 125, 127, 129, 130, 133, 136, 137, 138, 146, 154, 160, 161, 168, 170, 185, 189, 201, 208, 218, 222, 223, 226, 232, 237, 255, 269, 293, 304, 307, 308, 333, 334, 337, 340, 348, 362, 378, 379, 404, 423, 441, 448, 457, 467, 472, 473, 474, 475, 476, 478, 479, 480, 484, 487, 489, 492, 495, 508, 511, 517, 523, 524, 526, 549, 557, 558, 561, 576, 578, 602, 609, 610, 620, 624, 628, 633, 642, 643, 667, 675, 680, 686, 688, 708, 711, 718, 756, 787, 788, 791, 794, 795, 802, 815, 829, 860, 879, 891, 907, 925, 926, 927, 931, 934, 937, 953, 956, 962, 968, 969, 971, 1014, 1021], "other": [1, 18, 31, 55, 74, 102, 103, 106, 113, 120, 121, 145, 149, 155, 174, 175, 181, 182, 197, 201, 227, 232, 253, 255, 262, 266, 268, 280, 297, 298, 299, 311, 354, 355, 369, 372, 373, 379, 383, 394, 399, 403, 409, 424, 430, 433, 437, 440, 447, 449, 453, 454, 456, 495, 535, 543, 545, 552, 553, 554, 560, 562, 563, 569, 584, 587, 594, 597, 598, 610, 621, 631, 647, 648, 656, 657, 667, 683, 686, 687, 708, 711, 717, 746, 747, 748, 760, 836, 855, 859, 865, 880, 924, 997, 1005, 1013, 1014], "onli": [1, 18, 26, 31, 50, 52, 56, 65, 71, 73, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 125, 127, 133, 136, 145, 160, 161, 172, 174, 175, 179, 198, 210, 215, 217, 228, 255, 263, 269, 280, 293, 296, 297, 298, 299, 337, 359, 368, 457, 467, 472, 473, 474, 475, 476, 478, 479, 480, 547, 610, 628, 631, 642, 643, 644, 647, 648, 651, 708, 743, 746, 747, 748, 791, 820, 838, 907, 990, 993, 1014, 1021, 1022], "gener": [1, 74, 104, 122, 123, 124, 125, 127, 130, 141, 189, 199, 216, 223, 255, 482, 488, 557, 591, 610, 708, 922, 933, 991, 1014, 1022], "userwarn": 1, "pl": [1, 2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 127, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 740, 742, 743, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 858, 860, 861, 864, 866, 868, 873, 874, 875, 877, 879, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 900, 901, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 933, 934, 935, 936, 938, 939, 940, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1021, 1022], "register_expr_namespac": [1, 66, 68, 69], "greet": 1, "def": [1, 66, 67, 68, 69, 123, 124, 125, 127, 133, 188, 223, 255, 262, 459, 506, 552, 583, 610, 660, 708, 711, 951, 1022], "__init__": [1, 2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 122, 1021], "self": [1, 51, 52, 53, 55, 66, 67, 68, 69, 72, 138, 139, 142, 149, 163, 165, 166, 177, 178, 179, 180, 181, 183, 186, 187, 189, 191, 192, 194, 195, 199, 204, 206, 207, 209, 210, 211, 216, 223, 225, 228, 229, 230, 233, 234, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 286, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 610, 624, 625, 627, 628, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 708, 717, 718, 740, 749, 818, 826, 885, 886, 897, 900, 901, 906, 925, 926, 927, 939, 1001, 1005, 1014], "_expr": [1, 67], "hello": [1, 18, 51, 54, 511, 517, 523, 553, 866, 956, 962, 968], "return": [1, 9, 26, 28, 31, 32, 33, 34, 50, 54, 65, 66, 67, 68, 69, 70, 71, 72, 74, 82, 84, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 124, 130, 131, 132, 136, 137, 138, 141, 144, 145, 146, 147, 148, 150, 151, 154, 158, 159, 160, 161, 163, 165, 171, 172, 173, 174, 176, 177, 184, 185, 187, 188, 189, 197, 198, 199, 211, 212, 218, 219, 222, 223, 224, 228, 232, 234, 237, 240, 244, 249, 255, 265, 267, 271, 272, 273, 274, 275, 276, 279, 280, 287, 289, 290, 291, 292, 300, 301, 309, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 346, 348, 349, 350, 352, 361, 375, 379, 381, 382, 383, 384, 385, 387, 388, 389, 396, 397, 398, 400, 405, 407, 408, 410, 421, 422, 429, 433, 442, 448, 459, 464, 468, 469, 482, 483, 489, 490, 491, 498, 500, 502, 504, 505, 506, 508, 509, 510, 512, 513, 516, 518, 519, 520, 521, 532, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 552, 553, 554, 555, 557, 558, 561, 570, 571, 572, 578, 580, 582, 583, 591, 594, 597, 599, 600, 602, 610, 624, 626, 628, 631, 632, 633, 635, 642, 643, 644, 650, 651, 652, 660, 661, 671, 672, 673, 678, 679, 680, 681, 686, 689, 695, 699, 704, 708, 711, 714, 715, 716, 718, 725, 726, 728, 729, 734, 736, 739, 745, 757, 758, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 799, 800, 802, 803, 804, 806, 809, 814, 822, 824, 825, 831, 833, 834, 836, 837, 839, 840, 841, 842, 846, 848, 851, 853, 854, 856, 861, 863, 864, 866, 877, 878, 885, 886, 891, 903, 909, 910, 922, 923, 924, 926, 934, 943, 944, 945, 947, 949, 950, 951, 953, 954, 955, 957, 958, 961, 963, 964, 965, 966, 977, 984, 986, 998, 1000, 1001, 1005, 1014, 1021, 1022], "lit": [1, 100, 132, 379, 391, 567, 576, 591, 602, 610, 817, 1014], "alia": [1, 12, 65, 67, 69, 74, 130, 160, 161, 177, 225, 232, 255, 262, 266, 269, 287, 289, 290, 291, 292, 297, 298, 299, 303, 304, 305, 306, 307, 310, 314, 315, 316, 319, 320, 321, 323, 325, 326, 327, 329, 331, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 354, 355, 365, 367, 369, 372, 373, 377, 379, 382, 383, 391, 394, 395, 396, 401, 404, 430, 432, 433, 444, 447, 449, 453, 454, 456, 458, 460, 461, 465, 467, 483, 499, 500, 503, 505, 506, 509, 512, 518, 520, 521, 522, 533, 534, 535, 536, 543, 544, 545, 551, 552, 553, 554, 555, 559, 560, 562, 563, 567, 568, 569, 572, 573, 576, 577, 583, 584, 587, 590, 591, 597, 598, 602, 610, 642, 643, 645, 651, 682, 686, 708, 764, 766, 771, 791, 794, 798, 800, 805, 851, 860, 886, 950, 951, 965, 966, 1014], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 18, 51, 54, 511, 517, 523, 530, 866, 956, 962, 968, 975], "select": [1, 29, 50, 51, 52, 65, 66, 67, 68, 70, 74, 101, 102, 103, 104, 105, 107, 111, 113, 118, 124, 136, 171, 175, 185, 188, 197, 207, 220, 225, 228, 255, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 296, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 366, 368, 370, 374, 376, 377, 378, 380, 381, 383, 384, 386, 390, 391, 392, 393, 395, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 446, 448, 450, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 477, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 507, 508, 510, 511, 513, 516, 517, 519, 520, 521, 523, 524, 527, 528, 530, 531, 533, 534, 536, 537, 540, 541, 542, 544, 546, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 572, 574, 575, 576, 577, 578, 580, 584, 585, 586, 587, 588, 590, 591, 595, 596, 597, 598, 599, 601, 610, 629, 645, 648, 660, 674, 682, 687, 689, 708, 711, 732, 733, 794, 860, 925, 926, 938, 953, 969, 985, 1014, 1021], "shape": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 47, 50, 51, 52, 54, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 87, 90, 92, 93, 94, 95, 96, 97, 100, 113, 118, 125, 127, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 174, 175, 178, 179, 180, 181, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 580, 583, 584, 585, 586, 587, 588, 590, 591, 594, 595, 596, 597, 598, 599, 601, 602, 610, 624, 626, 628, 630, 631, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 667, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 739, 740, 742, 743, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 831, 833, 836, 837, 839, 840, 841, 842, 846, 848, 858, 860, 861, 864, 866, 868, 873, 874, 875, 877, 879, 885, 886, 891, 899, 900, 901, 903, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 925, 926, 929, 933, 934, 935, 936, 938, 939, 940, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 982, 984, 985, 986, 987, 988, 991, 992, 993, 997, 998, 999, 1000, 1001, 1002, 1005, 1014, 1021], "3": [1, 2, 10, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 104, 106, 113, 118, 119, 120, 121, 124, 125, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 264, 265, 269, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 330, 332, 338, 339, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 390, 391, 392, 394, 395, 396, 400, 401, 402, 404, 405, 406, 407, 408, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 426, 427, 428, 429, 430, 432, 433, 447, 448, 449, 453, 454, 455, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 494, 495, 496, 499, 502, 503, 505, 506, 507, 509, 512, 514, 518, 519, 520, 521, 522, 525, 529, 533, 534, 535, 536, 538, 539, 540, 544, 547, 548, 549, 551, 552, 553, 554, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 577, 580, 582, 583, 584, 585, 586, 587, 590, 591, 594, 596, 597, 598, 599, 601, 602, 610, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 717, 718, 719, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 740, 742, 743, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 769, 770, 771, 772, 774, 776, 777, 778, 780, 782, 783, 784, 786, 790, 792, 794, 795, 796, 798, 800, 801, 802, 804, 805, 809, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 849, 850, 858, 860, 861, 864, 868, 873, 874, 875, 877, 879, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 933, 935, 936, 937, 938, 939, 941, 947, 948, 950, 951, 952, 954, 957, 959, 963, 967, 970, 974, 982, 983, 984, 985, 986, 987, 988, 990, 991, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1014, 1021, 1022], "1": [1, 2, 10, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 104, 105, 106, 107, 113, 114, 118, 119, 120, 121, 122, 125, 127, 130, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 610, 624, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 740, 742, 743, 744, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 848, 850, 858, 860, 861, 863, 864, 868, 873, 874, 875, 877, 879, 885, 887, 888, 889, 890, 891, 892, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 950, 952, 953, 959, 965, 966, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1021, 1022], "2": [1, 2, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 104, 113, 118, 119, 120, 121, 124, 125, 127, 130, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 266, 267, 268, 269, 270, 277, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 310, 311, 315, 316, 320, 322, 323, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 492, 493, 494, 495, 496, 498, 500, 503, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 523, 524, 526, 527, 528, 530, 531, 533, 534, 535, 536, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 590, 594, 595, 596, 597, 598, 599, 601, 602, 610, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 714, 717, 718, 720, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 742, 743, 744, 745, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 765, 767, 768, 772, 777, 778, 784, 786, 787, 788, 793, 794, 795, 796, 799, 802, 804, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 850, 858, 860, 861, 864, 866, 868, 873, 874, 875, 877, 879, 882, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 933, 935, 937, 938, 939, 940, 941, 943, 945, 950, 951, 952, 953, 956, 957, 958, 959, 960, 962, 965, 966, 968, 969, 971, 972, 973, 975, 976, 982, 983, 984, 985, 986, 987, 990, 991, 992, 993, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1005, 1014, 1021, 1022], "column_0": [1, 136, 223, 255], "register_dataframe_namespac": [1, 67, 68, 69], "split": [1, 66, 173, 255, 520, 521, 965, 966], "splitfram": [1, 66], "df": [1, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 47, 50, 51, 66, 67, 70, 90, 91, 92, 93, 94, 95, 96, 97, 103, 113, 123, 125, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 580, 583, 584, 585, 586, 587, 588, 590, 594, 595, 596, 597, 598, 599, 601, 602, 610, 642, 643, 682, 683, 689, 692, 695, 704, 708, 711, 732, 733, 742, 794, 860, 953, 960, 965, 966, 992, 1014, 1022], "_df": [1, 66], "by_alternate_row": 1, "list": [1, 2, 30, 31, 38, 50, 54, 65, 66, 68, 72, 90, 92, 93, 94, 96, 97, 99, 101, 102, 103, 104, 105, 107, 111, 113, 114, 123, 124, 125, 127, 130, 140, 143, 146, 147, 148, 152, 157, 159, 160, 165, 172, 184, 187, 197, 198, 201, 208, 214, 215, 223, 224, 225, 226, 232, 235, 236, 255, 263, 285, 361, 367, 376, 431, 442, 443, 457, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 494, 495, 506, 519, 533, 534, 539, 543, 557, 558, 561, 562, 569, 573, 581, 582, 597, 598, 610, 629, 630, 632, 634, 638, 641, 642, 656, 667, 675, 681, 682, 686, 687, 690, 691, 708, 733, 744, 757, 809, 814, 818, 821, 825, 826, 836, 903, 909, 911, 912, 913, 914, 915, 916, 918, 919, 920, 923, 951, 964, 985, 994, 997, 1014, 1022], "with_row_count": [1, 255, 433, 472, 473, 475, 478, 479, 480, 610, 708, 926, 1014], "name": [1, 16, 20, 22, 29, 31, 33, 51, 52, 53, 54, 55, 66, 67, 68, 69, 73, 74, 79, 90, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 117, 121, 122, 123, 125, 126, 127, 128, 130, 136, 137, 140, 143, 144, 145, 148, 153, 156, 158, 159, 171, 172, 174, 175, 181, 187, 189, 193, 197, 198, 200, 201, 208, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 255, 264, 269, 287, 289, 290, 291, 359, 379, 391, 423, 432, 441, 443, 457, 461, 495, 506, 533, 534, 536, 553, 554, 556, 558, 560, 561, 562, 563, 564, 566, 569, 574, 580, 581, 584, 587, 589, 591, 592, 593, 594, 597, 598, 599, 610, 624, 629, 630, 631, 634, 641, 647, 648, 656, 664, 666, 667, 675, 680, 681, 682, 683, 686, 688, 689, 690, 708, 711, 714, 745, 757, 879, 903, 908, 950, 951, 959, 978, 980, 991, 992, 996, 1014, 1021, 1022], "n": [1, 12, 15, 23, 34, 38, 40, 52, 53, 66, 67, 68, 69, 74, 99, 100, 102, 103, 113, 132, 136, 138, 149, 160, 163, 172, 173, 177, 198, 199, 209, 211, 212, 215, 217, 229, 240, 249, 255, 292, 308, 310, 314, 315, 321, 346, 351, 362, 375, 396, 402, 408, 421, 423, 458, 459, 468, 478, 480, 482, 492, 497, 514, 517, 520, 521, 523, 526, 538, 540, 544, 545, 550, 552, 564, 578, 580, 591, 592, 593, 596, 599, 601, 610, 626, 628, 642, 644, 651, 676, 678, 679, 684, 695, 704, 708, 711, 717, 739, 745, 756, 759, 764, 765, 771, 800, 805, 815, 824, 851, 858, 864, 877, 879, 899, 918, 920, 922, 937, 941, 959, 965, 966, 971, 984, 986, 993, 998, 1003, 1014, 1021, 1022], "filter": [1, 66, 105, 113, 114, 118, 145, 168, 169, 170, 237, 255, 503, 522, 551, 576, 610, 631, 635, 645, 692, 708, 925, 1014], "col": [1, 12, 28, 31, 65, 66, 67, 68, 70, 94, 96, 113, 123, 125, 136, 148, 152, 159, 160, 161, 169, 171, 176, 185, 188, 197, 201, 208, 225, 232, 235, 255, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 377, 378, 379, 380, 382, 383, 385, 386, 387, 390, 391, 392, 393, 394, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 423, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 446, 447, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 530, 531, 532, 533, 534, 535, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 557, 560, 562, 563, 567, 568, 569, 572, 575, 576, 577, 578, 579, 584, 587, 589, 590, 598, 602, 610, 627, 634, 638, 641, 642, 643, 645, 650, 660, 667, 675, 682, 686, 687, 690, 708, 711, 732, 733, 742, 791, 794, 860, 909, 925, 926, 953, 969, 1014, 1022], "0": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 35, 47, 50, 55, 65, 66, 67, 69, 70, 74, 100, 102, 103, 104, 106, 107, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 130, 132, 136, 138, 139, 141, 142, 143, 146, 150, 151, 154, 155, 157, 158, 159, 160, 162, 166, 171, 172, 173, 174, 176, 178, 179, 180, 183, 184, 185, 186, 189, 190, 191, 195, 198, 199, 200, 201, 205, 207, 208, 209, 210, 216, 217, 218, 219, 220, 223, 226, 228, 229, 232, 233, 235, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 261, 263, 266, 271, 272, 273, 274, 275, 276, 279, 280, 281, 294, 296, 298, 299, 300, 301, 303, 308, 309, 312, 313, 322, 326, 327, 329, 330, 336, 342, 343, 354, 355, 356, 357, 358, 360, 362, 363, 364, 368, 369, 372, 373, 374, 378, 381, 384, 385, 387, 388, 389, 391, 392, 394, 397, 398, 401, 404, 407, 414, 423, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 446, 447, 449, 451, 452, 453, 454, 455, 456, 458, 459, 460, 463, 464, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 489, 490, 491, 492, 496, 497, 505, 506, 524, 526, 532, 535, 537, 541, 542, 543, 545, 550, 557, 558, 559, 560, 562, 564, 566, 567, 571, 573, 576, 585, 586, 589, 590, 591, 600, 601, 602, 610, 626, 627, 630, 632, 636, 637, 641, 642, 647, 650, 655, 659, 661, 662, 666, 667, 670, 671, 673, 675, 676, 684, 686, 687, 688, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 711, 719, 720, 721, 722, 723, 724, 725, 727, 729, 740, 743, 745, 750, 751, 756, 757, 758, 760, 772, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 796, 797, 808, 810, 811, 812, 816, 820, 823, 825, 833, 835, 837, 839, 840, 841, 842, 848, 849, 860, 863, 879, 885, 888, 889, 899, 903, 904, 905, 911, 913, 914, 916, 917, 918, 920, 921, 922, 934, 935, 936, 940, 941, 943, 950, 951, 953, 969, 971, 977, 987, 988, 991, 996, 997, 1001, 1003, 1004, 1014, 1022], "drop": [1, 93, 136, 144, 145, 224, 232, 255, 310, 312, 313, 402, 610, 631, 681, 686, 708, 759, 761, 762, 858, 1014], "aaa": [1, 31, 255, 499, 533, 534, 944], "bbb": [1, 31, 255, 533, 534, 711], "ccc": [1, 31, 255, 533, 534], "ddd": [1, 31, 255, 533, 534], "eee": [1, 31, 255, 711], "fff": 1, "column": [1, 15, 16, 19, 20, 22, 31, 33, 56, 65, 66, 73, 74, 77, 79, 90, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 107, 108, 111, 112, 113, 114, 115, 116, 117, 120, 125, 130, 132, 135, 136, 137, 143, 144, 145, 146, 148, 153, 156, 158, 159, 160, 161, 165, 166, 171, 172, 174, 175, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 200, 201, 202, 208, 209, 210, 214, 216, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 255, 265, 267, 269, 279, 315, 319, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 342, 344, 347, 349, 350, 352, 359, 361, 365, 367, 379, 391, 399, 405, 419, 422, 423, 433, 439, 441, 443, 457, 461, 466, 468, 469, 472, 473, 474, 475, 476, 478, 479, 480, 487, 494, 495, 504, 520, 521, 524, 525, 526, 527, 529, 536, 551, 553, 554, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 578, 579, 580, 581, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 610, 624, 630, 631, 632, 634, 641, 642, 643, 647, 648, 652, 653, 654, 655, 656, 658, 659, 660, 662, 664, 666, 667, 668, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 708, 711, 715, 716, 757, 767, 768, 769, 772, 774, 775, 779, 781, 784, 786, 789, 792, 793, 796, 798, 799, 801, 803, 804, 806, 814, 855, 861, 875, 878, 903, 909, 931, 949, 965, 966, 969, 970, 971, 972, 974, 982, 991, 992, 1014, 1022], "txt": [1, 12, 113], "utf8": [1, 10, 18, 56, 75, 93, 97, 102, 103, 113, 122, 124, 127, 146, 147, 148, 154, 200, 218, 255, 344, 347, 410, 433, 498, 502, 505, 506, 508, 509, 518, 519, 520, 521, 524, 525, 526, 527, 529, 561, 563, 610, 632, 634, 666, 708, 711, 798, 801, 847, 866, 943, 947, 950, 951, 953, 954, 963, 964, 965, 966, 969, 970, 971, 972, 974, 1014], "register_lazyframe_namespac": [1, 66, 67, 69], "dtypeoper": [1, 68], "ldf": [1, 68, 690, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703], "_ldf": [1, 68], "upcast_integer_typ": [1, 68], "with_column": [1, 12, 68, 130, 161, 188, 255, 262, 269, 280, 289, 294, 295, 297, 298, 299, 304, 307, 310, 340, 344, 347, 354, 355, 363, 364, 369, 372, 373, 374, 378, 379, 382, 385, 387, 388, 389, 391, 394, 404, 430, 432, 433, 447, 449, 453, 454, 457, 458, 459, 460, 465, 472, 473, 474, 475, 476, 478, 479, 480, 499, 503, 506, 509, 512, 514, 515, 518, 520, 521, 522, 532, 535, 543, 545, 552, 555, 557, 560, 563, 569, 573, 583, 598, 602, 610, 643, 660, 708, 711, 742, 794, 860], "tp": [1, 68], "cast": [1, 67, 68, 75, 90, 154, 160, 161, 188, 219, 232, 255, 268, 295, 306, 307, 314, 344, 347, 433, 456, 459, 467, 507, 508, 532, 537, 543, 563, 610, 642, 643, 660, 686, 708, 711, 742, 754, 755, 764, 798, 801, 907, 952, 953, 983, 992, 997, 1014], "int64": [1, 2, 31, 33, 67, 68, 97, 102, 146, 154, 160, 161, 176, 188, 200, 213, 219, 255, 282, 283, 284, 285, 306, 307, 320, 323, 327, 329, 331, 336, 343, 359, 459, 467, 507, 537, 543, 557, 561, 574, 582, 591, 597, 610, 627, 632, 642, 643, 645, 650, 660, 666, 689, 708, 730, 731, 732, 733, 754, 755, 770, 773, 780, 782, 785, 790, 797, 907, 924, 983, 995, 996, 997, 1014], "int8": [1, 68, 100, 132, 154, 255, 306, 307, 537, 591, 610, 754, 755, 759, 886, 910, 983, 1001, 1014], "int16": [1, 68, 306, 307, 537, 610, 711, 754, 755, 886, 983, 993, 1014], "int32": [1, 68, 90, 93, 97, 124, 125, 160, 161, 173, 255, 294, 325, 352, 543, 591, 610, 642, 643, 708, 711, 775, 806, 885, 997, 1014], "b": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 68, 73, 75, 90, 92, 93, 94, 95, 96, 97, 106, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 162, 163, 165, 166, 168, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 264, 268, 269, 281, 286, 287, 289, 290, 291, 294, 295, 302, 311, 312, 313, 359, 361, 363, 364, 365, 367, 370, 374, 376, 378, 379, 381, 384, 385, 386, 387, 388, 389, 391, 395, 399, 404, 410, 412, 432, 448, 455, 457, 459, 461, 465, 470, 487, 493, 495, 504, 507, 514, 536, 547, 549, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 573, 574, 575, 576, 577, 580, 583, 584, 585, 586, 587, 588, 590, 592, 593, 596, 597, 598, 599, 601, 610, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 717, 742, 758, 760, 808, 809, 817, 829, 836, 847, 860, 908, 924, 949, 952, 959, 982, 996, 1000, 1014, 1021], "4": [1, 2, 15, 23, 27, 28, 30, 31, 32, 35, 47, 50, 52, 53, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 113, 119, 120, 121, 127, 130, 136, 137, 138, 139, 142, 145, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 179, 181, 184, 185, 187, 188, 189, 190, 194, 198, 203, 208, 211, 212, 213, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 266, 268, 269, 281, 282, 283, 284, 286, 292, 294, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 319, 323, 330, 331, 332, 338, 339, 341, 342, 343, 344, 347, 348, 349, 350, 352, 354, 355, 360, 361, 363, 364, 367, 368, 369, 370, 372, 373, 375, 376, 377, 378, 379, 388, 389, 391, 394, 395, 396, 401, 402, 404, 405, 408, 417, 418, 421, 427, 430, 432, 433, 447, 449, 453, 454, 456, 457, 459, 460, 461, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 485, 486, 489, 493, 494, 495, 496, 499, 509, 510, 512, 513, 514, 516, 518, 520, 521, 524, 533, 534, 535, 536, 538, 539, 540, 543, 544, 545, 552, 555, 556, 557, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 573, 575, 576, 580, 582, 583, 584, 585, 586, 587, 588, 596, 597, 598, 599, 601, 602, 610, 624, 626, 627, 628, 631, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 660, 661, 662, 669, 670, 671, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 717, 720, 727, 730, 731, 732, 739, 743, 744, 746, 756, 758, 760, 772, 773, 779, 781, 784, 785, 786, 787, 788, 789, 793, 795, 796, 797, 798, 801, 802, 803, 804, 816, 817, 824, 825, 828, 829, 831, 836, 839, 840, 841, 842, 846, 858, 860, 861, 864, 873, 874, 877, 886, 892, 899, 900, 901, 903, 905, 909, 914, 916, 917, 918, 919, 920, 922, 924, 934, 938, 939, 944, 954, 955, 957, 958, 961, 963, 965, 966, 969, 982, 984, 985, 986, 993, 996, 997, 998, 1005, 1014, 1022], "c": [1, 27, 28, 30, 32, 35, 52, 53, 55, 56, 57, 66, 68, 73, 75, 93, 95, 97, 106, 113, 123, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 152, 153, 154, 155, 157, 158, 159, 160, 163, 165, 166, 173, 174, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 213, 217, 218, 219, 220, 222, 223, 226, 227, 229, 230, 232, 235, 238, 239, 240, 241, 242, 243, 245, 248, 249, 255, 262, 269, 286, 379, 391, 399, 410, 412, 457, 459, 487, 520, 524, 547, 549, 553, 554, 556, 559, 560, 561, 563, 564, 565, 566, 567, 568, 569, 575, 576, 577, 580, 583, 584, 585, 586, 587, 588, 596, 598, 599, 601, 610, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 641, 642, 647, 650, 656, 659, 661, 664, 665, 666, 667, 671, 674, 675, 680, 683, 686, 687, 690, 693, 694, 695, 696, 697, 698, 700, 703, 704, 708, 711, 758, 829, 847, 965, 969, 1000, 1014], "5": [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 30, 32, 35, 53, 55, 57, 65, 66, 68, 69, 70, 73, 74, 90, 93, 94, 95, 96, 97, 99, 103, 119, 125, 136, 138, 139, 142, 148, 149, 150, 151, 154, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 169, 171, 172, 175, 176, 177, 179, 181, 184, 185, 187, 189, 190, 191, 194, 203, 208, 211, 212, 213, 214, 215, 218, 221, 226, 228, 231, 232, 233, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 262, 263, 266, 287, 290, 291, 292, 294, 295, 296, 297, 298, 299, 308, 309, 310, 311, 315, 316, 320, 340, 342, 343, 344, 347, 349, 355, 358, 359, 362, 364, 368, 369, 372, 373, 375, 376, 379, 382, 385, 387, 388, 389, 391, 394, 396, 401, 404, 405, 408, 414, 420, 421, 447, 449, 454, 456, 457, 458, 459, 461, 463, 465, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 483, 489, 495, 500, 508, 509, 512, 513, 532, 535, 536, 538, 540, 544, 545, 555, 556, 559, 560, 562, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 580, 582, 583, 584, 585, 586, 587, 588, 590, 596, 598, 599, 601, 610, 626, 627, 628, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 646, 648, 649, 650, 651, 654, 655, 656, 661, 669, 670, 671, 674, 675, 676, 677, 678, 679, 685, 686, 688, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 717, 720, 724, 727, 739, 742, 744, 746, 752, 756, 757, 758, 759, 760, 765, 766, 767, 768, 769, 770, 794, 796, 797, 798, 799, 801, 803, 804, 812, 815, 824, 825, 828, 829, 860, 861, 864, 868, 877, 885, 886, 892, 899, 900, 901, 903, 904, 905, 909, 911, 912, 913, 915, 916, 919, 922, 924, 934, 940, 945, 953, 954, 958, 984, 998, 1001, 1005, 1014, 1022], "6": [1, 27, 28, 30, 31, 32, 33, 34, 35, 53, 55, 57, 66, 68, 73, 90, 93, 94, 95, 96, 136, 140, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 158, 160, 161, 163, 165, 166, 167, 169, 171, 172, 174, 178, 179, 180, 181, 183, 186, 189, 190, 191, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 225, 226, 227, 228, 229, 230, 232, 233, 240, 248, 249, 255, 262, 266, 269, 286, 294, 306, 307, 311, 315, 337, 339, 342, 353, 355, 363, 364, 370, 375, 376, 378, 396, 405, 454, 456, 462, 464, 465, 466, 469, 472, 473, 474, 475, 476, 478, 479, 480, 483, 495, 500, 504, 509, 512, 513, 535, 538, 540, 552, 553, 555, 567, 568, 569, 573, 576, 583, 598, 610, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 642, 643, 644, 646, 647, 649, 651, 652, 656, 659, 661, 664, 666, 667, 669, 670, 671, 674, 675, 678, 679, 682, 683, 685, 686, 688, 689, 695, 703, 704, 708, 711, 717, 744, 750, 754, 755, 760, 791, 804, 825, 861, 892, 905, 909, 914, 916, 918, 920, 924, 945, 949, 954, 958, 983, 1014, 1021, 1022], "7": [1, 27, 28, 30, 31, 32, 33, 34, 35, 55, 66, 68, 73, 74, 119, 140, 141, 142, 143, 144, 146, 148, 152, 153, 155, 160, 161, 163, 165, 167, 174, 178, 179, 180, 183, 186, 189, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 228, 229, 230, 255, 262, 266, 284, 307, 315, 319, 338, 340, 341, 348, 350, 352, 360, 375, 378, 396, 433, 456, 465, 469, 479, 495, 527, 538, 540, 555, 567, 568, 576, 583, 598, 610, 629, 630, 632, 634, 638, 642, 643, 644, 646, 647, 651, 659, 662, 664, 666, 667, 678, 679, 683, 689, 708, 711, 724, 732, 765, 769, 775, 794, 795, 802, 804, 848, 886, 909, 919, 972, 1014, 1022], "float32": [1, 28, 68, 154, 217, 218, 255, 582, 708, 711, 832, 885, 1014], "lazi": [1, 50, 51, 52, 53, 55, 68, 73, 100, 113, 125, 132, 175, 188, 255, 269, 578, 591, 610, 621, 647, 648, 687, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 1021, 1022], "i16": [1, 68, 487, 610, 711, 886, 993, 1014, 1022], "i32": [1, 68, 90, 93, 97, 124, 125, 201, 255, 294, 325, 352, 487, 513, 602, 610, 667, 708, 775, 806, 885, 958, 1014, 1022], "f32": [1, 68, 145, 217, 255, 404, 465, 487, 564, 573, 610, 631, 708, 711, 860, 885, 905, 1014], "i64": [1, 2, 15, 19, 47, 50, 52, 66, 67, 68, 69, 73, 90, 92, 93, 94, 95, 96, 97, 113, 136, 137, 138, 139, 140, 143, 145, 146, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 170, 174, 175, 178, 181, 183, 187, 188, 189, 190, 193, 194, 195, 196, 199, 201, 204, 205, 207, 208, 210, 211, 212, 214, 220, 222, 223, 224, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 245, 248, 249, 255, 262, 264, 268, 269, 282, 283, 284, 285, 286, 292, 295, 297, 298, 299, 304, 305, 306, 307, 310, 311, 320, 321, 323, 327, 329, 331, 336, 343, 346, 359, 361, 362, 364, 365, 366, 367, 369, 370, 375, 376, 377, 378, 379, 382, 385, 387, 388, 389, 391, 393, 396, 402, 404, 405, 406, 407, 408, 411, 413, 415, 416, 417, 418, 419, 420, 421, 425, 429, 431, 432, 447, 448, 449, 457, 458, 459, 460, 461, 462, 465, 466, 467, 469, 470, 482, 484, 485, 487, 488, 489, 493, 494, 495, 514, 515, 533, 534, 535, 536, 537, 538, 539, 540, 544, 545, 546, 548, 551, 553, 555, 557, 560, 561, 563, 567, 568, 569, 572, 573, 574, 575, 576, 580, 582, 583, 584, 587, 590, 594, 595, 598, 599, 602, 610, 624, 626, 628, 630, 631, 634, 635, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 656, 658, 660, 661, 664, 665, 667, 669, 670, 674, 675, 677, 678, 679, 680, 681, 682, 683, 686, 688, 690, 691, 692, 694, 695, 696, 697, 700, 703, 704, 708, 711, 717, 718, 730, 731, 732, 733, 739, 742, 746, 749, 752, 753, 754, 755, 758, 770, 771, 773, 780, 782, 785, 790, 797, 800, 815, 817, 818, 824, 828, 836, 858, 860, 861, 864, 873, 874, 875, 877, 879, 891, 908, 909, 912, 915, 919, 922, 925, 926, 929, 933, 934, 938, 939, 982, 984, 985, 986, 992, 998, 999, 1002, 1005, 1014, 1021, 1022], "register_series_namespac": [1, 66, 67, 68], "math": [1, 69, 309, 610, 750, 935, 987, 1014], "mathshortcut": [1, 69], "": [1, 2, 28, 31, 50, 53, 57, 69, 90, 97, 102, 103, 114, 127, 137, 143, 145, 147, 148, 159, 160, 166, 174, 175, 187, 189, 194, 195, 201, 208, 212, 216, 222, 224, 225, 226, 232, 255, 269, 321, 344, 347, 359, 392, 408, 410, 417, 418, 421, 431, 442, 448, 451, 452, 457, 458, 467, 471, 495, 499, 505, 506, 509, 510, 512, 514, 516, 518, 519, 521, 524, 525, 526, 529, 530, 532, 533, 534, 553, 554, 558, 561, 564, 569, 574, 577, 578, 584, 587, 594, 597, 598, 610, 624, 630, 631, 634, 641, 642, 648, 667, 675, 680, 681, 682, 686, 692, 708, 711, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 739, 740, 743, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 765, 771, 787, 788, 795, 798, 801, 802, 809, 811, 812, 815, 816, 817, 818, 820, 823, 824, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 849, 850, 858, 861, 864, 866, 868, 873, 874, 875, 877, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 899, 900, 901, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 933, 934, 935, 936, 938, 939, 941, 944, 945, 947, 948, 949, 950, 951, 952, 954, 955, 956, 957, 958, 959, 961, 962, 963, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1014], "_": [1, 65, 69, 189, 216, 255, 506, 520, 951, 965, 991, 1014], "squar": [1, 69, 237, 392, 496, 610, 692, 849, 940, 1014], "cube": [1, 69, 460, 610], "s2": [1, 121, 154, 255, 717, 744, 760, 836, 848, 879, 892, 924, 996, 1005, 1014], "renam": [1, 93, 102, 103, 201, 232, 235, 255, 264, 432, 444, 534, 594, 597, 610, 667, 686, 690, 708, 980, 992, 1014], "n2": [1, 423], "in_plac": [1, 165, 206, 230, 255, 906, 908, 932, 939, 1014], "true": [1, 6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 50, 52, 54, 70, 72, 73, 74, 75, 90, 91, 95, 97, 99, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 130, 132, 133, 135, 137, 138, 139, 142, 151, 154, 155, 157, 158, 159, 160, 161, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 201, 208, 214, 218, 219, 222, 223, 224, 225, 226, 228, 232, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 265, 266, 267, 268, 269, 280, 287, 288, 290, 291, 294, 303, 304, 305, 306, 307, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 400, 419, 422, 423, 430, 453, 454, 456, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 487, 492, 494, 495, 499, 501, 503, 507, 508, 513, 519, 520, 522, 524, 525, 526, 529, 533, 534, 539, 546, 549, 552, 553, 554, 555, 557, 558, 564, 565, 576, 591, 597, 602, 610, 624, 626, 627, 628, 633, 635, 637, 641, 642, 643, 647, 648, 650, 652, 656, 661, 667, 671, 672, 673, 675, 680, 681, 682, 686, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 711, 715, 716, 717, 718, 728, 735, 740, 744, 745, 764, 766, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 808, 810, 811, 812, 818, 822, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 849, 875, 878, 892, 900, 901, 907, 917, 924, 937, 939, 944, 946, 948, 952, 953, 958, 964, 965, 967, 969, 970, 971, 974, 995, 996, 1004, 1005, 1014, 1021, 1022], "s3": [1, 30, 105, 114, 118, 255, 879, 1014], "n3": 1, "8": [1, 27, 28, 30, 32, 33, 34, 35, 46, 50, 55, 62, 64, 65, 66, 68, 69, 73, 119, 123, 136, 140, 141, 142, 143, 144, 145, 146, 148, 152, 153, 155, 158, 163, 165, 174, 178, 179, 180, 183, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 212, 217, 218, 219, 220, 226, 227, 229, 230, 232, 255, 266, 268, 281, 302, 304, 307, 308, 312, 313, 315, 378, 395, 402, 404, 449, 456, 460, 461, 469, 470, 476, 487, 493, 495, 510, 516, 524, 536, 540, 552, 556, 559, 564, 565, 566, 568, 569, 573, 575, 580, 583, 584, 585, 586, 587, 588, 596, 598, 599, 601, 610, 629, 630, 631, 632, 634, 638, 644, 647, 651, 652, 661, 664, 666, 667, 678, 679, 683, 686, 689, 708, 711, 756, 775, 825, 848, 858, 860, 899, 903, 909, 911, 914, 916, 918, 920, 955, 961, 969, 1014, 1022], "9": [1, 27, 28, 30, 32, 35, 50, 55, 65, 73, 136, 141, 142, 154, 161, 163, 167, 198, 201, 211, 226, 227, 230, 232, 248, 255, 262, 266, 268, 281, 302, 304, 307, 309, 312, 313, 315, 319, 338, 349, 350, 378, 383, 391, 395, 402, 416, 419, 456, 464, 469, 471, 477, 479, 489, 493, 506, 527, 540, 555, 562, 567, 568, 610, 643, 644, 646, 651, 667, 678, 683, 686, 703, 708, 758, 769, 779, 781, 789, 795, 796, 802, 803, 836, 848, 858, 875, 909, 911, 917, 919, 921, 934, 951, 972, 1014], "27": [1, 69, 248, 307, 325, 339, 352, 610, 703, 1014, 1022], "16": [1, 31, 43, 59, 67, 160, 161, 232, 255, 304, 307, 378, 449, 460, 513, 555, 567, 572, 573, 576, 610, 642, 643, 671, 686, 708, 711, 795, 802, 899, 935, 958, 987, 1014], "64": [1, 42, 45, 61, 67, 69, 449, 460, 610, 673, 708, 899, 1014], "25": [1, 31, 69, 74, 97, 125, 130, 142, 160, 161, 175, 228, 232, 255, 310, 325, 341, 348, 352, 472, 473, 474, 475, 476, 478, 479, 480, 545, 578, 610, 642, 643, 648, 654, 684, 686, 708, 711, 758, 759, 795, 802, 808, 825, 899, 903, 1014], "125": [1, 31, 69, 255, 262, 610, 899, 1014], "arg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 188, 219, 255, 459, 558, 577, 610, 660, 708, 718, 995, 996, 1014], "ani": [2, 3, 4, 5, 8, 28, 30, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 71, 90, 91, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 111, 113, 114, 115, 117, 122, 124, 125, 127, 133, 136, 141, 145, 149, 151, 152, 154, 171, 172, 173, 187, 188, 197, 198, 214, 215, 218, 219, 224, 226, 255, 262, 266, 269, 294, 342, 354, 355, 364, 369, 372, 373, 383, 394, 399, 404, 430, 431, 433, 444, 447, 449, 453, 454, 456, 457, 459, 469, 471, 483, 513, 524, 525, 526, 529, 535, 539, 545, 552, 553, 555, 564, 575, 582, 602, 610, 631, 637, 660, 681, 708, 711, 717, 718, 760, 796, 817, 836, 848, 855, 860, 886, 909, 911, 923, 926, 958, 969, 970, 971, 974, 985, 994, 995, 996, 1014, 1021, 1022], "kwarg": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 141, 188, 219, 255, 459, 610, 660, 708, 996, 1014, 1021], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 610, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 980, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1021], "width": [2, 24, 31, 102, 103, 255, 282, 283, 284, 285, 510, 516, 532, 708, 730, 731, 732, 733, 955, 961, 977], "int": [2, 12, 13, 15, 23, 24, 28, 31, 35, 39, 52, 55, 67, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 123, 124, 125, 126, 127, 128, 129, 132, 136, 137, 138, 147, 150, 151, 153, 162, 163, 164, 166, 171, 172, 173, 175, 177, 178, 179, 183, 184, 185, 195, 197, 199, 203, 204, 205, 207, 209, 210, 211, 212, 217, 220, 222, 226, 229, 231, 233, 240, 249, 255, 262, 286, 292, 297, 298, 299, 308, 310, 356, 357, 358, 362, 363, 364, 370, 374, 375, 396, 400, 402, 407, 408, 417, 418, 421, 422, 423, 456, 458, 459, 460, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 488, 493, 497, 505, 507, 510, 513, 514, 516, 518, 520, 521, 527, 532, 538, 539, 540, 544, 550, 552, 557, 564, 565, 570, 571, 572, 578, 580, 586, 588, 591, 592, 593, 596, 597, 598, 599, 600, 601, 610, 624, 626, 635, 636, 637, 644, 648, 651, 661, 669, 670, 673, 674, 676, 678, 679, 680, 684, 685, 688, 695, 704, 708, 725, 726, 739, 740, 744, 745, 746, 747, 748, 756, 759, 809, 810, 811, 812, 815, 816, 817, 823, 824, 825, 848, 850, 851, 856, 857, 858, 863, 864, 873, 874, 877, 878, 879, 888, 892, 893, 895, 896, 897, 898, 899, 902, 905, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 925, 926, 929, 930, 933, 938, 941, 950, 952, 955, 958, 959, 961, 963, 965, 966, 972, 977, 983, 984, 985, 986, 993, 998, 1003, 1014, 1021, 1022], "inner": [2, 47, 56, 75, 124, 174, 227, 255, 282, 283, 284, 285, 311, 410, 543, 610, 647, 683, 689, 708, 730, 731, 732, 733, 760, 866, 997, 1014], "polarsdatatyp": [2, 47, 100, 102, 103, 108, 112, 113, 122, 123, 124, 125, 127, 132, 136, 146, 255, 269, 294, 359, 431, 433, 507, 555, 557, 561, 574, 582, 583, 591, 610, 632, 708, 711, 718, 740, 886, 952, 1014], "pythondatatyp": [2, 47], "null": [2, 28, 30, 52, 65, 73, 93, 102, 103, 113, 118, 135, 137, 138, 142, 145, 151, 154, 155, 167, 174, 179, 180, 186, 189, 191, 204, 205, 208, 209, 210, 214, 219, 222, 225, 227, 229, 232, 238, 255, 264, 268, 269, 279, 286, 288, 297, 298, 299, 302, 304, 307, 310, 312, 313, 320, 323, 327, 329, 331, 336, 343, 355, 356, 357, 358, 359, 362, 363, 364, 365, 370, 378, 385, 386, 387, 388, 389, 395, 402, 406, 407, 411, 417, 422, 423, 433, 454, 455, 458, 466, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 485, 486, 487, 489, 494, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 509, 510, 512, 513, 516, 518, 520, 521, 522, 532, 533, 534, 543, 551, 553, 560, 562, 563, 565, 574, 582, 592, 593, 597, 602, 610, 624, 626, 631, 637, 646, 647, 659, 669, 670, 675, 680, 682, 683, 686, 687, 689, 693, 708, 718, 727, 735, 745, 746, 759, 762, 770, 773, 780, 782, 785, 790, 797, 810, 811, 812, 815, 817, 822, 841, 842, 858, 873, 878, 879, 898, 899, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 930, 934, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 955, 957, 958, 961, 963, 965, 966, 967, 993, 995, 996, 997, 1004, 1014, 1021, 1022], "nest": [2, 47, 56, 97, 147, 255, 621, 809, 1014, 1021, 1022], "fix": [2, 106, 123, 125, 351, 472, 473, 474, 475, 476, 478, 479, 480, 610, 805], "length": [2, 12, 47, 73, 100, 113, 123, 132, 160, 161, 207, 255, 308, 341, 348, 418, 423, 442, 471, 472, 473, 474, 475, 476, 478, 479, 480, 493, 510, 512, 516, 518, 532, 557, 591, 592, 593, 610, 642, 643, 661, 674, 708, 744, 756, 757, 765, 795, 802, 850, 874, 879, 897, 903, 911, 912, 913, 914, 915, 916, 918, 919, 920, 938, 955, 957, 961, 963, 977, 1014], "paramet": [2, 7, 9, 11, 12, 13, 14, 15, 18, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 40, 47, 50, 51, 52, 53, 55, 57, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 171, 172, 173, 174, 175, 177, 179, 181, 182, 184, 185, 187, 188, 189, 191, 193, 194, 195, 197, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 235, 237, 240, 247, 249, 255, 262, 264, 266, 268, 269, 279, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 303, 304, 305, 306, 307, 308, 310, 311, 314, 315, 316, 321, 337, 340, 341, 342, 344, 346, 347, 348, 351, 353, 354, 355, 356, 357, 358, 359, 362, 364, 365, 369, 370, 371, 372, 373, 374, 375, 378, 379, 383, 392, 394, 396, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 417, 418, 419, 421, 422, 423, 424, 425, 426, 430, 431, 432, 433, 447, 449, 453, 454, 456, 457, 458, 459, 460, 461, 463, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 532, 533, 534, 535, 536, 538, 539, 544, 545, 546, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 576, 577, 578, 580, 581, 582, 583, 584, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 610, 624, 626, 628, 630, 631, 633, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 647, 648, 651, 652, 656, 657, 660, 661, 662, 663, 664, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 702, 704, 708, 711, 714, 717, 718, 727, 733, 734, 735, 736, 737, 738, 739, 740, 742, 745, 746, 747, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 771, 791, 794, 795, 796, 798, 800, 801, 802, 805, 808, 809, 810, 811, 812, 815, 816, 817, 818, 823, 824, 825, 828, 829, 838, 844, 845, 849, 851, 855, 856, 857, 858, 859, 860, 863, 864, 865, 866, 873, 874, 875, 877, 878, 879, 880, 881, 886, 899, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 930, 933, 937, 938, 939, 941, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 974, 977, 978, 980, 984, 985, 991, 992, 993, 994, 995, 996, 998, 999, 1002, 1003, 1004, 1005, 1014, 1021], "The": [2, 18, 29, 31, 35, 47, 50, 54, 57, 65, 71, 90, 92, 93, 94, 96, 99, 102, 104, 111, 113, 129, 136, 144, 146, 158, 159, 160, 161, 162, 167, 172, 175, 182, 187, 197, 198, 201, 225, 228, 232, 235, 237, 255, 286, 287, 288, 289, 319, 332, 337, 338, 341, 344, 348, 349, 359, 362, 370, 374, 422, 431, 457, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 489, 492, 498, 501, 502, 507, 509, 510, 511, 516, 517, 523, 524, 532, 561, 574, 578, 592, 593, 594, 597, 602, 603, 604, 606, 610, 611, 612, 616, 617, 618, 642, 643, 644, 646, 648, 651, 652, 657, 661, 667, 673, 682, 686, 690, 692, 708, 718, 734, 735, 736, 745, 769, 786, 791, 792, 795, 798, 802, 803, 815, 823, 828, 878, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 934, 937, 943, 946, 947, 952, 954, 955, 956, 961, 962, 968, 969, 977, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1020, 1022], "size": [2, 13, 35, 102, 103, 123, 124, 125, 127, 129, 147, 160, 226, 255, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 557, 592, 593, 610, 642, 673, 708, 809, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1014, 1022], "datatyp": [2, 28, 33, 47, 63, 90, 92, 93, 94, 96, 98, 106, 108, 112, 127, 146, 148, 154, 200, 255, 294, 359, 405, 487, 504, 543, 561, 574, 582, 610, 621, 634, 666, 689, 708, 718, 740, 758, 838, 843, 845, 847, 861, 931, 949, 997, 1014], "valu": [2, 8, 11, 12, 15, 26, 28, 31, 33, 47, 48, 50, 54, 56, 63, 65, 73, 75, 93, 95, 102, 103, 104, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 142, 145, 149, 150, 151, 155, 158, 160, 161, 162, 163, 167, 171, 172, 175, 177, 178, 179, 180, 181, 183, 185, 187, 189, 190, 191, 193, 197, 198, 199, 204, 205, 208, 209, 210, 211, 214, 215, 219, 222, 226, 227, 228, 229, 238, 239, 241, 242, 243, 245, 246, 255, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 304, 307, 308, 310, 312, 313, 315, 319, 332, 338, 349, 354, 355, 356, 357, 358, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 389, 390, 393, 394, 395, 397, 398, 401, 402, 406, 407, 408, 411, 413, 414, 415, 417, 420, 421, 425, 427, 429, 430, 431, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 463, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 490, 491, 492, 494, 495, 496, 498, 499, 500, 501, 502, 503, 505, 506, 507, 508, 514, 515, 518, 520, 521, 522, 532, 535, 537, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 554, 556, 560, 563, 565, 567, 568, 569, 575, 576, 581, 582, 584, 585, 586, 587, 588, 590, 591, 592, 593, 598, 602, 610, 624, 631, 636, 637, 642, 643, 645, 646, 648, 653, 654, 655, 656, 658, 659, 662, 664, 669, 670, 675, 676, 677, 680, 683, 684, 689, 693, 694, 696, 697, 698, 700, 701, 708, 711, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 735, 736, 737, 738, 742, 743, 746, 747, 748, 750, 751, 756, 757, 758, 759, 761, 762, 765, 769, 786, 792, 803, 809, 810, 811, 812, 815, 816, 817, 820, 822, 823, 824, 825, 826, 828, 829, 831, 833, 834, 836, 837, 839, 840, 841, 842, 846, 851, 853, 854, 857, 858, 862, 863, 864, 867, 869, 870, 871, 873, 877, 881, 886, 887, 888, 890, 891, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 929, 930, 934, 935, 936, 937, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 957, 959, 960, 963, 965, 966, 967, 977, 983, 984, 985, 986, 987, 988, 996, 997, 1000, 1002, 1004, 1005, 1014, 1022], "within": [2, 47, 120, 121, 160, 161, 175, 228, 255, 465, 495, 610, 642, 643, 648, 708, 1021], "exampl": [2, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 47, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 73, 74, 75, 90, 92, 93, 94, 95, 96, 97, 99, 100, 103, 104, 105, 106, 113, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 572, 573, 574, 575, 576, 577, 578, 580, 582, 583, 584, 585, 586, 587, 588, 590, 591, 594, 595, 596, 597, 598, 599, 601, 602, 610, 621, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 714, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 739, 740, 742, 743, 744, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 815, 816, 817, 818, 820, 823, 824, 825, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 846, 847, 848, 850, 858, 860, 861, 864, 866, 868, 873, 874, 875, 877, 879, 885, 886, 887, 888, 889, 890, 891, 892, 893, 899, 900, 901, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 924, 925, 926, 927, 929, 933, 934, 935, 936, 938, 939, 941, 943, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 982, 983, 984, 985, 986, 987, 988, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014, 1021], "dtype": [2, 31, 68, 73, 75, 90, 92, 94, 96, 97, 100, 102, 103, 113, 122, 123, 124, 125, 127, 132, 135, 160, 161, 175, 217, 218, 219, 255, 269, 271, 272, 273, 274, 275, 276, 279, 294, 297, 298, 299, 300, 301, 306, 307, 309, 320, 323, 327, 329, 331, 336, 343, 351, 359, 361, 397, 398, 399, 410, 422, 429, 431, 433, 464, 467, 468, 472, 473, 474, 475, 476, 478, 479, 480, 487, 490, 491, 498, 507, 518, 524, 537, 539, 541, 542, 543, 548, 549, 555, 557, 565, 574, 578, 582, 583, 591, 597, 610, 642, 643, 648, 708, 711, 730, 731, 740, 745, 746, 747, 748, 754, 755, 758, 759, 770, 773, 780, 782, 785, 790, 797, 805, 809, 814, 832, 838, 845, 853, 854, 855, 866, 878, 885, 886, 910, 924, 931, 943, 952, 963, 969, 983, 993, 995, 996, 997, 1001, 1014, 1022], "method": [2, 3, 4, 5, 8, 27, 32, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 74, 91, 102, 103, 106, 122, 130, 133, 145, 159, 167, 172, 185, 191, 197, 198, 224, 232, 247, 255, 262, 265, 266, 344, 347, 354, 355, 362, 369, 372, 373, 378, 394, 430, 447, 449, 453, 454, 456, 460, 463, 465, 472, 473, 474, 475, 476, 478, 479, 480, 527, 535, 545, 547, 552, 564, 589, 591, 603, 604, 606, 610, 611, 612, 615, 616, 617, 618, 621, 631, 646, 662, 681, 686, 702, 708, 718, 798, 801, 815, 828, 904, 905, 916, 972, 997, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1020], "attribut": [2, 3, 4, 5, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 57, 58, 59, 60, 61, 62, 63, 64, 122, 255, 603, 604, 606, 611, 612, 616, 617, 618, 708, 1006, 1008, 1010, 1015, 1018, 1019, 1020], "A": [5, 28, 31, 50, 53, 72, 74, 97, 102, 103, 104, 111, 113, 129, 130, 154, 160, 175, 189, 198, 214, 226, 227, 228, 232, 255, 261, 315, 320, 323, 327, 329, 331, 336, 343, 354, 355, 362, 372, 373, 381, 384, 385, 387, 394, 423, 430, 431, 432, 442, 453, 454, 461, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 499, 500, 505, 506, 508, 514, 515, 532, 536, 562, 573, 577, 610, 642, 648, 664, 683, 686, 708, 711, 765, 770, 773, 780, 782, 785, 790, 797, 815, 911, 912, 913, 915, 918, 919, 920, 944, 945, 950, 951, 953, 959, 960, 977, 1014, 1021], "encod": [5, 64, 102, 103, 113, 216, 255, 287, 288, 290, 291, 371, 501, 610, 735, 946], "set": [5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 23, 24, 26, 28, 30, 31, 32, 33, 34, 65, 66, 70, 74, 91, 93, 96, 100, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 140, 145, 159, 160, 161, 162, 172, 175, 181, 199, 201, 207, 216, 223, 224, 226, 232, 255, 269, 351, 374, 383, 403, 409, 418, 422, 423, 424, 433, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 492, 493, 511, 517, 518, 523, 524, 525, 526, 529, 557, 591, 592, 593, 597, 602, 610, 621, 631, 633, 641, 642, 643, 647, 648, 652, 656, 667, 672, 673, 674, 681, 686, 689, 692, 708, 717, 718, 805, 823, 836, 859, 865, 874, 878, 879, 880, 886, 911, 912, 913, 914, 915, 916, 918, 919, 920, 922, 926, 933, 937, 938, 956, 962, 963, 968, 969, 970, 971, 974, 995, 1014, 1022], "string": [5, 7, 9, 12, 13, 14, 18, 28, 31, 33, 34, 38, 50, 56, 64, 74, 75, 97, 102, 103, 113, 122, 123, 124, 127, 130, 131, 137, 154, 158, 159, 160, 161, 175, 189, 201, 208, 217, 222, 226, 228, 232, 235, 255, 262, 290, 295, 337, 341, 344, 347, 348, 361, 367, 371, 379, 410, 433, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 498, 499, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 532, 553, 554, 558, 560, 562, 563, 569, 577, 584, 587, 594, 597, 598, 610, 624, 633, 640, 641, 642, 643, 648, 667, 675, 680, 686, 689, 690, 708, 711, 737, 742, 791, 795, 798, 801, 802, 814, 829, 866, 942, 943, 944, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 975, 976, 977, 993, 1014, 1022], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 371, 610, 640, 663, 708], "activ": [6, 10, 16, 17, 19, 20, 21, 22, 25, 404, 506, 860, 951], "bool": [6, 10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 33, 35, 65, 70, 72, 73, 74, 75, 90, 91, 95, 97, 100, 102, 103, 107, 111, 113, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 135, 137, 138, 139, 151, 152, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 175, 187, 189, 199, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 225, 228, 230, 232, 239, 241, 242, 245, 255, 265, 266, 267, 268, 269, 279, 285, 287, 288, 290, 291, 294, 303, 304, 305, 306, 307, 308, 324, 340, 342, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 400, 404, 419, 422, 425, 430, 431, 437, 438, 439, 440, 453, 454, 456, 465, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 492, 494, 495, 499, 501, 503, 513, 514, 515, 519, 520, 522, 524, 525, 526, 529, 534, 546, 549, 552, 553, 554, 555, 557, 558, 564, 567, 582, 591, 597, 610, 624, 626, 628, 633, 635, 637, 638, 641, 642, 643, 647, 648, 652, 656, 661, 668, 671, 672, 673, 675, 680, 681, 682, 686, 694, 696, 697, 700, 708, 711, 715, 716, 717, 718, 727, 733, 735, 740, 745, 752, 753, 754, 755, 756, 757, 774, 794, 796, 808, 810, 811, 812, 818, 822, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 856, 857, 860, 875, 878, 881, 900, 901, 903, 905, 906, 907, 908, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 926, 927, 932, 937, 939, 944, 946, 948, 958, 959, 960, 964, 965, 967, 969, 970, 971, 974, 994, 995, 996, 999, 1002, 1004, 1014, 1021], "decim": [6, 28, 31, 255, 481, 527, 610, 921, 972, 1014], "temporari": 6, "remov": [6, 8, 143, 216, 227, 255, 269, 359, 432, 511, 517, 523, 524, 526, 574, 610, 630, 683, 708, 956, 962, 968, 969, 971], "later": [6, 74], "onc": [6, 53, 102, 103, 106, 129, 135, 136, 198, 199, 235, 255, 269, 293, 482, 610, 625, 690, 708, 718, 922, 1014], "stabil": 6, "happen": 6, "being": [6, 102, 103, 113, 118, 216, 226, 227, 255, 269, 308, 341, 472, 473, 474, 475, 476, 478, 479, 480, 573, 610, 683, 708, 756, 795, 825, 903, 1014, 1022], "consid": [6, 102, 103, 113, 118, 136, 145, 155, 181, 198, 224, 226, 227, 255, 269, 297, 298, 299, 308, 341, 431, 472, 473, 474, 475, 476, 478, 479, 480, 567, 576, 610, 631, 644, 651, 656, 681, 683, 692, 708, 718, 746, 747, 748, 756, 795, 825, 838, 903, 924, 925, 926, 1014], "break": [6, 118, 226, 227, 255, 269, 308, 341, 472, 473, 474, 475, 476, 478, 479, 480, 610, 683, 708, 756, 795, 825, 903, 1014], "chang": [6, 26, 65, 102, 103, 118, 226, 227, 228, 255, 269, 308, 310, 341, 458, 472, 473, 474, 475, 476, 478, 479, 480, 610, 683, 708, 756, 795, 825, 899, 903, 932, 1014], "current": [6, 9, 26, 52, 91, 97, 104, 131, 135, 138, 139, 174, 255, 341, 423, 458, 610, 621, 626, 627, 647, 708, 711, 745, 749, 795, 899, 1014, 1021], "alpha": [6, 72, 269, 356, 357, 358, 610, 628, 633, 635, 661, 671, 708, 810, 811, 812, 1014], "state": [6, 8, 72, 83, 131, 567, 621, 628, 633, 635, 661, 671, 708], "cfg": [7, 8, 9, 15, 133], "path": [7, 9, 27, 28, 30, 31, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 255, 445, 484, 508, 610, 663, 672, 673, 689, 708, 927, 953, 1014], "previous": 7, "save": [7, 160, 161, 175, 228, 255, 337, 340, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 621, 642, 643, 648, 708, 791, 794, 795, 802], "share": [7, 56, 147, 255, 809, 1014], "option": [7, 8, 9, 26, 30, 31, 39, 65, 74, 102, 105, 106, 107, 111, 114, 115, 117, 119, 122, 123, 124, 125, 126, 127, 128, 171, 175, 181, 214, 218, 223, 255, 392, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 518, 582, 597, 602, 610, 621, 647, 648, 656, 708, 711, 845, 849, 911, 912, 913, 914, 915, 916, 918, 919, 920, 937, 963, 992, 1014], "from": [7, 8, 28, 31, 50, 51, 52, 65, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 142, 143, 147, 149, 158, 160, 161, 172, 173, 175, 176, 181, 189, 193, 197, 199, 201, 216, 223, 224, 226, 228, 255, 303, 309, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 355, 359, 371, 378, 392, 423, 451, 452, 454, 458, 459, 464, 472, 473, 475, 478, 479, 480, 482, 495, 505, 506, 507, 513, 524, 525, 526, 529, 547, 549, 560, 570, 571, 572, 591, 596, 600, 609, 610, 630, 635, 640, 642, 643, 648, 656, 663, 664, 667, 681, 687, 708, 711, 717, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 845, 849, 879, 895, 896, 897, 899, 922, 950, 951, 952, 958, 969, 970, 971, 974, 1002, 1005, 1014, 1021, 1022], "json": [7, 9, 33, 34, 109, 110, 116, 255, 371, 445, 507, 508, 610, 621, 640, 663, 689, 708, 952, 953], "file": [7, 9, 27, 28, 32, 33, 34, 35, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 445, 635, 663, 672, 673, 689, 708, 717, 1014], "produc": [7, 74, 124, 125, 127, 401, 441, 583, 652, 708, 857], "filepath": [7, 9], "same": [7, 18, 30, 31, 54, 56, 65, 72, 73, 74, 75, 107, 113, 123, 133, 136, 143, 159, 208, 224, 232, 235, 237, 255, 261, 268, 361, 437, 440, 457, 471, 472, 473, 474, 475, 476, 478, 479, 480, 495, 534, 561, 610, 630, 641, 652, 675, 681, 686, 690, 708, 713, 717, 718, 765, 814, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1005, 1014], "reset": [8, 133], "default": [8, 13, 26, 27, 28, 30, 31, 32, 33, 34, 35, 65, 70, 73, 74, 90, 92, 93, 94, 95, 96, 97, 100, 102, 103, 106, 111, 113, 122, 123, 124, 125, 126, 127, 130, 132, 145, 147, 159, 161, 162, 172, 174, 175, 181, 187, 189, 197, 198, 199, 209, 216, 224, 226, 229, 233, 255, 295, 340, 353, 355, 356, 357, 358, 374, 418, 422, 423, 426, 433, 451, 452, 454, 458, 465, 472, 473, 474, 475, 476, 478, 479, 480, 482, 488, 497, 505, 511, 513, 517, 518, 523, 524, 525, 526, 529, 550, 557, 564, 578, 582, 591, 596, 597, 601, 610, 631, 633, 641, 643, 647, 648, 656, 673, 676, 681, 684, 689, 708, 742, 794, 808, 809, 810, 811, 812, 823, 874, 878, 879, 886, 895, 896, 899, 905, 922, 933, 941, 944, 950, 956, 958, 962, 963, 968, 969, 970, 971, 974, 1003, 1014, 1022], "note": [8, 18, 30, 31, 39, 50, 54, 55, 65, 74, 90, 91, 92, 94, 96, 97, 100, 102, 104, 105, 111, 113, 114, 123, 125, 127, 129, 132, 133, 135, 136, 141, 150, 160, 161, 171, 172, 174, 175, 185, 188, 197, 198, 215, 218, 223, 227, 228, 232, 255, 269, 306, 307, 312, 313, 333, 334, 337, 341, 348, 379, 385, 387, 404, 422, 472, 473, 474, 475, 476, 477, 478, 479, 480, 492, 499, 505, 506, 509, 511, 512, 514, 517, 523, 524, 537, 545, 567, 576, 590, 591, 602, 610, 620, 628, 635, 636, 642, 643, 644, 648, 651, 664, 671, 683, 686, 708, 718, 754, 755, 787, 788, 791, 802, 860, 878, 917, 925, 926, 932, 937, 944, 950, 951, 954, 956, 957, 959, 962, 968, 969, 983, 1014, 1021], "oper": [8, 31, 56, 73, 80, 81, 90, 92, 93, 94, 95, 96, 102, 111, 136, 149, 154, 159, 166, 176, 182, 185, 187, 188, 192, 213, 218, 219, 223, 226, 234, 235, 255, 262, 263, 266, 303, 304, 305, 306, 307, 308, 354, 355, 369, 372, 373, 391, 394, 403, 409, 423, 424, 430, 444, 447, 449, 453, 454, 456, 460, 467, 535, 545, 552, 553, 554, 562, 563, 573, 610, 621, 635, 641, 644, 647, 651, 656, 657, 690, 708, 717, 752, 753, 754, 755, 756, 859, 865, 880, 907, 990, 994, 995, 996, 1004, 1014], "environ": [8, 26, 126, 129], "local": [8, 30, 105, 114, 127, 255, 340, 767, 768, 794, 799, 900, 901, 1014], "non": [8, 31, 39, 65, 74, 95, 161, 173, 181, 201, 227, 232, 255, 379, 423, 458, 471, 472, 473, 474, 475, 476, 478, 479, 480, 500, 506, 553, 554, 560, 562, 563, 569, 584, 587, 592, 593, 594, 597, 598, 610, 643, 656, 667, 683, 686, 708, 829, 879, 899, 911, 912, 913, 914, 915, 916, 918, 919, 920, 945, 951, 995, 1014], "env": [8, 128], "back": [8, 65, 149, 219, 255, 457, 530, 610, 717, 975, 996, 1014], "none": [9, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 48, 50, 52, 53, 55, 65, 74, 75, 90, 92, 93, 94, 95, 96, 99, 101, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 133, 136, 138, 142, 145, 150, 151, 158, 160, 161, 162, 167, 171, 174, 175, 176, 179, 181, 185, 186, 189, 197, 199, 205, 207, 208, 214, 216, 219, 223, 224, 225, 226, 227, 228, 255, 264, 268, 269, 281, 286, 297, 298, 299, 302, 304, 307, 312, 313, 340, 341, 348, 355, 356, 357, 358, 359, 362, 363, 364, 370, 374, 378, 379, 385, 386, 387, 388, 389, 395, 407, 418, 423, 431, 433, 445, 454, 455, 458, 465, 466, 471, 472, 473, 474, 475, 476, 478, 479, 480, 482, 486, 487, 488, 489, 493, 494, 498, 499, 502, 503, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 529, 532, 533, 534, 543, 553, 555, 557, 560, 563, 565, 571, 572, 574, 575, 582, 583, 584, 587, 591, 592, 593, 596, 597, 600, 601, 602, 610, 626, 627, 631, 636, 637, 642, 643, 646, 647, 648, 650, 652, 656, 659, 670, 671, 672, 673, 674, 675, 681, 682, 683, 687, 689, 692, 708, 711, 718, 725, 726, 745, 746, 757, 758, 760, 776, 777, 778, 783, 794, 795, 802, 807, 808, 810, 811, 812, 815, 816, 817, 819, 822, 823, 825, 827, 828, 829, 838, 841, 842, 845, 848, 849, 863, 874, 879, 886, 887, 888, 889, 890, 894, 903, 904, 905, 908, 911, 912, 913, 914, 915, 916, 918, 919, 920, 922, 926, 928, 930, 933, 934, 937, 938, 941, 943, 944, 947, 948, 952, 953, 954, 955, 956, 957, 958, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 974, 989, 992, 993, 996, 997, 1003, 1004, 1014, 1021], "written": [9, 27, 28, 31, 32, 33, 34, 35, 255, 672, 673, 689, 708], "contain": [9, 31, 65, 71, 92, 95, 97, 105, 114, 120, 124, 137, 145, 160, 173, 185, 189, 222, 255, 269, 290, 291, 383, 433, 500, 503, 505, 506, 508, 521, 522, 610, 624, 631, 642, 661, 680, 708, 711, 886, 892, 945, 948, 950, 951, 953, 966, 967, 990, 1014], "where": [9, 31, 50, 65, 70, 104, 124, 145, 149, 172, 181, 198, 209, 229, 255, 280, 350, 353, 355, 454, 483, 492, 495, 497, 550, 564, 592, 593, 596, 601, 602, 610, 656, 676, 684, 708, 717, 728, 804, 808, 923, 937, 941, 1003, 1005, 1014, 1021], "ascii": [10, 18, 510, 512, 516, 532, 955, 957, 961, 977], "charact": [10, 12, 18, 24, 28, 102, 103, 113, 255, 337, 504, 506, 509, 510, 511, 516, 517, 519, 520, 523, 532, 661, 708, 711, 791, 949, 951, 954, 955, 956, 961, 962, 964, 965, 968, 977], "displai": [10, 11, 12, 15, 17, 21, 23, 31, 255], "tabl": [10, 14, 15, 17, 18, 19, 20, 21, 23, 24, 29, 30, 31, 51, 52, 53, 55, 90, 97, 102, 103, 105, 113, 114, 189, 213, 219, 226, 227, 255, 683, 708, 996, 1014, 1021], "outlin": 10, "fals": [10, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 31, 33, 35, 50, 65, 70, 72, 74, 91, 95, 97, 100, 102, 103, 106, 107, 111, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 132, 135, 137, 138, 139, 142, 154, 155, 157, 158, 159, 160, 161, 165, 166, 168, 169, 170, 172, 175, 176, 179, 184, 185, 187, 189, 190, 197, 198, 199, 202, 206, 208, 214, 216, 218, 219, 222, 223, 224, 228, 230, 232, 238, 239, 241, 242, 243, 245, 248, 255, 265, 266, 267, 269, 279, 285, 287, 290, 291, 303, 304, 305, 306, 307, 308, 324, 340, 342, 353, 354, 355, 356, 357, 358, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 392, 394, 400, 404, 419, 422, 425, 430, 431, 453, 454, 456, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 492, 494, 495, 499, 503, 507, 513, 514, 515, 519, 520, 522, 524, 525, 526, 546, 549, 552, 553, 554, 557, 558, 564, 567, 582, 591, 597, 602, 610, 624, 626, 627, 628, 633, 635, 641, 642, 643, 647, 648, 650, 652, 661, 668, 671, 672, 673, 675, 680, 681, 686, 693, 694, 696, 697, 698, 700, 703, 708, 711, 717, 727, 733, 740, 744, 745, 752, 753, 754, 755, 756, 757, 774, 794, 796, 808, 810, 811, 812, 818, 829, 830, 831, 833, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 860, 875, 878, 881, 892, 900, 901, 903, 905, 906, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 924, 927, 932, 937, 939, 944, 948, 952, 958, 959, 960, 964, 965, 967, 969, 970, 971, 994, 995, 996, 999, 1002, 1004, 1005, 1014, 1021], "revert": 10, "abc": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 506, 514, 610, 711, 951, 959], "xyz": [10, 16, 17, 18, 19, 20, 21, 22, 23, 262, 500, 506, 610, 945, 951, 992, 1014], "f64": [10, 14, 16, 17, 19, 20, 21, 22, 23, 47, 50, 65, 67, 69, 93, 118, 125, 138, 139, 141, 142, 143, 146, 150, 151, 154, 157, 158, 159, 166, 174, 175, 179, 180, 189, 190, 191, 207, 208, 209, 229, 232, 235, 239, 241, 242, 243, 244, 245, 247, 248, 255, 261, 271, 272, 273, 274, 275, 276, 294, 296, 300, 301, 308, 309, 312, 313, 342, 353, 354, 355, 356, 357, 358, 359, 360, 363, 364, 368, 369, 372, 373, 378, 385, 387, 388, 389, 391, 392, 394, 414, 426, 427, 428, 430, 434, 435, 436, 446, 449, 451, 452, 453, 454, 458, 460, 463, 464, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 490, 491, 492, 496, 497, 541, 542, 545, 550, 559, 560, 562, 564, 566, 574, 585, 586, 596, 601, 610, 626, 630, 636, 637, 641, 647, 648, 654, 655, 662, 675, 676, 684, 686, 687, 690, 694, 696, 697, 698, 699, 700, 702, 703, 708, 711, 719, 720, 721, 722, 723, 724, 743, 750, 751, 756, 757, 758, 796, 811, 812, 816, 820, 825, 899, 903, 911, 913, 914, 916, 917, 918, 920, 921, 935, 936, 940, 987, 988, 1001, 1014, 1022], "fmt": [11, 377, 577, 610, 645, 708], "floatfmt": 11, "mix": [11, 524, 526, 758, 969, 971, 1014], "control": [11, 31, 55, 73, 123, 255, 633, 708], "how": [11, 30, 31, 56, 65, 73, 75, 93, 96, 104, 145, 174, 226, 227, 255, 295, 310, 378, 401, 402, 457, 468, 477, 507, 602, 610, 631, 647, 683, 708, 742, 759, 857, 858, 917, 952, 1014], "float": [11, 31, 41, 42, 118, 120, 121, 122, 125, 127, 142, 147, 150, 175, 191, 199, 205, 247, 255, 296, 297, 298, 299, 312, 313, 342, 353, 354, 355, 356, 357, 358, 363, 368, 372, 373, 378, 381, 384, 385, 387, 388, 389, 394, 400, 426, 430, 434, 446, 451, 452, 453, 454, 460, 463, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 545, 559, 585, 586, 589, 591, 596, 598, 601, 610, 636, 648, 662, 670, 671, 702, 708, 711, 740, 743, 746, 747, 748, 757, 758, 760, 796, 808, 809, 810, 811, 812, 816, 820, 825, 835, 849, 856, 857, 882, 888, 889, 895, 896, 902, 903, 904, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 923, 925, 926, 937, 941, 983, 1003, 1014, 1022], "point": [11, 31, 41, 42, 74, 125, 127, 150, 160, 176, 255, 296, 312, 313, 342, 363, 368, 385, 387, 481, 482, 610, 636, 642, 652, 664, 708, 743, 796, 816, 820, 835, 921, 922, 1014], "full": [11, 38, 65, 71, 73, 102, 103, 105, 113, 114, 160, 161, 255, 524, 525, 526, 529, 642, 643, 652, 708, 969, 970, 971, 974], "format": [11, 14, 18, 28, 31, 101, 102, 103, 113, 118, 148, 158, 172, 181, 198, 215, 253, 255, 341, 344, 347, 513, 524, 525, 526, 529, 554, 634, 640, 656, 689, 708, 798, 801, 958, 969, 970, 971, 974, 1013], "number": [11, 12, 13, 15, 23, 24, 28, 31, 35, 65, 74, 84, 90, 92, 94, 96, 99, 102, 103, 106, 113, 116, 123, 125, 126, 128, 129, 137, 138, 147, 148, 150, 151, 163, 172, 173, 176, 177, 184, 185, 199, 204, 205, 209, 211, 222, 226, 229, 238, 240, 249, 255, 280, 286, 292, 302, 308, 310, 322, 325, 330, 332, 342, 349, 350, 352, 356, 357, 358, 362, 364, 370, 375, 385, 387, 395, 396, 402, 408, 417, 421, 423, 459, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 488, 497, 509, 512, 514, 520, 521, 527, 538, 544, 550, 564, 565, 580, 592, 593, 596, 599, 601, 610, 624, 626, 634, 635, 636, 637, 644, 651, 661, 669, 670, 673, 676, 678, 680, 684, 693, 695, 704, 708, 739, 745, 756, 759, 772, 775, 784, 786, 796, 803, 804, 806, 809, 810, 811, 812, 815, 817, 824, 835, 851, 858, 864, 873, 877, 879, 892, 893, 911, 912, 913, 914, 915, 916, 918, 919, 920, 921, 922, 929, 930, 933, 941, 954, 957, 959, 965, 966, 972, 984, 998, 1003, 1014, 1022], "plai": [12, 563], "sam": 12, "As": [12, 90, 92, 93, 94, 96, 106, 255, 708], "time": [12, 30, 38, 40, 50, 55, 71, 72, 74, 113, 130, 149, 160, 161, 175, 228, 255, 292, 314, 315, 316, 321, 337, 340, 341, 344, 346, 347, 348, 351, 399, 400, 423, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 529, 543, 544, 562, 563, 572, 578, 610, 628, 642, 643, 648, 661, 708, 711, 717, 739, 764, 765, 766, 771, 791, 794, 795, 798, 800, 801, 802, 805, 855, 857, 969, 971, 974, 997, 998, 1014, 1022], "goe": 12, "By": [12, 13, 65, 102, 103, 106, 113, 160, 161, 175, 209, 228, 229, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 497, 513, 550, 564, 582, 596, 601, 610, 642, 643, 648, 676, 684, 708, 791, 795, 802, 941, 958, 995, 1003, 1014], "begin": [12, 74, 356, 357, 358, 505, 610, 810, 811, 812, 950, 1014], "beauti": 12, "friendship": 12, "len": [12, 31, 123, 125, 173, 255, 303, 469, 510, 516, 532, 610, 757, 903, 909, 955, 961, 977, 1014], "u32": [12, 50, 70, 160, 186, 233, 238, 246, 248, 255, 263, 270, 277, 278, 279, 280, 281, 302, 303, 319, 322, 326, 330, 332, 338, 339, 342, 349, 350, 395, 397, 398, 401, 412, 433, 450, 455, 465, 472, 473, 475, 478, 479, 480, 483, 500, 509, 512, 543, 547, 556, 558, 565, 588, 610, 642, 659, 688, 693, 701, 703, 708, 727, 728, 729, 740, 769, 772, 779, 781, 784, 786, 789, 792, 793, 796, 803, 804, 825, 868, 905, 945, 954, 957, 997, 1000, 1002, 1014], "37": 12, "beaut": 12, "48": [12, 161, 255, 643, 708], "fmt_str_length": 12, "50": [12, 31, 149, 255, 297, 298, 299, 341, 348, 610, 746, 802, 1014], "print": [12, 15, 17, 18, 23, 103, 119, 146, 158, 159, 173, 176, 217, 234, 255, 377, 572, 610, 645, 708, 836, 911, 993, 1014, 1022], "overwrit": [13, 29, 30, 90, 92, 93, 94, 96, 102, 103, 113, 135, 255, 635, 708], "chunk": [13, 99, 102, 103, 111, 113, 115, 116, 117, 125, 127, 149, 173, 184, 255, 268, 466, 610, 673, 708, 717, 744, 821, 892, 906, 990, 1014], "stream": [13, 32, 72, 159, 174, 224, 255, 628, 633, 635, 641, 647, 652, 656, 661, 671, 672, 673, 681, 708], "engin": [13, 29, 104, 129, 136, 159, 174, 224, 237, 255, 641, 647, 652, 656, 681, 692, 708, 718, 1014], "determin": [13, 31, 63, 65, 73, 93, 96, 100, 102, 103, 106, 111, 113, 117, 132, 136, 154, 160, 161, 172, 173, 223, 228, 255, 295, 324, 340, 423, 433, 441, 468, 472, 473, 474, 475, 476, 478, 479, 480, 492, 507, 527, 591, 610, 642, 643, 708, 742, 774, 794, 825, 879, 886, 937, 952, 972, 1014], "schema": [13, 30, 50, 56, 66, 67, 68, 73, 75, 85, 86, 88, 90, 92, 93, 94, 96, 97, 102, 103, 108, 112, 113, 116, 123, 125, 136, 138, 139, 146, 147, 182, 185, 218, 255, 282, 283, 284, 423, 441, 507, 552, 597, 610, 626, 627, 632, 652, 657, 689, 692, 708, 711, 732, 749, 952, 1014], "thread": [13, 28, 99, 102, 103, 104, 129, 255, 269, 404, 610, 860], "pool": [13, 129], "For": [13, 30, 31, 74, 104, 105, 106, 114, 149, 161, 174, 175, 237, 255, 294, 356, 357, 358, 423, 442, 467, 492, 499, 505, 506, 514, 567, 576, 577, 610, 643, 648, 692, 708, 717, 810, 811, 812, 907, 937, 944, 950, 951, 959, 995, 1014], "some": [13, 26, 30, 31, 93, 102, 103, 113, 145, 255, 631, 708, 836, 1014, 1022], "dataset": [13, 102, 103, 113, 118, 174, 255, 392, 610, 621, 647, 652, 708, 849, 1014], "esp": 13, "when": [13, 15, 17, 21, 31, 35, 55, 56, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 107, 111, 113, 114, 115, 116, 125, 127, 136, 137, 146, 147, 149, 151, 154, 160, 161, 174, 188, 197, 201, 208, 216, 222, 224, 255, 297, 298, 299, 340, 356, 357, 358, 364, 423, 431, 433, 442, 459, 494, 495, 511, 517, 523, 524, 558, 567, 576, 610, 624, 637, 642, 643, 647, 652, 667, 673, 675, 680, 681, 708, 717, 746, 747, 748, 794, 809, 810, 811, 812, 817, 886, 925, 926, 956, 962, 968, 969, 991, 1014], "have": [13, 26, 31, 65, 74, 75, 91, 102, 103, 106, 125, 127, 149, 161, 172, 192, 198, 215, 255, 293, 308, 356, 357, 358, 442, 465, 524, 526, 610, 643, 656, 671, 688, 708, 711, 717, 756, 810, 811, 812, 822, 905, 969, 971, 1014, 1022], "larg": [13, 65, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "element": [13, 23, 124, 127, 137, 171, 189, 197, 209, 222, 229, 255, 269, 271, 272, 273, 274, 275, 276, 292, 300, 301, 303, 304, 305, 306, 307, 308, 360, 374, 383, 401, 403, 404, 405, 409, 424, 427, 428, 457, 458, 465, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 489, 490, 491, 496, 497, 520, 521, 527, 541, 542, 544, 550, 564, 592, 593, 596, 601, 610, 624, 676, 680, 684, 708, 718, 719, 720, 721, 722, 723, 724, 739, 745, 750, 751, 752, 753, 754, 755, 756, 813, 818, 824, 836, 848, 851, 857, 859, 860, 861, 865, 880, 883, 884, 899, 905, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 934, 935, 936, 940, 941, 965, 966, 972, 984, 987, 988, 993, 998, 999, 1003, 1014], "too": [13, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "optimist": 13, "lead": [13, 97, 118, 160, 161, 255, 269, 431, 484, 511, 523, 532, 539, 549, 564, 610, 642, 643, 652, 692, 708, 718, 927, 956, 968, 977, 1014], "out": [13, 97, 119, 161, 255, 288, 381, 384, 407, 422, 499, 501, 602, 610, 643, 672, 673, 708, 735, 863, 878, 944, 946], "memori": [13, 73, 90, 91, 94, 95, 96, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 149, 206, 237, 255, 457, 466, 487, 610, 673, 708, 717, 718, 906, 931, 932, 1014], "error": [13, 30, 76, 102, 103, 113, 160, 161, 175, 189, 197, 228, 255, 288, 294, 337, 341, 348, 391, 410, 422, 472, 473, 474, 475, 476, 478, 479, 480, 499, 501, 505, 507, 508, 524, 525, 526, 529, 610, 642, 643, 648, 692, 708, 735, 740, 791, 795, 802, 866, 878, 944, 946, 950, 952, 953, 969, 970, 971, 974, 1014], "row": [13, 18, 23, 28, 31, 33, 35, 65, 66, 68, 73, 82, 84, 89, 93, 94, 96, 97, 102, 103, 106, 107, 111, 113, 115, 116, 117, 120, 123, 125, 136, 137, 138, 145, 149, 152, 154, 158, 160, 162, 163, 168, 170, 171, 172, 173, 175, 176, 177, 181, 185, 199, 207, 211, 212, 215, 217, 222, 224, 226, 227, 233, 237, 240, 249, 255, 269, 280, 361, 375, 396, 405, 423, 457, 458, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 493, 495, 504, 507, 538, 557, 558, 567, 568, 576, 580, 584, 587, 590, 592, 593, 599, 602, 610, 624, 626, 628, 631, 635, 638, 639, 642, 644, 648, 649, 651, 652, 656, 673, 674, 678, 679, 680, 681, 683, 688, 692, 695, 704, 708, 717, 814, 824, 848, 861, 899, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 938, 949, 952, 984, 1014, 1022], "per": [13, 28, 31, 123, 125, 137, 158, 185, 186, 208, 222, 244, 246, 247, 255, 269, 293, 404, 407, 422, 495, 558, 610, 624, 675, 680, 699, 701, 702, 708, 860, 863, 878], "everi": [13, 102, 103, 113, 160, 212, 215, 228, 255, 303, 304, 305, 306, 307, 308, 341, 348, 361, 397, 398, 402, 405, 407, 408, 418, 421, 504, 540, 567, 568, 610, 635, 642, 679, 708, 752, 753, 754, 755, 756, 795, 802, 814, 853, 854, 858, 861, 863, 864, 874, 877, 949, 986, 1014], "process": [13, 28, 129, 255, 672, 673, 708], "liter": [14, 18, 30, 50, 70, 74, 100, 106, 125, 126, 127, 128, 130, 132, 158, 172, 178, 179, 183, 184, 187, 197, 198, 201, 210, 214, 227, 232, 255, 265, 267, 287, 315, 354, 355, 362, 369, 372, 373, 379, 391, 394, 430, 447, 449, 453, 454, 460, 499, 514, 515, 535, 545, 553, 554, 557, 560, 562, 563, 569, 570, 571, 582, 584, 587, 591, 594, 597, 598, 600, 610, 637, 667, 683, 686, 708, 711, 715, 716, 734, 765, 815, 829, 925, 926, 944, 959, 960, 1014, 1021], "left": [14, 52, 65, 74, 120, 121, 130, 160, 161, 174, 175, 227, 255, 356, 357, 358, 378, 379, 472, 473, 474, 475, 476, 478, 479, 480, 483, 510, 532, 543, 560, 567, 568, 576, 590, 602, 610, 642, 643, 647, 648, 683, 708, 810, 811, 812, 829, 923, 955, 977, 997, 1014], "center": [14, 31, 255, 356, 357, 358, 471, 472, 473, 474, 475, 476, 478, 479, 480, 610, 810, 811, 812, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1014], "right": [14, 16, 31, 74, 102, 103, 120, 121, 130, 160, 161, 174, 175, 255, 356, 357, 358, 379, 403, 409, 424, 472, 473, 474, 475, 476, 478, 479, 480, 483, 492, 516, 560, 610, 642, 643, 647, 648, 708, 810, 811, 812, 829, 859, 865, 880, 923, 937, 961, 1014], "cell": 14, "align": [14, 31, 65, 73, 255, 532, 977], "keyerror": [14, 18], "recognis": [14, 18, 122], "column_abc": 14, "column_xyz": 14, "visibl": [15, 147, 255, 809, 1014], "eg": [15, 23, 31, 255, 341, 524, 526, 545, 610, 969, 971], "low": [15, 129], "rang": [15, 31, 74, 104, 130, 142, 147, 160, 173, 255, 309, 319, 332, 338, 339, 341, 348, 349, 378, 557, 562, 570, 571, 600, 610, 642, 708, 757, 758, 769, 786, 792, 793, 795, 802, 803, 809, 899, 903, 1014], "100": [15, 31, 93, 96, 102, 103, 113, 116, 255, 507, 527, 532, 708, 912, 913, 915, 952, 972, 1014, 1022], "98": [15, 166, 255, 292, 494, 527, 539, 544, 610, 972], "99": [15, 31, 150, 151, 166, 169, 255, 263, 292, 362, 364, 494, 539, 544, 610, 636, 637, 708, 808, 815, 1014], "tbl_col": 15, "10": [15, 27, 28, 30, 31, 32, 35, 50, 65, 73, 74, 97, 104, 113, 125, 127, 130, 139, 149, 157, 160, 161, 163, 165, 166, 167, 184, 188, 190, 194, 195, 201, 211, 232, 235, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 268, 277, 278, 279, 281, 297, 302, 304, 307, 310, 312, 313, 315, 333, 334, 340, 341, 348, 351, 374, 375, 378, 383, 391, 395, 396, 402, 408, 417, 418, 421, 427, 458, 459, 493, 532, 538, 552, 560, 567, 573, 576, 578, 580, 582, 583, 599, 610, 628, 642, 643, 644, 646, 651, 660, 661, 667, 673, 677, 678, 686, 690, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 711, 718, 746, 757, 759, 765, 794, 802, 805, 808, 824, 836, 851, 858, 864, 873, 874, 877, 883, 899, 925, 926, 984, 1014, 1022], "95": [15, 263, 610], "96": [15, 263, 610], "97": [15, 166, 255, 263, 610], "move": [16, 255, 356, 357, 358, 472, 473, 475, 479, 610, 810, 811, 812, 912, 913, 915, 919, 1014], "inlin": [16, 255, 499, 505, 506, 514, 944, 950, 951, 959], "parenthes": 16, "below": [17, 31, 74, 105, 114, 145, 255, 364, 378, 602, 610, 631, 708], "ascii_ful": 18, "ascii_full_condens": 18, "ascii_no_bord": 18, "ascii_borders_onli": 18, "ascii_borders_only_condens": 18, "ascii_horizontal_onli": 18, "ascii_markdown": 18, "utf8_ful": [18, 65, 97], "utf8_full_condens": [18, 97], "utf8_no_bord": 18, "utf8_borders_onli": 18, "utf8_horizontal_onli": 18, "noth": [18, 500, 505, 508, 945, 950, 953], "rounded_corn": 18, "style": [18, 31, 189, 255], "border": 18, "line": [18, 31, 102, 103, 106, 113, 158, 168, 170, 255, 505, 950], "includ": [18, 26, 28, 30, 31, 71, 105, 114, 125, 137, 142, 147, 160, 222, 223, 226, 255, 342, 379, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 517, 519, 520, 523, 567, 592, 593, 610, 624, 642, 680, 708, 758, 796, 809, 829, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 964, 965, 968, 1004, 1014], "divid": [18, 341, 348, 356, 357, 358, 392, 610, 795, 802, 810, 811, 812, 849, 1014], "dens": [18, 158, 255, 465, 610, 905, 1014], "space": [18, 160, 255, 642, 708], "horizont": [18, 73, 154, 165, 226, 255, 553, 554, 562, 563, 567, 568, 569, 573, 576, 584, 587, 590, 598], "markdown": 18, "compat": [18, 31, 35, 104, 255, 499, 500, 505, 506, 514, 515, 673, 708, 711, 944, 945, 950, 951, 959, 960], "No": [18, 530, 975], "appli": [18, 28, 31, 50, 73, 113, 122, 125, 127, 154, 188, 255, 319, 322, 324, 325, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 352, 357, 358, 431, 459, 471, 472, 473, 475, 479, 514, 524, 525, 526, 529, 552, 567, 568, 576, 583, 590, 610, 644, 651, 652, 660, 708, 767, 768, 769, 772, 774, 775, 779, 781, 784, 786, 789, 792, 793, 796, 799, 803, 804, 806, 811, 812, 911, 912, 913, 915, 919, 959, 969, 970, 971, 974, 1014], "round": [18, 31, 67, 97, 255, 296, 368, 541, 610, 743, 820, 1014], "corner": [18, 97], "op": [18, 127, 255, 468, 524, 526, 610, 708, 969, 971, 1014], "one": [18, 29, 31, 55, 65, 74, 82, 90, 92, 93, 94, 95, 96, 126, 127, 128, 133, 151, 152, 158, 159, 160, 161, 172, 181, 189, 197, 198, 202, 221, 236, 255, 263, 364, 391, 423, 428, 471, 494, 506, 539, 598, 602, 610, 637, 638, 641, 642, 643, 656, 668, 687, 691, 708, 717, 817, 845, 879, 884, 911, 951, 978, 1014], "more": [18, 31, 33, 35, 55, 65, 73, 89, 90, 91, 92, 93, 94, 95, 96, 105, 111, 114, 125, 127, 133, 136, 141, 142, 172, 176, 181, 185, 197, 198, 199, 224, 237, 255, 266, 269, 285, 297, 298, 299, 391, 392, 425, 428, 431, 456, 482, 492, 506, 524, 525, 526, 546, 598, 602, 610, 656, 673, 681, 708, 711, 718, 733, 746, 747, 748, 758, 845, 849, 881, 922, 937, 951, 969, 970, 971, 999, 1014, 1022], "semigraph": 18, "box": [18, 136, 255], "draw": [18, 23, 24, 124, 1022], "found": [18, 28, 52, 77, 86, 88, 93, 97, 146, 227, 255, 483, 508, 524, 526, 610, 683, 708, 923, 953, 969, 971, 1014, 1021], "unicod": 18, "block": [18, 159, 224, 255, 641, 664, 681, 688, 692, 708, 925, 926, 1014], "http": [18, 31, 91, 104, 135, 141, 255, 505, 950], "en": [18, 31, 255], "wikipedia": 18, "org": [18, 91, 104, 135, 141, 255], "wiki": 18, "drawing_charact": 18, "box_draw": 18, "mno": 18, "tbl_format": 18, "tbl_hide_column_data_typ": 18, "tbl_hide_dataframe_shap": 18, "hide": [19, 20, 21, 22, 31, 255], "etc": [19, 30, 31, 102, 105, 107, 111, 114, 115, 117, 255, 557, 711, 925, 926, 1014], "inform": [21, 71, 74, 105, 114, 141, 255, 297, 298, 299, 392, 492, 499, 505, 506, 514, 610, 661, 708, 746, 747, 748, 849, 937, 944, 950, 951, 959, 1014], "separ": [22, 28, 99, 102, 103, 113, 187, 189, 216, 223, 225, 255, 269, 405, 410, 504, 563, 567, 568, 610, 682, 708, 861, 866, 949, 982, 991, 1014], "between": [22, 73, 122, 123, 125, 127, 191, 247, 255, 294, 311, 379, 403, 409, 410, 424, 458, 463, 476, 498, 564, 566, 589, 592, 593, 610, 662, 702, 708, 740, 760, 829, 859, 865, 866, 880, 899, 904, 916, 943, 1014], "set_tbl_column_data_type_inlin": 22, "max": [23, 31, 35, 50, 129, 142, 151, 159, 160, 161, 189, 255, 297, 298, 304, 364, 423, 457, 465, 472, 484, 521, 595, 610, 637, 641, 642, 643, 673, 708, 746, 747, 752, 758, 817, 879, 905, 912, 927, 966, 1014], "both": [23, 28, 56, 74, 104, 130, 160, 161, 174, 175, 182, 197, 255, 268, 379, 472, 473, 474, 475, 476, 478, 479, 480, 610, 620, 642, 643, 647, 648, 657, 708, 829, 838, 1014], "tbl_row": 23, "char": [24, 56, 75, 506, 512, 951, 957], "enabl": [25, 75, 131, 201, 232, 255, 484, 610, 667, 686, 708, 927, 1014], "addit": [25, 30, 31, 93, 105, 114, 123, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 262, 359, 362, 457, 495, 499, 505, 506, 514, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 594, 597, 598, 610, 630, 634, 641, 667, 668, 675, 682, 686, 690, 708, 815, 944, 950, 951, 959, 1014], "verbos": [25, 133, 506, 951], "debug": [25, 628, 635, 652, 708, 1022], "log": [25, 67, 292, 353, 428, 449, 460, 544, 610, 739, 808, 998, 1014], "if_set": 26, "env_onli": 26, "dict": [26, 30, 31, 35, 53, 66, 68, 71, 90, 92, 93, 94, 95, 96, 102, 103, 105, 106, 107, 108, 111, 112, 113, 114, 115, 117, 125, 172, 187, 193, 197, 198, 200, 214, 215, 255, 433, 610, 664, 666, 708, 886, 1014], "show": [26, 31, 54, 145, 158, 176, 186, 255, 631, 661, 671, 708], "variabl": [26, 47, 52, 126, 129, 181, 216, 255, 656, 708, 991, 1014, 1021], "restrict": [26, 74, 521, 966], "dictionari": [26, 31, 90, 92, 93, 94, 96, 102, 103, 108, 112, 113, 172, 187, 197, 198, 214, 215, 255, 433, 610, 708, 758, 886, 1014], "those": [26, 31, 102, 255, 465, 505, 610, 711, 905, 950, 1014], "been": [26, 31, 255, 465, 472, 473, 474, 475, 476, 478, 479, 480, 610, 905, 1014], "set_fmt_float": 26, "directli": [26, 52, 125, 127, 133, 255, 356, 357, 358, 591, 610, 708, 810, 811, 812, 1014, 1022], "via": [26, 102, 103, 106, 113, 115, 116, 117, 172, 198, 255, 269, 610], "set_stat": 26, "all_stat": 26, "binaryio": [27, 32, 101, 102, 106, 107, 108, 111, 112, 255], "bytesio": [27, 28, 31, 32, 35, 101, 102, 103, 106, 107, 111, 255], "compress": [27, 32, 35, 255, 672, 673, 708], "avrocompress": [27, 255], "uncompress": [27, 32, 35, 107, 115, 255, 673, 708], "write": [27, 28, 29, 30, 31, 32, 33, 35, 103, 107, 133, 255, 297, 298, 299, 445, 610, 650, 671, 673, 689, 708, 746, 747, 748, 1014], "apach": [27, 35, 101, 104, 255], "avro": [27, 101, 255, 621], "should": [27, 28, 31, 32, 33, 34, 35, 73, 90, 92, 94, 96, 105, 113, 122, 123, 127, 135, 136, 143, 160, 161, 172, 175, 197, 198, 215, 216, 225, 228, 237, 255, 263, 269, 295, 308, 337, 341, 348, 351, 359, 385, 387, 404, 471, 472, 473, 474, 475, 476, 478, 479, 480, 483, 492, 561, 574, 581, 582, 592, 593, 602, 610, 630, 642, 643, 647, 648, 652, 671, 672, 673, 682, 689, 708, 711, 718, 742, 756, 791, 795, 802, 805, 860, 911, 912, 913, 914, 915, 916, 918, 919, 920, 923, 937, 1014], "snappi": [27, 35, 255, 673, 708], "deflat": [27, 255], "import": [27, 28, 31, 32, 35, 38, 65, 74, 90, 94, 95, 113, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 142, 158, 160, 173, 175, 218, 219, 226, 228, 255, 309, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 572, 610, 621, 642, 648, 652, 708, 750, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 833, 837, 839, 840, 845, 911, 935, 987, 1014, 1022], "pathlib": [27, 28, 32, 35, 113, 255], "foo": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 162, 163, 164, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 203, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 231, 234, 255, 264, 297, 298, 299, 337, 375, 377, 396, 400, 406, 407, 411, 412, 469, 485, 486, 498, 500, 502, 504, 506, 511, 517, 519, 521, 523, 528, 531, 538, 540, 553, 556, 559, 561, 564, 565, 566, 575, 579, 580, 584, 585, 586, 587, 588, 589, 594, 596, 599, 601, 602, 610, 629, 630, 631, 632, 638, 645, 646, 647, 659, 664, 666, 667, 681, 682, 685, 687, 689, 708, 711, 746, 791, 866, 909, 945, 947, 949, 951, 966, 973, 976, 1014], "bar": [27, 28, 30, 32, 33, 34, 35, 54, 136, 140, 141, 143, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 163, 165, 166, 167, 169, 174, 178, 179, 180, 183, 186, 189, 191, 193, 194, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 213, 215, 216, 217, 218, 219, 220, 224, 225, 229, 230, 234, 255, 264, 377, 412, 492, 502, 504, 519, 521, 553, 556, 559, 561, 564, 565, 566, 575, 580, 584, 585, 586, 587, 588, 594, 596, 599, 601, 602, 610, 629, 630, 631, 632, 638, 645, 646, 647, 659, 664, 666, 667, 681, 682, 685, 689, 708, 711, 866, 937, 947, 949, 966, 1014], "ham": [27, 28, 30, 32, 35, 140, 141, 143, 144, 145, 146, 152, 153, 155, 162, 163, 165, 174, 178, 179, 180, 183, 186, 191, 193, 195, 197, 199, 200, 201, 204, 205, 207, 209, 210, 211, 216, 217, 218, 219, 220, 224, 229, 230, 255, 561, 629, 630, 631, 632, 638, 647, 659, 664, 666, 667, 681, 687, 708], "d": [27, 28, 30, 32, 35, 56, 75, 93, 118, 142, 158, 160, 162, 163, 166, 174, 211, 213, 226, 230, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 262, 321, 344, 347, 379, 459, 487, 500, 506, 520, 524, 525, 526, 560, 578, 610, 642, 647, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 771, 798, 801, 829, 945, 951, 965, 969, 970, 971, 1014], "e": [27, 28, 30, 32, 35, 56, 75, 91, 102, 103, 106, 107, 111, 115, 117, 142, 158, 160, 161, 163, 175, 211, 213, 226, 228, 255, 262, 269, 337, 341, 348, 353, 359, 379, 426, 433, 472, 473, 474, 475, 476, 478, 479, 480, 487, 492, 574, 602, 610, 642, 643, 648, 650, 664, 708, 711, 791, 795, 802, 808, 829, 924, 937, 995, 1014], "dirpath": [27, 28, 32, 35, 113, 255], "new_fil": [27, 28, 32, 35, 255], "has_head": [28, 31, 102, 103, 106, 113, 255], "quot": [28, 102, 103, 113, 255], "batch_siz": [28, 102, 103, 116, 255], "1024": [28, 102, 103, 116, 255, 673, 708], "datetime_format": [28, 255], "date_format": [28, 255], "time_format": [28, 255], "float_precis": [28, 31, 255], "null_valu": [28, 102, 103, 113, 255], "comma": [28, 255], "csv": [28, 102, 103, 106, 113, 255, 621, 672, 673, 708], "result": [28, 33, 34, 65, 73, 74, 94, 96, 100, 104, 105, 113, 115, 117, 118, 127, 132, 149, 160, 161, 174, 185, 205, 219, 228, 235, 255, 269, 344, 347, 356, 357, 358, 362, 392, 423, 431, 457, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 484, 486, 519, 520, 526, 545, 557, 567, 568, 583, 591, 592, 593, 610, 625, 642, 643, 647, 652, 661, 670, 672, 673, 689, 690, 708, 717, 718, 798, 801, 810, 811, 812, 849, 909, 911, 912, 913, 914, 915, 916, 918, 919, 920, 927, 930, 964, 965, 971, 995, 1014, 1021, 1022], "If": [28, 30, 31, 32, 33, 34, 50, 56, 70, 71, 73, 74, 90, 91, 92, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107, 111, 113, 114, 115, 116, 117, 126, 130, 132, 135, 136, 137, 145, 149, 158, 160, 161, 163, 171, 172, 175, 177, 181, 185, 198, 199, 207, 211, 215, 216, 218, 222, 223, 224, 226, 227, 255, 269, 297, 298, 299, 315, 333, 334, 340, 365, 392, 418, 423, 431, 433, 457, 465, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 488, 492, 493, 507, 509, 511, 512, 517, 518, 519, 520, 521, 523, 524, 525, 526, 529, 553, 554, 555, 557, 564, 565, 567, 569, 576, 582, 584, 587, 591, 592, 593, 597, 598, 602, 610, 624, 631, 633, 642, 643, 647, 648, 652, 656, 664, 673, 674, 680, 681, 683, 689, 692, 708, 711, 717, 718, 746, 747, 748, 757, 765, 787, 788, 794, 822, 824, 825, 848, 849, 851, 874, 879, 903, 905, 907, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 927, 933, 937, 938, 952, 954, 956, 957, 962, 963, 964, 965, 966, 968, 969, 970, 971, 974, 984, 990, 995, 1004, 1014, 1021], "instead": [28, 33, 34, 50, 54, 65, 70, 73, 74, 100, 102, 111, 125, 130, 132, 136, 160, 161, 172, 175, 185, 187, 197, 198, 201, 219, 228, 232, 255, 279, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 509, 511, 517, 523, 557, 584, 587, 591, 597, 610, 636, 642, 643, 648, 667, 686, 689, 708, 711, 727, 791, 795, 802, 925, 926, 954, 956, 962, 968, 996, 1014, 1021], "whether": [28, 74, 94, 96, 127, 130, 202, 255, 324, 340, 342, 438, 439, 484, 610, 652, 668, 708, 711, 774, 794, 796, 1021], "header": [28, 31, 35, 97, 102, 103, 106, 113, 146, 189, 223, 255, 673, 708], "field": [28, 57, 86, 88, 93, 218, 225, 255, 423, 433, 506, 507, 520, 521, 534, 567, 568, 583, 597, 610, 682, 708, 879, 965, 966, 980, 982], "symbol": [28, 255], "byte": [28, 102, 103, 106, 107, 108, 111, 112, 113, 147, 255, 287, 290, 291, 509, 512, 673, 708, 734, 737, 738, 809, 954, 957, 1014], "specifi": [28, 31, 65, 74, 77, 86, 88, 106, 125, 137, 143, 147, 148, 151, 159, 160, 161, 174, 187, 197, 201, 202, 208, 222, 225, 232, 235, 255, 356, 357, 358, 359, 364, 433, 457, 468, 472, 473, 474, 475, 476, 478, 479, 480, 495, 510, 516, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 594, 597, 598, 610, 624, 630, 634, 637, 641, 642, 643, 647, 667, 668, 675, 680, 682, 686, 690, 708, 809, 810, 811, 812, 817, 955, 961, 1014], "defin": [28, 31, 38, 74, 122, 123, 125, 130, 136, 160, 161, 185, 188, 237, 255, 269, 379, 422, 459, 472, 473, 474, 475, 476, 478, 479, 480, 555, 582, 597, 610, 642, 643, 660, 692, 708, 718, 829, 878, 1014], "chrono": [28, 255, 344, 347, 524, 525, 526, 529, 798, 801, 969, 970, 971, 974], "rust": [28, 35, 83, 107, 111, 136, 237, 255, 718, 1014], "crate": [28, 255, 499, 500, 505, 506, 514, 515, 524, 525, 526, 529, 711, 944, 945, 950, 951, 959, 960, 969, 970, 971, 974], "fraction": [28, 120, 121, 199, 255, 342, 458, 482, 524, 526, 610, 796, 899, 922, 969, 971, 1014], "second": [28, 74, 124, 130, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 571, 572, 600, 602, 610, 642, 643, 648, 708, 791, 795, 802, 969, 971, 1022], "precis": [28, 31, 39, 172, 198, 215, 255, 314, 527, 711, 764, 972], "infer": [28, 90, 92, 93, 94, 95, 96, 102, 103, 106, 113, 116, 136, 255, 469, 507, 524, 525, 526, 527, 529, 591, 610, 708, 909, 952, 969, 970, 971, 972, 974, 1014], "maximum": [28, 102, 103, 113, 123, 124, 125, 127, 178, 255, 397, 434, 451, 465, 584, 610, 653, 708, 746, 776, 853, 887, 895, 900, 905, 1014], "timeunit": [28, 38, 40, 74, 255, 314, 315, 346, 351, 526, 711, 764, 765, 800, 805, 971], "frame": [28, 29, 31, 50, 51, 52, 53, 54, 55, 65, 73, 93, 120, 125, 136, 138, 172, 173, 182, 185, 188, 197, 198, 219, 226, 255, 626, 657, 660, 708, 711, 745, 1014, 1021, 1022], "datetim": [28, 31, 65, 74, 97, 125, 130, 142, 158, 160, 161, 173, 175, 228, 255, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 400, 472, 473, 474, 475, 476, 478, 479, 480, 524, 526, 543, 572, 578, 582, 610, 642, 643, 648, 708, 711, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 845, 856, 857, 895, 896, 926, 969, 971, 997, 1014], "place": [28, 137, 144, 165, 166, 189, 194, 204, 205, 208, 222, 230, 255, 279, 410, 417, 485, 486, 494, 610, 624, 669, 670, 675, 680, 708, 727, 866, 873, 906, 908, 929, 930, 939, 1014], "float64": [28, 31, 93, 100, 102, 125, 132, 146, 147, 154, 200, 219, 232, 255, 271, 272, 273, 274, 275, 276, 294, 300, 301, 309, 342, 359, 385, 387, 464, 490, 491, 541, 542, 561, 574, 591, 610, 632, 666, 686, 708, 711, 796, 996, 1001, 1014], "repres": [28, 48, 63, 74, 90, 92, 94, 95, 96, 130, 209, 229, 255, 385, 387, 497, 550, 553, 561, 564, 574, 582, 592, 593, 596, 601, 610, 676, 684, 708, 926, 941, 1003, 1014], "empti": [28, 81, 93, 102, 103, 106, 113, 138, 139, 160, 169, 181, 255, 582, 594, 626, 627, 642, 656, 708, 711, 745, 749, 832, 1014], "table_nam": [29, 31, 255], "connection_uri": [29, 104, 255], "if_exist": [29, 255], "dbwritemod": [29, 255], "fail": [29, 30, 91, 105, 107, 114, 135, 224, 255, 280, 423, 524, 525, 526, 529, 610, 681, 708, 718, 969, 970, 971, 974, 1014], "dbwriteengin": [29, 255], "sqlalchemi": [29, 255], "databas": [29, 104, 255, 621], "append": [29, 30, 74, 125, 149, 174, 175, 255, 466, 602, 610, 647, 648, 708, 1014], "creat": [29, 31, 74, 90, 94, 96, 114, 123, 124, 125, 126, 127, 128, 130, 138, 139, 160, 161, 186, 189, 228, 232, 255, 315, 341, 348, 423, 466, 472, 473, 475, 478, 479, 480, 518, 549, 562, 570, 571, 572, 600, 610, 626, 627, 633, 642, 643, 686, 708, 745, 749, 757, 762, 765, 795, 802, 897, 903, 906, 963, 995, 1014, 1021, 1022], "connect": [29, 102, 104, 107, 111, 115, 117, 118, 255, 622], "uri": [29, 30, 104, 105, 114, 255], "postgresql": [29, 104, 255, 457, 610], "usernam": [29, 102, 104, 107, 111, 115, 117, 255], "password": [29, 102, 104, 107, 111, 115, 117, 255], "server": [29, 104, 255], "port": [29, 102, 104, 107, 111, 115, 117, 255], "replac": [29, 30, 102, 103, 113, 150, 151, 195, 223, 232, 255, 315, 340, 433, 515, 610, 636, 686, 708, 765, 794, 886, 925, 926, 960, 1014], "insert": [29, 102, 103, 107, 111, 113, 115, 116, 117, 166, 194, 223, 225, 255, 483, 498, 532, 610, 682, 708, 923, 943, 977, 1014], "mode": [29, 30, 50, 100, 132, 255, 506, 591, 610, 708, 951, 1014, 1021], "new": [29, 30, 31, 113, 133, 136, 145, 165, 166, 185, 186, 193, 194, 212, 225, 226, 232, 255, 264, 315, 361, 378, 432, 514, 515, 520, 521, 533, 534, 540, 610, 621, 631, 664, 679, 682, 686, 692, 708, 714, 762, 765, 814, 897, 908, 959, 960, 965, 966, 978, 980, 986, 992, 1005, 1014, 1021], "alreadi": [29, 30, 255, 308, 404, 610, 756, 860, 1014], "adbc": [29, 104, 255], "deltalak": [30, 105, 114, 119, 255], "deltat": [30, 255], "ignor": [30, 124, 125, 127, 179, 210, 255, 310, 340, 356, 357, 358, 402, 451, 452, 610, 759, 794, 810, 811, 812, 858, 895, 896, 1014], "overwrite_schema": [30, 255], "storage_opt": [30, 102, 105, 107, 111, 114, 115, 117, 255], "delta_write_opt": [30, 255], "delta": [30, 40, 105, 114, 209, 229, 255, 478, 480, 497, 550, 564, 592, 593, 596, 601, 610, 621, 676, 684, 708, 918, 920, 941, 1003, 1014], "like": [30, 74, 91, 101, 102, 103, 106, 107, 108, 109, 110, 111, 112, 113, 130, 168, 170, 174, 255, 404, 444, 465, 505, 598, 610, 635, 663, 708, 860, 905, 950, 1014], "categor": [30, 56, 75, 174, 216, 217, 255, 295, 433, 543, 610, 711, 741, 742, 997, 1014], "protocol": [30, 91, 104, 135, 255], "object": [30, 31, 32, 35, 55, 73, 74, 91, 92, 97, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 114, 123, 125, 127, 130, 135, 159, 160, 161, 176, 218, 219, 255, 582, 621, 642, 643, 663, 708, 711, 741, 763, 852, 942, 990, 1014], "handl": [30, 73, 97, 102, 103, 113, 118, 255, 310, 402, 532, 610, 759, 858, 977, 1014], "throw": [30, 91, 255, 294, 507, 508, 610, 740, 952, 953, 1014], "add": [30, 31, 103, 136, 149, 160, 232, 233, 255, 461, 536, 572, 576, 602, 610, 642, 647, 686, 687, 688, 708, 717, 1014], "anyth": [30, 197, 255, 506, 951], "updat": [30, 255, 708], "extra": [30, 35, 102, 105, 106, 107, 111, 114, 115, 117, 149, 160, 255, 642, 673, 708, 717, 1014], "storag": [30, 102, 105, 107, 111, 114, 115, 117, 255], "backend": [30, 104, 105, 114, 255], "cloud": [30, 105, 114, 118, 255], "configur": [30, 105, 114, 255], "authent": [30, 105, 114, 255], "see": [30, 31, 74, 104, 105, 106, 114, 120, 121, 125, 127, 141, 174, 188, 255, 297, 298, 299, 364, 378, 392, 431, 492, 499, 505, 506, 514, 590, 610, 746, 747, 748, 849, 937, 944, 950, 951, 959, 1014, 1022], "here": [30, 31, 90, 92, 93, 94, 96, 104, 105, 114, 123, 125, 127, 255, 508, 708, 953], "gc": [30, 105, 114, 255], "azur": [30, 105, 114, 255], "keyword": [30, 53, 105, 111, 114, 141, 188, 197, 201, 232, 235, 255, 459, 594, 597, 610, 660, 667, 686, 690, 708, 1014], "argument": [30, 35, 74, 102, 105, 111, 114, 130, 141, 143, 148, 159, 160, 161, 179, 187, 188, 189, 201, 202, 208, 210, 219, 225, 228, 232, 235, 255, 341, 348, 359, 379, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 511, 517, 523, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 591, 594, 597, 598, 610, 630, 634, 641, 642, 643, 660, 667, 668, 675, 682, 686, 690, 708, 795, 802, 829, 956, 962, 968, 996, 1014], "while": [30, 103, 105, 106, 114, 125, 127, 172, 181, 223, 255, 656, 708], "lake": [30, 105, 114, 255, 621], "instanti": [30, 31, 201, 232, 255, 667, 686, 708], "basic": [30, 31, 255, 1022], "filesystem": [30, 105, 114, 255], "table_path": [30, 105, 114, 255], "doe": [30, 65, 73, 74, 84, 90, 92, 93, 94, 96, 97, 102, 103, 105, 106, 113, 114, 118, 120, 121, 149, 173, 174, 197, 198, 224, 232, 255, 351, 423, 433, 547, 575, 610, 635, 647, 652, 681, 686, 708, 717, 805, 822, 886, 932, 1004, 1014], "match": [30, 31, 73, 84, 90, 92, 93, 94, 96, 120, 121, 151, 175, 197, 255, 439, 477, 499, 500, 503, 505, 506, 507, 508, 514, 515, 522, 524, 525, 526, 561, 610, 637, 648, 708, 711, 838, 845, 917, 944, 945, 948, 950, 951, 952, 953, 959, 960, 967, 969, 970, 971, 1014], "version": [30, 71, 74, 105, 114, 119, 130, 255, 333, 334, 524, 526, 590, 591, 787, 788, 969, 971], "old": [30, 193, 255, 664, 708], "existing_table_path": [30, 255], "store": [30, 102, 111, 149, 172, 198, 255, 717, 1014], "bucket": [30, 105, 114, 255, 341, 348, 795, 802, 825, 1014], "prefix": [30, 133, 255, 264, 291, 432, 522, 532, 536, 610, 711, 738, 967, 977], "aws_region": [30, 114, 255], "the_aws_region": [30, 255], "aws_access_key_id": [30, 105, 114, 255], "the_aws_access_key_id": [30, 105, 114, 255], "aws_secret_access_kei": [30, 105, 114, 255], "the_aws_secret_access_kei": [30, 105, 114, 255], "workbook": [31, 255], "worksheet": [31, 255], "posit": [31, 143, 148, 159, 187, 201, 202, 208, 225, 232, 235, 255, 356, 357, 358, 359, 457, 495, 513, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 594, 597, 598, 610, 630, 634, 641, 667, 668, 675, 682, 686, 690, 708, 810, 811, 812, 958, 1014], "tupl": [31, 104, 136, 172, 197, 198, 203, 234, 255, 469, 610, 661, 671, 708, 711, 909, 1014], "a1": [31, 66, 68, 255], "table_styl": [31, 255], "column_format": [31, 255], "dtype_format": [31, 255], "oneormoredatatyp": [31, 123, 255, 845, 1014], "conditional_format": [31, 255], "conditionalformatdict": [31, 255], "column_tot": [31, 255], "columntotalsdefinit": [31, 255], "column_width": [31, 255], "row_tot": [31, 255], "rowtotalsdefinit": [31, 255], "row_height": [31, 255], "sparklin": [31, 255], "sequenc": [31, 57, 65, 72, 90, 92, 93, 94, 96, 99, 102, 103, 113, 123, 124, 125, 137, 142, 148, 149, 174, 175, 181, 185, 188, 189, 208, 216, 222, 224, 225, 226, 227, 228, 255, 383, 423, 431, 459, 495, 534, 555, 558, 567, 568, 576, 578, 583, 590, 610, 624, 634, 647, 648, 660, 675, 680, 681, 682, 683, 708, 717, 758, 760, 879, 926, 980, 1014], "formula": [31, 255, 353, 610, 808, 1014], "autofilt": [31, 255], "autofit": [31, 255], "hidden_column": [31, 255], "hide_gridlin": [31, 255], "sheet_zoom": [31, 255], "excel": [31, 106, 255, 621], "open": [31, 102, 103, 106, 107, 111, 115, 117, 255], "xlsxwriter": [31, 119, 255], "ha": [31, 65, 113, 135, 160, 161, 228, 255, 269, 292, 308, 391, 442, 472, 473, 474, 475, 476, 478, 479, 480, 544, 555, 610, 642, 643, 692, 708, 739, 745, 756, 758, 822, 835, 998, 1014], "close": [31, 74, 130, 160, 161, 255, 379, 428, 472, 473, 474, 475, 476, 478, 479, 480, 492, 610, 642, 643, 708, 829, 937, 1014], "xlsx": [31, 106, 255], "work": [31, 39, 103, 106, 194, 255, 269, 285, 296, 297, 298, 299, 359, 368, 404, 425, 457, 512, 546, 610, 733, 743, 746, 747, 748, 820, 860, 881, 957, 999, 1014], "directori": [31, 111, 255], "sheet1": [31, 255], "valid": [31, 50, 74, 107, 111, 127, 133, 147, 174, 255, 308, 499, 500, 505, 506, 508, 514, 515, 610, 647, 708, 711, 756, 809, 822, 944, 945, 950, 951, 953, 959, 960, 1014], "notat": [31, 255], "integ": [31, 43, 44, 45, 46, 59, 60, 61, 62, 123, 125, 126, 128, 160, 161, 255, 296, 342, 368, 369, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480, 513, 552, 557, 578, 591, 610, 642, 643, 708, 711, 725, 726, 743, 796, 820, 838, 907, 917, 926, 958, 1014, 1021, 1022], "medium": [31, 255], "kei": [31, 65, 71, 73, 160, 172, 174, 175, 182, 187, 189, 193, 196, 198, 255, 597, 642, 647, 648, 657, 664, 665, 708], "follow": [31, 71, 74, 102, 103, 105, 113, 114, 136, 160, 161, 175, 188, 228, 255, 269, 337, 341, 348, 459, 465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 534, 545, 555, 602, 603, 604, 606, 610, 611, 612, 616, 617, 618, 642, 643, 648, 660, 708, 791, 795, 802, 905, 925, 926, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1020, 1022], "first_column": [31, 255], "last_column": [31, 255], "banded_column": [31, 255], "banded_row": [31, 255], "sheet": [31, 106, 255], "chart": [31, 255, 661, 708], "subsequ": [31, 55, 192, 219, 255, 423, 633, 708], "colnam": [31, 113, 125, 146, 255, 632, 708], "given": [31, 50, 51, 65, 74, 90, 92, 93, 94, 96, 102, 103, 113, 122, 123, 125, 126, 127, 128, 130, 136, 137, 147, 148, 160, 161, 171, 187, 188, 197, 204, 205, 208, 222, 227, 255, 269, 316, 344, 346, 347, 353, 379, 400, 417, 423, 426, 457, 459, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483, 485, 486, 506, 524, 526, 534, 574, 591, 592, 593, 610, 624, 634, 642, 643, 652, 660, 669, 670, 675, 680, 683, 692, 708, 711, 718, 757, 766, 798, 800, 801, 808, 809, 825, 829, 848, 856, 873, 879, 882, 885, 897, 903, 905, 909, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 923, 929, 930, 951, 969, 971, 1001, 1005, 1014, 1021, 1022], "dd": [31, 255], "mm": [31, 255], "yyyi": [31, 255], "00": [31, 74, 125, 130, 160, 175, 228, 255, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 524, 526, 529, 572, 610, 642, 648, 708, 711, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 805, 806, 969, 971, 974], "overridden": [31, 90, 92, 94, 96, 129, 255, 708], "basi": [31, 125, 255], "param": [31, 90, 92, 93, 94, 96, 102, 103, 113, 124, 125, 127, 197, 255, 708], "It": [31, 74, 136, 182, 188, 237, 255, 269, 293, 441, 610, 652, 657, 692, 708, 925, 926, 1014], "also": [31, 55, 74, 93, 113, 123, 124, 125, 126, 127, 133, 146, 159, 160, 161, 182, 185, 198, 201, 208, 232, 255, 304, 307, 340, 378, 379, 465, 472, 473, 474, 475, 476, 478, 479, 480, 495, 517, 523, 567, 568, 576, 578, 590, 602, 609, 610, 615, 641, 642, 643, 657, 667, 675, 686, 687, 708, 711, 794, 829, 905, 968, 1014], "group": [31, 35, 50, 103, 159, 160, 161, 173, 185, 187, 189, 226, 228, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255, 263, 269, 361, 367, 404, 457, 465, 494, 495, 499, 505, 506, 514, 539, 555, 610, 641, 642, 643, 673, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 860, 944, 950, 951, 959], "float_dtyp": [31, 255], "simplifi": [31, 72, 255, 628, 633, 635, 661, 671, 672, 673, 708], "uniform": [31, 255], "condit": [31, 70, 145, 152, 197, 255, 503, 522, 576, 602, 631, 638, 708], "suppli": [31, 90, 92, 93, 94, 96, 197, 255, 459, 610, 708], "typenam": [31, 255], "3_color_scal": [31, 255], "data_bar": [31, 255], "make": [31, 57, 73, 90, 95, 102, 103, 104, 107, 111, 115, 117, 182, 185, 192, 228, 255, 357, 358, 433, 457, 468, 520, 532, 610, 657, 708, 811, 812, 825, 886, 965, 977, 1014, 1022], "icon": [31, 255], "multipl": [31, 53, 72, 73, 102, 103, 113, 115, 116, 117, 123, 127, 137, 143, 147, 149, 152, 159, 160, 165, 173, 187, 189, 201, 202, 208, 222, 232, 235, 255, 422, 438, 442, 448, 449, 457, 469, 472, 473, 474, 475, 476, 478, 479, 480, 495, 553, 554, 558, 561, 567, 568, 569, 576, 583, 584, 587, 590, 598, 602, 610, 624, 630, 638, 641, 642, 667, 668, 675, 680, 686, 690, 692, 708, 717, 809, 878, 891, 909, 1014], "singl": [31, 51, 65, 73, 102, 103, 104, 111, 113, 123, 143, 144, 145, 149, 156, 171, 174, 187, 197, 208, 255, 269, 337, 365, 401, 422, 431, 466, 469, 495, 498, 551, 553, 554, 555, 557, 558, 561, 562, 563, 569, 583, 584, 587, 598, 610, 630, 631, 647, 675, 708, 717, 791, 857, 878, 906, 909, 943, 990, 1014], "across": [31, 65, 255, 553, 554, 569, 584, 587, 598], "effect": [31, 135, 154, 160, 255, 269, 610, 642, 688, 708], "heatmap": [31, 255], "min": [31, 35, 130, 142, 151, 160, 161, 189, 255, 297, 299, 305, 364, 457, 465, 475, 594, 610, 637, 642, 643, 673, 708, 746, 748, 753, 758, 817, 905, 915, 1014, 1022], "entir": [31, 255], "final": [31, 65, 117, 255, 356, 357, 358, 610, 635, 708, 810, 811, 812, 1014], "made": [31, 130, 255, 995, 1014], "up": [31, 57, 104, 172, 175, 198, 215, 255, 269, 296, 532, 610, 647, 648, 652, 708, 711, 743, 977, 1014], "abov": [31, 255, 602], "order": [31, 50, 52, 65, 93, 120, 136, 137, 159, 160, 161, 187, 188, 189, 199, 202, 208, 222, 224, 228, 255, 269, 279, 285, 295, 419, 425, 465, 482, 483, 484, 494, 495, 534, 546, 547, 558, 610, 620, 624, 641, 642, 643, 656, 668, 672, 673, 675, 680, 681, 708, 718, 727, 733, 742, 757, 844, 875, 881, 903, 905, 910, 922, 923, 927, 939, 980, 999, 1000, 1014], "than": [31, 74, 89, 94, 96, 102, 103, 113, 118, 125, 127, 136, 138, 158, 159, 172, 175, 187, 197, 198, 199, 226, 237, 255, 269, 372, 373, 391, 394, 430, 482, 492, 510, 516, 521, 532, 564, 598, 610, 641, 648, 672, 673, 708, 718, 922, 937, 955, 961, 966, 977, 1014, 1022], "total": [31, 147, 255, 809, 1014], "export": [31, 172, 173, 198, 215, 218, 255], "numer": [31, 175, 255, 262, 297, 298, 299, 369, 379, 428, 447, 449, 460, 468, 487, 535, 545, 610, 621, 648, 708, 711, 746, 747, 748, 758, 829, 843, 924, 931, 1014, 1022], "associ": [31, 51, 53, 65, 124, 255], "sum": [31, 50, 65, 147, 154, 159, 160, 161, 171, 189, 235, 255, 269, 306, 307, 353, 365, 423, 472, 473, 475, 478, 479, 480, 551, 553, 567, 569, 576, 590, 610, 628, 633, 635, 641, 642, 643, 659, 661, 671, 690, 708, 711, 754, 755, 808, 809, 912, 913, 915, 918, 919, 920, 1014], "pass": [31, 35, 53, 65, 74, 92, 106, 113, 123, 125, 127, 137, 141, 143, 159, 160, 161, 163, 177, 187, 188, 201, 208, 211, 222, 228, 232, 235, 255, 269, 321, 340, 362, 377, 457, 459, 472, 473, 474, 475, 476, 478, 479, 480, 495, 511, 517, 523, 553, 554, 558, 561, 569, 578, 584, 587, 597, 598, 610, 624, 630, 641, 642, 643, 645, 652, 660, 667, 671, 675, 680, 686, 690, 692, 708, 718, 771, 794, 815, 824, 851, 956, 962, 968, 984, 1014], "must": [31, 91, 92, 105, 114, 142, 148, 160, 161, 175, 182, 197, 255, 423, 431, 472, 473, 474, 475, 476, 478, 479, 480, 610, 634, 642, 643, 648, 652, 657, 708, 757, 758, 903, 1014], "funcnam": [31, 255], "averag": [31, 255, 356, 357, 358, 465, 610, 810, 811, 812, 905, 1014], "count_num": [31, 255], "count": [31, 50, 102, 103, 107, 111, 113, 115, 116, 117, 142, 160, 161, 175, 185, 186, 189, 223, 227, 228, 233, 237, 246, 255, 270, 303, 337, 395, 401, 450, 455, 472, 473, 474, 475, 476, 478, 479, 480, 500, 547, 549, 556, 588, 610, 642, 643, 648, 659, 683, 688, 692, 701, 708, 758, 791, 825, 857, 893, 898, 945, 1000, 1002, 1014], "std_dev": [31, 255], "var": [31, 128, 255, 480, 610, 708, 1014], "pixel": [31, 255], "unit": [31, 38, 40, 74, 125, 127, 147, 255, 314, 315, 321, 346, 351, 429, 442, 524, 526, 548, 578, 610, 661, 708, 764, 765, 771, 800, 805, 809, 885, 969, 971, 1001, 1014, 1022], "hand": [31, 102, 103, 113, 255, 403, 409, 424, 859, 865, 880], "side": [31, 160, 161, 255, 379, 403, 409, 424, 472, 473, 474, 475, 476, 478, 479, 480, 483, 610, 642, 643, 708, 829, 859, 865, 880, 923, 1014], "call": [31, 54, 103, 125, 127, 133, 136, 159, 160, 161, 176, 254, 255, 269, 304, 307, 584, 587, 610, 622, 641, 642, 643, 707, 708, 711, 718, 1014], "ad": [31, 93, 135, 160, 223, 232, 255, 268, 362, 567, 568, 610, 642, 686, 708, 815, 1014], "end": [31, 74, 102, 103, 111, 113, 130, 160, 255, 287, 290, 291, 337, 341, 342, 359, 379, 418, 499, 503, 506, 518, 522, 557, 561, 574, 602, 610, 642, 644, 651, 661, 708, 711, 737, 791, 795, 829, 874, 948, 951, 963, 967, 1014], "wise": [31, 65, 154, 255, 271, 272, 273, 274, 275, 276, 300, 301, 360, 427, 489, 490, 491, 541, 542, 567, 568, 576, 584, 587, 590, 610, 719, 720, 721, 722, 723, 724, 750, 751, 813, 883, 884, 934, 935, 936, 987, 988, 1014], "particip": [31, 255], "distinct": [31, 127, 187, 255, 285, 425, 465, 572, 610, 733, 881, 905, 1014, 1022], "referenc": [31, 255, 534], "differ": [31, 74, 102, 118, 120, 149, 160, 161, 172, 198, 215, 223, 255, 310, 319, 337, 338, 340, 349, 355, 402, 433, 451, 452, 454, 524, 547, 575, 578, 610, 633, 642, 643, 708, 711, 717, 718, 759, 769, 791, 792, 794, 803, 858, 895, 896, 924, 969, 1014], "row_index": [31, 255], "height": [31, 145, 255], "provid": [31, 53, 102, 103, 104, 105, 113, 114, 125, 127, 171, 255, 269, 288, 289, 423, 431, 501, 502, 505, 507, 508, 578, 597, 610, 621, 672, 673, 708, 718, 735, 736, 825, 848, 946, 947, 950, 952, 953, 1014, 1021, 1022], "intersect": [31, 255, 711], "bodi": [31, 255], "start": [31, 74, 101, 102, 103, 107, 111, 113, 115, 116, 117, 129, 130, 159, 160, 176, 207, 228, 233, 255, 287, 290, 291, 319, 321, 322, 324, 325, 330, 332, 338, 339, 341, 342, 346, 348, 349, 350, 352, 359, 379, 418, 472, 473, 475, 478, 479, 480, 493, 499, 503, 506, 518, 522, 557, 561, 567, 574, 576, 602, 610, 641, 642, 661, 674, 688, 708, 711, 738, 764, 766, 769, 771, 772, 774, 779, 781, 784, 786, 789, 792, 793, 795, 796, 800, 802, 803, 804, 805, 806, 829, 874, 938, 948, 951, 963, 967, 1014, 1022], "zero": [31, 90, 91, 101, 102, 103, 107, 111, 124, 135, 151, 172, 197, 213, 218, 219, 255, 364, 423, 428, 483, 492, 532, 545, 610, 626, 637, 708, 745, 817, 879, 937, 977, 990, 995, 996, 1014], "unless": [31, 65, 92, 219, 255, 517, 523, 591, 708, 968, 996, 1004, 1014], "marker": [31, 255], "compliant": [31, 255], "case": [31, 65, 90, 92, 93, 94, 96, 117, 129, 136, 149, 160, 161, 172, 255, 431, 432, 441, 442, 499, 506, 514, 610, 642, 643, 708, 711, 717, 944, 951, 959, 1014], "three": [31, 221, 255, 423, 483, 610, 879], "avail": [31, 99, 105, 114, 123, 133, 254, 255, 465, 603, 604, 606, 609, 610, 611, 612, 615, 616, 617, 618, 621, 622, 635, 707, 708, 711, 905, 1006, 1008, 1010, 1014, 1015, 1018, 1019, 1020], "insert_befor": [31, 255], "insert_aft": [31, 255], "respect": [31, 255], "direct": [31, 104, 111, 117, 226, 255], "far": [31, 255], "thei": [31, 93, 113, 120, 133, 176, 255, 471, 610, 711, 911, 1014], "strongli": [31, 129, 136, 197, 237, 255, 269, 610, 718, 1014], "advis": [31, 176, 255, 293, 610], "structur": [31, 81, 85, 87, 149, 188, 218, 255, 459, 610, 660, 708, 717, 1014], "your": [31, 65, 102, 103, 120, 121, 136, 172, 201, 232, 235, 255, 269, 293, 524, 525, 526, 610, 628, 644, 651, 652, 667, 686, 690, 708, 718, 969, 970, 971, 1014, 1022], "wherev": [31, 136, 237, 255, 269, 610, 718, 1014], "possibl": [31, 102, 136, 159, 172, 198, 224, 237, 255, 269, 429, 441, 521, 548, 610, 641, 681, 708, 718, 966, 1014], "simpl": [31, 127, 185, 255], "colx": [31, 55, 255, 1022], "coli": [31, 255, 1022], "after": [31, 55, 73, 93, 101, 102, 103, 107, 111, 113, 115, 116, 117, 149, 225, 254, 255, 359, 433, 457, 465, 532, 610, 682, 708, 717, 886, 905, 977, 1014], "befor": [31, 102, 113, 129, 133, 149, 160, 175, 225, 255, 306, 307, 308, 433, 457, 458, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 532, 537, 592, 593, 610, 642, 645, 648, 682, 708, 717, 754, 755, 756, 886, 899, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 977, 983, 1014], "most": [31, 52, 90, 102, 103, 113, 255, 442, 448, 458, 521, 549, 610, 891, 899, 966, 1002, 1014, 1021], "mandatori": [31, 255], "return_dtyp": [31, 136, 255, 269, 431, 433, 555, 583, 610, 718, 886, 1014], "latter": [31, 149, 255, 717, 1014], "appropri": [31, 255, 465, 610, 905, 1014], "pure": [31, 255], "actual": [31, 93, 106, 125, 127, 255, 293, 610, 932, 1014], "indic": [31, 70, 101, 102, 103, 107, 111, 113, 122, 123, 127, 160, 161, 175, 202, 216, 228, 255, 280, 337, 341, 348, 381, 384, 385, 387, 388, 389, 422, 437, 440, 472, 473, 474, 475, 476, 478, 479, 480, 483, 489, 539, 558, 610, 642, 643, 648, 668, 708, 791, 795, 802, 833, 837, 839, 840, 841, 842, 878, 923, 934, 985, 991, 1014, 1022], "calcul": [31, 65, 160, 209, 229, 255, 310, 356, 357, 358, 392, 402, 429, 477, 492, 497, 548, 550, 553, 555, 564, 592, 593, 596, 601, 610, 642, 676, 684, 708, 759, 810, 811, 812, 849, 858, 917, 937, 941, 1003, 1014], "individu": [31, 125, 161, 218, 255, 269, 506, 610, 643, 673, 708, 744, 951, 1014], "gridlin": [31, 255], "zoom": [31, 255], "level": [31, 35, 113, 115, 116, 117, 125, 136, 154, 185, 255, 365, 610, 644, 651, 673, 708], "definit": [31, 123, 255, 392, 610, 849, 1014], "take": [31, 125, 133, 154, 160, 182, 188, 189, 212, 255, 337, 495, 540, 573, 575, 610, 642, 657, 679, 708, 791, 986, 1005, 1014], "care": [31, 255, 269, 484, 610, 927, 1014], "rel": [31, 105, 114, 120, 121, 255, 337, 356, 357, 358, 610, 791, 810, 811, 812, 1014], "readthedoc": [31, 255], "io": [31, 255], "working_with_conditional_format": [31, 255], "html": [31, 91, 104, 135, 141, 255], "similarli": [31, 93, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "well": [31, 74, 102, 103, 113, 148, 189, 255, 379, 610, 634, 708, 829, 1014], "adjac": [31, 255], "two": [31, 55, 92, 94, 96, 104, 130, 154, 181, 182, 189, 221, 236, 237, 255, 263, 311, 315, 423, 494, 539, 564, 566, 592, 593, 610, 656, 657, 691, 692, 708, 760, 765, 879, 1014], "help": [31, 255, 635, 708], "appear": [31, 93, 120, 255, 547, 610, 1000, 1014], "working_with_sparklin": [31, 255], "inject": [31, 65, 255], "locat": [31, 149, 195, 220, 225, 255, 483, 610, 682, 708, 717, 923, 926, 985, 1014], "syntax": [31, 136, 185, 255, 499, 505, 506, 514, 671, 708, 944, 950, 951, 959, 1014], "ensur": [31, 75, 124, 125, 127, 159, 187, 197, 255, 379, 549, 610, 641, 652, 708, 711, 995, 1002, 1014], "correctli": [31, 255], "microsoft": [31, 119, 255], "com": [31, 104, 255, 356, 357, 358, 505, 506, 610, 810, 811, 812, 950, 951, 1014], "u": [31, 38, 40, 53, 74, 97, 172, 198, 215, 255, 314, 315, 321, 346, 351, 524, 526, 578, 764, 765, 771, 800, 805, 969, 971], "offic": [31, 255], "f5ed2452": [31, 255], "2337": [31, 255], "4f71": [31, 255], "bed3": [31, 255], "c8ae6d2b276": [31, 255], "random": [31, 123, 125, 127, 162, 199, 255, 374, 465, 482, 488, 610, 823, 905, 922, 933, 1014], "date": [31, 38, 65, 74, 102, 103, 104, 113, 118, 125, 142, 158, 160, 161, 173, 175, 228, 255, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 400, 472, 473, 474, 475, 476, 478, 479, 480, 524, 525, 543, 578, 582, 600, 610, 642, 643, 648, 708, 711, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 845, 856, 857, 895, 896, 926, 969, 970, 997, 1014], "dtm": [31, 255, 315, 765], "2023": [31, 74, 97, 119, 173, 255, 315, 582, 765], "num": [31, 221, 255, 379, 382, 532, 610, 829, 1014], "500": [31, 172, 227, 255, 635, 683, 708, 779, 781, 789, 796, 912, 913, 915, 1014], "val": [31, 196, 255, 295, 459, 543, 602, 610, 665, 708, 742], "10_000": [31, 255], "20_000": [31, 255], "30_000": [31, 255], "increas": [31, 65, 102, 111, 255, 308, 610, 756, 1014], "b4": [31, 255], "light": [31, 255], "twice": [31, 106, 255], "each": [31, 65, 74, 103, 116, 120, 121, 123, 136, 158, 159, 160, 161, 173, 175, 187, 219, 225, 228, 234, 235, 237, 238, 240, 249, 255, 269, 337, 341, 348, 408, 421, 428, 465, 495, 506, 520, 521, 555, 557, 558, 563, 597, 610, 642, 643, 648, 661, 682, 690, 692, 693, 695, 704, 708, 744, 791, 795, 802, 864, 877, 905, 951, 965, 966, 982, 1014, 1022], "titl": [31, 50, 255], "explicit": [31, 113, 123, 255, 590], "integr": [31, 255, 1022], "multi_fram": [31, 255], "wb": [31, 255], "coordin": [31, 255], "advanc": [31, 255, 423, 879, 1022], "min_color": [31, 255], "76933c": [31, 255], "mid_color": [31, 255], "c4d79b": [31, 255], "max_color": [31, 255], "ebf1d": [31, 255], "data_bar_2010": [31, 255], "bar_color": [31, 255], "9bbb59": [31, 255], "bar_negative_color_sam": [31, 255], "bar_negative_border_color_sam": [31, 255], "000": [31, 255, 1022], "white": [31, 255], "w": [31, 52, 53, 160, 255, 505, 642, 708, 711, 950, 962], "get_worksheet_by_nam": [31, 255], "fmt_titl": [31, 255], "add_format": [31, 255], "font_color": [31, 255], "4f6228": [31, 255], "font_siz": [31, 255], "12": [31, 65, 74, 97, 124, 125, 130, 160, 161, 175, 228, 255, 306, 315, 322, 325, 332, 333, 334, 339, 341, 348, 352, 458, 464, 479, 487, 527, 568, 570, 571, 583, 610, 642, 643, 644, 648, 651, 671, 678, 708, 711, 718, 757, 765, 786, 795, 802, 921, 972, 1014, 1022], "ital": [31, 255], "bold": [31, 255], "customis": [31, 255], "trend": [31, 255], "win_loss": [31, 255], "subtl": [31, 255], "tone": [31, 255], "hidden": [31, 255], "id": [31, 73, 237, 255, 514, 515, 547, 549, 610, 692, 1000, 1014, 1022], "q1": [31, 255], "55": [31, 67, 255], "20": [31, 125, 130, 149, 165, 166, 188, 190, 194, 195, 255, 277, 278, 279, 310, 341, 348, 374, 378, 459, 472, 473, 475, 578, 582, 610, 660, 708, 711, 759, 802, 1014], "35": [31, 119, 255, 310, 610, 759, 1014], "q2": [31, 255], "30": [31, 74, 130, 149, 160, 165, 188, 194, 195, 214, 232, 255, 277, 278, 279, 310, 315, 320, 325, 333, 339, 340, 341, 348, 352, 374, 487, 582, 610, 642, 660, 686, 708, 711, 757, 759, 765, 770, 787, 794, 795, 802, 1014, 1022], "15": [31, 119, 124, 130, 136, 160, 161, 166, 255, 308, 310, 334, 341, 348, 459, 479, 568, 591, 610, 642, 643, 708, 756, 759, 795, 802, 1014], "60": [31, 149, 255, 342, 343, 479, 524, 610, 792, 796, 797, 969], "q3": [31, 255], "40": [31, 149, 188, 255, 341, 348, 374, 527, 610, 660, 708, 775, 802, 972], "80": [31, 255], "q4": [31, 255], "75": [31, 142, 255, 266, 456, 472, 473, 474, 475, 478, 479, 480, 610, 758, 825, 903, 1014, 1022], "account": [31, 97, 255, 337, 356, 357, 358, 610, 791, 810, 811, 812, 1014], "flavour": [31, 255], "integer_dtyp": [31, 201, 255, 667, 708, 711], "0_": [31, 255], "just": [31, 104, 113, 181, 255, 656, 708], "unifi": [31, 255, 711], "multi": [31, 102, 103, 255, 359, 505, 584, 587, 610, 950], "2_color_scal": [31, 255], "95b3d7": [31, 255], "ffffff": [31, 255], "base": [31, 36, 145, 152, 160, 161, 255, 353, 356, 357, 358, 426, 427, 513, 610, 631, 638, 642, 643, 708, 711, 808, 810, 811, 812, 825, 882, 883, 903, 958, 1005, 1014, 1022], "standardis": [31, 255], "z": [31, 52, 73, 97, 123, 125, 147, 168, 170, 174, 181, 198, 255, 262, 266, 295, 374, 399, 456, 468, 506, 524, 526, 591, 610, 647, 656, 674, 708, 711, 742, 817, 951, 969, 971, 1014, 1021], "score": [31, 255], "conjunct": [31, 106, 255], "a123": [31, 255], "b345": [31, 255], "c567": [31, 255], "d789": [31, 255], "e101": [31, 255], "45": [31, 130, 161, 255, 315, 341, 348, 479, 500, 506, 582, 610, 643, 708, 711, 765, 795, 802, 945, 951, 1022], "85": [31, 255, 1022], "font": [31, 255], "consola": [31, 255], "standard": [31, 119, 209, 218, 255, 325, 357, 478, 492, 497, 508, 596, 610, 676, 708, 775, 811, 937, 941, 953, 1014, 1022], "stdev": [31, 255], "ipccompress": [32, 255], "arrow": [32, 76, 90, 104, 107, 115, 213, 255, 672, 708, 990, 995, 1014], "ipc": [32, 107, 108, 115, 118, 255, 621], "binari": [32, 255, 287, 289, 290, 291, 554, 734, 736, 737, 738], "feather": [32, 107, 115, 255, 621], "lz4": [32, 35, 255, 672, 673, 708], "zstd": [32, 35, 255, 672, 673, 708], "pretti": [33, 255], "row_ori": [33, 255], "iobas": [33, 34, 109, 110, 255, 445, 663, 689, 708], "serial": [33, 34, 255], "represent": [33, 34, 217, 255, 295, 319, 322, 325, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 352, 543, 610, 633, 650, 708, 742, 769, 772, 774, 775, 779, 781, 784, 786, 789, 792, 793, 796, 803, 804, 806, 993, 997, 1014], "orient": [33, 66, 68, 94, 96, 255, 708], "slower": [33, 94, 96, 136, 159, 187, 228, 237, 255, 641, 708, 718, 1014], "common": [33, 65, 73, 74, 255, 615], "write_ndjson": [33, 255], "newlin": [34, 110, 116, 255], "delimit": [34, 102, 103, 110, 113, 116, 189, 216, 255, 498, 943, 991, 1014], "parquetcompress": [35, 255], "compression_level": [35, 255, 673, 708], "statist": [35, 102, 103, 111, 117, 142, 255, 357, 358, 392, 472, 473, 474, 475, 476, 477, 478, 479, 480, 492, 610, 673, 708, 758, 811, 812, 849, 917, 937, 1014], "row_group_s": [35, 255, 673, 708], "use_pyarrow": [35, 102, 107, 111, 255, 673, 708, 994, 995, 1014], "pyarrow_opt": [35, 105, 111, 114, 255], "parquet": [35, 111, 112, 117, 255, 621, 673, 708], "gzip": [35, 255, 673, 708], "lzo": [35, 255, 673, 708], "brotli": [35, 255, 673, 708], "choos": [35, 189, 255, 672, 673, 708], "good": [35, 172, 255, 672, 673, 708], "perform": [35, 65, 81, 91, 102, 103, 107, 111, 113, 115, 116, 117, 135, 136, 160, 161, 175, 192, 237, 255, 269, 293, 457, 524, 525, 526, 610, 642, 643, 648, 672, 673, 688, 708, 718, 969, 970, 971, 1014], "fast": [35, 126, 128, 255, 362, 484, 610, 672, 673, 708, 815, 927, 1014, 1022], "decompress": [35, 255, 672, 673, 708], "backward": [35, 151, 175, 255, 286, 334, 364, 610, 637, 648, 673, 708, 788, 817, 1014], "guarante": [35, 91, 102, 103, 224, 255, 635, 673, 681, 708], "deal": [35, 172, 255, 340, 465, 524, 610, 673, 708, 794, 905, 969, 1014], "older": [35, 255, 673, 708], "reader": [35, 99, 102, 103, 107, 111, 255, 622, 673, 708], "higher": [35, 191, 247, 255, 463, 476, 589, 610, 662, 673, 702, 708, 904, 916, 1014], "mean": [35, 74, 102, 103, 107, 111, 113, 142, 151, 159, 160, 161, 175, 189, 228, 235, 255, 337, 341, 348, 361, 364, 472, 473, 474, 475, 476, 478, 479, 480, 492, 505, 559, 610, 637, 641, 642, 643, 648, 652, 673, 690, 708, 758, 791, 795, 802, 814, 817, 822, 913, 937, 950, 1014], "smaller": [35, 147, 255, 635, 673, 708, 809, 1014], "disk": [35, 107, 255, 671, 672, 673, 708], "11": [35, 119, 125, 161, 255, 312, 313, 325, 333, 334, 337, 341, 348, 378, 458, 465, 479, 493, 532, 552, 561, 598, 610, 628, 643, 644, 651, 661, 673, 678, 708, 711, 718, 791, 795, 802, 911, 1014], "22": [35, 124, 255, 341, 348, 351, 472, 473, 475, 478, 479, 480, 524, 561, 610, 673, 708, 795, 802, 805, 969, 1022], "comput": [35, 72, 73, 78, 147, 159, 175, 219, 224, 235, 247, 255, 261, 271, 272, 273, 274, 275, 276, 282, 283, 284, 300, 301, 303, 304, 305, 306, 307, 311, 353, 360, 392, 403, 409, 413, 414, 415, 424, 426, 427, 428, 448, 457, 458, 462, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 489, 490, 491, 492, 496, 541, 542, 553, 554, 558, 564, 566, 569, 573, 584, 587, 592, 593, 598, 610, 641, 645, 647, 648, 673, 681, 687, 690, 702, 708, 713, 719, 720, 721, 722, 723, 724, 730, 731, 732, 750, 751, 752, 753, 754, 755, 760, 808, 809, 813, 849, 859, 865, 869, 870, 871, 880, 882, 883, 884, 891, 899, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 934, 935, 936, 937, 940, 987, 988, 996, 1014], "512": [35, 255, 460, 610, 899, 1014], "implement": [35, 91, 135, 136, 237, 255, 269, 610, 692, 718, 925, 926, 1014], "v": [35, 52, 53, 147, 255, 483, 610, 757, 923, 1014], "At": [35, 255], "moment": [35, 141, 255, 392, 492, 610, 849, 937, 1014], "pyarrow": [35, 90, 95, 102, 105, 107, 111, 114, 118, 119, 173, 213, 218, 219, 255, 622, 990, 994, 995, 996, 1014], "write_t": [35, 255], "calendar": [37, 38, 160, 161, 175, 228, 255, 325, 337, 341, 348, 352, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 775, 791, 795, 802, 806], "time_unit": [38, 40, 74, 97, 314, 315, 321, 346, 351, 524, 526, 578, 711, 764, 765, 771, 800, 805, 969, 971], "time_zon": [38, 74, 97, 316, 340, 526, 766, 794, 971], "timezon": [38, 74], "m": [38, 40, 53, 74, 174, 255, 314, 315, 321, 344, 346, 347, 351, 505, 524, 525, 526, 529, 578, 647, 708, 711, 764, 765, 771, 798, 800, 801, 805, 950, 969, 970, 971, 974], "zone": [38, 74, 316, 340, 524, 526, 766, 794, 969, 971], "zoneinfo": 38, "run": [38, 72, 126, 128, 136, 159, 176, 189, 224, 237, 255, 269, 308, 404, 594, 610, 628, 633, 635, 641, 652, 656, 661, 671, 672, 673, 681, 708, 718, 756, 860, 1014, 1021, 1022], "available_timezon": 38, "128": [39, 67, 899, 1014], "bit": [39, 41, 42, 43, 44, 45, 46, 59, 60, 61, 62, 467, 499, 610, 907, 944, 1014], "neg": [39, 160, 161, 163, 177, 204, 205, 207, 211, 255, 417, 418, 459, 485, 486, 493, 518, 610, 642, 643, 669, 670, 674, 688, 708, 824, 851, 873, 874, 929, 930, 938, 963, 984, 1014], "scale": [39, 147, 255, 459, 527, 610, 809, 972, 1014], "experiment": [39, 118, 201, 226, 227, 232, 255, 308, 341, 472, 473, 474, 475, 476, 478, 479, 480, 610, 667, 683, 686, 708, 756, 795, 825, 903, 1014], "progress": 39, "expect": [39, 82, 84, 89, 269, 555, 582, 610, 650, 652, 708, 903, 1014], "32": [41, 44, 60, 67, 161, 171, 255, 449, 487, 610, 643, 708, 760, 792, 899, 916, 1014], "sign": [43, 44, 45, 46, 337, 467, 532, 610, 791, 838, 907, 977, 1014], "arrai": [47, 90, 94, 102, 103, 111, 147, 213, 218, 219, 255, 282, 283, 284, 285, 289, 297, 298, 299, 303, 304, 305, 306, 307, 399, 412, 413, 414, 415, 416, 419, 420, 427, 472, 473, 475, 478, 479, 480, 484, 500, 502, 505, 508, 573, 610, 708, 730, 731, 732, 733, 736, 746, 747, 748, 752, 753, 754, 755, 760, 809, 855, 868, 869, 870, 871, 872, 875, 876, 883, 884, 912, 913, 915, 918, 919, 920, 927, 932, 945, 947, 950, 953, 990, 995, 996, 1004, 1014], "integer_list": 47, "float_list": 47, "wrap": [49, 97, 379, 610], "arbitrari": [49, 125], "python": [49, 74, 102, 103, 119, 130, 136, 172, 198, 215, 237, 255, 269, 315, 431, 555, 602, 610, 615, 692, 718, 765, 776, 777, 778, 783, 994, 1014], "queri": [50, 52, 72, 104, 107, 113, 115, 116, 117, 149, 176, 188, 255, 269, 431, 433, 508, 610, 628, 633, 635, 644, 651, 661, 671, 688, 692, 708, 717, 718, 953, 1014, 1021], "eager": [50, 51, 52, 53, 54, 55, 70, 74, 100, 130, 132, 160, 226, 255, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 557, 578, 591, 597, 609, 610, 621, 642, 708, 764, 766, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806, 1021], "pars": [50, 102, 103, 106, 113, 115, 116, 137, 159, 201, 208, 222, 232, 235, 255, 379, 457, 495, 507, 513, 524, 526, 527, 553, 554, 558, 560, 562, 563, 569, 578, 584, 587, 594, 595, 597, 598, 610, 624, 641, 667, 675, 680, 686, 690, 708, 829, 952, 958, 969, 971, 972, 1014], "against": [50, 404, 708, 860, 1021, 1022], "eagerli": [50, 423], "unset": [50, 124, 340, 423, 794], "init": [50, 133], "eager_execut": [50, 1021], "itself": [50, 123, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 592, 593, 610, 650, 708, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1014, 1021], "alwai": [50, 74, 102, 124, 136, 237, 255, 441, 524, 602, 652, 708, 718, 969, 1014, 1021, 1022], "impact": [50, 160, 255, 642, 708, 1021], "declar": [50, 90, 92, 93, 94, 96, 255, 708], "godfath": 50, "1972": 50, "6_000_000": 50, "134_821_952": 50, "dark": 50, "knight": 50, "2008": 50, "185_000_000": 50, "533_316_061": 50, "schindler": 50, "1993": 50, "22_000_000": 50, "96_067_179": 50, "pulp": 50, "fiction": 50, "1994": 50, "8_000_000": 50, "107_930_000": 50, "shawshank": 50, "redempt": 50, "25_000_000": 50, "28_341_469": 50, "release_year": 50, "budget": 50, "gross": 50, "imdb_scor": 50, "ctx": [50, 51, 52, 53, 54, 55], "film": 50, "1990": 50, "BY": [50, 52], "desc": [50, 52], "AS": [50, 1021], "decad": 50, "total_gross": 50, "n_film": 50, "2000": [50, 324, 326, 333, 334, 337, 711, 774, 787, 788, 791], "533316061": 50, "232338648": 50, "1970": [50, 118], "134821952": 50, "register_glob": [51, 53, 55, 1021], "register_mani": [51, 52, 55], "unregist": [51, 52, 53, 1021], "frame_data": [51, 54], "execut": [51, 52, 54, 73, 176, 255, 293, 404, 610, 625, 652, 661, 708, 860, 1021], "collect": [51, 52, 55, 68, 72, 113, 114, 118, 125, 127, 130, 143, 145, 176, 213, 255, 269, 383, 557, 562, 578, 597, 610, 624, 630, 631, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 659, 660, 662, 664, 665, 667, 669, 670, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 686, 687, 688, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 711, 836, 1014, 1021, 1022], "global": [52, 56, 75, 125, 131, 433, 610, 1021], "scope": [52, 55, 133, 620, 711, 1021], "automat": [52, 55, 90, 92, 93, 94, 96, 97, 102, 103, 104, 113, 125, 127, 129, 201, 232, 255, 433, 511, 517, 523, 610, 667, 686, 708, 886, 956, 962, 968, 1014, 1021], "map": [52, 53, 92, 93, 102, 103, 107, 108, 111, 112, 113, 115, 136, 146, 172, 193, 197, 198, 214, 255, 341, 348, 432, 433, 457, 549, 555, 610, 632, 664, 708, 795, 802, 886, 1014, 1021], "recent": [52, 458, 610, 899, 1014, 1021], "df1": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "x": [52, 53, 65, 73, 97, 102, 103, 104, 113, 123, 125, 147, 165, 168, 170, 174, 181, 189, 198, 255, 262, 266, 269, 309, 354, 355, 369, 372, 373, 374, 394, 399, 410, 428, 430, 431, 447, 449, 453, 454, 456, 460, 468, 489, 492, 520, 535, 543, 545, 552, 555, 567, 568, 576, 582, 583, 590, 610, 647, 652, 656, 674, 708, 711, 714, 718, 817, 847, 934, 937, 965, 997, 1014, 1021], "df2": [52, 54, 55, 56, 65, 73, 75, 120, 149, 155, 219, 230, 255], "t": [52, 53, 73, 106, 113, 136, 160, 188, 224, 226, 255, 269, 308, 340, 353, 356, 357, 358, 404, 457, 459, 505, 511, 524, 526, 555, 602, 610, 642, 660, 681, 708, 711, 718, 756, 794, 808, 810, 811, 812, 860, 924, 950, 956, 962, 969, 971, 1004, 1014], "join": [52, 56, 65, 72, 73, 75, 175, 227, 255, 378, 457, 610, 628, 633, 635, 648, 661, 671, 683, 687, 708], "named_fram": [53, 1021], "lf1": [53, 55], "o": [53, 107, 115, 292, 308, 504, 544, 610, 739, 756, 949, 968, 998, 1014], "lf2": [53, 55, 708], "p": [53, 67, 188, 255, 459, 597, 610, 660, 708], "q": [53, 255, 597], "r": [53, 459, 500, 504, 505, 506, 514, 610, 711, 945, 949, 950, 951, 959], "lf3": [53, 708], "lf4": [53, 708], "either": [53, 125, 161, 171, 176, 179, 187, 197, 210, 255, 524, 553, 558, 597, 643, 650, 708, 711, 969], "tbl1": [53, 55], "tbl2": [53, 55], "tbl3": 53, "tbl4": 53, "statement": [54, 602], "hello_world": 54, "baz": [54, 166, 167, 189, 225, 255, 519, 521, 646, 682, 708, 711, 966], "hello_data": 54, "foo_bar": [54, 582], "registr": [55, 621], "lifetim": [55, 133, 620], "context": [55, 56, 129, 130, 185, 238, 255, 263, 269, 293, 302, 365, 404, 441, 494, 495, 549, 555, 565, 575, 578, 591, 594, 609, 610, 620, 621, 687, 693, 708, 860, 1021], "manag": [55, 56, 620, 621, 1021], "often": [55, 133, 160, 161, 255, 401, 468, 610, 642, 643, 708, 857], "want": [55, 93, 100, 132, 136, 149, 185, 255, 269, 297, 298, 299, 365, 431, 433, 472, 473, 474, 475, 476, 478, 479, 480, 567, 576, 591, 610, 628, 644, 651, 708, 711, 717, 718, 746, 747, 748, 995, 1014], "df0": 55, "exit": [55, 56, 133, 1021], "construct": [55, 90, 92, 93, 94, 95, 96, 100, 132, 255, 371, 433, 591, 610, 640, 663, 708, 1014], "persist": [55, 672, 673, 708], "through": [55, 711, 1014], "tbl0": 55, "remain": [55, 102, 103, 113, 147, 255, 520, 521, 652, 708, 809, 965, 966, 1014], "text": [55, 512, 514, 515, 957, 1022], "misc": 55, "testing1234": 55, "test1": 55, "test2": 55, "test3": 55, "temporarili": [56, 129, 133, 160, 161, 255, 642, 643, 708], "cach": [56, 72, 75, 107, 113, 115, 117, 131, 433, 472, 473, 474, 475, 476, 478, 479, 480, 524, 525, 526, 529, 610, 620, 628, 633, 635, 661, 671, 708, 969, 970, 971, 974], "categori": [56, 75, 216, 255, 295, 742, 757, 825, 903, 1014], "until": [56, 74, 176, 255, 293, 610], "finish": [56, 78, 149, 255, 717, 1014], "invalid": [56, 74, 102, 103, 113, 507, 508, 513, 545, 610, 952, 953, 958], "outermost": 56, "color": [56, 75, 237, 287, 289, 290, 291, 692], "red": [56, 75, 237, 692], "green": [56, 75, 237, 692], "blue": [56, 75, 287, 289, 290, 291], "orang": [56, 75, 140, 238, 239, 241, 242, 243, 245, 247, 248, 255, 693, 694, 696, 697, 698, 700, 702, 703], "uint8": [56, 75, 122, 124, 217, 218, 255, 306, 307, 433, 537, 552, 610, 711, 754, 755, 983, 1014, 1022], "yellow": [56, 75, 287, 289, 290, 291], "black": [56, 75, 136, 255, 287, 289, 290, 291], "succe": [56, 102, 103, 113], "df_join": [56, 75], "cat": [56, 75, 217, 255, 499, 528, 531, 543, 563, 606, 610, 711, 757, 825, 903, 944, 973, 976, 1010, 1014], "u8": [56, 75, 216, 217, 255, 433, 552, 610, 711, 991, 1014, 1022], "schemadict": [57, 90, 92, 93, 94, 95, 96, 113, 200, 255, 597, 652, 666, 692, 708], "composit": [57, 124, 1022], "struct_seri": [57, 692], "dai": [58, 74, 160, 161, 173, 175, 228, 255, 321, 325, 332, 333, 334, 337, 338, 339, 341, 346, 348, 349, 350, 352, 472, 473, 474, 475, 476, 478, 479, 480, 570, 571, 572, 610, 642, 643, 648, 708, 787, 788, 791, 792, 795, 802, 804], "unsign": [59, 60, 61, 62, 467, 610, 838, 907, 1014], "could": [63, 78, 145, 160, 255, 294, 567, 576, 610, 631, 642, 708, 740, 1014], "static": [63, 692], "utf": 64, "frametyp": [65, 1021], "joinstrategi": [65, 174, 255, 647, 708], "outer": [65, 73, 174, 255, 647, 708], "descend": [65, 137, 202, 208, 222, 255, 279, 419, 465, 484, 494, 495, 558, 610, 624, 668, 675, 680, 708, 727, 844, 875, 905, 927, 939, 1014], "fill": [65, 73, 100, 132, 138, 150, 151, 205, 226, 255, 286, 304, 307, 363, 364, 370, 378, 472, 473, 475, 478, 479, 480, 486, 510, 516, 532, 577, 591, 610, 636, 637, 670, 687, 708, 816, 817, 897, 912, 913, 915, 918, 919, 920, 930, 955, 961, 977, 1014], "sort": [65, 66, 120, 124, 137, 160, 161, 175, 182, 188, 189, 202, 222, 228, 240, 249, 255, 279, 295, 365, 457, 484, 495, 549, 551, 558, 610, 624, 633, 642, 643, 648, 657, 660, 661, 668, 671, 680, 695, 704, 708, 711, 727, 742, 844, 927, 999, 1002, 1014, 1022], "origin": [65, 102, 103, 224, 255, 340, 391, 433, 457, 467, 500, 505, 506, 508, 510, 516, 532, 610, 681, 708, 757, 794, 886, 903, 945, 950, 951, 953, 955, 961, 977, 1014], "In": [65, 74, 105, 114, 117, 125, 127, 133, 136, 147, 149, 160, 161, 185, 255, 269, 610, 642, 643, 708, 717, 809, 906, 1014], "duplic": [65, 79, 168, 174, 175, 224, 255, 380, 610, 647, 648, 681, 708, 831, 1014], "behaviour": [65, 73, 499, 505, 506, 514, 545, 610, 944, 950, 951, 959], "strategi": [65, 73, 102, 122, 123, 124, 125, 127, 151, 160, 174, 175, 184, 255, 269, 364, 423, 610, 637, 642, 647, 648, 708, 817, 879, 1014], "suitabl": [65, 73, 123, 136, 255, 269, 483, 610, 718, 923, 1014, 1022], "get": [65, 74, 98, 108, 112, 129, 137, 140, 146, 156, 157, 160, 161, 163, 164, 168, 170, 171, 177, 184, 197, 200, 203, 207, 211, 222, 231, 240, 249, 255, 263, 277, 278, 279, 281, 285, 303, 304, 305, 306, 307, 321, 337, 366, 375, 380, 382, 390, 393, 396, 406, 411, 412, 425, 434, 435, 436, 441, 443, 446, 451, 452, 463, 493, 497, 509, 512, 537, 538, 546, 550, 575, 580, 584, 585, 586, 587, 596, 599, 601, 610, 624, 629, 632, 639, 642, 643, 644, 649, 651, 666, 674, 678, 680, 685, 695, 704, 708, 725, 726, 727, 728, 729, 733, 744, 752, 753, 754, 755, 771, 791, 821, 824, 829, 831, 834, 846, 851, 862, 867, 868, 881, 887, 889, 890, 892, 895, 896, 900, 901, 904, 938, 941, 954, 957, 984, 990, 991, 999, 1003, 1004, 1014], "speedup": [65, 136, 172, 255, 269, 610, 718, 1014], "receiv": [65, 113, 136, 188, 255, 459, 610, 660, 708, 1022], "now": [65, 161, 255, 524, 526, 643, 708, 969, 971], "One": [65, 142, 185, 189, 255, 266, 456, 610, 711, 758, 1014], "whose": [65, 175, 189, 255, 359, 574, 610, 648, 708], "uniqu": [65, 122, 123, 124, 127, 170, 174, 185, 246, 255, 270, 281, 382, 390, 450, 524, 525, 526, 529, 547, 549, 556, 588, 610, 647, 701, 708, 729, 758, 834, 846, 893, 969, 970, 971, 974, 1000, 1002, 1014], "post": 65, "constrain": 65, "newli": 65, "boolean": [65, 70, 137, 152, 154, 176, 208, 222, 255, 265, 266, 267, 287, 290, 291, 324, 365, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 400, 456, 495, 507, 551, 552, 558, 597, 610, 624, 627, 638, 650, 675, 680, 708, 711, 715, 716, 728, 734, 774, 818, 829, 830, 831, 833, 834, 836, 837, 839, 840, 841, 842, 846, 856, 900, 901, 925, 944, 1005, 1014], "know": [65, 423, 512, 957, 995, 1004, 1014], "first": [65, 74, 102, 103, 106, 113, 116, 124, 136, 158, 160, 163, 175, 177, 184, 188, 189, 211, 216, 217, 223, 224, 228, 240, 255, 279, 281, 308, 334, 337, 341, 375, 382, 396, 404, 407, 408, 423, 433, 459, 483, 495, 505, 507, 508, 514, 515, 560, 567, 576, 580, 602, 610, 628, 642, 644, 648, 651, 660, 681, 687, 695, 708, 711, 727, 756, 758, 788, 791, 795, 824, 834, 851, 860, 863, 864, 879, 886, 923, 950, 952, 953, 959, 960, 984, 993, 1014, 1022], "2022": [65, 74, 142, 158, 160, 161, 175, 228, 255, 315, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 524, 572, 578, 610, 642, 643, 648, 708, 765, 775, 791, 795, 802, 969], "y": [65, 73, 97, 123, 125, 147, 168, 170, 174, 181, 189, 198, 255, 262, 266, 344, 347, 354, 355, 372, 373, 394, 399, 410, 430, 453, 454, 456, 468, 524, 525, 526, 545, 552, 582, 610, 647, 656, 674, 708, 711, 714, 798, 801, 969, 970, 971, 1014], "df3": [65, 255], "set_tbl_format": 65, "09": [65, 125, 161, 255, 315, 325, 333, 334, 527, 643, 708, 769, 972], "01": [65, 74, 125, 130, 142, 158, 160, 161, 228, 255, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 524, 525, 526, 529, 572, 610, 642, 643, 708, 711, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 969, 970, 971, 974], "02": [65, 74, 130, 158, 160, 161, 175, 228, 255, 314, 315, 321, 322, 323, 330, 331, 332, 333, 334, 337, 340, 341, 342, 343, 346, 348, 349, 351, 472, 473, 474, 475, 476, 478, 479, 480, 481, 524, 525, 526, 529, 572, 610, 642, 643, 648, 708, 711, 764, 765, 767, 768, 771, 772, 773, 776, 777, 778, 779, 781, 783, 784, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 805, 879, 969, 970, 971, 974], "03": [65, 74, 97, 160, 161, 228, 255, 314, 315, 316, 320, 321, 323, 331, 332, 333, 334, 340, 341, 342, 343, 344, 346, 347, 348, 349, 351, 472, 473, 475, 478, 479, 480, 525, 529, 610, 642, 643, 708, 764, 765, 766, 769, 770, 771, 772, 773, 776, 777, 778, 779, 781, 783, 785, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 800, 801, 803, 804, 805, 970, 974], "af1": 65, "af2": 65, "af3": 65, "keep": [65, 102, 103, 113, 224, 227, 228, 255, 391, 433, 560, 610, 681, 683, 708, 757, 886, 903, 1014], "easili": [65, 201, 232, 235, 255, 561, 597, 667, 686, 690, 708], "dot": [65, 610, 671, 708, 1014], "product": [65, 141, 255, 306, 311, 555, 610, 754, 760, 1014], "fill_nul": [65, 150, 255, 610, 636, 687, 708, 1014], "167": 65, "47": 65, "callabl": [66, 67, 68, 69, 113, 136, 154, 188, 237, 255, 269, 423, 431, 432, 459, 471, 555, 567, 568, 576, 583, 590, 610, 652, 660, 692, 708, 718, 879, 911, 1014], "decor": [66, 67, 68, 69, 125, 127, 136, 255, 269, 610, 620, 621, 718, 1014], "under": [66, 67, 68, 69, 603, 604, 606, 611, 612, 616, 617, 618, 1006, 1008, 1010, 1015, 1018, 1019, 1020], "access": [66, 67, 68, 69, 172, 197, 198, 255, 433, 610, 687, 708, 1022], "by_first_letter_of_column_nam": 66, "f": [66, 103, 142, 158, 173, 213, 223, 226, 255, 262, 269, 423, 487, 504, 524, 526, 555, 562, 583, 610, 879, 949, 969, 971], "fromkei": [66, 68], "by_first_letter_of_column_valu": 66, "starts_with": [66, 287, 290, 499, 503, 711, 948], "slice": [66, 72, 147, 163, 173, 211, 255, 408, 421, 471, 472, 473, 474, 475, 476, 478, 479, 480, 610, 628, 633, 635, 652, 661, 671, 672, 673, 708, 809, 824, 864, 877, 911, 912, 913, 914, 915, 916, 918, 919, 920, 984, 1014], "to_seri": [66, 70, 156, 255, 524, 591, 969], "xx": [66, 68, 124, 127, 711], "xy": [66, 68], "yy": [66, 68, 124, 127, 711], "yz": [66, 68], "a2": [66, 68], "b1": [66, 68], "b2": [66, 68], "pow_n": 67, "powersofn": 67, "next": [67, 74, 160, 161, 175, 228, 255, 286, 337, 341, 348, 465, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802, 905, 1014], "ceil": [67, 610, 1014], "previou": [67, 133, 458, 534, 610, 899, 1014], "floor": [67, 610, 1014], "nearest": [67, 175, 191, 247, 255, 296, 368, 463, 476, 589, 610, 648, 662, 702, 708, 743, 820, 828, 904, 916, 1014], "24": [67, 119, 136, 147, 160, 161, 175, 228, 255, 306, 308, 323, 337, 341, 348, 449, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 756, 773, 791, 795, 802, 848, 1014], "001": [67, 326, 327, 329, 336, 572, 780, 782, 790], "next_pow2": 67, "prev_pow2": 67, "nearest_pow2": 67, "split_by_column_dtyp": 68, "collect_al": 68, "31": [69, 74, 125, 315, 319, 320, 332, 333, 337, 349, 524, 570, 571, 578, 582, 711, 765, 769, 770, 787, 791, 969, 1022], "42": [69, 161, 162, 255, 643, 708, 823, 1014], "961": 69, "1764": 69, "4160": 69, "evalu": [70, 74, 100, 130, 132, 150, 152, 175, 255, 266, 280, 308, 377, 379, 383, 423, 433, 456, 553, 554, 557, 573, 591, 597, 602, 610, 638, 645, 647, 648, 708, 728, 756, 1005, 1014], "immedi": [70, 74, 100, 130, 132, 465, 557, 591, 597, 610, 905, 1014], "arg_tru": [70, 610, 1014], "build": [71, 91, 711, 1022], "wa": 71, "compil": [71, 397, 398, 853, 854], "gate": 71, "info": [71, 105, 114, 119, 324, 774], "otherwis": [71, 124, 129, 182, 201, 255, 288, 297, 298, 299, 340, 356, 357, 358, 423, 459, 467, 499, 501, 553, 554, 569, 584, 587, 598, 602, 610, 657, 667, 708, 718, 735, 746, 747, 748, 794, 810, 811, 812, 879, 907, 925, 926, 944, 946, 1014], "depend": [71, 119, 269, 397, 398, 441, 465, 555, 575, 578, 610, 853, 854, 905, 1014, 1022], "host": [71, 102, 107, 111, 115, 117], "git": 71, "lazy_fram": 72, "type_coercion": [72, 628, 633, 635, 661, 671, 672, 673, 708], "predicate_pushdown": [72, 628, 633, 635, 652, 661, 671, 672, 673, 708], "projection_pushdown": [72, 628, 633, 635, 652, 661, 671, 672, 673, 708], "simplify_express": [72, 628, 633, 635, 661, 671, 672, 673, 708], "no_optim": [72, 628, 635, 652, 661, 672, 673, 708], "slice_pushdown": [72, 628, 633, 635, 652, 661, 671, 672, 673, 708], "common_subplan_elimin": [72, 628, 633, 635, 661, 671, 708], "graph": [72, 176, 255, 645, 687, 708], "parallel": [72, 73, 99, 104, 111, 117, 160, 175, 176, 188, 255, 308, 404, 610, 621, 642, 647, 648, 692, 708, 756, 860, 1014], "threadpool": [72, 129], "coercion": [72, 468, 610, 628, 633, 635, 661, 671, 672, 673, 708], "optim": [72, 111, 113, 115, 116, 117, 172, 176, 188, 192, 198, 224, 255, 628, 633, 635, 652, 661, 671, 672, 673, 681, 688, 692, 708], "predic": [72, 113, 115, 116, 117, 118, 152, 171, 197, 255, 365, 551, 576, 610, 628, 633, 635, 638, 652, 661, 664, 671, 672, 673, 688, 708, 818, 925, 926, 1014], "pushdown": [72, 628, 633, 635, 652, 661, 664, 671, 672, 673, 688, 708, 925, 926, 1014], "project": [72, 113, 115, 116, 117, 269, 494, 495, 610, 628, 633, 635, 652, 661, 664, 671, 672, 673, 689, 708], "turn": [72, 102, 103, 113, 530, 549, 610, 628, 633, 635, 652, 661, 672, 673, 708, 975], "off": [72, 102, 103, 113, 549, 610, 628, 633, 635, 652, 661, 672, 673, 708], "Will": [72, 223, 255, 628, 633, 635, 661, 671, 708, 1014], "try": [72, 85, 87, 102, 103, 106, 107, 111, 113, 115, 117, 628, 633, 635, 661, 671, 708], "branch": [72, 628, 633, 635, 661, 671, 708], "subplan": [72, 628, 633, 635, 661, 671, 708], "occur": [72, 401, 448, 465, 610, 628, 633, 635, 661, 671, 708, 857, 891, 905, 1014], "union": [72, 73, 628, 633, 635, 661, 671, 708, 711], "part": [72, 90, 125, 506, 520, 521, 628, 633, 635, 661, 671, 687, 708, 769, 772, 779, 781, 784, 786, 789, 796, 806, 951, 965, 966], "fashion": [72, 174, 255, 628, 633, 635, 661, 671, 708], "item": [73, 103, 197, 199, 255, 361, 400, 407, 410, 482, 521, 610, 814, 856, 863, 866, 922, 966, 1014], "iter": [73, 126, 128, 137, 159, 160, 161, 172, 173, 187, 197, 198, 201, 202, 208, 222, 223, 232, 234, 235, 255, 308, 359, 457, 495, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 594, 597, 598, 610, 624, 641, 642, 643, 667, 668, 675, 680, 686, 690, 708, 756, 1014, 1022], "polarstyp": 73, "concatmethod": 73, "vertic": [73, 149, 226, 230, 255, 498, 943], "rechunk": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 149, 255, 610, 717, 744, 892, 1014], "combin": [73, 74, 85, 87, 160, 161, 162, 175, 228, 255, 266, 280, 337, 348, 456, 511, 517, 523, 610, 642, 643, 648, 671, 708, 791, 795, 802, 956, 962, 968], "concaten": [73, 154, 188, 255, 459, 562, 563, 610, 660, 708, 744, 892, 1014], "diagon": [73, 223, 255], "vstack": [73, 149, 255], "vertical_relax": 73, "coerc": [73, 468, 610], "equal": [73, 75, 102, 103, 113, 120, 121, 155, 160, 175, 182, 255, 354, 355, 372, 394, 423, 454, 471, 472, 473, 474, 475, 476, 478, 479, 480, 509, 510, 516, 532, 557, 592, 593, 610, 642, 648, 657, 708, 879, 911, 912, 913, 914, 915, 916, 918, 919, 920, 924, 954, 955, 961, 977, 1014, 1022], "supertyp": [73, 151, 255, 268, 610, 637, 708], "find": [73, 153, 255, 483, 610, 923, 1014], "miss": [73, 102, 103, 113, 150, 255, 286, 356, 357, 358, 370, 378, 385, 387, 610, 636, 708, 810, 811, 812, 1004, 1014], "stack": [73, 165, 230, 255], "don": [73, 136, 224, 226, 255, 269, 308, 404, 457, 555, 610, 681, 708, 711, 718, 756, 860, 924, 1004, 1014], "auto": [73, 90, 92, 93, 94, 96, 111, 117, 223, 255, 708, 1022], "logic": [73, 136, 237, 255, 266, 456, 543, 552, 610, 640, 647, 663, 689, 708, 718, 997, 1014], "align_fram": 73, "pattern": [73, 102, 103, 113, 115, 116, 117, 172, 255, 439, 499, 500, 505, 506, 514, 515, 692, 711, 925, 926, 944, 945, 950, 951, 959, 960, 1014], "collis": 73, "need": [73, 97, 100, 102, 103, 106, 120, 121, 132, 160, 161, 206, 218, 255, 423, 433, 487, 509, 527, 591, 610, 642, 643, 708, 931, 954, 972, 1014], "sure": [73, 90, 95, 102, 103, 104, 107, 111, 160, 161, 192, 255, 557, 642, 643, 708], "contigu": [73, 90, 95, 102, 103, 107, 111, 113, 115, 116, 117, 192, 255], "relev": 73, "df_h1": 73, "l1": 73, "l2": 73, "df_h2": 73, "r1": 73, "r2": 73, "r3": 73, "df_d1": 73, "df_d2": 73, "df_a1": 73, "df_a2": 73, "df_a3": 73, "interv": [74, 130, 160, 161, 228, 255, 324, 341, 342, 348, 379, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 708, 769, 771, 772, 774, 779, 781, 784, 786, 789, 792, 793, 795, 796, 800, 802, 803, 804, 806, 829, 1014], "timedelta": [74, 130, 160, 161, 228, 255, 319, 321, 322, 325, 330, 332, 337, 338, 339, 341, 342, 346, 348, 349, 350, 352, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 708, 776, 778, 783, 791, 795, 802, 895, 896, 1014], "1d": [74, 160, 161, 175, 228, 255, 314, 323, 331, 337, 341, 348, 351, 472, 473, 474, 475, 476, 478, 479, 480, 582, 610, 642, 643, 648, 708, 764, 771, 773, 776, 777, 778, 783, 785, 791, 795, 800, 802, 804, 805], "closedinterv": [74, 130, 160, 161, 255, 379, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 708, 829, 1014], "lower": [74, 113, 130, 160, 191, 247, 255, 297, 299, 379, 429, 432, 463, 467, 476, 557, 589, 610, 635, 642, 662, 702, 708, 748, 829, 885, 904, 907, 916, 1001, 1014], "bound": [74, 102, 103, 130, 147, 160, 255, 297, 298, 299, 379, 407, 422, 423, 429, 548, 557, 610, 642, 708, 747, 748, 809, 829, 863, 878, 885, 1001, 1014], "upper": [74, 102, 103, 130, 147, 160, 255, 297, 298, 379, 423, 548, 557, 610, 642, 708, 747, 809, 829, 885, 1001, 1014], "period": [74, 130, 160, 161, 204, 205, 255, 341, 348, 356, 357, 358, 417, 458, 485, 486, 610, 642, 643, 669, 670, 708, 795, 802, 810, 811, 812, 873, 899, 929, 930, 1014], "durat": [74, 130, 133, 175, 228, 255, 320, 323, 327, 329, 331, 336, 343, 351, 543, 610, 648, 708, 711, 770, 773, 780, 782, 785, 790, 797, 805, 997, 1014], "3d12h4m25": [74, 160, 161, 175, 228, 255, 341, 348, 642, 643, 648, 708, 795, 802], "hour": [74, 130, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 600, 610, 642, 643, 648, 708, 791, 795, 802], "minut": [74, 130, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 600, 610, 642, 643, 648, 708, 791, 795, 802], "_satur": [74, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "month": [74, 160, 161, 175, 228, 255, 319, 333, 334, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 570, 571, 610, 642, 643, 648, 708, 769, 787, 788, 791, 795, 802], "1mo": [74, 160, 161, 175, 228, 255, 316, 320, 333, 334, 337, 340, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 766, 770, 786, 787, 788, 791, 792, 793, 794, 795, 802, 803], "offset": [74, 102, 103, 107, 111, 113, 115, 116, 117, 160, 161, 207, 228, 233, 255, 333, 334, 337, 341, 348, 418, 493, 518, 524, 526, 610, 642, 643, 674, 688, 708, 787, 788, 791, 795, 802, 874, 938, 963, 969, 971, 1014], "desir": [74, 125, 423, 879], "further": [74, 104, 996, 1014], "tempor": [74, 130, 160, 161, 172, 198, 215, 255, 379, 472, 473, 474, 475, 476, 478, 479, 480, 610, 621, 642, 643, 708, 711, 829, 845, 1014], "window": [74, 130, 160, 161, 255, 308, 341, 348, 356, 357, 358, 457, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 562, 592, 593, 610, 642, 643, 708, 756, 795, 802, 810, 811, 812, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1014], "deprec": [74, 130, 524, 526, 591, 969, 971], "sinc": [74, 105, 114, 130, 321, 524, 526, 578, 591, 771, 969, 971], "18": [74, 97, 130, 161, 255, 307, 341, 348, 351, 378, 391, 524, 526, 610, 643, 661, 708, 711, 805, 969, 971], "granular": 74, "finer": 74, "permut": 74, "becaus": [74, 136, 147, 160, 176, 226, 237, 255, 404, 642, 692, 708, 718, 809, 860, 1014], "year": [74, 105, 114, 160, 161, 175, 228, 255, 324, 325, 337, 338, 341, 348, 349, 472, 473, 474, 475, 476, 478, 479, 480, 570, 571, 610, 642, 643, 648, 708, 774, 775, 791, 792, 795, 802, 803], "1y": [74, 160, 161, 175, 228, 255, 324, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 774, 791, 795, 802, 806], "vari": [74, 1022], "accord": [74, 197, 255, 433, 610, 775], "februari": 74, "1st": [74, 175, 255, 648, 708], "28": [74, 160, 161, 175, 214, 228, 255, 262, 337, 340, 341, 348, 351, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 794, 795, 802, 805, 1022], "leap": [74, 324, 337, 774, 791], "wherea": [74, 451, 452, 610, 644, 651, 708, 895, 896, 1014], "febrari": 74, "28th": 74, "user": [74, 136, 188, 237, 255, 269, 431, 459, 484, 555, 610, 660, 692, 708, 718, 927, 1014], "march": 74, "31st": 74, "approach": 74, "prior": 74, "began": 74, "januari": 74, "1mo_satur": 74, "would": [74, 102, 103, 113, 279, 407, 441, 465, 558, 610, 711, 727, 863, 905, 995, 1014], "04": [74, 118, 160, 228, 255, 315, 316, 319, 320, 323, 330, 331, 332, 333, 334, 338, 340, 341, 342, 343, 344, 347, 349, 350, 351, 524, 572, 642, 708, 766, 770, 773, 779, 781, 784, 785, 786, 787, 788, 789, 793, 794, 796, 797, 798, 801, 803, 804, 805, 969], "05": [74, 118, 120, 121, 125, 175, 228, 255, 315, 316, 320, 340, 342, 344, 347, 648, 708, 711, 765, 766, 767, 768, 769, 770, 794, 795, 798, 799, 801, 802, 804], "almost": [74, 136, 237, 255, 524, 525, 526, 718, 969, 970, 971, 1014], "never": [74, 197, 255], "recommend": [74, 129, 172, 188, 255, 711], "month_end": 74, "convers": [74, 91, 135, 173, 219, 255, 524, 525, 526, 529, 621, 969, 970, 971, 974, 994, 995, 996, 1014], "routin": 74, "1985": 74, "07": [74, 130, 315, 319, 338, 340, 341, 348, 350, 524, 578, 711, 765, 769, 794, 804, 969], "08": [74, 120, 121, 125, 130, 161, 255, 315, 341, 524, 572, 643, 708, 795, 802, 969], "america": 74, "new_york": 74, "\u03bc": [74, 97, 125, 160, 161, 175, 228, 255, 314, 315, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 524, 526, 572, 578, 610, 642, 643, 648, 708, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 802, 803, 804, 805, 806, 969, 971], "est": 74, "last": [74, 137, 163, 175, 177, 189, 208, 211, 222, 224, 249, 255, 279, 308, 319, 333, 338, 349, 407, 421, 494, 521, 538, 599, 610, 624, 648, 675, 678, 680, 681, 704, 708, 711, 727, 756, 769, 787, 792, 803, 824, 851, 863, 877, 966, 984, 1014], "disabl": [75, 131, 172, 255], "encount": [76, 160, 255, 451, 452, 507, 508, 564, 567, 576, 610, 642, 708, 895, 896, 952, 953, 1014], "certain": [80, 105, 114, 166, 228, 255, 561, 628, 661, 672, 673, 708, 1014], "least": [82, 125, 458, 549, 610, 899, 1002, 1014], "unexpect": [83, 255, 269, 431, 610, 718, 1014], "caus": [83, 91, 102, 103, 113, 135, 149, 255, 717, 1014], "panic": 83, "mismatch": 85, "incompat": 87, "pa": [90, 118], "chunkedarrai": [90, 184, 255, 760, 1014], "recordbatch": [90, 173, 255], "schemadefinit": [90, 92, 93, 94, 96, 255, 708], "schema_overrid": [90, 92, 93, 94, 95, 96, 173, 218, 255, 285, 708, 711, 733], "copi": [90, 91, 135, 138, 139, 173, 213, 218, 219, 232, 255, 362, 532, 610, 626, 627, 686, 708, 714, 745, 749, 762, 815, 977, 990, 995, 996, 1014], "closest": 90, "pair": [90, 92, 93, 94, 96, 124, 193, 255, 664, 708, 1022], "sever": [90, 92, 93, 94, 96, 255, 708, 1022], "wai": [90, 92, 93, 94, 96, 143, 159, 173, 188, 208, 235, 255, 457, 459, 495, 505, 561, 610, 630, 641, 660, 675, 690, 692, 708, 950], "equival": [90, 92, 93, 94, 96, 105, 160, 171, 185, 255, 262, 266, 354, 355, 369, 372, 373, 394, 430, 447, 449, 453, 454, 456, 460, 512, 535, 545, 552, 610, 642, 708, 848, 957, 973, 975, 976, 1014], "form": [90, 92, 93, 94, 96, 172, 198, 226, 255, 458, 610, 708, 899, 1014], "them": [90, 92, 93, 94, 96, 113, 149, 160, 161, 175, 182, 228, 255, 379, 410, 451, 452, 457, 562, 610, 642, 643, 648, 657, 708, 711, 717, 866, 895, 896, 1014], "dimens": [90, 92, 94, 96, 255, 469, 610, 708, 909, 1014], "allow_copi": [91, 135], "interchang": [91, 135], "__dataframe__": 91, "detail": [91, 104, 120, 121, 135, 255, 708, 1022], "latest": [91, 105, 114, 135, 370, 442, 610], "index": [91, 95, 98, 104, 119, 135, 153, 160, 161, 166, 171, 172, 175, 189, 195, 197, 198, 207, 220, 228, 233, 255, 263, 277, 278, 279, 281, 337, 397, 398, 407, 418, 422, 423, 472, 473, 474, 475, 476, 478, 479, 480, 483, 493, 505, 518, 539, 610, 642, 643, 648, 674, 688, 708, 725, 726, 727, 728, 729, 791, 848, 853, 854, 863, 874, 878, 879, 897, 923, 926, 938, 950, 963, 985, 1014], "runtimeerror": 91, "from_panda": [91, 106], "from_arrow": 91, "effici": [91, 173, 255], "clone": [92, 93, 94, 95, 96, 138, 218, 219, 255, 626, 708, 745, 994, 995, 996, 1004, 1014], "dimension": [92, 94, 96, 255, 708, 1014], "infer_schema_length": [93, 96, 102, 103, 106, 113, 116, 255, 507, 708, 952], "NOT": [93, 120, 121, 440, 1021], "typic": [93, 136, 255, 711, 718, 1014], "clearer": 93, "load": [93, 95, 105, 114, 126, 128, 255, 621, 644, 651, 708, 1022], "_partial_": [93, 255, 708], "omit": [93, 97, 123, 125, 127, 130, 133, 185, 255], "mani": [93, 96, 104, 149, 255, 507, 717, 952, 1014], "scan": [93, 96, 102, 103, 111, 113, 114, 115, 116, 117, 118, 160, 161, 255, 635, 642, 643, 644, 651, 708], "slow": [93, 96, 102, 103, 113, 269, 308, 610, 692, 756, 1014], "partial": 93, "present": [93, 120, 125, 383, 610, 1004, 1014], "np": [94, 152, 218, 255, 539, 610, 708, 833, 837, 839, 840, 911, 985, 1014], "ndarrai": [94, 152, 218, 255, 539, 610, 708, 760, 923, 926, 985, 995, 1014], "numpi": [94, 119, 141, 218, 219, 255, 451, 452, 610, 708, 833, 837, 839, 840, 895, 896, 911, 995, 996, 1004, 1014], "columnar": [94, 96, 172, 198, 255], "interpret": [94, 96, 102, 103, 113, 255, 708], "yield": [94, 96, 102, 103, 113, 147, 149, 223, 255, 457, 610, 708, 717, 809, 1014], "conclus": [94, 96, 255, 708], "nan_to_nul": [95, 255, 708, 1014], "include_index": 95, "datetimeindex": [95, 760, 1014], "panda": [95, 106, 119, 160, 219, 255, 333, 334, 543, 610, 642, 708, 787, 788, 996, 997, 1014], "instal": [95, 102, 103, 104, 107, 111, 119, 141, 218, 219, 255, 671, 708, 996, 1014], "nan": [95, 120, 121, 125, 135, 150, 219, 255, 312, 313, 354, 355, 363, 372, 373, 378, 385, 387, 388, 389, 394, 430, 434, 446, 451, 452, 453, 454, 545, 564, 610, 636, 708, 720, 724, 761, 816, 839, 840, 895, 896, 911, 996, 1014, 1022], "convert": [95, 105, 106, 114, 135, 214, 215, 216, 217, 218, 221, 255, 309, 316, 344, 347, 423, 432, 464, 513, 524, 525, 526, 527, 529, 610, 708, 766, 798, 801, 879, 958, 969, 970, 971, 972, 974, 982, 993, 994, 995, 996, 1004, 1014], "pd": [95, 106, 543, 610, 997, 1014], "pd_df": 95, "pd_seri": 95, "tbl": [97, 99, 103], "reconstruct": 97, "repr": [97, 125, 127], "trim": 97, "whitespac": [97, 511, 517, 523, 956, 962, 968], "prompt": 97, "extract": [97, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 338, 339, 342, 343, 349, 350, 352, 459, 506, 507, 508, 610, 767, 768, 769, 770, 772, 773, 775, 779, 780, 781, 782, 784, 785, 786, 789, 790, 792, 793, 796, 797, 799, 803, 804, 806, 951, 952, 953], "to_init_repr": [97, 255, 1014], "truncat": [97, 160, 255, 337, 642, 661, 708, 791], "identifi": [97, 181, 187, 224, 255, 656, 681, 708], "compound": [97, 255], "struct": [97, 185, 201, 221, 225, 232, 255, 423, 433, 507, 520, 521, 549, 567, 568, 569, 583, 610, 667, 682, 686, 692, 708, 879, 952, 965, 966], "neither": [97, 106, 199, 255, 423, 879], "source_ac": 97, "source_cha": 97, "ident": [97, 138, 139, 255, 344, 626, 627, 708, 745, 749, 798, 1014], "timestamp": [97, 340, 578, 794], "tor_id": 97, "nnel_id": 97, "asia": [97, 767, 768, 799], "tokyo": 97, "123456780": 97, "9876543210": 97, "56": [97, 130, 541, 610], "59": [97, 124, 130, 315, 330, 342, 571, 600, 765, 784, 796], "663053": 97, "jst": 97, "803065983": 97, "2055938745": 97, "38": [97, 125], "050545": 97, "source_actor_id": 97, "source_channel_id": 97, "sr": [97, 714, 1014], "to_list": [97, 161, 255, 643, 708, 944, 1014], "datatypeclass": 98, "uint32": [98, 119, 147, 255, 279, 319, 322, 326, 328, 330, 332, 335, 338, 339, 342, 349, 350, 397, 398, 412, 468, 500, 509, 512, 539, 543, 610, 711, 728, 740, 769, 772, 779, 781, 784, 786, 789, 792, 793, 796, 803, 804, 809, 838, 853, 854, 868, 924, 945, 997, 1014], "regular": [98, 172, 197, 198, 228, 255, 359, 499, 500, 505, 506, 514, 515, 561, 574, 584, 587, 598, 610, 711, 944, 945, 950, 951, 959, 960], "uint64": [98, 162, 255, 374, 397, 398, 467, 610, 823, 853, 854, 907, 1014], "bigidx": 98, "read": [99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 149, 255, 371, 431, 602, 610, 635, 640, 663, 708, 717, 1014], "batch": [99, 103, 116, 652, 708], "over": [99, 102, 103, 105, 113, 125, 136, 149, 172, 173, 197, 198, 223, 234, 237, 255, 269, 308, 364, 378, 431, 432, 465, 471, 472, 473, 474, 475, 476, 478, 479, 480, 555, 567, 568, 576, 583, 590, 610, 692, 711, 717, 718, 756, 911, 912, 913, 915, 919, 1014], "fetch": [99, 113, 176, 255, 626, 628, 644, 651, 708], "ideal": 99, "read_csv_batch": [99, 622], "tpch": [99, 103], "tables_scale_100": [99, 103], "lineitem": [99, 103, 104], "try_parse_d": [99, 102, 103, 113], "polarsexprtyp": [100, 132, 591], "syntact": [100, 132, 227, 255, 574, 575, 579, 589, 594, 683, 708, 940, 1014], "sugar": [100, 132, 227, 255, 574, 575, 579, 589, 594, 683, 708, 940, 1014], "repeat": [100, 107, 115, 132, 466, 468, 610], "pre": [100, 132, 423, 591], "i8": [100, 132, 487, 591, 610, 759, 910, 1001, 1014], "n_row": [101, 102, 103, 107, 111, 113, 115, 116, 117, 173, 255, 635, 708], "accept": [101, 102, 103, 105, 107, 111, 137, 148, 159, 201, 208, 222, 232, 235, 255, 262, 359, 379, 457, 495, 552, 553, 554, 558, 560, 561, 562, 563, 569, 574, 584, 587, 594, 597, 598, 610, 624, 634, 641, 667, 675, 680, 686, 690, 708, 829, 1014], "stop": [101, 102, 103, 107, 111, 113, 115, 116, 117, 130, 319, 321, 322, 324, 325, 330, 332, 338, 339, 341, 342, 346, 348, 349, 350, 352, 472, 473, 475, 478, 479, 480, 610, 764, 766, 769, 771, 772, 774, 779, 781, 784, 786, 789, 792, 793, 795, 796, 800, 802, 803, 804, 805, 806], "textio": 102, "new_column": [102, 103, 106, 113, 194, 255], "comment_char": [102, 103, 113], "quote_char": [102, 103, 113], "skip_row": [102, 103, 113], "missing_utf8_is_empty_str": [102, 103, 113], "ignore_error": [102, 103, 113], "n_thread": [102, 103], "8192": 102, "csvencod": [102, 103, 113], "low_memori": [102, 103, 111, 113, 116, 117], "skip_rows_after_head": [102, 103, 113], "row_count_nam": [102, 103, 107, 111, 113, 115, 116, 117], "row_count_offset": [102, 103, 107, 111, 113, 115, 116, 117], "sample_s": [102, 103], "eol_char": [102, 103, 113], "we": [102, 103, 106, 113, 160, 161, 175, 228, 255, 269, 337, 341, 348, 404, 431, 472, 473, 474, 475, 476, 478, 479, 480, 513, 582, 602, 610, 642, 643, 648, 652, 708, 718, 791, 795, 802, 825, 860, 903, 958, 1014], "handler": [102, 103, 106], "g": [102, 103, 105, 106, 107, 111, 114, 115, 117, 160, 161, 175, 226, 228, 255, 262, 269, 337, 341, 348, 359, 472, 473, 474, 475, 476, 478, 479, 480, 487, 574, 610, 642, 643, 648, 664, 708, 791, 795, 802, 924, 995, 1014], "builtin": [102, 103, 106], "stringio": [102, 103], "fsspec": [102, 103, 107, 111, 114, 115, 117, 119], "remot": [102, 103, 107, 111], "autogener": [102, 103, 113], "column_x": [102, 103, 113], "enumer": [102, 103, 113, 173, 255], "shorter": [102, 103], "comment": [102, 103, 113], "instanc": [102, 103, 113, 125, 127, 133, 149, 154, 255, 294, 442, 472, 473, 474, 475, 476, 478, 479, 480, 567, 576, 610, 652, 688, 708, 717, 740, 1014], "special": [102, 103, 113, 506, 718, 951, 1014], "escap": [102, 103, 113], "dure": [102, 103, 113, 133, 149, 255, 717, 1014], "prefer": [102, 103, 105, 113, 128, 136, 149, 172, 197, 198, 237, 255, 269, 471, 610, 708, 717, 718, 911, 1014, 1022], "treat": [102, 103, 113, 499, 514, 515, 944, 959, 960], "10000": [102, 173, 255, 532], "check": [102, 103, 113, 120, 121, 155, 160, 161, 169, 171, 174, 255, 265, 267, 287, 290, 291, 379, 383, 400, 499, 503, 522, 610, 642, 643, 647, 652, 708, 715, 716, 734, 737, 738, 830, 832, 835, 836, 838, 843, 844, 845, 847, 848, 856, 924, 944, 948, 967, 1014], "might": [102, 103, 113, 129, 269, 547, 610, 996, 1014], "issu": [102, 103, 106, 113, 306, 307, 537, 610, 754, 755, 983, 1014], "iso8601": [102, 103, 113], "physic": [102, 103, 175, 255, 295, 543, 610, 625, 647, 648, 708, 742, 997, 1014], "cpu": [102, 103], "system": [102, 103], "wrongli": 102, "done": [102, 103, 113, 118, 158, 175, 255, 268, 270, 294, 457, 510, 516, 556, 610, 648, 708, 740, 955, 961, 1014], "buffer": [102, 103, 147, 172, 255, 809, 1014], "modifi": [102, 103, 113, 129, 133, 165, 172, 230, 255, 280, 340, 351, 499, 505, 506, 514, 610, 794, 805, 908, 944, 950, 951, 959, 973, 975, 976, 1014], "lossi": [102, 103, 113], "decod": [102, 103], "reduc": [102, 103, 111, 113, 115, 116, 117, 242, 243, 245, 248, 487, 576, 610, 673, 697, 698, 700, 703, 708, 888, 902, 931, 983, 1014], "usag": [102, 103, 113, 125, 127, 206, 255, 711, 932, 1014], "expens": [102, 103, 111, 113, 116, 117, 126, 128, 136, 160, 161, 172, 197, 198, 223, 224, 255, 269, 610, 642, 643, 681, 708, 717, 718, 1014, 1022], "aggreg": [102, 103, 111, 154, 160, 161, 178, 179, 180, 183, 185, 189, 190, 191, 209, 210, 226, 229, 235, 236, 239, 241, 255, 263, 365, 376, 431, 457, 471, 472, 473, 474, 475, 476, 478, 479, 480, 549, 553, 554, 567, 568, 569, 576, 581, 584, 587, 590, 598, 610, 642, 643, 652, 653, 654, 655, 658, 659, 662, 676, 677, 684, 690, 691, 694, 696, 708, 826, 911, 912, 913, 915, 918, 919, 920, 1014], "nativ": [102, 107, 111, 123, 136, 172, 198, 215, 237, 255, 269, 610, 615, 718, 1014, 1022], "parser": 102, "even": [102, 459, 610], "regard": [102, 564], "sens": [102, 107, 111, 115, 117, 182, 228, 255, 457, 610, 657, 708], "particular": [102, 107, 111, 115, 117, 147, 255, 809, 1014], "skip": [102, 103, 106, 111, 113, 117, 226, 255, 718, 1014], "row_count": [102, 103, 107, 111, 113, 115, 116, 117], "sampl": [102, 103, 237, 255, 492, 610, 692, 937, 1014], "estim": [102, 103, 147, 255, 270, 357, 358, 392, 556, 610, 708, 809, 811, 812, 849, 1014], "alloc": [102, 103, 147, 192, 255, 809, 1014], "scan_csv": [102, 103, 672, 673, 708], "lazili": [102, 103, 113, 114, 115, 116, 117, 433, 610], "glob": [102, 103, 113, 115, 116, 117], "continu": [102, 111, 492, 610, 937, 1014], "benchmark": [102, 111, 293, 610], "50000": 103, "batchedcsvread": [103, 621], "upon": 103, "creation": 103, "gather": 103, "next_batch": 103, "big": 103, "interest": 103, "seen_group": 103, "big_fil": 103, "df_current_batch": 103, "concat": [103, 744, 892, 1014], "partition_df": 103, "partition_bi": [103, 173, 255], "as_dict": [103, 187, 255], "fh": 103, "write_csv": [103, 113, 255], "els": [103, 602], "partition_on": 104, "partition_rang": 104, "partition_num": 104, "dbreadengin": 104, "connectorx": [104, 119], "raw": 104, "partit": [104, 105, 111, 114, 118, 173, 187, 255], "transfer": 104, "document": [104, 106, 344, 347, 508, 524, 525, 526, 529, 798, 801, 953, 969, 970, 971, 974], "redshift": 104, "mysql": 104, "mariadb": 104, "clickhous": 104, "oracl": 104, "bigqueri": 104, "pleas": [104, 160, 255, 642, 708], "doc": [104, 141, 255], "github": 104, "sfu": 104, "db": 104, "connector": 104, "destin": 104, "sqlite": 104, "develop": [104, 125, 127], "flight_sql": 104, "wide": [104, 158, 181, 226, 255, 656, 708], "adopt": 104, "significantli": [104, 1022], "better": [104, 136, 218, 237, 255, 269, 549, 610, 692, 925, 926, 1014], "driver": 104, "cpp": 104, "partition_col": 104, "explicitli": [104, 123, 125, 133, 433, 597, 610, 620], "delta_table_opt": [105, 114], "root": [105, 114, 391, 432, 443, 461, 496, 536, 609, 610, 940, 1014], "absolut": [105, 114, 120, 121, 261, 356, 357, 358, 610, 713, 810, 811, 812, 1014], "avoid": [105, 198, 255], "2021": [105, 114, 142, 158, 160, 228, 255, 524, 582, 642, 708, 711, 767, 768, 775, 799, 845, 969, 1014], "aw": [105, 114], "googl": [105, 114], "service_account": [105, 114], "service_account_json_absolute_path": [105, 114], "az": [105, 114], "adl": [105, 114], "abf": [105, 114], "azure_storage_account_nam": [105, 114], "azure_storage_account_kei": [105, 114], "without_fil": [105, 114], "track": [105, 114, 136, 255, 423, 1021], "sheet_id": 106, "sheet_nam": 106, "xlsx2csv_option": 106, "read_csv_opt": 106, "noreturn": 106, "xlsx2csv": [106, 119], "read_csv": [106, 113], "nor": [106, 199, 255], "skip_empty_lin": 106, "my": [106, 118, 530, 975], "datasheet": 106, "correct": [106, 357, 358, 392, 477, 492, 610, 652, 708, 811, 812, 849, 917, 937, 1014], "look": [106, 287, 423, 734], "whole": [106, 494, 495, 505, 610, 692, 708, 950], "With": [106, 136, 171, 255, 269, 472, 473, 474, 475, 476, 478, 479, 480, 610, 718, 848, 1014], "1000": [106, 147, 217, 255, 326, 327, 532, 780, 993, 1014, 1022], "spreadsheet": [106, 189, 255], "xl": 106, "xlsm": 106, "xlsb": 106, "odf": 106, "od": 106, "odt": 106, "memory_map": [107, 111, 115], "v2": [107, 115], "greatli": [107, 115], "improv": [107, 115, 673, 708], "page": [107, 111, 115, 117, 255, 610, 621, 673, 708, 1014], "give": [107, 111, 115, 116, 117, 181, 224, 255, 321, 392, 468, 545, 610, 621, 656, 681, 708, 771, 849, 1014], "That": [107, 652, 708], "filenam": 107, "my_fil": 107, "write_ipc": [107, 255], "read_ndjson": 109, "parallelstrategi": [111, 117], "use_statist": [111, 117], "awar": [111, 172, 198, 215, 255, 524, 526, 969, 971], "stabl": [111, 141, 199, 255, 428, 610, 656, 708], "row_group": [111, 117], "pressur": [111, 116, 117, 487, 610, 673, 708, 931, 1014], "read_tabl": 111, "with_column_nam": 113, "push": [113, 115, 116, 117, 118], "down": [113, 115, 116, 117, 118, 368, 610, 820, 1014], "therebi": [113, 115, 116, 117], "potenti": [113, 115, 116, 117, 172, 197, 255], "overhead": [113, 115, 116, 117], "realloc": [113, 115, 116, 149, 255, 717, 1014], "headerless": 113, "unlik": [113, 160, 255, 642, 708], "fewer": 113, "my_long_fil": 113, "doesn": [113, 160, 255, 353, 610, 642, 708, 808, 1004, 1014], "thing": [113, 575], "less": [113, 175, 255, 394, 430, 510, 516, 521, 532, 610, 648, 708, 955, 961, 966, 977, 1022], "limit": [113, 151, 255, 286, 297, 298, 299, 364, 370, 610, 637, 644, 673, 708, 746, 747, 748, 817, 1014], "breezah": 113, "languag": [113, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "hard": [113, 652, 708], "mydf": 113, "lambda": [113, 136, 154, 188, 237, 255, 269, 356, 357, 358, 423, 431, 432, 471, 555, 567, 568, 576, 583, 590, 610, 652, 660, 692, 708, 718, 810, 811, 812, 879, 1014], "simpli": [113, 457, 567, 576, 610], "idx": [113, 160, 173, 255, 423, 642, 708, 879, 926, 1014], "uint16": [113, 306, 307, 537, 610, 711, 754, 755, 983, 1014], "u16": [113, 125, 1022], "eu": 114, "central": [114, 392, 492, 610, 849, 937, 1014], "allow_pyarrow_filt": 118, "comparison": 118, "dset": 118, "folder": 118, "stdout": [119, 133, 158, 255], "17": [119, 125, 130, 235, 481, 578, 591, 610, 690, 750, 795, 1014, 1022], "platform": 119, "linux": 119, "90": [119, 527, 972], "wsl2": 119, "x86_64": 119, "glibc2": 119, "main": 119, "apr": 119, "14": [119, 125, 130, 136, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 325, 378, 465, 610, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 795], "44": [119, 311, 610], "51": 119, "gcc": 119, "matplotlib": [119, 661, 671, 708], "check_dtyp": [120, 121], "check_exact": [120, 121], "rtol": [120, 121], "1e": [120, 121], "atol": [120, 121], "nans_compare_equ": [120, 121], "check_column_ord": 120, "check_row_ord": 120, "assertionerror": [120, 121], "compar": [120, 121, 155, 255, 354, 355, 372, 373, 394, 430, 453, 454, 554, 610, 924, 1014], "exactli": [120, 121, 124, 125, 127, 520, 521, 932, 965, 966, 1014], "toler": [120, 121, 175, 255, 648, 708], "inexact": [120, 121], "assert": [120, 121, 123, 125, 127, 161, 255, 621, 643, 708, 711, 822, 1014], "irrespect": 120, "unsort": 120, "check_nam": 121, "s1": [121, 154, 255, 848, 879, 996, 1005, 1014], "searchstrategi": [122, 124, 125, 127], "null_prob": [122, 125, 127], "percentag": [122, 125, 127, 458, 610, 899, 1014], "chanc": [122, 125, 127, 1022], "independ": [122, 123, 125, 127], "flag": [122, 484, 499, 505, 506, 514, 610, 633, 652, 708, 927, 944, 950, 951, 959, 1014], "hypothesi": [122, 123, 124, 125, 126, 127, 1022], "sampled_from": [122, 1022], "unique_small_int": 122, "ccy": [122, 1022], "gbp": [122, 1022], "eur": [122, 142, 158, 255, 1022], "jpy": [122, 1022], "min_col": [123, 125], "max_col": [123, 125], "standalon": [123, 125], "mincol": 123, "assign": [123, 160, 255, 423, 457, 465, 520, 521, 610, 642, 708, 757, 879, 886, 903, 905, 965, 966, 1014], "exact": [123, 125, 127, 206, 255, 524, 525, 526, 545, 610, 969, 970, 971], "minimum": [123, 124, 125, 127, 154, 183, 255, 356, 357, 358, 446, 452, 465, 587, 610, 658, 673, 708, 746, 783, 810, 811, 812, 896, 901, 905, 1014, 1022], "especi": 123, "test_unique_xyz": 123, "assert_someth": 123, "punctuat": 123, "test_special_char_colname_init": 123, "inner_dtyp": [124, 127], "select_from": [124, 127], "min_siz": [124, 125, 127, 1022], "max_siz": [124, 125, 127, 1022], "anoth": [124, 159, 255, 308, 314, 422, 437, 440, 610, 641, 687, 708, 756, 764, 878, 924, 1014], "randomli": 124, "innermost": 124, "2x": 124, "lst": 124, "11330": 124, "24030": 124, "116": 124, "zz": [124, 127], "small": [124, 176, 255, 341, 635, 708, 1022], "uint8_pair": [124, 1022], "uint": [124, 1022], "zip": [124, 1022], "131": 124, "176": 124, "149": [124, 1022], "max_data_s": [125, 127], "include_col": 125, "allow_infin": [125, 127], "allowed_dtyp": [125, 127, 1022], "excluded_dtyp": [125, 127], "describ": [125, 158, 255, 1014], "n_chunk": [125, 127, 255, 1014], "randomis": 125, "onto": 125, "pct": 125, "preced": [125, 711], "disallow": [125, 127], "inf": [125, 127, 276, 381, 384, 545, 610, 724, 757, 825, 833, 837, 885, 899, 903, 1001, 1014], "exclud": [125, 127, 304, 307, 379, 561, 610, 829, 845, 1014], "deploi": [125, 127], "characterist": [125, 127], "concret": [125, 127], "test_repr": 125, "isinst": [125, 127, 255], "0x11f561580": 125, "known": [125, 423, 692, 879], "0565": 125, "34715": 125, "5844": 125, "33": [125, 481, 561, 610, 916, 1014], "076854": 125, "3382": 125, "48662": 125, "7540": 125, "29": [125, 130, 160, 161, 175, 228, 255, 333, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 787, 791, 795, 802], "836271": 125, "4063": 125, "06": [125, 130, 228, 255, 315, 325, 339, 340, 352, 794, 795, 804], "39092": 125, "1889": 125, "13": [125, 130, 138, 139, 150, 151, 157, 161, 166, 176, 184, 232, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 471, 527, 562, 567, 576, 601, 610, 626, 627, 636, 637, 643, 650, 686, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 718, 795, 802, 803, 972, 1014], "41": [125, 479, 610, 1022], "874455": 125, "15836": 125, "1755e": 125, "575050513": 125, "profil": [126, 128, 708], "balanc": [126, 128, 1022], "set_environ": 126, "polars_hypothesis_profil": [126, 128], "1500": 126, "constructor": 127, "normal": [127, 160, 255, 353, 392, 492, 610, 642, 708, 808, 849, 937, 1014], "test_repr_is_valid_str": 127, "experi": 127, "create_list_strategi": [127, 1022], "polars_max_thread": 129, "behind": 129, "lock": 129, "reason": 129, "pyspark": 129, "udf": [129, 136, 188, 237, 255, 269, 459, 555, 610, 660, 692, 708, 718, 1014], "similar": [129, 154, 175, 255, 344, 347, 457, 602, 610, 648, 708, 798, 801], "1h": [130, 160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 772, 791, 795, 802], "23": [130, 160, 161, 255, 315, 322, 341, 472, 473, 475, 478, 479, 480, 571, 600, 610, 642, 643, 708, 765, 772, 1022], "999999": [130, 571, 600], "1h30m25": 130, "third": [130, 431, 610], "lf": [130, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 708, 1021, 1022], "6h": 130, "5h59m": 130, "1h29m": 130, "58": 130, "57": [130, 921, 1014, 1022], "19": [130, 161, 175, 255, 341, 473, 475, 527, 610, 643, 648, 708, 795, 802, 972], "initi": [133, 567, 576, 602], "whatev": 133, "were": 133, "enter": 133, "advantag": [133, 188, 255], "initialis": [133, 708, 1021], "set_": 133, "set_verbos": 133, "do_various_th": 133, "restor": 133, "cleaner": 133, "breviti": 133, "vein": 133, "set_ascii_t": 133, "write_ascii_frame_to_stdout": 133, "sy": 133, "nan_as_nul": 135, "_pyarrowdatafram": 135, "nullabl": 135, "extens": [135, 219, 255, 996, 1014], "propag": [135, 179, 210, 255, 355, 451, 452, 454, 610, 895, 896, 1014], "inference_s": [136, 255], "256": [136, 255, 899, 1014], "_significantly_": [136, 237, 255, 718, 1014], "intens": [136, 237, 255, 457, 610, 718, 1014], "forc": [136, 175, 237, 255, 647, 648, 692, 708, 718, 1014], "materi": [136, 237, 255, 661, 692, 708, 711, 718, 1014], "parallelis": [136, 237, 255, 718, 1014], "optimis": [136, 237, 255, 708, 718, 925, 926, 1014], "achiev": [136, 237, 255, 269, 610, 718, 1014], "best": [136, 237, 255, 269, 610, 718, 1014], "tri": [136, 255], "arbitrarili": [136, 255], "rearrang": [136, 255], "transform": [136, 255, 431, 528, 530, 531, 610], "preserv": [136, 218, 219, 255, 489, 610, 934, 996, 1014], "lru_cach": [136, 255, 269, 610, 718, 1014], "magnitud": [136, 255, 269, 610, 718, 1014], "column_1": [136, 223, 255], "scalar": [136, 171, 197, 255, 483, 555, 582, 610, 848, 923, 1014], "k": [137, 222, 255, 292, 295, 392, 544, 610, 624, 680, 708, 739, 742, 849, 998, 1014], "intoexpr": [137, 159, 160, 161, 201, 208, 222, 232, 235, 255, 379, 401, 403, 409, 424, 457, 486, 495, 553, 554, 558, 560, 562, 563, 567, 569, 576, 584, 587, 594, 597, 598, 602, 610, 624, 641, 642, 643, 667, 675, 680, 686, 690, 708, 829, 1014], "nulls_last": [137, 208, 222, 255, 279, 494, 610, 624, 675, 680, 708, 727, 1014], "smallest": [137, 222, 255, 292, 610, 624, 680, 708, 739, 1014], "largest": [137, 160, 161, 175, 222, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 544, 610, 624, 642, 643, 648, 680, 708, 791, 795, 802, 998, 1014], "top": [137, 222, 255, 624, 680, 708], "top_k": [137, 255, 292, 610, 624, 708, 739, 1014], "greater": [138, 175, 255, 372, 373, 492, 521, 610, 648, 708, 937, 966, 1014], "cheap": [138, 139, 255, 626, 627, 708, 717, 745, 749, 1014], "deepcopi": [138, 139, 255, 626, 627, 708, 745, 749, 1014], "clear": [139, 255, 627, 708, 749, 1014], "properti": [140, 146, 164, 200, 203, 231, 255, 629, 632, 666, 685, 708, 711, 1022], "appl": [140, 165, 174, 193, 195, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 461, 470, 503, 522, 536, 610, 647, 664, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 948, 967], "banana": [140, 214, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 461, 470, 536, 610, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703], "pearson": [141, 255, 392, 492, 564, 610, 849, 937, 1014], "correl": [141, 255, 564, 592], "coeffici": [141, 255, 492, 610, 937, 1014], "corrcoef": [141, 255], "percentil": [142, 255, 758, 1014], "summari": [142, 255, 758, 1014], "glimps": [142, 163, 255], "usd": [142, 158, 255, 1022], "2020": [142, 158, 161, 255, 316, 320, 323, 326, 327, 329, 331, 336, 340, 343, 344, 347, 524, 525, 526, 643, 708, 711, 766, 770, 773, 780, 782, 785, 790, 794, 797, 798, 801, 969, 970, 971], "null_count": [142, 145, 255, 308, 610, 708, 756, 758, 1014], "266667": [142, 255], "666667": [142, 179, 229, 243, 255, 356, 610, 684, 698, 708], "std": [142, 255, 471, 478, 610, 708, 758, 918, 1014], "101514": [142, 255], "707107": [142, 255, 357, 478, 610, 811, 1014], "57735": [142, 255], "median": [142, 189, 255, 364, 474, 610, 687, 708, 758, 914, 1014], "more_column": [143, 148, 202, 225, 255, 359, 574, 610, 630, 634, 668, 682, 708], "Or": [143, 159, 160, 161, 175, 208, 228, 235, 255, 457, 495, 561, 602, 610, 630, 641, 642, 643, 648, 675, 690, 708], "subset": [145, 185, 224, 255, 631, 681, 708], "snippet": [145, 255, 631, 708], "is_nul": [145, 255, 610, 631, 708, 1014], "sizeunit": [147, 255, 809, 1014], "heap": [147, 255, 809, 1014], "its": [147, 255, 315, 341, 348, 495, 610, 765, 795, 802, 809, 1014], "bitmap": [147, 255, 809, 1014], "therefor": [147, 255, 602, 809, 1014], "structarrai": [147, 255, 809, 1014], "constant": [147, 161, 255, 362, 610, 643, 708, 809, 815, 1014], "unchang": [147, 255, 543, 610, 652, 692, 708, 809, 997, 1014], "capac": [147, 206, 255, 809, 932, 1014], "ffi": [147, 255, 809, 1014], "kb": [147, 255, 809, 1014], "mb": [147, 255, 809, 1014], "gb": [147, 255, 809, 1014], "tb": [147, 255, 809, 1014], "revers": [147, 255, 303, 304, 305, 306, 307, 432, 461, 536, 610, 708, 752, 753, 754, 755, 1014], "1_000_000": [147, 255, 809, 1014], "25888898": [147, 255], "689577102661133": [147, 255], "long": [148, 181, 226, 255, 634, 656, 708], "letter": [148, 240, 249, 255, 359, 506, 574, 610, 634, 695, 704, 708, 711, 951], "thu": [149, 255, 564, 717, 1014], "faster": [149, 226, 255, 269, 471, 512, 547, 610, 672, 673, 708, 717, 718, 911, 957, 1014], "onlin": [149, 255, 717, 1014], "rerun": [149, 255, 717, 1014], "fill_valu": [150, 205, 226, 255, 486, 610, 670, 708, 930, 1014], "Not": [150, 255, 385, 387, 433, 610, 636, 708], "To": [150, 255, 312, 313, 337, 364, 499, 505, 506, 514, 530, 598, 610, 636, 708, 791, 944, 950, 951, 959, 975], "fillnullstrategi": [151, 255, 364, 610, 637, 708, 817, 1014], "matches_supertyp": [151, 255, 637, 708], "forward": [151, 175, 255, 333, 364, 370, 610, 637, 648, 708, 787, 817, 1014], "consecut": [151, 255, 286, 364, 370, 498, 610, 637, 708, 817, 943, 1014], "fill_nan": [151, 255, 610, 708, 1014], "OR": [152, 255, 554, 638, 708, 711], "reduct": [154, 255], "supercast": [154, 255], "parent": [154, 255], "rule": [154, 255], "arithmet": [154, 255], "zip_with": [154, 255, 1014], "foo11": [154, 255], "bar22": [154, 255], "null_equ": [155, 255, 924, 1014], "retriev": [156, 255, 397, 398, 533, 853, 854, 978], "return_as_str": [158, 255], "preview": [158, 255], "nice": [158, 255], "few": [158, 255], "rather": [158, 175, 255, 532, 648, 708, 977], "head": [158, 177, 211, 255, 268, 396, 610, 651, 708, 851, 984, 1014], "tail": [158, 163, 255, 268, 492, 610, 708, 824, 937, 1014], "more_bi": [159, 187, 208, 255, 495, 610, 641, 675, 708], "maintain_ord": [159, 187, 189, 224, 228, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 255, 263, 269, 285, 425, 539, 546, 565, 610, 628, 633, 635, 641, 661, 671, 672, 673, 681, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 708, 733, 757, 881, 903, 999, 1014], "consist": [159, 187, 255, 524, 641, 708, 969], "agg": [159, 160, 161, 255, 263, 269, 365, 367, 494, 495, 539, 551, 565, 610, 628, 633, 635, 641, 642, 643, 661, 671, 708, 711], "index_column": [160, 161, 255, 642, 643, 708], "include_boundari": [160, 255, 642, 708], "start_bi": [160, 255, 642, 708], "startbi": [160, 255, 642, 708], "check_sort": [160, 161, 255, 642, 643, 708], "dynamicgroupbi": [160, 255], "groupbi": [160, 161, 185, 255, 263, 269, 308, 365, 367, 404, 457, 494, 495, 539, 551, 555, 565, 610, 628, 633, 635, 642, 643, 661, 671, 708, 711, 756, 860, 1014], "member": [160, 255, 642, 708, 836, 1014], "seen": [160, 255, 286, 370, 610, 642, 708], "roll": [160, 161, 255, 333, 334, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 562, 592, 593, 610, 642, 643, 708, 787, 788, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1014], "slot": [160, 255, 308, 310, 402, 610, 642, 708, 756, 759, 858, 1014], "1n": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "nanosecond": [160, 161, 175, 228, 255, 337, 341, 342, 348, 472, 473, 474, 475, 476, 478, 479, 480, 572, 610, 642, 643, 648, 708, 791, 795, 796, 802], "1u": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "microsecond": [160, 161, 175, 228, 255, 337, 341, 342, 348, 472, 473, 474, 475, 476, 478, 479, 480, 571, 572, 600, 610, 642, 643, 648, 661, 708, 791, 795, 802], "1m": [160, 161, 175, 228, 255, 326, 327, 329, 336, 337, 341, 343, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 780, 782, 790, 791, 795, 797, 802], "millisecond": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 572, 610, 642, 643, 648, 708, 791, 795, 802], "1w": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "week": [160, 161, 175, 228, 255, 337, 341, 348, 350, 472, 473, 474, 475, 476, 478, 479, 480, 572, 610, 642, 643, 648, 708, 791, 795, 802, 804], "1q": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "quarter": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "1i": [160, 161, 175, 228, 255, 337, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791], "suffix": [160, 161, 174, 175, 201, 228, 232, 235, 255, 264, 290, 337, 341, 348, 385, 387, 388, 389, 432, 457, 461, 470, 472, 473, 474, 475, 476, 478, 479, 480, 503, 610, 642, 643, 647, 648, 667, 686, 687, 690, 708, 711, 737, 791, 795, 802, 948], "satur": [160, 161, 175, 228, 255, 337, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 795, 802], "correspond": [160, 161, 175, 218, 228, 255, 325, 337, 341, 348, 465, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 775, 791, 795, 802, 905, 1014], "due": [160, 161, 175, 228, 255, 294, 337, 340, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 740, 791, 794, 795, 802, 1014], "daylight": [160, 161, 175, 228, 255, 337, 340, 341, 348, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 643, 648, 708, 791, 794, 795, 802], "10i": [160, 161, 255, 642, 643, 708], "ascend": [160, 161, 255, 642, 643, 708], "dynam": [160, 255, 423, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 708, 879], "matter": [160, 161, 172, 198, 215, 255, 642, 643, 708], "_lower_bound": [160, 255, 642, 708], "_upper_bound": [160, 255, 642, 708], "harder": [160, 255, 642, 708], "inclus": [160, 161, 255, 379, 472, 473, 474, 475, 476, 478, 479, 480, 519, 520, 557, 610, 642, 643, 708, 829, 964, 965, 1014], "datapoint": [160, 255, 642, 708], "mondai": [160, 255, 348, 350, 642, 708, 802, 804], "tuesdai": [160, 255, 642, 708], "wednesdai": [160, 255, 642, 708], "thursdai": [160, 255, 642, 708], "fridai": [160, 255, 642, 708], "saturdai": [160, 255, 642, 708], "sundai": [160, 255, 350, 642, 708, 804], "weekli": [160, 255, 348, 642, 708, 802], "sorted": [160, 161, 255, 642, 643, 708], "metadata": [160, 161, 255, 642, 643, 708], "verifi": [160, 161, 255, 642, 643, 708], "incorrectli": [160, 161, 255, 423, 642, 643, 708], "incorrect": [160, 161, 255, 351, 484, 610, 642, 643, 692, 708, 805, 927, 1014], "re": [160, 218, 255, 333, 334, 642, 708, 787, 788, 1021], "come": [160, 255, 333, 334, 392, 610, 622, 642, 707, 708, 787, 788, 849, 1014], "set_index": [160, 255, 642, 708], "resampl": [160, 255, 642, 708], "reset_index": [160, 255, 642, 708], "though": [160, 255, 642, 708], "evenli": [160, 255, 642, 708], "upsampl": [160, 255, 642, 708], "date_rang": [160, 228, 255, 314, 316, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 610, 642, 708, 764, 766, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 802, 803, 804, 805, 806], "30m": [160, 255, 341, 348, 642, 708, 795, 802], "time_min": [160, 255, 642, 708], "time_max": [160, 255, 642, 708], "boundari": [160, 255, 297, 298, 299, 610, 642, 708, 746, 747, 748, 825, 1014], "time_count": [160, 255, 642, 708], "_lower_boundari": [160, 255, 642, 708], "_upper_boundari": [160, 255, 642, 708], "lower_bound": [160, 255, 297, 299, 379, 610, 642, 708, 746, 748, 829, 1001, 1014], "upper_bound": [160, 255, 297, 298, 379, 423, 610, 642, 708, 746, 747, 829, 885, 1014], "time_agg_list": [160, 255, 642, 708], "arang": [160, 226, 237, 255, 642, 692, 708], "2i": [160, 255, 642, 708], "3i": [160, 255, 642, 708], "a_agg_list": [160, 255, 642, 708], "rollinggroupbi": [161, 255], "dynamic_groupbi": [161, 255, 643, 708], "groupby_dynam": [161, 255, 643, 708], "t_0": [161, 255, 472, 473, 474, 475, 476, 478, 479, 480, 610, 643, 708], "t_1": [161, 255, 472, 473, 474, 475, 476, 478, 479, 480, 610, 643, 708], "t_n": [161, 255, 472, 473, 474, 475, 476, 478, 479, 480, 610, 643, 708], "43": [161, 255, 307, 479, 610, 643, 708], "strptime": [161, 255, 340, 643, 708, 794], "set_sort": [161, 175, 228, 255, 610, 643, 648, 708, 1014], "2d": [161, 218, 255, 582, 643, 708, 769], "sum_a": [161, 255, 643, 708], "min_a": [161, 255, 643, 708], "max_a": [161, 255, 643, 708], "seed": [162, 199, 255, 374, 465, 482, 488, 610, 823, 905, 922, 933, 1014], "seed_1": [162, 255, 374, 610, 823, 1014], "seed_2": [162, 255, 374, 610, 823, 1014], "seed_3": [162, 255, 374, 610, 823, 1014], "hash": [162, 255, 610, 1014], "u64": [162, 255, 374, 467, 610, 661, 708, 823, 1014], "10783150408545073287": [162, 255], "1438741209321515184": [162, 255], "10047419486152048166": [162, 255], "2047317070637311557": [162, 255], "ab": [163, 177, 211, 232, 255, 533, 534, 610, 686, 708, 824, 851, 984, 1014], "grown": [165, 255], "intermedi": [167, 255, 646, 708, 828, 1014, 1022], "linear": [167, 191, 247, 255, 378, 399, 436, 463, 476, 562, 563, 589, 610, 646, 662, 702, 708, 828, 855, 904, 916, 1014], "mask": [168, 170, 255, 287, 288, 290, 291, 380, 382, 390, 400, 499, 501, 610, 734, 735, 818, 829, 831, 834, 846, 856, 900, 901, 925, 944, 946, 1005, 1014], "visual": [168, 170, 255], "buffer_s": [172, 255], "intern": [172, 255], "veri": [172, 223, 255, 269, 610, 627, 692, 708, 749, 1014], "fit": [172, 206, 226, 255, 487, 591, 610, 931, 932, 1014], "signific": [172, 255, 269, 610], "4x": [172, 255], "materialis": [172, 173, 197, 198, 255], "rows_by_kei": [172, 198, 255], "iter_row": [173, 197, 198, 255], "17_500": [173, 255], "klmnoopqrstuvwxyz": [173, 255], "__name__": [173, 255], "7500": [173, 255], "15_000": [173, 255], "record_batch": [173, 255], "to_arrow": [173, 255, 1014], "to_batch": [173, 255], "date32": [173, 255], "large_str": [173, 213, 219, 255], "15000": [173, 255], "2500": [173, 255], "left_on": [174, 175, 255, 647, 648, 708], "right_on": [174, 175, 255, 647, 648, 708], "_right": [174, 175, 255, 647, 648, 708], "joinvalid": [174, 255, 647, 708], "semi": [174, 255, 647, 708], "anti": [174, 255, 647, 692, 708, 925, 926, 1014], "cross": [174, 255, 647, 708], "many_to_mani": [174, 255, 647, 708], "one_to_on": [174, 255, 647, 708], "one_to_mani": [174, 255, 647, 708], "many_to_on": [174, 255, 647, 708], "join_asof": [174, 255, 647, 708], "stringcach": [174, 255, 621], "other_df": [174, 255], "by_left": [175, 255, 648, 708], "by_right": [175, 255, 648, 708], "asofjoinstrategi": [175, 255, 648, 708], "allow_parallel": [175, 255, 647, 648, 708], "force_parallel": [175, 255, 647, 648, 708], "asof": [175, 255, 648, 708], "asof_join": [175, 255], "search": [175, 255, 648, 708], "distanc": [175, 255, 648, 708, 825, 1014], "plan": [175, 176, 255, 625, 633, 640, 647, 648, 663, 671, 689, 708], "gdp": [175, 255, 648, 708], "2016": [175, 255, 648, 708], "2017": [175, 255, 648, 708], "2018": [175, 255, 340, 648, 708, 794], "2019": [175, 255, 648, 708], "record": [175, 218, 255, 648, 708], "jan": [175, 255, 648, 708], "4164": [175, 255, 648, 708], "4411": [175, 255, 648, 708], "4566": [175, 255, 648, 708], "4696": [175, 255, 648, 708], "popul": [175, 255, 648, 708], "12th": [175, 255, 648, 708], "82": [175, 255, 648, 708], "66": [175, 255, 479, 552, 610, 648, 708, 916, 1014], "83": [175, 255, 648, 708], "52": [175, 232, 255, 481, 610, 648, 686, 708], "request": [176, 255], "describe_plan": [176, 255], "unoptim": [176, 255], "describe_optimized_plan": [176, 255], "show_graph": [176, 255, 708], "un": [176, 255], "graphviz": [176, 255, 671, 708], "axi": [178, 179, 181, 183, 210, 255, 656, 708], "null_strategi": [179, 210, 255], "nullstrategi": [179, 210, 255], "spam": [179, 255, 506, 951], "id_var": [181, 255, 656, 708], "value_var": [181, 255, 656, 708], "variable_nam": [181, 255, 656, 708], "value_nam": [181, 255, 656, 708], "unpivot": [181, 255, 656, 708], "leav": [181, 255, 423, 656, 708], "massag": [181, 255, 656, 708], "measur": [181, 255, 656, 708], "merg": [182, 255, 657, 708], "caller": [182, 255, 423, 652, 657, 692, 708], "respons": [182, 255, 657, 708], "what": [185, 255, 995, 1004, 1014], "pack": [185, 255], "expr_unique_subset": [185, 255], "df_nuniqu": [185, 255], "df_agg_nuniqu": [185, 255], "offer": [188, 255, 459, 610, 660, 708], "fulli": [188, 199, 255], "cast_str_to_int": [188, 255, 660, 708], "col_nam": [188, 255, 432, 610, 660, 708], "tdf": [188, 255, 660, 708], "aggregate_funct": [189, 255], "pivotagg": [189, 255], "nodefault": [189, 255], "_nodefault": [189, 255], "no_default": [189, 255], "sort_column": [189, 255], "predefin": [189, 255], "predict": [189, 192, 228, 255], "transpos": [189, 255], "discoveri": [189, 255], "col1": [189, 226, 255, 708, 1022], "col2": [189, 226, 255, 708, 1022], "col3": [189, 255, 1022], "tanh": [189, 255, 610, 1014], "998347": [189, 255], "964028": [189, 255], "999954": [189, 255], "interpol": [191, 247, 255, 364, 436, 463, 476, 589, 610, 662, 702, 708, 904, 916, 1014], "rollinginterpolationmethod": [191, 247, 255, 463, 476, 589, 610, 662, 702, 708, 904, 916, 1014], "midpoint": [191, 247, 255, 463, 476, 589, 610, 662, 702, 708, 904, 916, 1014], "by_pred": [197, 255], "mutual": [197, 255], "exclus": [197, 255, 552, 557, 610], "addition": [197, 255], "clariti": [197, 255], "toomanyrowsreturnederror": [197, 255, 621], "norowsreturnederror": [197, 255, 621], "inherit": [197, 255], "rowserror": [197, 255, 621], "with_replac": [199, 255, 482, 610, 922, 1014], "shuffl": [199, 237, 255, 482, 610, 692, 922, 1014], "modul": [199, 255, 482, 488, 609, 610, 711, 922, 933, 1014], "named_expr": [201, 232, 255, 594, 597, 667, 686, 708], "threshold": [201, 255, 667, 708], "set_auto_structifi": [201, 232, 255, 667, 686, 708], "auto_structifi": [201, 232, 255, 667, 686, 708], "is_odd": [201, 255, 667, 708], "_is_odd": [201, 255, 667, 708], "shift_and_fil": [204, 255, 610, 708, 1014], "shift": [205, 255, 310, 402, 458, 486, 562, 610, 670, 708, 759, 858, 899, 930, 1014], "shrink": [206, 255, 487, 610, 931, 932, 1014], "hold": [206, 255], "ddof": [209, 229, 255, 478, 480, 497, 550, 564, 592, 593, 596, 601, 610, 676, 684, 708, 918, 920, 941, 1003, 1014], "deviat": [209, 255, 357, 478, 497, 596, 610, 676, 708, 811, 941, 1014], "degre": [209, 229, 255, 464, 478, 480, 497, 550, 564, 592, 593, 596, 601, 610, 676, 684, 708, 918, 920, 941, 1003, 1014], "freedom": [209, 229, 255, 478, 480, 497, 550, 564, 592, 593, 596, 601, 610, 676, 684, 708, 918, 920, 941, 1003, 1014], "divisor": [209, 229, 255, 478, 480, 497, 550, 564, 592, 593, 596, 601, 610, 676, 684, 708, 918, 920, 941, 1003, 1014], "816497": [209, 255], "21": [210, 255, 472, 473, 475, 478, 479, 480, 578, 610], "16a": [210, 255], "27b": [210, 255], "38c": [210, 255], "nth": [212, 255, 521, 540, 610, 679, 708, 966, 986, 1014], "mostli": [213, 255, 365, 610], "categoricaltyp": [213, 255], "as_seri": [214, 255], "fruit": [214, 255, 461, 470, 503, 522, 536, 610, 948, 967], "car": [214, 255, 461, 470, 536, 610], "beetl": [214, 255, 461, 470, 536, 610], "audi": [214, 255, 461, 470, 536, 610], "300": [214, 255, 912, 913, 915, 1014], "drop_first": [216, 255], "dummi": [216, 255, 991, 1014], "foo_1": [216, 255], "foo_2": [216, 255], "bar_3": [216, 255], "bar_4": [216, 255], "ham_a": [216, 255], "ham_b": [216, 255], "instantiat": [217, 255, 993, 1014], "from_repr": [217, 255, 993, 1014], "df_from_str_repr": [217, 255], "eval": [217, 255, 573, 993, 1014], "ll": [218, 255], "u1": [218, 255], "f4": [218, 255], "view": [218, 255, 995, 1014], "recarrai": [218, 255], "rec": [218, 255], "use_pyarrow_extension_arrai": [219, 255, 996, 1014], "trigger": [219, 255, 996, 1014], "sent": [219, 255, 995, 996, 1014], "pandas_df1": [219, 255], "pandas_df2": [219, 255], "pandas_df2_pa": [219, 255], "na": [219, 255, 996, 1014], "get_column": [220, 255, 598], "four": [221, 255], "five": [221, 255, 1022], "bottom_k": [222, 255, 544, 610, 680, 708, 998, 1014], "include_head": [223, 255], "header_nam": [223, 255], "column_nam": [223, 255], "perhap": [223, 255], "column_2": [223, 255], "name_gener": [223, 255], "base_nam": [223, 255], "my_column_": [223, 255], "my_column_0": [223, 255], "my_column_1": [223, 255], "my_column_2": [223, 255], "uniquekeepstrategi": [224, 255, 681, 708], "kept": [224, 255, 681, 708], "decompos": [225, 255, 682, 708], "t_a": [225, 255, 682, 708], "t_b": [225, 255, 682, 708], "t_c": [225, 255, 682, 708], "t_d": [225, 255, 682, 708], "womp": [225, 255, 682, 708], "t_": [225, 255, 682, 708], "t_struct": [225, 255, 682, 708], "step": [226, 255, 557], "unstackdirect": [226, 255], "much": [226, 255, 308, 422, 610, 756, 878, 1014], "pivot": [226, 255], "phase": [226, 255], "subject": [226, 255], "ascii_uppercas": [226, 255], "h": [226, 255, 262, 344, 347, 487, 524, 526, 529, 610, 969, 971, 974], "col1_0": [226, 255], "col1_1": [226, 255], "col1_2": [226, 255], "col2_0": [226, 255], "col2_1": [226, 255], "col2_2": [226, 255], "coalesc": [227, 255, 524, 683, 708, 969], "400": [227, 255, 683, 708, 711, 912, 913, 915, 1014], "600": [227, 255, 683, 708, 711], "700": [227, 255, 683, 708], "new_df": [227, 255, 683, 708], "time_column": [228, 255], "frequenc": [228, 255], "forward_fil": [228, 255, 304, 307, 610], "varianc": [229, 255, 358, 392, 480, 550, 601, 610, 684, 708, 812, 849, 920, 1003, 1014], "grow": [230, 255], "is_not": [232, 255, 610, 686, 708], "not_c": [232, 255, 686, 708], "diff": [232, 255, 320, 323, 327, 329, 331, 336, 343, 610, 686, 708, 770, 773, 780, 782, 785, 790, 797, 1014], "_diff": [232, 255, 686, 708], "row_nr": [233, 255, 433, 472, 473, 475, 478, 479, 480, 610, 688, 708, 926, 1014], "named_agg": [235, 690], "_sum": [235, 690], "_mean_squar": [235, 690], "b_sum": [235, 690], "c_mean_squar": [235, 690], "sub": [237, 282, 283, 284, 610, 730, 731, 732], "triangl": [237, 692], "group_df": [237, 692], "deem": [238, 302, 565, 610, 693], "nr": [240, 249, 695, 704], "maxim": [242, 277, 610, 697, 725, 1014], "833333": [243, 698], "minim": [245, 278, 398, 487, 495, 610, 700, 726, 854, 890, 931, 1014], "overview": [255, 610, 621, 708, 1014, 1022], "public": [255, 610, 621, 708, 1014], "frameinittyp": [255, 708], "variou": [255, 610, 708, 711, 1014], "entri": [255, 708, 1021], "prevent": [255, 306, 307, 391, 537, 610, 708, 754, 755, 983, 1014], "behavior": [255, 269, 422, 555, 610, 878], "mydatafram": 255, "notic": [255, 708, 1014], "df4": 255, "df5": 255, "df6": 255, "corr": 255, "drop_in_plac": 255, "drop_nul": [255, 312, 610, 708, 1014], "estimated_s": [255, 1014], "explod": [255, 367, 457, 469, 610, 708, 909, 1014], "find_idx_by_nam": 255, "fold": [255, 442, 560, 567, 568, 590], "frame_equ": [255, 341, 348], "groupby_rol": [255, 472, 473, 474, 475, 476, 478, 479, 480, 610, 642, 708], "hash_row": 255, "hstack": 255, "insert_at_idx": 255, "is_dupl": [255, 610, 1014], "is_empti": [255, 1014], "is_uniqu": [255, 610, 1014], "iter_slic": 255, "melt": [255, 708], "merge_sort": [255, 708], "n_uniqu": [255, 610, 1014], "pipe": [255, 610, 708], "quantil": [255, 476, 610, 708, 903, 916, 1014], "replace_at_idx": 255, "selectortyp": [255, 711], "include_kei": 255, "high": 255, "cost": 255, "reoconstruct": 255, "defaultdict": 255, "assum": [255, 652, 692, 708], "shrink_to_fit": [255, 1014], "take_everi": [255, 610, 708, 1014], "to_dict": 255, "to_dummi": [255, 1014], "to_numpi": [255, 431, 610, 1014], "to_panda": [255, 1014], "to_struct": [255, 506], "unnest": [255, 506, 520, 521, 534, 708, 879, 965, 966], "unstack": 255, "write_avro": 255, "write_databas": 255, "write_delta": 255, "write_excel": 255, "write_json": [255, 663, 708], "write_parquet": 255, "cumprod": [262, 610, 1014], "ghi": [262, 506, 610, 711, 951], "94": [263, 610], "map_alia": [264, 461, 536, 610], "confus": [265, 385, 387, 610], "tt": [265, 610], "tf": [265, 267, 610], "ff": [265, 267, 610], "upcast": [268, 610], "skip_nul": [269, 610, 718, 1014], "pass_nam": [269, 610], "applystrategi": [269, 610], "thread_loc": [269, 610], "unknown": [269, 433, 505, 582, 610, 950], "stage": [269, 610], "speed": [269, 610, 673, 708], "code": [269, 287, 289, 290, 291, 484, 610, 650, 708, 927, 1014], "amount": [269, 610], "releas": [269, 610, 1022], "gil": [269, 610], "bug": [269, 431, 610, 652, 692, 708, 718, 1014], "discourag": [269, 610], "loop": [269, 610], "a_times_2": [269, 610], "approx": [270, 556, 610, 708], "hyperloglog": [270, 556, 610, 708], "algorithm": [270, 556, 610, 708], "cardin": [270, 556, 610, 708], "invers": [271, 272, 273, 274, 275, 276, 610, 719, 720, 721, 722, 723, 724, 1014], "cosin": [271, 272, 300, 301, 431, 610, 719, 720, 750, 751, 1014], "570796": [271, 273, 610, 719, 721, 1014], "hyperbol": [272, 274, 276, 301, 491, 542, 610, 720, 722, 724, 751, 936, 988, 1014], "sine": [273, 274, 431, 490, 491, 610, 721, 722, 935, 936, 1014], "881374": [274, 610, 722, 1014], "tangent": [275, 276, 541, 542, 610, 723, 724, 987, 988, 1014], "785398": [275, 610, 723, 1014], "arg_wher": [280, 610], "maintain": [285, 425, 483, 546, 610, 672, 673, 708, 733, 881, 923, 999, 1014], "substr": [287, 290, 291, 499, 503, 514, 515, 519, 520, 521, 522, 711, 734, 737, 738, 944, 948, 959, 960, 964, 965, 966, 967], "ends_with": [287, 291, 499, 522, 711, 967], "x00": [287, 289, 290, 291], "xff": [287, 289, 290, 291], "hex": [287, 288, 289, 290, 291, 501, 502, 513, 735, 736, 946, 947, 958], "code_encoded_hex": [287, 289, 290, 291], "contains_ff": [287, 290, 291], "starts_with_ff": [287, 290, 291], "ends_with_ff": [287, 290, 291], "000000": [287, 289, 290, 291], "ffff00": [287, 289, 290, 291], "0000ff": [287, 289, 290, 291], "transferencod": [288, 289, 501, 502, 735, 736, 946, 947], "strict": [288, 294, 499, 501, 513, 524, 525, 526, 529, 610, 735, 740, 924, 944, 946, 958, 969, 970, 971, 974, 1014], "base64": [288, 289, 501, 502, 735, 736, 946, 947], "anywher": [290, 291, 524, 525, 526, 969, 970, 971], "complex": [292, 308, 544, 610, 739, 756, 998, 1014], "frac": [292, 356, 357, 358, 492, 544, 610, 739, 810, 811, 812, 937, 998, 1014], "hurt": [293, 610], "lot": [293, 610], "content": [293, 488, 549, 610, 933, 1014], "problem": [293, 610], "overflow": [294, 306, 307, 513, 537, 610, 740, 754, 755, 958, 983, 1014], "categoricalord": [295, 742], "lexic": [295, 711, 742], "foo_clip": [297, 298, 299, 610], "clip": [298, 299, 610, 747, 748, 1014], "543081": [301, 610, 751, 1014], "cumul": [303, 304, 305, 306, 307, 567, 568, 569, 610, 752, 753, 754, 755, 1014], "a_revers": [303, 304, 305, 306, 307, 432, 470, 536, 610], "value_cummax": [304, 610], "value_cummax_all_fil": [304, 610], "value_cumsum": [307, 610], "value_cumsum_all_fil": [307, 610], "min_period": [308, 356, 357, 358, 471, 472, 473, 474, 475, 476, 478, 479, 480, 592, 593, 610, 756, 810, 811, 812, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1014], "slide": [308, 610, 756, 1014], "realli": [308, 610, 756, 1014], "visit": [308, 610, 756, 1014], "radian": [309, 610], "pi": [309, 610, 750, 935, 987, 1014], "720": [309, 464, 610], "540": [309, 464, 610], "360": [309, 464, 610], "180": [309, 325, 339, 352, 464, 610], "null_behavior": [310, 402, 610, 759, 858, 1014], "nullbehavior": [310, 402, 610, 759, 858, 1014], "th": [310, 402, 492, 610, 759, 858, 937, 1014], "discret": [310, 353, 402, 610, 757, 759, 808, 825, 858, 903, 1014], "drop_nan": [313, 610, 1014], "lose": [314, 764], "2001": [314, 319, 321, 322, 324, 325, 330, 332, 337, 338, 339, 341, 342, 346, 348, 349, 350, 351, 352, 472, 473, 475, 478, 479, 480, 524, 610, 764, 769, 771, 772, 774, 776, 777, 778, 779, 781, 783, 784, 786, 789, 791, 792, 793, 795, 796, 800, 802, 803, 804, 805, 806, 969], "time_unit_m": [314, 764], "time_unit_n": [314, 764], "naiv": [315, 524, 526, 765, 969, 971], "compon": [315, 342, 524, 526, 572, 765, 796, 969, 971], "resolv": 315, "tm": [315, 711], "456000": [315, 765], "101000": 315, "456": [315, 711, 765, 992, 1014], "101": [315, 513, 958, 1022], "d1": 315, "d2": 315, "d3": 315, "utc": [316, 340, 524, 526, 766, 794, 969, 971], "europ": [316, 340, 766, 794], "london": [316, 340, 766, 794], "gmt": [316, 340, 766, 794], "bst": [316, 340, 766, 794], "weekdai": [319, 338], "day_of_month": [319, 338, 350], "ordinal_dai": [319, 350], "day_of_year": [319, 338, 350], "days_diff": 320, "epochtimeunit": [321, 578, 771], "unix": [321, 578, 771], "epoch_n": [321, 771], "epoch_": [321, 771], "978307200000000": [321, 346, 771, 800], "978307200": [321, 771], "978393600000000": [321, 346, 771, 800], "978393600": [321, 771], "978480000000000": [321, 346, 771, 800], "978480000": [321, 771], "hours_diff": 323, "2002": [324, 325, 337, 339, 352, 774, 791, 806], "iso": [325, 349, 350, 775, 803, 804], "2006": [325, 337, 791], "2004": [325, 337, 791], "2005": [325, 337, 791], "1_001": [326, 327, 329, 336], "002": [326, 327, 329, 336, 572, 780, 782, 790], "003": [326, 327, 329, 336], "3000": 326, "997": [326, 327, 329, 336], "997000": 326, "998": [326, 327, 329, 336], "998000": 326, "999": [326, 327, 329, 336, 1022], "999000": 326, "microseconds_diff": 327, "milliseconds_diff": 329, "minutes_diff": 331, "1440": [331, 785], "think": [333, 334, 787, 788], "vectoris": [333, 334, 787, 788], "tseri": [333, 334, 787, 788], "monthend": [333, 787], "rollforward": [333, 787], "monthbegin": [334, 788], "rollback": [334, 788], "nanoseconds_diff": 336, "1000000": [336, 532, 790], "minu": [337, 791], "dictat": [337, 791], "date_plus_1i": [337, 791], "1y2mo": [337, 791], "date_min": 337, "1998": [337, 791], "1999": [337, 711, 791], "2003": [337, 578, 791], "ordin": [338, 465, 610, 792, 905, 1014], "366": [338, 792], "use_earliest": [340, 794], "convert_time_zon": [340, 794], "ambigu": [340, 794], "sai": [340, 794], "earliest": [340, 794], "london_timezon": [340, 794], "amsterdam": [340, 794], "london_to_amsterdam": [340, 794], "cet": [340, 794], "cest": [340, 794], "dst": [340, 794], "ts_local": [340, 794], "brussel": [340, 794], "half": [341, 356, 357, 358, 610, 795, 810, 811, 812, 1014], "225": [341, 348], "to_fram": [341, 348, 524, 925, 926, 965, 966, 969, 1014], "10m": [341, 348, 795, 802], "milli": [342, 796], "micro": [342, 796], "456789": 342, "654321": 342, "111110": 342, "765431": 342, "sec": [342, 1022], "11111": 342, "seconds_diff": 343, "to_str": [344, 798], "datetime_str": [344, 347], "timestamp_n": [346, 800], "timestamp_m": 346, "978307200000": 346, "978393600000": 346, "978480000000": 346, "strftime": [347, 801], "53": [349, 803], "time_unit_u": [351, 805], "32971": [351, 805], "32974": [351, 805], "32976": [351, 805], "718281828459045": [353, 426, 610, 808, 882, 1014], "pk": [353, 610, 808, 1014], "probabl": [353, 610, 808, 1014], "459148": [353, 610], "754888": [353, 610], "eq": [355, 610, 1014], "span": [356, 357, 358, 610, 810, 811, 812, 1014], "half_lif": [356, 357, 358, 610, 810, 811, 812, 1014], "adjust": [356, 357, 358, 492, 610, 810, 811, 812, 937, 1014], "ignore_nul": [356, 357, 358, 610, 810, 811, 812, 1004, 1014], "exponenti": [356, 357, 358, 360, 460, 610, 810, 811, 812, 813, 1014], "weight": [356, 357, 358, 471, 472, 473, 474, 475, 476, 478, 479, 480, 492, 610, 810, 811, 812, 911, 912, 913, 914, 915, 916, 918, 919, 920, 937, 1014], "decai": [356, 357, 358, 610, 810, 811, 812, 1014], "term": [356, 357, 358, 509, 512, 610, 810, 811, 812, 954, 957, 1014], "mass": [356, 357, 358, 610, 810, 811, 812, 1014], "gamma": [356, 357, 358, 610, 810, 811, 812, 1014], "foral": [356, 357, 358, 610, 810, 811, 812, 1014], "geq": [356, 357, 358, 610, 810, 811, 812, 1014], "theta": [356, 357, 358, 610, 810, 811, 812, 1014], "life": [356, 357, 358, 610, 810, 811, 812, 1014], "exp": [356, 357, 358, 610, 810, 811, 812, 1014], "ln": [356, 357, 358, 610, 810, 811, 812, 1014], "smooth": [356, 357, 358, 610, 810, 811, 812, 1014], "factor": [356, 357, 358, 543, 610, 810, 811, 812, 997, 1014], "leq": [356, 357, 358, 610, 810, 811, 812, 1014], "imbal": [356, 357, 358, 610, 810, 811, 812, 1014], "ew": [356, 357, 358, 610, 810, 811, 812, 1014], "w_i": [356, 357, 358, 610, 810, 811, 812, 1014], "recurs": [356, 357, 358, 610, 810, 811, 812, 1014], "y_0": [356, 357, 358, 610, 810, 811, 812, 1014], "x_0": [356, 357, 358, 610, 810, 811, 812, 1014], "y_t": [356, 357, 358, 610, 810, 811, 812, 1014], "y_": [356, 357, 358, 610, 810, 811, 812, 1014], "x_t": [356, 357, 358, 610, 810, 811, 812, 1014], "observ": [356, 357, 358, 610, 810, 811, 812, 1014], "x_2": [356, 357, 358, 610, 810, 811, 812, 1014], "428571": [356, 610], "bia": [357, 358, 392, 477, 492, 610, 811, 812, 849, 917, 937, 1014], "unbias": [357, 358, 610, 811, 812, 1014], "963624": [357, 610, 811, 1014], "928571": [358, 610, 812, 1014], "wildcard": [359, 561, 567, 568, 576, 590, 610], "regex": [359, 439, 499, 500, 503, 505, 506, 514, 515, 522, 574, 598, 610, 711, 944, 945, 948, 950, 951, 959, 960, 967], "aa": [359, 499, 574, 610, 944], "ba": [359, 574, 610, 711], "cc": [359, 574, 610], "718282": [360, 610], "389056": [360, 610], "54": [360, 610, 1022], "59815": [360, 610], "expand": [361, 438, 439, 468, 610, 814, 1014], "pythonliter": [362, 584, 587, 591, 610, 815, 887, 890, 1014], "extrem": [362, 610, 815, 1014], "group_col": [365, 551, 610], "g1": [365, 551, 610], "g2": [365, 551, 610], "lt": [365, 551, 610, 1014], "gte": [365, 551, 610], "exprlistnamespac": [367, 610], "divis": [369, 545, 610], "truediv": [369, 610], "9774092659964970114": [374, 610], "13614470193936745724": [374, 610], "1101441246220388612": [374, 610], "11638928888656214026": [374, 610], "13382926553367784577": [374, 610], "cumsum": [377, 535, 610, 645, 708, 848, 1014], "interpolationmethod": [378, 610, 828, 1014], "regrid": [378, 610], "grid": [378, 610], "df_original_grid": [378, 610], "grid_point": [378, 610], "df_new_grid": [378, 610], "conflat": [379, 610], "finit": [381, 545, 564, 610, 833, 1014], "primit": [383, 610, 995, 1014], "optional_memb": [383, 610, 836, 1014], "infinit": [384, 545, 610, 837, 1014], "_isnan": [385, 610], "b_isnan": [385, 610], "negat": [386, 610], "_is_not_nan": [387, 610], "b_is_not_nan": [387, 610], "_not_nul": [388, 610], "a_not_nul": [388, 610], "b_not_nul": [388, 610], "_isnul": [389, 610], "a_isnul": [389, 610], "b_isnul": [389, 610], "undo": [391, 444, 610], "duplicateerror": [391, 610, 621], "occurr": [391, 610, 825, 1014], "333333": [391, 610, 899, 920, 1014], "fisher": [392, 492, 610, 849, 937, 1014], "fourth": [392, 610, 849, 1014], "subtract": [392, 535, 610, 849, 1014], "distribut": [392, 492, 610, 849, 937, 1014], "elimin": [392, 610, 849, 1014], "bias": [392, 492, 610, 849, 937, 1014], "scipi": [392, 492, 610, 849, 937, 1014], "stat": [392, 492, 610, 849, 937, 1014], "153061": [392, 610], "sublist": [397, 398, 400, 402, 406, 407, 408, 410, 411, 418, 421, 422, 423, 836, 853, 854, 856, 858, 862, 863, 864, 866, 867, 874, 877, 878, 879, 1014], "membership": [400, 856], "listcol": 401, "number_of_two": 401, "blindli": [404, 860], "worth": [404, 860], "enough": [404, 492, 610, 860, 937, 1014], "concat_list": [404, 573, 860], "rank": [404, 564, 573, 610, 860, 1014], "exprnamespac": 405, "reshap": [405, 610, 861, 1014], "flat": [405, 469, 610, 861, 909, 1014], "taken": [418, 518, 539, 610, 874, 963], "null_on_oob": [422, 878], "cheaper": [422, 878], "n_field_strategi": [423, 879], "tostructstrategi": [423, 879], "first_non_nul": [423, 879], "max_width": [423, 879], "field_0": [423, 879], "field_1": [423, 879], "field_n": [423, 879], "n0": 423, "n1": 423, "logarithm": [426, 427, 428, 610, 882, 883, 884, 1014], "584963": [426, 610], "30103": [427, 610], "60206": [427, 610], "natur": [428, 610, 884, 1014], "plu": [428, 610, 884, 1014], "693147": [428, 610], "098612": [428, 610], "386294": [428, 610], "lowest": [429, 610], "9223372036854775808": [429, 610], "agg_list": [431, 610], "elementwis": [431, 471, 472, 473, 474, 475, 476, 478, 479, 480, 610, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1014], "parti": [431, 610], "book": [431, 610], "map_dict": [431, 610, 1014], "argmax": [431, 610], "_revers": [432, 470, 536, 610], "rsplit": [432, 610], "b_revers": [432, 470, 536, 610], "remap": [433, 610, 886, 1014], "lookup": [433, 610, 886, 1014], "country_code_dict": [433, 610], "ca": [433, 610], "canada": [433, 610], "de": [433, 610], "germani": [433, 610], "fr": [433, 610], "franc": [433, 610], "country_cod": [433, 610], "rest": [433, 610], "exprmetanamespac": [437, 440], "computeerror": [441, 513, 621, 958], "keep_nam": [444, 610], "modulu": [447, 610], "xlog2": [449, 460, 610], "poison": [451, 452, 610, 895, 896, 1014], "nanmax": [451, 452, 610, 895, 896, 1014], "inequ": [453, 610], "ne": [454, 610, 1014], "more_expr": [457, 553, 554, 558, 560, 562, 563, 569, 584, 587, 598, 610], "mapping_strategi": [457, 610], "windowmappingstrategi": [457, 610], "group_to_row": [457, 610], "outcom": [457, 610], "group_dtyp": [457, 610], "warn": [457, 610], "flatten": [457, 610], "_max": [457, 610], "c_max": [457, 610], "_min": [457, 610], "c_min": [457, 610], "percent": [458, 610, 899, 1014], "090909": [458, 610], "extract_numb": [459, 610], "digit": [459, 481, 506, 532, 610, 921, 945, 951, 977, 1014, 1022], "scale_negative_even": [459, 610], "expon": [460, 610, 1014], "reverse_": [461, 610], "reverse_a": [461, 610], "reverse_fruit": [461, 610], "reverse_b": [461, 610], "reverse_car": [461, 610], "566371": [464, 610], "424778": [464, 610], "283185": [464, 610], "141593": [464, 610, 719, 1014], "rankmethod": [465, 610, 905, 1014], "ti": [465, 610, 905, 1014], "competit": [465, 610, 905, 1014], "highest": [465, 548, 564, 610, 708, 905, 1014], "64bit": [467, 610, 907, 1014], "safe": [467, 524, 526, 610, 907, 969, 971, 995, 1014], "fruits_revers": [470, 536, 610], "cars_revers": [470, 536, 610], "window_s": [471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 592, 593, 610, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 1014], "rolling_min": [471, 610, 911, 1014], "rolling_max": [471, 610, 911, 1014], "rolling_mean": [471, 610, 911, 1014], "rolling_sum": [471, 610, 911, 1014], "multipli": [471, 472, 473, 474, 475, 476, 478, 479, 480, 610, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1014], "label": [471, 472, 473, 474, 475, 476, 478, 479, 480, 610, 661, 708, 757, 903, 911, 912, 913, 914, 915, 916, 918, 919, 920, 1014], "358899": [471, 610], "041452": [471, 610], "567764": [471, 610], "travers": [472, 473, 475, 478, 479, 480, 610, 912, 913, 915, 918, 919, 920, 1014], "vector": [472, 473, 475, 478, 479, 480, 610, 912, 913, 915, 918, 919, 920, 1014], "endpoint": [472, 473, 474, 475, 476, 478, 479, 480, 610], "5h": [472, 473, 474, 475, 476, 478, 479, 480, 610], "applic": [472, 473, 474, 475, 476, 478, 479, 480, 610], "df_tempor": [472, 473, 475, 478, 479, 480, 610], "closur": [472, 473, 478, 479, 480, 610], "rolling_row_max": [472, 610], "2h": [472, 473, 475, 478, 479, 480, 610], "rolling_row_mean": [473, 610], "875": [474, 610], "375": [474, 610], "rolling_row_min": [475, 610], "skew": [477, 610, 917, 1014], "381802": [477, 610, 917, 1014], "47033": [477, 610, 917, 1014], "38180177416060584": [477, 610, 917, 1014], "47033046033698594": [477, 610, 917, 1014], "883883": [478, 610], "237437": [478, 610], "59099": [478, 610], "944544": [478, 610], "298097": [478, 610], "rolling_row_std": [478, 610], "rolling_row_sum": [479, 610], "39": [479, 578, 610], "63": [479, 610], "69": [479, 610], "78125": [480, 610], "53125": [480, 610], "28125": [480, 610], "rolling_row_var": [480, 610], "searchsortedsid": [483, 610, 923, 1014], "leftmost": [483, 610, 923, 1014], "rightmost": [483, 610, 923, 1014], "six": [483, 610], "downstream": [484, 610, 927, 1014], "extrema": [487, 610, 931, 1014], "112": [487, 610, 1022], "129": [487, 610], "8589934592": [487, 610], "1073741824": [487, 610], "175201": [491, 610, 936, 1014], "about": [492, 499, 505, 506, 514, 610, 937, 944, 950, 951, 959, 1014, 1022], "unimod": [492, 610, 937, 1014], "skewtest": [492, 610, 937, 1014], "speak": [492, 610, 937, 1014], "g_1": [492, 610, 937, 1014], "m_3": [492, 610, 937, 1014], "m_2": [492, 610, 937, 1014], "m_i": [492, 610, 937, 1014], "sum_": [492, 610, 937, 1014], "texttt": [492, 610, 937, 1014], "k_3": [492, 610, 937, 1014], "k_2": [492, 610, 937, 1014], "sqrt": [492, 610, 937, 1014], "343622": [492, 610], "value1": [495, 610], "value2": [495, 610], "attain": [495, 610], "414214": [496, 610, 940, 1014], "sensit": [499, 506, 514, 944, 951, 959], "ilmsuxu": [499, 505, 506, 514, 944, 950, 951, 959], "default_match": 499, "insensitive_match": 499, "section": [499, 505, 506, 514, 944, 950, 951, 959], "crab": [499, 944], "dog": [499, 528, 531, 563, 944, 973, 976], "rab": [499, 944], "success": [500, 506, 945, 951], "overlap": [500, 506, 945, 951], "captur": [500, 505, 506, 945, 950, 951], "123": [500, 506, 515, 711, 945, 951, 960, 992, 1014], "bla": [500, 506, 945, 951], "asd": [500, 506, 945, 951], "678": [500, 506, 945, 951], "910t": [500, 506, 945, 951], "count_digit": 500, "666f6f": [502, 947], "626172": [502, 947], "mango": [503, 522, 948, 967], "go": [503, 948], "has_suffix": 503, "group_index": [505, 950], "nthose": [505, 950], "nodd": [505, 950], "nthe": [505, 950], "url": [505, 950], "vote": [505, 950], "ballon_dor": [505, 950], "404": [505, 950], "ref": [505, 950], "candid": [505, 950], "messi": [505, 950], "ronaldo": [505, 950], "did": [506, 951], "email": [506, 951], "real": [506, 951], "some_account": [506, 951], "somewher": [506, 951], "net": [506, 951], "jkl": [506, 951], "uvw": [506, 951], "co": [506, 610, 951, 1014], "uk": [506, 951], "address": 506, "xi": [506, 951], "insensit": [506, 514, 711, 944, 951, 959], "quantifi": [506, 951], "email_part": [506, 951], "extracted_nr": 506, "910": [506, 951], "json_path_match": [507, 952], "jsonpath": [507, 508, 952, 953], "json_path": [508, 953], "regardless": [508, 953], "json_val": [508, 953], "n_char": [509, 954], "caf\u00e9": [509, 512, 954, 957], "345": [509, 512, 954, 957], "\u6771\u4eac": [509, 512, 954, 957], "nchar": [509, 512], "fill_char": [510, 516, 955, 961], "justifi": [510, 516, 955, 961], "pad": [510, 516, 532, 955, 961, 977], "cow": [510, 516, 955, 961], "monkei": [510, 516, 955, 961], "hippopotamu": [510, 516, 955, 961], "strip": [511, 517, 956, 962], "tworld": [511, 956, 968], "wod": [511, 956], "rld": [511, 523, 956], "radix": [513, 958], "parseerror": [513, 958], "becom": [513, 958], "silent": [513, 958], "bin": [513, 552, 604, 610, 757, 825, 903, 958, 1008, 1014], "110": [513, 958], "010": [513, 958], "fa1e": [513, 958], "ff00": [513, 958], "cafe": [513, 958], "64030": [513, 958], "65280": [513, 958], "51966": [513, 958], "replace_al": [514, 959], "citi": 514, "philadelphia": 514, "season": 514, "spring": 514, "summer": 514, "autumn": 514, "winter": 514, "weather": [514, 959], "raini": [514, 959], "sunni": [514, 959], "cloudi": 514, "snowi": 514, "foggi": [514, 959], "123abc": [514, 959], "abc456": [514, 959], "abcabc": [515, 960], "123a123": [515, 960], "bc": [515, 598, 960], "trail": [517, 523, 962, 968], "oldw": 517, "he": 517, "subslic": [518, 963], "pear": [518, 963], "papaya": [518, 963], "dragonfruit": [518, 963], "s_slice": 518, "ear": [518, 963], "aya": [518, 963], "uit": [518, 963], "ya": [518, 963], "onf": [518, 963], "a_1": [520, 965, 991, 1014], "d_4": [520, 965], "rename_field": [520, 521, 965, 966], "first_part": [520, 521, 965, 966], "second_part": [520, 521, 965, 966], "remaind": [521, 966], "app": [522, 967], "has_prefix": 522, "nworld": 523, "ow": 523, "hell": [523, 968], "polarstemporaltyp": [524, 969], "introduc": [524, 525, 526, 969, 970, 971], "penalti": [524, 525, 526, 969, 970, 971], "clean": [524, 525, 526, 969, 970, 971], "beforehand": [524, 525, 526, 969, 970, 971], "certainli": [524, 525, 526, 969, 970, 971], "3f": [524, 526, 969, 971], "00z": [524, 526, 969, 971], "sun": [524, 969], "jul": [524, 969], "34": [524, 969], "inference_length": [527, 972], "3420": [527, 972], "120134": [527, 972], "3212": [527, 972], "143": [527, 972, 1022], "lowercas": [528, 973], "variant": [528, 530, 531], "titlecas": [530, 975], "sing": [530, 975], "welcom": [530, 975], "THERE": [530, 975], "NO": [530, 975], "There": [530, 975], "uppercas": [531, 976], "100000": 532, "0010": 532, "0001": 532, "00000": 532, "00001": 532, "cd": [533, 534], "struct_col": [533, 534], "www": 534, "xxx": 534, "yyi": 534, "zzz": 534, "obvious": 534, "structfieldnotfounderror": [534, 621], "761594": [542, 610, 988, 1014], "replic": [543, 610, 997, 1014], "vals_phys": [543, 610], "floordiv": [545, 610], "ieee": [545, 610], "754": [545, 610], "mathemat": [545, 573, 610], "undefin": [545, 610], "On": [545, 610], "operand": [545, 610], "infin": [545, 610], "value_count": [547, 610, 1014], "9223372036854775807": [548, 610], "multithread": [549, 610], "binary_str": [552, 610], "zfill": [552, 610], "250": [552, 610, 913, 1014, 1022], "bin_x": [552, 610], "bin_i": [552, 610], "xor_xi": [552, 610], "bin_xor_xi": [552, 610], "00001010": [552, 610], "00000001": [552, 610], "00001011": [552, 610], "00001000": [552, 610], "00000010": [552, 610], "11111010": [552, 610], "00000011": [552, 610], "249": [552, 610], "11111001": [552, 610], "01000010": [552, 610], "00000100": [552, 610], "70": [552, 610], "01000110": [552, 610], "bitwis": [553, 554], "AND": [553, 711], "returns_scalar": 555, "product_a": 555, "49": 555, "Be": 557, "more_nam": 561, "hamburg": 561, "lag": 562, "mimic": 562, "a_lag_": 562, "a_rol": 562, "swim": 563, "walk": 563, "full_sent": 563, "correlationmethod": 564, "propagate_nan": 564, "spearman": 564, "larger": [564, 672, 673, 708], "544705": 564, "covari": [566, 593], "acc": [567, 568, 576, 590], "include_init": 567, "accumul": [567, 568, 576, 590], "fn": [567, 568, 576, 590], "new_valu": [567, 568, 576, 590], "cumreduc": 567, "tbl_width_char": 572, "120": 572, "add_week": 572, "add_dai": 572, "add_second": 572, "add_milli": 572, "add_hour": 572, "a_b_doubl": 573, "f_string": 577, "placehold": 577, "hello_": 577, "_world": 577, "foo_": 577, "_bar_": 577, "foo_a_bar_1": 577, "foo_b_bar_2": 577, "foo_c_bar_3": 577, "epoch": 578, "timestep": 578, "1666683077": 578, "1666683099": 578, "12345": [578, 743, 820, 921, 1014], "12346": 578, "agg_group": [579, 610], "allow_object": 582, "valueexcept": 582, "test_func": 583, "605551": 596, "605551275463989": 596, "my_struct": 597, "chain": 602, "isn": 602, "thens": 602, "elif": 602, "pick": 602, "arr": [603, 995, 1006, 1014], "sometim": 609, "and_": 610, "approx_uniqu": [610, 708], "arcco": [610, 1014], "arccosh": [610, 1014], "arcsin": [610, 1014], "arcsinh": [610, 1014], "arctan": [610, 1014], "arctanh": [610, 1014], "arg_max": [610, 1014], "arg_min": [610, 1014], "arg_sort": [610, 1014], "arg_uniqu": [610, 1014], "backward_fil": 610, "clip_max": [610, 1014], "clip_min": [610, 1014], "cosh": [610, 1014], "cumcount": 610, "cummax": [610, 1014], "cummin": [610, 1014], "cumulative_ev": [610, 1014], "entropi": [610, 1014], "eq_miss": [610, 1014], "ewm_mean": [610, 1014], "ewm_std": [610, 1014], "ewm_var": [610, 1014], "extend_const": [610, 1014], "from_json": [610, 663, 708], "ge": [610, 1014], "gt": [610, 1014], "implod": [610, 1014], "inspect": [610, 708], "is_between": [610, 1014], "is_finit": [610, 1014], "is_first": [610, 1014], "is_in": [610, 1014], "is_infinit": [610, 1014], "is_nan": [610, 1014], "is_not_nan": [610, 1014], "is_not_nul": [610, 1014], "kurtosi": [610, 1014], "le": [610, 1014], "log10": [610, 1014], "log1p": [610, 1014], "mod": 610, "mul": 610, "nan_max": [610, 1014], "nan_min": [610, 1014], "ne_miss": [610, 1014], "or_": 610, "pct_chang": [610, 1014], "pow": [610, 1014], "reinterpret": [610, 1014], "repeat_bi": 610, "rolling_appli": [610, 1014], "rolling_median": [610, 1014], "rolling_quantil": [610, 1014], "rolling_skew": [610, 1014], "rolling_std": [610, 1014], "rolling_var": [610, 1014], "search_sort": [610, 1014], "shrink_dtyp": [610, 1014], "sin": [610, 1014], "sinh": [610, 1014], "sort_bi": 610, "tan": [610, 1014], "to_phys": [610, 1014], "unique_count": [610, 1014], "xor": 610, "expos": 621, "miscellan": 621, "arrowerror": 621, "columnnotfounderror": 621, "invalidoperationerror": 621, "nodataerror": 621, "polarspanicerror": 621, "schemaerror": 621, "schemafieldnotfounderror": 621, "shapeerror": 621, "parametr": 621, "build_info": 621, "get_index_typ": 621, "show_vers": 621, "threadpool_s": 621, "sqlcontext": [621, 1021], "hit": [625, 708], "node": [625, 645, 652, 656, 661, 664, 708], "huge": [628, 708], "saver": [628, 708], "purpos": [635, 708], "influenc": [635, 652, 708], "read_json": [640, 689, 708], "lazygroupbi": [641, 642, 643, 708], "other_lf": [647, 708], "validate_output_schema": [652, 708], "streamabl": [652, 656, 708], "past": [652, 708], "paramount": [652, 708], "elig": [652, 708], "invari": [652, 708], "upheld": [652, 708], "prune": [652, 708], "show_plot": [661, 708], "truncate_nod": [661, 708], "figsiz": [661, 671, 708], "gantt": [661, 708], "plot": [661, 671, 708], "groupby_partit": [661, 708], "470": [661, 708], "475": [661, 708], "1964": [661, 708], "swap": [664, 708], "output_path": [671, 708], "raw_output": [671, 708], "figur": [671, 708], "ram": [672, 673, 708], "slightli": [672, 673, 708], "my_larger_than_ram_fil": [672, 673, 708], "data_pagesize_limit": [673, 708], "290994": [676, 708], "118034": [676, 708], "433013": [676, 708], "1875": [684, 708], "extern": [687, 708], "lf_other": [687, 708], "afoo": [687, 708], "cfoo": [687, 708], "train_lf": [687, 708], "feature_0": [687, 708], "feature_1": [687, 708], "test_lf": [687, 708], "_train": [687, 708], "feature_0_train": [687, 708], "dataframescan": [689, 708], "output_schema": [689, 708], "opaqu": 692, "idiomat": 692, "my_column": 692, "lf5": 708, "lf6": 708, "explain": 708, "sink_ipc": 708, "sink_parquet": 708, "with_context": 708, "intuit": 711, "relat": 711, "broadcast": 711, "emploi": 711, "complement": 711, "plenti": 711, "cde": 711, "fgg": 711, "jjk": 711, "lmn": 711, "opp": 711, "qqr": 711, "by_dtyp": 711, "as_expr": 711, "dispatch": 711, "2024": 711, "1_234_500": 711, "5_000_555": 711, "1234500": 711, "5000555": 711, "2010": 711, "4_500_000": 711, "4500000": 711, "3265500": 711, "by_nam": 711, "zap": 711, "tstamp": 711, "600000": 711, "123000": 711, "dtime": 711, "987000": 711, "400500": 711, "987": 711, "is_selector": 711, "obj": 711, "selector_column_nam": 711, "include_categor": 711, "set_ord": 711, "2345": 711, "3456": 711, "new_aliased_sr": [714, 1014], "append_chunk": [717, 1014], "super": [717, 1014], "292432": [720, 1014], "549306": [724, 1014], "catnamespac": 741, "56789": [743, 820, 921, 1014], "901234": [743, 820, 921, 1014], "1232e": [750, 1014], "break_point_label": [757, 903, 1014], "break_point": [757, 825, 903, 1014], "category_label": [757, 903, 1014], "breakpoint": [757, 903, 1014], "quick": [758, 1014, 1022], "series_num": [758, 1014], "581139": [758, 1014], "series_str": [758, 1014], "datetimenamespac": 763, "ser": [767, 768, 799], "replace_time_zon": [767, 768, 799], "kathmandu": [767, 768, 799], "0545": [767, 768, 799], "500m": [779, 781, 789, 796], "500000": 779, "2m": 784, "500000000": 789, "date_minus_1y_2mon": 791, "165": [795, 802], "series_equ": [795, 802, 1014], "timestamp_u": 800, "978307200000000000": 800, "978393600000000000": 800, "978480000000000000": 800, "005": [808, 1014], "06293300616044681": [808, 1014], "65": [808, 1014], "8568409950394724": [808, 1014], "4000000": [809, 1014], "814697265625": [809, 1014], "bitmask": [822, 1014], "swiftli": [822, 1014], "10734580197236529959": [823, 1014], "3022416320763508302": [823, 1014], "13756996518000038261": [823, 1014], "bin_count": [825, 1014], "a_count": [825, 1014], "fall": [829, 1014], "listnamespac": 852, "field_2": 879, "n00": 879, "n01": 879, "n02": 879, "2147483648": [885, 1014], "iso3166": [886, 1014], "tur": [886, 975, 1014], "jpn": [886, 1014], "nld": [886, 1014], "country_lookup": [886, 1014], "japan": [886, 1014], "t\u00fcrkiy": [886, 1014], "netherland": [886, 1014], "unrecognis": [886, 1014], "unspecifi": [886, 1014], "country_nam": [886, 1014], "166667": [899, 1014], "142857": [899, 1014], "peak": [900, 901, 1014], "nanstd": [911, 1014], "858612": [911, 1014], "200": [912, 913, 915, 1014], "150": [913, 1014], "350": [913, 1014], "450": [913, 1014], "dev": [918, 1014], "527525": [918, 1014], "frequent": [925, 926, 1014], "mutat": [926, 1014], "2246e": [935, 987, 1014], "stringnamespac": 942, "orld": 962, "6331e16": [987, 1014], "lib": [990, 1014], "int64arrai": [990, 1014], "a_2": [991, 1014], "a_3": [991, 1014], "s_from_str_repr": [993, 1014], "zero_copy_onli": [995, 1014], "writabl": [995, 1014], "complet": [995, 1014], "presenc": [995, 1014], "immut": [995, 1014], "127": [1001, 1014], "seriesview": [1004, 1014], "arraylik": 1014, "dtype_if_empti": 1014, "position": 1014, "scenario": 1014, "chunk_length": 1014, "cut": 1014, "get_chunk": 1014, "has_valid": 1014, "hist": 1014, "is_boolean": 1014, "is_float": 1014, "is_integ": 1014, "is_numer": [1014, 1022], "is_sort": 1014, "is_tempor": 1014, "is_utf8": 1014, "new_from_index": 1014, "peak_max": 1014, "peak_min": 1014, "power": 1014, "qcut": 1014, "set_at_idx": 1014, "two_a": 1021, "__enter__": 1021, "__exit__": 1021, "exc_typ": 1021, "baseexcept": 1021, "exc_val": 1021, "exc_tb": 1021, "tracebacktyp": 1021, "guid": 1022, "easi": 1022, "approxim": 1022, "own": 1022, "machin": 1022, "xdist": 1022, "hardwar": 1022, "setup": 1022, "numeric_dtyp": 1022, "null_probabililti": 1022, "test_numer": 1022, "col0": 1022, "col4": 1022, "29096": 1022, "485": 1022, "2147483647": 1022, "8257e14": 1022, "7508": 1022, "37338": 1022, "7264": 1022, "321": 1022, "16996": 1022, "121": 1022, "361": 1022, "63204": 1022, "1443e235": 1022, "conform": 1022, "ascii_lett": 1022, "id_char": 1022, "alphabet": 1022, "price": 1022, "min_valu": 1022, "max_valu": 1022, "test_price_calcul": 1022, "a101": 1022, "8nin": 1022, "qhoo": 1022, "714": 1022, "544": 1022, "i0e0": 1022, "0000": 1022, "colz": 1022, "test_miscellan": 1022, "235": 1022, "87": 1022, "186": 1022, "174": 1022, "179": 1022, "213": 1022, "221": 1022, "86": 1022, "255": 1022}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [36, 0, 1, "", "DataType"], [37, 0, 1, "", "Date"], [38, 0, 1, "", "Datetime"], [39, 0, 1, "", "Decimal"], [40, 0, 1, "", "Duration"], [41, 0, 1, "", "Float32"], [42, 0, 1, "", "Float64"], [43, 0, 1, "", "Int16"], [44, 0, 1, "", "Int32"], [45, 0, 1, "", "Int64"], [46, 0, 1, "", "Int8"], [47, 0, 1, "", "List"], [48, 0, 1, "", "Null"], [49, 0, 1, "", "Object"], [1021, 0, 1, "", "SQLContext"], [56, 0, 1, "", "StringCache"], [57, 0, 1, "", "Struct"], [58, 0, 1, "", "Time"], [59, 0, 1, "", "UInt16"], [60, 0, 1, "", "UInt32"], [61, 0, 1, "", "UInt64"], [62, 0, 1, "", "UInt8"], [63, 0, 1, "", "Unknown"], [64, 0, 1, "", "Utf8"], [65, 4, 1, "", "align_frames"], [553, 4, 1, "", "all"], [554, 4, 1, "", "any"], [555, 4, 1, "", "apply"], [556, 4, 1, "", "approx_unique"], [557, 4, 1, "", "arange"], [558, 4, 1, "", "arg_sort_by"], [70, 4, 1, "", "arg_where"], [559, 4, 1, "", "avg"], [71, 4, 1, "", "build_info"], [560, 4, 1, "", "coalesce"], [561, 4, 1, "", "col"], [72, 4, 1, "", "collect_all"], [73, 4, 1, "", "concat"], [562, 4, 1, "", "concat_list"], [563, 4, 1, "", "concat_str"], [564, 4, 1, "", "corr"], [565, 4, 1, "", "count"], [566, 4, 1, "", "cov"], [567, 4, 1, "", "cumfold"], [568, 4, 1, "", "cumreduce"], [569, 4, 1, "", "cumsum"], [570, 4, 1, "", "date"], [74, 4, 1, "", "date_range"], [571, 4, 1, "", "datetime"], [572, 4, 1, "", "duration"], [573, 4, 1, "", "element"], [75, 4, 1, "", "enable_string_cache"], [574, 4, 1, "", "exclude"], [575, 4, 1, "", "first"], [576, 4, 1, "", "fold"], [577, 4, 1, "", "format"], [90, 4, 1, "", "from_arrow"], [91, 4, 1, "", "from_dataframe"], [92, 4, 1, "", "from_dict"], [93, 4, 1, "", "from_dicts"], [578, 4, 1, "", "from_epoch"], [94, 4, 1, "", "from_numpy"], [95, 4, 1, "", "from_pandas"], [96, 4, 1, "", "from_records"], [97, 4, 1, "", "from_repr"], [98, 4, 1, "", "get_index_type"], [579, 4, 1, "", "groups"], [580, 4, 1, "", "head"], [581, 4, 1, "", "implode"], [582, 4, 1, "", "lit"], [583, 4, 1, "", "map"], [584, 4, 1, "", "max"], [585, 4, 1, "", "mean"], [586, 4, 1, "", "median"], [587, 4, 1, "", "min"], [588, 4, 1, "", "n_unique"], [100, 4, 1, "", "ones"], [589, 4, 1, "", "quantile"], [101, 4, 1, "", "read_avro"], [102, 4, 1, "", "read_csv"], [103, 4, 1, "", "read_csv_batched"], [104, 4, 1, "", "read_database"], [105, 4, 1, "", "read_delta"], [106, 4, 1, "", "read_excel"], [107, 4, 1, "", "read_ipc"], [108, 4, 1, "", "read_ipc_schema"], [109, 4, 1, "", "read_json"], [110, 4, 1, "", "read_ndjson"], [111, 4, 1, "", "read_parquet"], [112, 4, 1, "", "read_parquet_schema"], [590, 4, 1, "", "reduce"], [591, 4, 1, "", "repeat"], [592, 4, 1, "", "rolling_corr"], [593, 4, 1, "", "rolling_cov"], [113, 4, 1, "", "scan_csv"], [114, 4, 1, "", "scan_delta"], [115, 4, 1, "", "scan_ipc"], [116, 4, 1, "", "scan_ndjson"], [117, 4, 1, "", "scan_parquet"], [118, 4, 1, "", "scan_pyarrow_dataset"], [594, 4, 1, "", "select"], [711, 6, 0, "-", "selectors"], [119, 4, 1, "", "show_versions"], [595, 4, 1, "", "sql_expr"], [596, 4, 1, "", "std"], [597, 4, 1, "", "struct"], [598, 4, 1, "", "sum"], [599, 4, 1, "", "tail"], [129, 4, 1, "", "threadpool_size"], [600, 4, 1, "", "time"], [130, 4, 1, "", "time_range"], [131, 4, 1, "", "using_string_cache"], [601, 4, 1, "", "var"], [602, 4, 1, "", "when"], [132, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "restore_defaults"], [9, 1, 1, "", "save"], [10, 1, 1, "", "set_ascii_tables"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_streaming_chunk_size"], [14, 1, 1, "", "set_tbl_cell_alignment"], [15, 1, 1, "", "set_tbl_cols"], [16, 1, 1, "", "set_tbl_column_data_type_inline"], [17, 1, 1, "", "set_tbl_dataframe_shape_below"], [18, 1, 1, "", "set_tbl_formatting"], [19, 1, 1, "", "set_tbl_hide_column_data_types"], [20, 1, 1, "", "set_tbl_hide_column_names"], [21, 1, 1, "", "set_tbl_hide_dataframe_shape"], [22, 1, 1, "", "set_tbl_hide_dtype_separator"], [23, 1, 1, "", "set_tbl_rows"], [24, 1, 1, "", "set_tbl_width_chars"], [25, 1, 1, "", "set_verbose"], [26, 1, 1, "", "state"]], "polars.DataFrame": [[135, 1, 1, "", "__dataframe__"], [136, 1, 1, "", "apply"], [137, 1, 1, "", "bottom_k"], [138, 1, 1, "", "clear"], [139, 1, 1, "", "clone"], [140, 2, 1, "", "columns"], [141, 1, 1, "", "corr"], [142, 1, 1, "", "describe"], [143, 1, 1, "", "drop"], [144, 1, 1, "", "drop_in_place"], [145, 1, 1, "", "drop_nulls"], [146, 2, 1, "", "dtypes"], [147, 1, 1, "", "estimated_size"], [148, 1, 1, "", "explode"], [149, 1, 1, "", "extend"], [150, 1, 1, "", "fill_nan"], [151, 1, 1, "", "fill_null"], [152, 1, 1, "", "filter"], [153, 1, 1, "", "find_idx_by_name"], [154, 1, 1, "", "fold"], [155, 1, 1, "", "frame_equal"], [156, 1, 1, "", "get_column"], [157, 1, 1, "", "get_columns"], [158, 1, 1, "", "glimpse"], [159, 1, 1, "", "groupby"], [160, 1, 1, "", "groupby_dynamic"], [161, 1, 1, "", "groupby_rolling"], [162, 1, 1, "", "hash_rows"], [163, 1, 1, "", "head"], [164, 2, 1, "", "height"], [165, 1, 1, "", "hstack"], [166, 1, 1, "", "insert_at_idx"], [167, 1, 1, "", "interpolate"], [168, 1, 1, "", "is_duplicated"], [169, 1, 1, "", "is_empty"], [170, 1, 1, "", "is_unique"], [171, 1, 1, "", "item"], [172, 1, 1, "", "iter_rows"], [173, 1, 1, "", "iter_slices"], [174, 1, 1, "", "join"], [175, 1, 1, "", "join_asof"], [176, 1, 1, "", "lazy"], [177, 1, 1, "", "limit"], [178, 1, 1, "", "max"], [179, 1, 1, "", "mean"], [180, 1, 1, "", "median"], [181, 1, 1, "", "melt"], [182, 1, 1, "", "merge_sorted"], [183, 1, 1, "", "min"], [184, 1, 1, "", "n_chunks"], [185, 1, 1, "", "n_unique"], [186, 1, 1, "", "null_count"], [187, 1, 1, "", "partition_by"], [188, 1, 1, "", "pipe"], [189, 1, 1, "", "pivot"], [190, 1, 1, "", "product"], [191, 1, 1, "", "quantile"], [192, 1, 1, "", "rechunk"], [193, 1, 1, "", "rename"], [194, 1, 1, "", "replace"], [195, 1, 1, "", "replace_at_idx"], [196, 1, 1, "", "reverse"], [197, 1, 1, "", "row"], [198, 1, 1, "", "rows"], [199, 1, 1, "", "sample"], [200, 2, 1, "", "schema"], [201, 1, 1, "", "select"], [202, 1, 1, "", "set_sorted"], [203, 2, 1, "", "shape"], [204, 1, 1, "", "shift"], [205, 1, 1, "", "shift_and_fill"], [206, 1, 1, "", "shrink_to_fit"], [207, 1, 1, "", "slice"], [208, 1, 1, "", "sort"], [209, 1, 1, "", "std"], [210, 1, 1, "", "sum"], [211, 1, 1, "", "tail"], [212, 1, 1, "", "take_every"], [213, 1, 1, "", "to_arrow"], [214, 1, 1, "", "to_dict"], [215, 1, 1, "", "to_dicts"], [216, 1, 1, "", "to_dummies"], [217, 1, 1, "", "to_init_repr"], [218, 1, 1, "", "to_numpy"], [219, 1, 1, "", "to_pandas"], [220, 1, 1, "", "to_series"], [221, 1, 1, "", "to_struct"], [222, 1, 1, "", "top_k"], [223, 1, 1, "", "transpose"], [224, 1, 1, "", "unique"], [225, 1, 1, "", "unnest"], [226, 1, 1, "", "unstack"], [227, 1, 1, "", "update"], [228, 1, 1, "", "upsample"], [229, 1, 1, "", "var"], [230, 1, 1, "", "vstack"], [231, 2, 1, "", "width"], [232, 1, 1, "", "with_columns"], [233, 1, 1, "", "with_row_count"], [27, 1, 1, "", "write_avro"], [28, 1, 1, "", "write_csv"], [29, 1, 1, "", "write_database"], [30, 1, 1, "", "write_delta"], [31, 1, 1, "", "write_excel"], [32, 1, 1, "", "write_ipc"], [33, 1, 1, "", "write_json"], [34, 1, 1, "", "write_ndjson"], [35, 1, 1, "", "write_parquet"]], "polars.DataType": [[36, 1, 1, "", "__init__"]], "polars.Date": [[37, 1, 1, "", "__init__"]], "polars.Datetime": [[38, 1, 1, "", "__init__"]], "polars.Decimal": [[39, 1, 1, "", "__init__"]], "polars.Duration": [[40, 1, 1, "", "__init__"]], "polars.Expr": [[261, 1, 1, "", "abs"], [262, 1, 1, "", "add"], [263, 1, 1, "", "agg_groups"], [264, 1, 1, "", "alias"], [265, 1, 1, "", "all"], [266, 1, 1, "", "and_"], [267, 1, 1, "", "any"], [268, 1, 1, "", "append"], [269, 1, 1, "", "apply"], [270, 1, 1, "", "approx_unique"], [271, 1, 1, "", "arccos"], [272, 1, 1, "", "arccosh"], [273, 1, 1, "", "arcsin"], [274, 1, 1, "", "arcsinh"], [275, 1, 1, "", "arctan"], [276, 1, 1, "", "arctanh"], [277, 1, 1, "", "arg_max"], [278, 1, 1, "", "arg_min"], [279, 1, 1, "", "arg_sort"], [280, 1, 1, "", "arg_true"], [281, 1, 1, "", "arg_unique"], [286, 1, 1, "", "backward_fill"], [292, 1, 1, "", "bottom_k"], [293, 1, 1, "", "cache"], [294, 1, 1, "", "cast"], [296, 1, 1, "", "ceil"], [297, 1, 1, "", "clip"], [298, 1, 1, "", "clip_max"], [299, 1, 1, "", "clip_min"], [300, 1, 1, "", "cos"], [301, 1, 1, "", "cosh"], [302, 1, 1, "", "count"], [303, 1, 1, "", "cumcount"], [304, 1, 1, "", "cummax"], [305, 1, 1, "", "cummin"], [306, 1, 1, "", "cumprod"], [307, 1, 1, "", "cumsum"], [308, 1, 1, "", "cumulative_eval"], [309, 1, 1, "", "degrees"], [310, 1, 1, "", "diff"], [311, 1, 1, "", "dot"], [312, 1, 1, "", "drop_nans"], [313, 1, 1, "", "drop_nulls"], [353, 1, 1, "", "entropy"], [354, 1, 1, "", "eq"], [355, 1, 1, "", "eq_missing"], [356, 1, 1, "", "ewm_mean"], [357, 1, 1, "", "ewm_std"], [358, 1, 1, "", "ewm_var"], [359, 1, 1, "", "exclude"], [360, 1, 1, "", "exp"], [361, 1, 1, "", "explode"], [362, 1, 1, "", "extend_constant"], [363, 1, 1, "", "fill_nan"], [364, 1, 1, "", "fill_null"], [365, 1, 1, "", "filter"], [366, 1, 1, "", "first"], [367, 1, 1, "", "flatten"], [368, 1, 1, "", "floor"], [369, 1, 1, "", "floordiv"], [370, 1, 1, "", "forward_fill"], [371, 1, 1, "", "from_json"], [372, 1, 1, "", "ge"], [373, 1, 1, "", "gt"], [374, 1, 1, "", "hash"], [375, 1, 1, "", "head"], [376, 1, 1, "", "implode"], [377, 1, 1, "", "inspect"], [378, 1, 1, "", "interpolate"], [379, 1, 1, "", "is_between"], [380, 1, 1, "", "is_duplicated"], [381, 1, 1, "", "is_finite"], [382, 1, 1, "", "is_first"], [383, 1, 1, "", "is_in"], [384, 1, 1, "", "is_infinite"], [385, 1, 1, "", "is_nan"], [386, 1, 1, "", "is_not"], [387, 1, 1, "", "is_not_nan"], [388, 1, 1, "", "is_not_null"], [389, 1, 1, "", "is_null"], [390, 1, 1, "", "is_unique"], [391, 1, 1, "", "keep_name"], [392, 1, 1, "", "kurtosis"], [393, 1, 1, "", "last"], [394, 1, 1, "", "le"], [395, 1, 1, "", "len"], [396, 1, 1, "", "limit"], [426, 1, 1, "", "log"], [427, 1, 1, "", "log10"], [428, 1, 1, "", "log1p"], [429, 1, 1, "", "lower_bound"], [430, 1, 1, "", "lt"], [431, 1, 1, "", "map"], [432, 1, 1, "", "map_alias"], [433, 1, 1, "", "map_dict"], [434, 1, 1, "", "max"], [435, 1, 1, "", "mean"], [436, 1, 1, "", "median"], [446, 1, 1, "", "min"], [447, 1, 1, "", "mod"], [448, 1, 1, "", "mode"], [449, 1, 1, "", "mul"], [450, 1, 1, "", "n_unique"], [451, 1, 1, "", "nan_max"], [452, 1, 1, "", "nan_min"], [453, 1, 1, "", "ne"], [454, 1, 1, "", "ne_missing"], [455, 1, 1, "", "null_count"], [456, 1, 1, "", "or_"], [457, 1, 1, "", "over"], [458, 1, 1, "", "pct_change"], [459, 1, 1, "", "pipe"], [460, 1, 1, "", "pow"], [461, 1, 1, "", "prefix"], [462, 1, 1, "", "product"], [463, 1, 1, "", "quantile"], [464, 1, 1, "", "radians"], [465, 1, 1, "", "rank"], [466, 1, 1, "", "rechunk"], [467, 1, 1, "", "reinterpret"], [468, 1, 1, "", "repeat_by"], [469, 1, 1, "", "reshape"], [470, 1, 1, "", "reverse"], [471, 1, 1, "", "rolling_apply"], [472, 1, 1, "", "rolling_max"], [473, 1, 1, "", "rolling_mean"], [474, 1, 1, "", "rolling_median"], [475, 1, 1, "", "rolling_min"], [476, 1, 1, "", "rolling_quantile"], [477, 1, 1, "", "rolling_skew"], [478, 1, 1, "", "rolling_std"], [479, 1, 1, "", "rolling_sum"], [480, 1, 1, "", "rolling_var"], [481, 1, 1, "", "round"], [482, 1, 1, "", "sample"], [483, 1, 1, "", "search_sorted"], [484, 1, 1, "", "set_sorted"], [485, 1, 1, "", "shift"], [486, 1, 1, "", "shift_and_fill"], [487, 1, 1, "", "shrink_dtype"], [488, 1, 1, "", "shuffle"], [489, 1, 1, "", "sign"], [490, 1, 1, "", "sin"], [491, 1, 1, "", "sinh"], [492, 1, 1, "", "skew"], [493, 1, 1, "", "slice"], [494, 1, 1, "", "sort"], [495, 1, 1, "", "sort_by"], [496, 1, 1, "", "sqrt"], [497, 1, 1, "", "std"], [535, 1, 1, "", "sub"], [536, 1, 1, "", "suffix"], [537, 1, 1, "", "sum"], [538, 1, 1, "", "tail"], [539, 1, 1, "", "take"], [540, 1, 1, "", "take_every"], [541, 1, 1, "", "tan"], [542, 1, 1, "", "tanh"], [543, 1, 1, "", "to_physical"], [544, 1, 1, "", "top_k"], [545, 1, 1, "", "truediv"], [546, 1, 1, "", "unique"], [547, 1, 1, "", "unique_counts"], [548, 1, 1, "", "upper_bound"], [549, 1, 1, "", "value_counts"], [550, 1, 1, "", "var"], [551, 1, 1, "", "where"], [552, 1, 1, "", "xor"]], "polars.Expr.arr": [[282, 1, 1, "", "max"], [283, 1, 1, "", "min"], [284, 1, 1, "", "sum"], [285, 1, 1, "", "unique"]], "polars.Expr.bin": [[287, 1, 1, "", "contains"], [288, 1, 1, "", "decode"], [289, 1, 1, "", "encode"], [290, 1, 1, "", "ends_with"], [291, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[295, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[314, 1, 1, "", "cast_time_unit"], [315, 1, 1, "", "combine"], [316, 1, 1, "", "convert_time_zone"], [317, 1, 1, "", "date"], [318, 1, 1, "", "datetime"], [319, 1, 1, "", "day"], [320, 1, 1, "", "days"], [321, 1, 1, "", "epoch"], [322, 1, 1, "", "hour"], [323, 1, 1, "", "hours"], [324, 1, 1, "", "is_leap_year"], [325, 1, 1, "", "iso_year"], [326, 1, 1, "", "microsecond"], [327, 1, 1, "", "microseconds"], [328, 1, 1, "", "millisecond"], [329, 1, 1, "", "milliseconds"], [330, 1, 1, "", "minute"], [331, 1, 1, "", "minutes"], [332, 1, 1, "", "month"], [333, 1, 1, "", "month_end"], [334, 1, 1, "", "month_start"], [335, 1, 1, "", "nanosecond"], [336, 1, 1, "", "nanoseconds"], [337, 1, 1, "", "offset_by"], [338, 1, 1, "", "ordinal_day"], [339, 1, 1, "", "quarter"], [340, 1, 1, "", "replace_time_zone"], [341, 1, 1, "", "round"], [342, 1, 1, "", "second"], [343, 1, 1, "", "seconds"], [344, 1, 1, "", "strftime"], [345, 1, 1, "", "time"], [346, 1, 1, "", "timestamp"], [347, 1, 1, "", "to_string"], [348, 1, 1, "", "truncate"], [349, 1, 1, "", "week"], [350, 1, 1, "", "weekday"], [351, 1, 1, "", "with_time_unit"], [352, 1, 1, "", "year"]], "polars.Expr.list": [[397, 1, 1, "", "arg_max"], [398, 1, 1, "", "arg_min"], [399, 1, 1, "", "concat"], [400, 1, 1, "", "contains"], [401, 1, 1, "", "count_match"], [402, 1, 1, "", "diff"], [403, 1, 1, "", "difference"], [404, 1, 1, "", "eval"], [405, 1, 1, "", "explode"], [406, 1, 1, "", "first"], [407, 1, 1, "", "get"], [408, 1, 1, "", "head"], [409, 1, 1, "", "intersection"], [410, 1, 1, "", "join"], [411, 1, 1, "", "last"], [412, 1, 1, "", "lengths"], [413, 1, 1, "", "max"], [414, 1, 1, "", "mean"], [415, 1, 1, "", "min"], [416, 1, 1, "", "reverse"], [417, 1, 1, "", "shift"], [418, 1, 1, "", "slice"], [419, 1, 1, "", "sort"], [420, 1, 1, "", "sum"], [421, 1, 1, "", "tail"], [422, 1, 1, "", "take"], [423, 1, 1, "", "to_struct"], [424, 1, 1, "", "union"], [425, 1, 1, "", "unique"]], "polars.Expr.meta": [[437, 1, 1, "", "eq"], [438, 1, 1, "", "has_multiple_outputs"], [439, 1, 1, "", "is_regex_projection"], [440, 1, 1, "", "ne"], [441, 1, 1, "", "output_name"], [442, 1, 1, "", "pop"], [443, 1, 1, "", "root_names"], [444, 1, 1, "", "undo_aliases"], [445, 1, 1, "", "write_json"]], "polars.Expr.str": [[498, 1, 1, "", "concat"], [499, 1, 1, "", "contains"], [500, 1, 1, "", "count_match"], [501, 1, 1, "", "decode"], [502, 1, 1, "", "encode"], [503, 1, 1, "", "ends_with"], [504, 1, 1, "", "explode"], [505, 1, 1, "", "extract"], [506, 1, 1, "", "extract_all"], [507, 1, 1, "", "json_extract"], [508, 1, 1, "", "json_path_match"], [509, 1, 1, "", "lengths"], [510, 1, 1, "", "ljust"], [511, 1, 1, "", "lstrip"], [512, 1, 1, "", "n_chars"], [513, 1, 1, "", "parse_int"], [514, 1, 1, "", "replace"], [515, 1, 1, "", "replace_all"], [516, 1, 1, "", "rjust"], [517, 1, 1, "", "rstrip"], [518, 1, 1, "", "slice"], [519, 1, 1, "", "split"], [520, 1, 1, "", "split_exact"], [521, 1, 1, "", "splitn"], [522, 1, 1, "", "starts_with"], [523, 1, 1, "", "strip"], [524, 1, 1, "", "strptime"], [525, 1, 1, "", "to_date"], [526, 1, 1, "", "to_datetime"], [527, 1, 1, "", "to_decimal"], [528, 1, 1, "", "to_lowercase"], [529, 1, 1, "", "to_time"], [530, 1, 1, "", "to_titlecase"], [531, 1, 1, "", "to_uppercase"], [532, 1, 1, "", "zfill"]], "polars.Expr.struct": [[533, 1, 1, "", "field"], [534, 1, 1, "", "rename_fields"]], "polars.Float32": [[41, 1, 1, "", "__init__"]], "polars.Float64": [[42, 1, 1, "", "__init__"]], "polars.Int16": [[43, 1, 1, "", "__init__"]], "polars.Int32": [[44, 1, 1, "", "__init__"]], "polars.Int64": [[45, 1, 1, "", "__init__"]], "polars.Int8": [[46, 1, 1, "", "__init__"]], "polars.LazyFrame": [[624, 1, 1, "", "bottom_k"], [625, 1, 1, "", "cache"], [626, 1, 1, "", "clear"], [627, 1, 1, "", "clone"], [628, 1, 1, "", "collect"], [629, 2, 1, "", "columns"], [630, 1, 1, "", "drop"], [631, 1, 1, "", "drop_nulls"], [632, 2, 1, "", "dtypes"], [633, 1, 1, "", "explain"], [634, 1, 1, "", "explode"], [635, 1, 1, "", "fetch"], [636, 1, 1, "", "fill_nan"], [637, 1, 1, "", "fill_null"], [638, 1, 1, "", "filter"], [639, 1, 1, "", "first"], [640, 1, 1, "", "from_json"], [641, 1, 1, "", "groupby"], [642, 1, 1, "", "groupby_dynamic"], [643, 1, 1, "", "groupby_rolling"], [644, 1, 1, "", "head"], [645, 1, 1, "", "inspect"], [646, 1, 1, "", "interpolate"], [647, 1, 1, "", "join"], [648, 1, 1, "", "join_asof"], [649, 1, 1, "", "last"], [650, 1, 1, "", "lazy"], [651, 1, 1, "", "limit"], [652, 1, 1, "", "map"], [653, 1, 1, "", "max"], [654, 1, 1, "", "mean"], [655, 1, 1, "", "median"], [656, 1, 1, "", "melt"], [657, 1, 1, "", "merge_sorted"], [658, 1, 1, "", "min"], [659, 1, 1, "", "null_count"], [660, 1, 1, "", "pipe"], [661, 1, 1, "", "profile"], [662, 1, 1, "", "quantile"], [663, 1, 1, "", "read_json"], [664, 1, 1, "", "rename"], [665, 1, 1, "", "reverse"], [666, 2, 1, "", "schema"], [667, 1, 1, "", "select"], [668, 1, 1, "", "set_sorted"], [669, 1, 1, "", "shift"], [670, 1, 1, "", "shift_and_fill"], [671, 1, 1, "", "show_graph"], [672, 1, 1, "", "sink_ipc"], [673, 1, 1, "", "sink_parquet"], [674, 1, 1, "", "slice"], [675, 1, 1, "", "sort"], [676, 1, 1, "", "std"], [677, 1, 1, "", "sum"], [678, 1, 1, "", "tail"], [679, 1, 1, "", "take_every"], [680, 1, 1, "", "top_k"], [681, 1, 1, "", "unique"], [682, 1, 1, "", "unnest"], [683, 1, 1, "", "update"], [684, 1, 1, "", "var"], [685, 2, 1, "", "width"], [686, 1, 1, "", "with_columns"], [687, 1, 1, "", "with_context"], [688, 1, 1, "", "with_row_count"], [689, 1, 1, "", "write_json"]], "polars.List": [[47, 1, 1, "", "__init__"]], "polars.Null": [[48, 1, 1, "", "__init__"]], "polars.Object": [[49, 1, 1, "", "__init__"]], "polars.SQLContext": [[1021, 1, 1, "", "__enter__"], [1021, 1, 1, "", "__exit__"], [1021, 1, 1, "", "__init__"], [50, 1, 1, "", "execute"], [51, 1, 1, "", "register"], [52, 1, 1, "", "register_globals"], [53, 1, 1, "", "register_many"], [54, 1, 1, "", "tables"], [55, 1, 1, "", "unregister"]], "polars.Series": [[713, 1, 1, "", "abs"], [714, 1, 1, "", "alias"], [715, 1, 1, "", "all"], [716, 1, 1, "", "any"], [717, 1, 1, "", "append"], [718, 1, 1, "", "apply"], [719, 1, 1, "", "arccos"], [720, 1, 1, "", "arccosh"], [721, 1, 1, "", "arcsin"], [722, 1, 1, "", "arcsinh"], [723, 1, 1, "", "arctan"], [724, 1, 1, "", "arctanh"], [725, 1, 1, "", "arg_max"], [726, 1, 1, "", "arg_min"], [727, 1, 1, "", "arg_sort"], [728, 1, 1, "", "arg_true"], [729, 1, 1, "", "arg_unique"], [739, 1, 1, "", "bottom_k"], [740, 1, 1, "", "cast"], [741, 3, 1, "", "cat"], [743, 1, 1, "", "ceil"], [744, 1, 1, "", "chunk_lengths"], [745, 1, 1, "", "clear"], [746, 1, 1, "", "clip"], [747, 1, 1, "", "clip_max"], [748, 1, 1, "", "clip_min"], [749, 1, 1, "", "clone"], [750, 1, 1, "", "cos"], [751, 1, 1, "", "cosh"], [752, 1, 1, "", "cummax"], [753, 1, 1, "", "cummin"], [754, 1, 1, "", "cumprod"], [755, 1, 1, "", "cumsum"], [756, 1, 1, "", "cumulative_eval"], [757, 1, 1, "", "cut"], [758, 1, 1, "", "describe"], [759, 1, 1, "", "diff"], [760, 1, 1, "", "dot"], [761, 1, 1, "", "drop_nans"], [762, 1, 1, "", "drop_nulls"], [763, 3, 1, "", "dt"], [807, 3, 1, "", "dtype"], [808, 1, 1, "", "entropy"], [809, 1, 1, "", "estimated_size"], [810, 1, 1, "", "ewm_mean"], [811, 1, 1, "", "ewm_std"], [812, 1, 1, "", "ewm_var"], [813, 1, 1, "", "exp"], [814, 1, 1, "", "explode"], [815, 1, 1, "", "extend_constant"], [816, 1, 1, "", "fill_nan"], [817, 1, 1, "", "fill_null"], [818, 1, 1, "", "filter"], [819, 3, 1, "", "flags"], [820, 1, 1, "", "floor"], [821, 1, 1, "", "get_chunks"], [822, 1, 1, "", "has_validity"], [823, 1, 1, "", "hash"], [824, 1, 1, "", "head"], [825, 1, 1, "", "hist"], [826, 1, 1, "", "implode"], [827, 3, 1, "", "inner_dtype"], [828, 1, 1, "", "interpolate"], [829, 1, 1, "", "is_between"], [830, 1, 1, "", "is_boolean"], [831, 1, 1, "", "is_duplicated"], [832, 1, 1, "", "is_empty"], [833, 1, 1, "", "is_finite"], [834, 1, 1, "", "is_first"], [835, 1, 1, "", "is_float"], [836, 1, 1, "", "is_in"], [837, 1, 1, "", "is_infinite"], [838, 1, 1, "", "is_integer"], [839, 1, 1, "", "is_nan"], [840, 1, 1, "", "is_not_nan"], [841, 1, 1, "", "is_not_null"], [842, 1, 1, "", "is_null"], [843, 1, 1, "", "is_numeric"], [844, 1, 1, "", "is_sorted"], [845, 1, 1, "", "is_temporal"], [846, 1, 1, "", "is_unique"], [847, 1, 1, "", "is_utf8"], [848, 1, 1, "", "item"], [849, 1, 1, "", "kurtosis"], [850, 1, 1, "", "len"], [851, 1, 1, "", "limit"], [852, 3, 1, "", "list"], [882, 1, 1, "", "log"], [883, 1, 1, "", "log10"], [884, 1, 1, "", "log1p"], [885, 1, 1, "", "lower_bound"], [886, 1, 1, "", "map_dict"], [887, 1, 1, "", "max"], [888, 1, 1, "", "mean"], [889, 1, 1, "", "median"], [890, 1, 1, "", "min"], [891, 1, 1, "", "mode"], [892, 1, 1, "", "n_chunks"], [893, 1, 1, "", "n_unique"], [894, 3, 1, "", "name"], [895, 1, 1, "", "nan_max"], [896, 1, 1, "", "nan_min"], [897, 1, 1, "", "new_from_index"], [898, 1, 1, "", "null_count"], [899, 1, 1, "", "pct_change"], [900, 1, 1, "", "peak_max"], [901, 1, 1, "", "peak_min"], [902, 1, 1, "", "product"], [903, 1, 1, "", "qcut"], [904, 1, 1, "", "quantile"], [905, 1, 1, "", "rank"], [906, 1, 1, "", "rechunk"], [907, 1, 1, "", "reinterpret"], [908, 1, 1, "", "rename"], [909, 1, 1, "", "reshape"], [910, 1, 1, "", "reverse"], [911, 1, 1, "", "rolling_apply"], [912, 1, 1, "", "rolling_max"], [913, 1, 1, "", "rolling_mean"], [914, 1, 1, "", "rolling_median"], [915, 1, 1, "", "rolling_min"], [916, 1, 1, "", "rolling_quantile"], [917, 1, 1, "", "rolling_skew"], [918, 1, 1, "", "rolling_std"], [919, 1, 1, "", "rolling_sum"], [920, 1, 1, "", "rolling_var"], [921, 1, 1, "", "round"], [922, 1, 1, "", "sample"], [923, 1, 1, "", "search_sorted"], [924, 1, 1, "", "series_equal"], [925, 1, 1, "", "set"], [926, 1, 1, "", "set_at_idx"], [927, 1, 1, "", "set_sorted"], [928, 3, 1, "", "shape"], [929, 1, 1, "", "shift"], [930, 1, 1, "", "shift_and_fill"], [931, 1, 1, "", "shrink_dtype"], [932, 1, 1, "", "shrink_to_fit"], [933, 1, 1, "", "shuffle"], [934, 1, 1, "", "sign"], [935, 1, 1, "", "sin"], [936, 1, 1, "", "sinh"], [937, 1, 1, "", "skew"], [938, 1, 1, "", "slice"], [939, 1, 1, "", "sort"], [940, 1, 1, "", "sqrt"], [941, 1, 1, "", "std"], [942, 3, 1, "", "str"], [983, 1, 1, "", "sum"], [984, 1, 1, "", "tail"], [985, 1, 1, "", "take"], [986, 1, 1, "", "take_every"], [987, 1, 1, "", "tan"], [988, 1, 1, "", "tanh"], [989, 3, 1, "", "time_unit"], [990, 1, 1, "", "to_arrow"], [991, 1, 1, "", "to_dummies"], [992, 1, 1, "", "to_frame"], [993, 1, 1, "", "to_init_repr"], [994, 1, 1, "", "to_list"], [995, 1, 1, "", "to_numpy"], [996, 1, 1, "", "to_pandas"], [997, 1, 1, "", "to_physical"], [998, 1, 1, "", "top_k"], [999, 1, 1, "", "unique"], [1000, 1, 1, "", "unique_counts"], [1001, 1, 1, "", "upper_bound"], [1002, 1, 1, "", "value_counts"], [1003, 1, 1, "", "var"], [1004, 1, 1, "", "view"], [1005, 1, 1, "", "zip_with"]], "polars.Series.arr": [[730, 1, 1, "", "max"], [731, 1, 1, "", "min"], [732, 1, 1, "", "sum"], [733, 1, 1, "", "unique"]], "polars.Series.bin": [[734, 1, 1, "", "contains"], [735, 1, 1, "", "decode"], [736, 1, 1, "", "encode"], [737, 1, 1, "", "ends_with"], [738, 1, 1, "", "starts_with"]], "polars.Series.cat": [[742, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[764, 1, 1, "", "cast_time_unit"], [765, 1, 1, "", "combine"], [766, 1, 1, "", "convert_time_zone"], [767, 1, 1, "", "date"], [768, 1, 1, "", "datetime"], [769, 1, 1, "", "day"], [770, 1, 1, "", "days"], [771, 1, 1, "", "epoch"], [772, 1, 1, "", "hour"], [773, 1, 1, "", "hours"], [774, 1, 1, "", "is_leap_year"], [775, 1, 1, "", "iso_year"], [776, 1, 1, "", "max"], [777, 1, 1, "", "mean"], [778, 1, 1, "", "median"], [779, 1, 1, "", "microsecond"], [780, 1, 1, "", "microseconds"], [781, 1, 1, "", "millisecond"], [782, 1, 1, "", "milliseconds"], [783, 1, 1, "", "min"], [784, 1, 1, "", "minute"], [785, 1, 1, "", "minutes"], [786, 1, 1, "", "month"], [787, 1, 1, "", "month_end"], [788, 1, 1, "", "month_start"], [789, 1, 1, "", "nanosecond"], [790, 1, 1, "", "nanoseconds"], [791, 1, 1, "", "offset_by"], [792, 1, 1, "", "ordinal_day"], [793, 1, 1, "", "quarter"], [794, 1, 1, "", "replace_time_zone"], [795, 1, 1, "", "round"], [796, 1, 1, "", "second"], [797, 1, 1, "", "seconds"], [798, 1, 1, "", "strftime"], [799, 1, 1, "", "time"], [800, 1, 1, "", "timestamp"], [801, 1, 1, "", "to_string"], [802, 1, 1, "", "truncate"], [803, 1, 1, "", "week"], [804, 1, 1, "", "weekday"], [805, 1, 1, "", "with_time_unit"], [806, 1, 1, "", "year"]], "polars.Series.list": [[853, 1, 1, "", "arg_max"], [854, 1, 1, "", "arg_min"], [855, 1, 1, "", "concat"], [856, 1, 1, "", "contains"], [857, 1, 1, "", "count_match"], [858, 1, 1, "", "diff"], [859, 1, 1, "", "difference"], [860, 1, 1, "", "eval"], [861, 1, 1, "", "explode"], [862, 1, 1, "", "first"], [863, 1, 1, "", "get"], [864, 1, 1, "", "head"], [865, 1, 1, "", "intersection"], [866, 1, 1, "", "join"], [867, 1, 1, "", "last"], [868, 1, 1, "", "lengths"], [869, 1, 1, "", "max"], [870, 1, 1, "", "mean"], [871, 1, 1, "", "min"], [872, 1, 1, "", "reverse"], [873, 1, 1, "", "shift"], [874, 1, 1, "", "slice"], [875, 1, 1, "", "sort"], [876, 1, 1, "", "sum"], [877, 1, 1, "", "tail"], [878, 1, 1, "", "take"], [879, 1, 1, "", "to_struct"], [880, 1, 1, "", "union"], [881, 1, 1, "", "unique"]], "polars.Series.str": [[943, 1, 1, "", "concat"], [944, 1, 1, "", "contains"], [945, 1, 1, "", "count_match"], [946, 1, 1, "", "decode"], [947, 1, 1, "", "encode"], [948, 1, 1, "", "ends_with"], [949, 1, 1, "", "explode"], [950, 1, 1, "", "extract"], [951, 1, 1, "", "extract_all"], [952, 1, 1, "", "json_extract"], [953, 1, 1, "", "json_path_match"], [954, 1, 1, "", "lengths"], [955, 1, 1, "", "ljust"], [956, 1, 1, "", "lstrip"], [957, 1, 1, "", "n_chars"], [958, 1, 1, "", "parse_int"], [959, 1, 1, "", "replace"], [960, 1, 1, "", "replace_all"], [961, 1, 1, "", "rjust"], [962, 1, 1, "", "rstrip"], [963, 1, 1, "", "slice"], [964, 1, 1, "", "split"], [965, 1, 1, "", "split_exact"], [966, 1, 1, "", "splitn"], [967, 1, 1, "", "starts_with"], [968, 1, 1, "", "strip"], [969, 1, 1, "", "strptime"], [970, 1, 1, "", "to_date"], [971, 1, 1, "", "to_datetime"], [972, 1, 1, "", "to_decimal"], [973, 1, 1, "", "to_lowercase"], [974, 1, 1, "", "to_time"], [975, 1, 1, "", "to_titlecase"], [976, 1, 1, "", "to_uppercase"], [977, 1, 1, "", "zfill"]], "polars.Series.struct": [[978, 1, 1, "", "field"], [979, 3, 1, "", "fields"], [980, 1, 1, "", "rename_fields"], [981, 3, 1, "", "schema"], [982, 1, 1, "", "unnest"]], "polars.StringCache": [[56, 1, 1, "", "__init__"]], "polars.Struct": [[57, 1, 1, "", "__init__"]], "polars.Time": [[58, 1, 1, "", "__init__"]], "polars.UInt16": [[59, 1, 1, "", "__init__"]], "polars.UInt32": [[60, 1, 1, "", "__init__"]], "polars.UInt64": [[61, 1, 1, "", "__init__"]], "polars.UInt8": [[62, 1, 1, "", "__init__"]], "polars.Unknown": [[63, 1, 1, "", "__init__"]], "polars.Utf8": [[64, 1, 1, "", "__init__"]], "polars.api": [[66, 4, 1, "", "register_dataframe_namespace"], [67, 4, 1, "", "register_expr_namespace"], [68, 4, 1, "", "register_lazyframe_namespace"], [69, 4, 1, "", "register_series_namespace"]], "polars.dataframe.groupby.GroupBy": [[234, 1, 1, "", "__iter__"], [235, 1, 1, "", "agg"], [236, 1, 1, "", "all"], [237, 1, 1, "", "apply"], [238, 1, 1, "", "count"], [239, 1, 1, "", "first"], [240, 1, 1, "", "head"], [241, 1, 1, "", "last"], [242, 1, 1, "", "max"], [243, 1, 1, "", "mean"], [244, 1, 1, "", "median"], [245, 1, 1, "", "min"], [246, 1, 1, "", "n_unique"], [247, 1, 1, "", "quantile"], [248, 1, 1, "", "sum"], [249, 1, 1, "", "tail"]], "polars.exceptions": [[76, 5, 1, "", "ArrowError"], [77, 5, 1, "", "ColumnNotFoundError"], [78, 5, 1, "", "ComputeError"], [79, 5, 1, "", "DuplicateError"], [80, 5, 1, "", "InvalidOperationError"], [81, 5, 1, "", "NoDataError"], [82, 5, 1, "", "NoRowsReturnedError"], [83, 5, 1, "", "PolarsPanicError"], [84, 5, 1, "", "RowsError"], [85, 5, 1, "", "SchemaError"], [86, 5, 1, "", "SchemaFieldNotFoundError"], [87, 5, 1, "", "ShapeError"], [88, 5, 1, "", "StructFieldNotFoundError"], [89, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[99, 1, 1, "", "next_batches"]], "polars.lazyframe.groupby.LazyGroupBy": [[690, 1, 1, "", "agg"], [691, 1, 1, "", "all"], [692, 1, 1, "", "apply"], [693, 1, 1, "", "count"], [694, 1, 1, "", "first"], [695, 1, 1, "", "head"], [696, 1, 1, "", "last"], [697, 1, 1, "", "max"], [698, 1, 1, "", "mean"], [699, 1, 1, "", "median"], [700, 1, 1, "", "min"], [701, 1, 1, "", "n_unique"], [702, 1, 1, "", "quantile"], [703, 1, 1, "", "sum"], [704, 1, 1, "", "tail"]], "polars.selectors": [[711, 4, 1, "", "all"], [711, 4, 1, "", "by_dtype"], [711, 4, 1, "", "by_name"], [711, 4, 1, "", "contains"], [711, 4, 1, "", "datetime"], [711, 4, 1, "", "ends_with"], [711, 4, 1, "", "first"], [711, 4, 1, "", "float"], [711, 4, 1, "", "integer"], [711, 4, 1, "", "is_selector"], [711, 4, 1, "", "last"], [711, 4, 1, "", "matches"], [711, 4, 1, "", "numeric"], [711, 4, 1, "", "selector_column_names"], [711, 4, 1, "", "starts_with"], [711, 4, 1, "", "string"], [711, 4, 1, "", "temporal"]], "polars.testing": [[120, 4, 1, "", "assert_frame_equal"], [121, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[122, 0, 1, "", "column"], [123, 4, 1, "", "columns"], [124, 4, 1, "", "create_list_strategy"], [125, 4, 1, "", "dataframes"], [126, 4, 1, "", "load_profile"], [127, 4, 1, "", "series"], [128, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[122, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"extend": [1, 149], "api": [1, 66, 67, 68, 69, 621], "provid": 1, "new": 1, "function": [1, 133, 609, 620, 711], "avail": 1, "registr": 1, "exampl": [1, 711, 1022], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1022], "arrai": [2, 603, 1006], "binari": [3, 604, 615, 1008], "boolean": [4, 605, 1009], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 133], "activate_decim": 6, "load": [7, 133], "restore_default": 8, "save": [9, 133], "set_ascii_t": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_streaming_chunk_s": 13, "set_tbl_cell_align": 14, "set_tbl_col": 15, "set_tbl_column_data_type_inlin": 16, "set_tbl_dataframe_shape_below": 17, "set_tbl_format": 18, "set_tbl_hide_column_data_typ": 19, "set_tbl_hide_column_nam": 20, "set_tbl_hide_dataframe_shap": 21, "set_tbl_hide_dtype_separ": 22, "set_tbl_row": 23, "set_tbl_width_char": 24, "set_verbos": 25, "state": [26, 133], "datafram": [27, 28, 29, 30, 31, 32, 33, 34, 35, 125, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 255], "write_avro": 27, "write_csv": 28, "write_databas": 29, "write_delta": 30, "write_excel": 31, "write_ipc": 32, "write_json": [33, 445, 689], "write_ndjson": 34, "write_parquet": 35, "datatyp": 36, "date": [37, 317, 570, 767], "datetim": [38, 318, 571, 768], "decim": 39, "durat": [40, 572], "float32": 41, "float64": 42, "int16": 43, "int32": 44, "int64": 45, "int8": 46, "list": [47, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 611, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 1015], "null": 48, "object": 49, "sqlcontext": [50, 51, 52, 53, 54, 55], "execut": 50, "regist": 51, "register_glob": 52, "register_mani": 53, "tabl": 54, "unregist": 55, "stringcach": [56, 620], "struct": [57, 533, 534, 597, 617, 978, 979, 980, 981, 982, 1019], "time": [58, 345, 600, 799], "uint16": 59, "uint32": 60, "uint64": 61, "uint8": 62, "unknown": 63, "utf8": 64, "align_fram": 65, "register_dataframe_namespac": 66, "register_expr_namespac": 67, "register_lazyframe_namespac": 68, "register_series_namespac": 69, "arg_wher": 70, "build_info": 71, "collect_al": 72, "concat": [73, 399, 498, 855, 943], "date_rang": 74, "enable_string_cach": 75, "except": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 259], "arrowerror": 76, "columnnotfounderror": 77, "computeerror": 78, "duplicateerror": 79, "invalidoperationerror": 80, "nodataerror": 81, "norowsreturnederror": 82, "polarspanicerror": 83, "rowserror": 84, "schemaerror": 85, "schemafieldnotfounderror": 86, "shapeerror": 87, "structfieldnotfounderror": 88, "toomanyrowsreturnederror": 89, "from_arrow": 90, "from_datafram": 91, "from_dict": [92, 93], "from_numpi": 94, "from_panda": 95, "from_record": 96, "from_repr": 97, "get_index_typ": 98, "io": 99, "csv": [99, 622], "batched_read": 99, "batchedcsvread": [99, 622], "next_batch": 99, "ones": 100, "read_avro": 101, "read_csv": 102, "read_csv_batch": 103, "read_databas": 104, "read_delta": 105, "read_excel": 106, "read_ipc": 107, "read_ipc_schema": 108, "read_json": [109, 663], "read_ndjson": 110, "read_parquet": 111, "read_parquet_schema": 112, "scan_csv": 113, "scan_delta": 114, "scan_ipc": 115, "scan_ndjson": 116, "scan_parquet": 117, "scan_pyarrow_dataset": 118, "show_vers": 119, "test": [120, 121, 122, 123, 124, 125, 126, 127, 128, 1022], "assert_frame_equ": 120, "assert_series_equ": 121, "parametr": [122, 123, 124, 125, 126, 127, 128, 1022], "column": [122, 123, 140, 607, 629], "create_list_strategi": 124, "load_profil": 126, "seri": [127, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1014], "set_profil": 128, "threadpool_s": 129, "time_rang": 130, "using_string_cach": 131, "zero": 132, "option": 133, "current": 133, "us": 133, "context": 133, "manag": 133, "decor": 133, "aggreg": [134, 260, 623, 712], "__dataframe__": 135, "appli": [136, 237, 269, 555, 692, 718], "bottom_k": [137, 292, 624, 739], "clear": [138, 626, 745], "clone": [139, 627, 749], "corr": [141, 564], "describ": [142, 758], "drop": [143, 630], "drop_in_plac": 144, "drop_nul": [145, 313, 631, 762], "dtype": [146, 632, 807], "estimated_s": [147, 809], "explod": [148, 361, 405, 504, 634, 814, 861, 949], "fill_nan": [150, 363, 636, 816], "fill_nul": [151, 364, 637, 817], "filter": [152, 365, 638, 818], "find_idx_by_nam": 153, "fold": [154, 576], "frame_equ": 155, "get_column": [156, 157], "glimps": 158, "groupbi": [159, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 254, 641, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 707], "groupby_dynam": [160, 642], "groupby_rol": [161, 643], "hash_row": 162, "head": [163, 240, 375, 408, 580, 644, 695, 824, 864], "height": 164, "hstack": 165, "insert_at_idx": 166, "interpol": [167, 378, 646, 828], "is_dupl": [168, 380, 831], "is_empti": [169, 832], "is_uniqu": [170, 390, 846], "item": [171, 848], "iter_row": 172, "iter_slic": 173, "join": [174, 410, 647, 866], "join_asof": [175, 648], "lazi": [176, 620, 650], "limit": [177, 396, 651, 851], "max": [178, 242, 282, 413, 434, 584, 653, 697, 730, 776, 869, 887], "mean": [179, 243, 414, 435, 585, 654, 698, 777, 870, 888], "median": [180, 244, 436, 586, 655, 699, 778, 889], "melt": [181, 656], "merge_sort": [182, 657], "min": [183, 245, 283, 415, 446, 587, 658, 700, 731, 783, 871, 890], "n_chunk": [184, 892], "n_uniqu": [185, 246, 450, 588, 701, 893], "null_count": [186, 455, 659, 898], "partition_bi": 187, "pipe": [188, 459, 660], "pivot": 189, "product": [190, 462, 902], "quantil": [191, 247, 463, 589, 662, 702, 904], "rechunk": [192, 466, 906], "renam": [193, 664, 908], "replac": [194, 514, 959], "replace_at_idx": 195, "revers": [196, 416, 470, 665, 872, 910], "row": [197, 198], "sampl": [199, 482, 922], "schema": [200, 666, 981], "select": [201, 257, 594, 614, 667, 710, 1017], "set_sort": [202, 484, 668, 927], "shape": [203, 928], "shift": [204, 417, 485, 669, 873, 929], "shift_and_fil": [205, 486, 670, 930], "shrink_to_fit": [206, 932], "slice": [207, 418, 493, 518, 674, 874, 938, 963], "sort": [208, 419, 494, 675, 875, 939], "std": [209, 497, 596, 676, 941], "sum": [210, 248, 284, 420, 537, 598, 677, 703, 732, 876, 983], "tail": [211, 249, 421, 538, 599, 678, 704, 877, 984], "take_everi": [212, 540, 679, 986], "to_arrow": [213, 990], "to_dict": [214, 215], "to_dummi": [216, 991], "to_init_repr": [217, 993], "to_numpi": [218, 995], "to_panda": [219, 996], "to_seri": 220, "to_struct": [221, 423, 879], "top_k": [222, 544, 680, 998], "transpos": 223, "uniqu": [224, 285, 425, 546, 681, 733, 881, 999], "unnest": [225, 682, 982], "unstack": 226, "updat": [227, 683], "upsampl": 228, "var": [229, 550, 601, 684, 1003], "vstack": 230, "width": [231, 685], "with_column": [232, 686], "with_row_count": [233, 688], "__iter__": 234, "agg": [235, 690], "all": [236, 265, 553, 691, 715], "count": [238, 302, 565, 693], "first": [239, 366, 406, 575, 639, 694, 862], "last": [241, 393, 411, 649, 696, 867], "attribut": [250, 705, 1007], "comput": [251, 608, 1011], "descript": [252, 706, 1012], "export": [253, 1013], "miscellan": [256, 613, 620, 709, 1016], "manipul": [257, 614, 710, 1017], "data": 258, "type": 258, "numer": [258, 615], "tempor": [258, 618, 1020], "nest": 258, "other": 258, "expr": [261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552], "ab": [261, 713], "add": 262, "agg_group": 263, "alia": [264, 714], "and_": 266, "ani": [267, 554, 716], "append": [268, 717], "approx_uniqu": [270, 556], "arcco": [271, 719], "arccosh": [272, 720], "arcsin": [273, 721], "arcsinh": [274, 722], "arctan": [275, 723], "arctanh": [276, 724], "arg_max": [277, 397, 725, 853], "arg_min": [278, 398, 726, 854], "arg_sort": [279, 727], "arg_tru": [280, 728], "arg_uniqu": [281, 729], "arr": [282, 283, 284, 285, 730, 731, 732, 733], "backward_fil": 286, "bin": [287, 288, 289, 290, 291, 734, 735, 736, 737, 738], "contain": [287, 400, 499, 734, 856, 944], "decod": [288, 501, 735, 946], "encod": [289, 502, 736, 947], "ends_with": [290, 503, 737, 948], "starts_with": [291, 522, 738, 967], "cach": [293, 625], "cast": [294, 740], "cat": [295, 741, 742], "set_ord": [295, 742], "ceil": [296, 743], "clip": [297, 746], "clip_max": [298, 747], "clip_min": [299, 748], "co": [300, 750], "cosh": [301, 751], "cumcount": 303, "cummax": [304, 752], "cummin": [305, 753], "cumprod": [306, 754], "cumsum": [307, 569, 755], "cumulative_ev": [308, 756], "degre": 309, "diff": [310, 402, 759, 858], "dot": [311, 760], "drop_nan": [312, 761], "dt": [314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806], "cast_time_unit": [314, 764], "combin": [315, 765], "convert_time_zon": [316, 766], "dai": [319, 320, 769, 770], "epoch": [321, 771], "hour": [322, 323, 772, 773], "is_leap_year": [324, 774], "iso_year": [325, 775], "microsecond": [326, 327, 779, 780], "millisecond": [328, 329, 781, 782], "minut": [330, 331, 784, 785], "month": [332, 786], "month_end": [333, 787], "month_start": [334, 788], "nanosecond": [335, 336, 789, 790], "offset_bi": [337, 791], "ordinal_dai": [338, 792], "quarter": [339, 793], "replace_time_zon": [340, 794], "round": [341, 481, 795, 921], "second": [342, 343, 796, 797], "strftime": [344, 798], "timestamp": [346, 800], "to_str": [347, 801], "truncat": [348, 802], "week": [349, 803], "weekdai": [350, 804], "with_time_unit": [351, 805], "year": [352, 806], "entropi": [353, 808], "eq": [354, 437], "eq_miss": 355, "ewm_mean": [356, 810], "ewm_std": [357, 811], "ewm_var": [358, 812], "exclud": [359, 574], "exp": [360, 813], "extend_const": [362, 815], "flatten": 367, "floor": [368, 820], "floordiv": 369, "forward_fil": 370, "from_json": [371, 640], "ge": 372, "gt": 373, "hash": [374, 823], "implod": [376, 581, 826], "inspect": [377, 645], "is_between": [379, 829], "is_finit": [381, 833], "is_first": [382, 834], "is_in": [383, 836], "is_infinit": [384, 837], "is_nan": [385, 839], "is_not": 386, "is_not_nan": [387, 840], "is_not_nul": [388, 841], "is_nul": [389, 842], "keep_nam": 391, "kurtosi": [392, 849], "le": 394, "len": [395, 850], "count_match": [401, 500, 857, 945], "differ": [403, 859], "eval": [404, 860], "get": [407, 863], "intersect": [409, 865], "length": [412, 509, 868, 954], "take": [422, 539, 878, 985], "union": [424, 880], "log": [426, 882], "log10": [427, 883], "log1p": [428, 884], "lower_bound": [429, 885], "lt": 430, "map": [431, 583, 652], "map_alia": 432, "map_dict": [433, 886], "meta": [437, 438, 439, 440, 441, 442, 443, 444, 445, 612], "has_multiple_output": 438, "is_regex_project": 439, "ne": [440, 453], "output_nam": 441, "pop": 442, "root_nam": 443, "undo_alias": 444, "mod": 447, "mode": [448, 891], "mul": 449, "nan_max": [451, 895], "nan_min": [452, 896], "ne_miss": 454, "or_": 456, "over": 457, "pct_chang": [458, 899], "pow": 460, "prefix": 461, "radian": 464, "rank": [465, 905], "reinterpret": [467, 907], "repeat_bi": 468, "reshap": [469, 909], "rolling_appli": [471, 911], "rolling_max": [472, 912], "rolling_mean": [473, 913], "rolling_median": [474, 914], "rolling_min": [475, 915], "rolling_quantil": [476, 916], "rolling_skew": [477, 917], "rolling_std": [478, 918], "rolling_sum": [479, 919], "rolling_var": [480, 920], "search_sort": [483, 923], "shrink_dtyp": [487, 931], "shuffl": [488, 933], "sign": [489, 934], "sin": [490, 935], "sinh": [491, 936], "skew": [492, 937], "sort_bi": 495, "sqrt": [496, 940], "str": [498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977], "extract": [505, 950], "extract_al": [506, 951], "json_extract": [507, 952], "json_path_match": [508, 953], "ljust": [510, 955], "lstrip": [511, 956], "n_char": [512, 957], "parse_int": [513, 958], "replace_al": [515, 960], "rjust": [516, 961], "rstrip": [517, 962], "split": [519, 964], "split_exact": [520, 965], "splitn": [521, 966], "strip": [523, 968], "strptime": [524, 969], "to_dat": [525, 970], "to_datetim": [526, 971], "to_decim": [527, 972], "to_lowercas": [528, 973], "to_tim": [529, 974], "to_titlecas": [530, 975], "to_uppercas": [531, 976], "zfill": [532, 977], "field": [533, 978, 979], "rename_field": [534, 980], "sub": 535, "suffix": 536, "tan": [541, 987], "tanh": [542, 988], "to_phys": [543, 997], "truediv": 545, "unique_count": [547, 1000], "upper_bound": [548, 1001], "value_count": [549, 1002], "where": 551, "xor": 552, "arang": 557, "arg_sort_bi": 558, "avg": 559, "coalesc": 560, "col": 561, "concat_list": 562, "concat_str": 563, "cov": 566, "cumfold": 567, "cumreduc": 568, "element": 573, "format": 577, "from_epoch": 578, "group": 579, "lit": 582, "reduc": 590, "repeat": 591, "rolling_corr": 592, "rolling_cov": 593, "sql_expr": 595, "when": 602, "categori": [606, 1010], "name": [607, 894], "express": 610, "oper": [615, 711], "conjunct": 615, "comparison": 615, "string": [616, 1018], "window": 619, "convers": 620, "eager": 620, "parallel": 620, "refer": 621, "input": 622, "output": 622, "feather": 622, "ipc": 622, "parquet": 622, "databas": 622, "json": 622, "avro": 622, "excel": 622, "delta": 622, "lake": 622, "dataset": 622, "lazyfram": [624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708], "collect": 628, "explain": 633, "fetch": 635, "profil": [661, 1022], "show_graph": 671, "sink_ipc": 672, "sink_parquet": 673, "with_context": 687, "lazygroupbi": [690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704], "read": 709, "write": 709, "logic": 709, "plan": 709, "selector": 711, "import": 711, "set": [711, 925], "chunk_length": 744, "cut": 757, "flag": 819, "get_chunk": 821, "has_valid": 822, "hist": 825, "inner_dtyp": 827, "is_boolean": 830, "is_float": 835, "is_integ": 838, "is_numer": 843, "is_sort": 844, "is_tempor": 845, "is_utf8": 847, "new_from_index": 897, "peak_max": 900, "peak_min": 901, "qcut": 903, "series_equ": 924, "set_at_idx": 926, "time_unit": 989, "to_fram": 992, "to_list": 994, "view": 1004, "zip_with": 1005, "sql": 1021, "method": 1021, "assert": 1022, "primit": 1022, "strategi": 1022, "helper": 1022, "util": 1023}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.concat": [[73, "polars-concat"]], "polars.collect_all": [[72, "polars-collect-all"]], "polars.from_dict": [[92, "polars-from-dict"]], "polars.enable_string_cache": [[75, "polars-enable-string-cache"]], "polars.read_csv": [[102, "polars-read-csv"]], "polars.scan_ndjson": [[116, "polars-scan-ndjson"]], "polars.testing.assert_frame_equal": [[120, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.dataframes": [[125, "polars-testing-parametric-dataframes"]], "polars.testing.parametric.series": [[127, "polars-testing-parametric-series"]], "polars.time_range": [[130, "polars-time-range"]], "polars.read_csv_batched": [[103, "polars-read-csv-batched"]], "Aggregation": [[134, "aggregation"], [712, "aggregation"], [623, "aggregation"], [260, "aggregation"]], "polars.read_excel": [[106, "polars-read-excel"]], "polars.read_ndjson": [[110, "polars-read-ndjson"]], "polars.DataFrame.corr": [[141, "polars-dataframe-corr"]], "polars.read_avro": [[101, "polars-read-avro"]], "polars.read_ipc": [[107, "polars-read-ipc"]], "polars.build_info": [[71, "polars-build-info"]], "polars.exceptions.ShapeError": [[87, "polars-exceptions-shapeerror"]], "polars.DataFrame.columns": [[140, "polars-dataframe-columns"]], "polars.exceptions.ColumnNotFoundError": [[77, "polars-exceptions-columnnotfounderror"]], "polars.testing.parametric.columns": [[123, "polars-testing-parametric-columns"]], "polars.scan_ipc": [[115, "polars-scan-ipc"]], "polars.exceptions.PolarsPanicError": [[83, "polars-exceptions-polarspanicerror"]], "polars.testing.parametric.set_profile": [[128, "polars-testing-parametric-set-profile"]], "polars.read_ipc_schema": [[108, "polars-read-ipc-schema"]], "polars.show_versions": [[119, "polars-show-versions"]], "polars.from_repr": [[97, "polars-from-repr"]], "polars.read_delta": [[105, "polars-read-delta"]], "polars.testing.parametric.column": [[122, "polars-testing-parametric-column"]], "polars.read_json": [[109, "polars-read-json"]], "polars.scan_pyarrow_dataset": [[118, "polars-scan-pyarrow-dataset"]], "polars.ones": [[100, "polars-ones"]], "polars.read_parquet": [[111, "polars-read-parquet"]], "polars.scan_parquet": [[117, "polars-scan-parquet"]], "polars.testing.parametric.load_profile": [[126, "polars-testing-parametric-load-profile"]], "polars.from_dataframe": [[91, "polars-from-dataframe"]], "polars.exceptions.InvalidOperationError": [[80, "polars-exceptions-invalidoperationerror"]], "polars.scan_delta": [[114, "polars-scan-delta"]], "polars.from_dicts": [[93, "polars-from-dicts"]], "polars.zeros": [[132, "polars-zeros"]], "polars.exceptions.RowsError": [[84, "polars-exceptions-rowserror"]], "Config": [[133, "config"]], "Config options": [[133, "config-options"]], "Config load, save, and current state": [[133, "config-load-save-and-current-state"]], "Use as a context manager": [[133, "use-as-a-context-manager"]], "Use as a function decorator": [[133, "use-as-a-function-decorator"]], "polars.from_pandas": [[95, "polars-from-pandas"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[99, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.exceptions.ComputeError": [[78, "polars-exceptions-computeerror"]], "polars.exceptions.StructFieldNotFoundError": [[88, "polars-exceptions-structfieldnotfounderror"]], "polars.DataFrame.clone": [[139, "polars-dataframe-clone"]], "polars.read_parquet_schema": [[112, "polars-read-parquet-schema"]], "polars.exceptions.TooManyRowsReturnedError": [[89, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.NoDataError": [[81, "polars-exceptions-nodataerror"]], "polars.exceptions.DuplicateError": [[79, "polars-exceptions-duplicateerror"]], "polars.get_index_type": [[98, "polars-get-index-type"]], "polars.exceptions.SchemaError": [[85, "polars-exceptions-schemaerror"]], "polars.from_records": [[96, "polars-from-records"]], "polars.DataFrame.apply": [[136, "polars-dataframe-apply"]], "polars.testing.assert_series_equal": [[121, "polars-testing-assert-series-equal"]], "polars.from_numpy": [[94, "polars-from-numpy"]], "polars.threadpool_size": [[129, "polars-threadpool-size"]], "polars.date_range": [[74, "polars-date-range"]], "polars.DataFrame.bottom_k": [[137, "polars-dataframe-bottom-k"]], "polars.exceptions.SchemaFieldNotFoundError": [[86, "polars-exceptions-schemafieldnotfounderror"]], "polars.scan_csv": [[113, "polars-scan-csv"]], "polars.testing.parametric.create_list_strategy": [[124, "polars-testing-parametric-create-list-strategy"]], "polars.using_string_cache": [[131, "polars-using-string-cache"]], "polars.DataFrame.__dataframe__": [[135, "polars-dataframe-dataframe"]], "polars.DataFrame.clear": [[138, "polars-dataframe-clear"]], "polars.read_database": [[104, "polars-read-database"]], "polars.exceptions.NoRowsReturnedError": [[82, "polars-exceptions-norowsreturnederror"]], "polars.from_arrow": [[90, "polars-from-arrow"]], "polars.exceptions.ArrowError": [[76, "polars-exceptions-arrowerror"]], "polars.Config.set_fmt_str_lengths": [[12, "polars-config-set-fmt-str-lengths"]], "polars.Time": [[58, "polars-time"]], "polars.Object": [[49, "polars-object"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_ascii_tables": [[10, "polars-config-set-ascii-tables"]], "polars.Config.save": [[9, "polars-config-save"]], "polars.Binary": [[3, "polars-binary"]], "polars.Date": [[37, "polars-date"]], "polars.Float32": [[41, "polars-float32"]], "polars.Int32": [[44, "polars-int32"]], "polars.Config.restore_defaults": [[8, "polars-config-restore-defaults"]], "polars.DataFrame.write_excel": [[31, "polars-dataframe-write-excel"]], "polars.DataFrame.write_avro": [[27, "polars-dataframe-write-avro"]], "polars.arg_where": [[70, "polars-arg-where"]], "polars.Int64": [[45, "polars-int64"]], "polars.Config.set_fmt_float": [[11, "polars-config-set-fmt-float"]], "polars.DataFrame.write_parquet": [[35, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_cell_alignment": [[14, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_column_names": [[20, "polars-config-set-tbl-hide-column-names"]], "polars.Array": [[2, "polars-array"]], "polars.align_frames": [[65, "polars-align-frames"]], "polars.List": [[47, "polars-list"]], "polars.StringCache": [[56, "polars-stringcache"]], "polars.Config.set_tbl_width_chars": [[24, "polars-config-set-tbl-width-chars"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.api.register_dataframe_namespace": [[66, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.unregister": [[55, "polars-sqlcontext-unregister"]], "polars.SQLContext.register": [[51, "polars-sqlcontext-register"]], "polars.SQLContext.register_many": [[53, "polars-sqlcontext-register-many"]], "polars.Struct": [[57, "polars-struct"]], "polars.Config.set_tbl_hide_column_data_types": [[19, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_database": [[29, "polars-dataframe-write-database"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_delta": [[30, "polars-dataframe-write-delta"]], "polars.Decimal": [[39, "polars-decimal"]], "polars.Int16": [[43, "polars-int16"]], "polars.UInt64": [[61, "polars-uint64"]], "polars.UInt16": [[59, "polars-uint16"]], "polars.Config.set_tbl_column_data_type_inline": [[16, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_tbl_rows": [[23, "polars-config-set-tbl-rows"]], "polars.Datetime": [[38, "polars-datetime"]], "polars.Float64": [[42, "polars-float64"]], "polars.UInt32": [[60, "polars-uint32"]], "polars.Config.set_tbl_cols": [[15, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_csv": [[28, "polars-dataframe-write-csv"]], "polars.SQLContext.execute": [[50, "polars-sqlcontext-execute"]], "polars.SQLContext.tables": [[54, "polars-sqlcontext-tables"]], "polars.DataFrame.write_json": [[33, "polars-dataframe-write-json"]], "polars.Config.set_tbl_dataframe_shape_below": [[17, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Null": [[48, "polars-null"]], "polars.api.register_series_namespace": [[69, "polars-api-register-series-namespace"]], "polars.DataType": [[36, "polars-datatype"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1022, "examples"], [711, "examples"]], "polars.Unknown": [[63, "polars-unknown"]], "polars.DataFrame.write_ipc": [[32, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ndjson": [[34, "polars-dataframe-write-ndjson"]], "polars.Config.state": [[26, "polars-config-state"]], "polars.Int8": [[46, "polars-int8"]], "polars.Config.set_tbl_hide_dataframe_shape": [[21, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Utf8": [[64, "polars-utf8"]], "polars.api.register_expr_namespace": [[67, "polars-api-register-expr-namespace"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.api.register_lazyframe_namespace": [[68, "polars-api-register-lazyframe-namespace"]], "polars.Config.set_tbl_formatting": [[18, "polars-config-set-tbl-formatting"]], "polars.Config.set_streaming_chunk_size": [[13, "polars-config-set-streaming-chunk-size"]], "polars.Config.set_verbose": [[25, "polars-config-set-verbose"]], "polars.SQLContext.register_globals": [[52, "polars-sqlcontext-register-globals"]], "polars.Duration": [[40, "polars-duration"]], "polars.Config.set_tbl_hide_dtype_separator": [[22, "polars-config-set-tbl-hide-dtype-separator"]], "polars.UInt8": [[62, "polars-uint8"]], "polars.Series.tan": [[987, "polars-series-tan"]], "polars.Series.str.to_decimal": [[972, "polars-series-str-to-decimal"]], "polars.Series.str.to_lowercase": [[973, "polars-series-str-to-lowercase"]], "polars.Series.sum": [[983, "polars-series-sum"]], "polars.Series.str.encode": [[947, "polars-series-str-encode"]], "polars.Series.str.split_exact": [[965, "polars-series-str-split-exact"]], "polars.Series.to_dummies": [[991, "polars-series-to-dummies"]], "polars.Series.set_sorted": [[927, "polars-series-set-sorted"]], "polars.Series.struct.unnest": [[982, "polars-series-struct-unnest"]], "polars.Series.std": [[941, "polars-series-std"]], "polars.Series.str.to_date": [[970, "polars-series-str-to-date"]], "polars.Series.str.decode": [[946, "polars-series-str-decode"]], "polars.Series.str.to_titlecase": [[975, "polars-series-str-to-titlecase"]], "polars.Series.sign": [[934, "polars-series-sign"]], "polars.Series.str.split": [[964, "polars-series-str-split"]], "polars.Series.tail": [[984, "polars-series-tail"]], "polars.Series.str.to_datetime": [[971, "polars-series-str-to-datetime"]], "polars.Series.set_at_idx": [[926, "polars-series-set-at-idx"]], "polars.Series.set": [[925, "polars-series-set"]], "polars.Series.str.json_extract": [[952, "polars-series-str-json-extract"]], "polars.Series.shrink_to_fit": [[932, "polars-series-shrink-to-fit"]], "polars.Series.skew": [[937, "polars-series-skew"]], "polars.Series.str.contains": [[944, "polars-series-str-contains"]], "polars.Series.struct.schema": [[981, "polars-series-struct-schema"]], "polars.Series.str.to_time": [[974, "polars-series-str-to-time"]], "polars.Series.str.to_uppercase": [[976, "polars-series-str-to-uppercase"]], "polars.Series.str.n_chars": [[957, "polars-series-str-n-chars"]], "polars.Series.str.parse_int": [[958, "polars-series-str-parse-int"]], "polars.Series.shift": [[929, "polars-series-shift"]], "polars.Series.shuffle": [[933, "polars-series-shuffle"]], "polars.Series.sort": [[939, "polars-series-sort"]], "polars.Series.shape": [[928, "polars-series-shape"]], "polars.Series.tanh": [[988, "polars-series-tanh"]], "polars.Series.str.rstrip": [[962, "polars-series-str-rstrip"]], "polars.Series.str.ends_with": [[948, "polars-series-str-ends-with"]], "polars.Series.str.strip": [[968, "polars-series-str-strip"]], "polars.Series.str.replace": [[959, "polars-series-str-replace"]], "polars.Series.str": [[942, "polars-series-str"]], "polars.Series.str.count_match": [[945, "polars-series-str-count-match"]], "polars.Series.str.zfill": [[977, "polars-series-str-zfill"]], "polars.Series.str.extract_all": [[951, "polars-series-str-extract-all"]], "polars.Series.time_unit": [[989, "polars-series-time-unit"]], "polars.Series.shrink_dtype": [[931, "polars-series-shrink-dtype"]], "polars.Series.to_frame": [[992, "polars-series-to-frame"]], "polars.Series.struct.field": [[978, "polars-series-struct-field"]], "polars.Series.str.json_path_match": [[953, "polars-series-str-json-path-match"]], "polars.Series.str.concat": [[943, "polars-series-str-concat"]], "polars.Series.to_arrow": [[990, "polars-series-to-arrow"]], "polars.Series.search_sorted": [[923, "polars-series-search-sorted"]], "polars.Series.shift_and_fill": [[930, "polars-series-shift-and-fill"]], "polars.Series.struct.fields": [[979, "polars-series-struct-fields"]], "polars.Series.str.lengths": [[954, "polars-series-str-lengths"]], "polars.Series.take": [[985, "polars-series-take"]], "polars.Series.series_equal": [[924, "polars-series-series-equal"]], "polars.Series.to_init_repr": [[993, "polars-series-to-init-repr"]], "polars.Series.sin": [[935, "polars-series-sin"]], "polars.Series.str.slice": [[963, "polars-series-str-slice"]], "polars.Series.str.starts_with": [[967, "polars-series-str-starts-with"]], "polars.Series.struct.rename_fields": [[980, "polars-series-struct-rename-fields"]], "polars.Series.str.rjust": [[961, "polars-series-str-rjust"]], "polars.Series.str.ljust": [[955, "polars-series-str-ljust"]], "polars.Series.take_every": [[986, "polars-series-take-every"]], "polars.Series.sqrt": [[940, "polars-series-sqrt"]], "polars.Series.str.splitn": [[966, "polars-series-str-splitn"]], "polars.Series.str.lstrip": [[956, "polars-series-str-lstrip"]], "polars.Series.str.replace_all": [[960, "polars-series-str-replace-all"]], "polars.Series.slice": [[938, "polars-series-slice"]], "polars.Series.str.strptime": [[969, "polars-series-str-strptime"]], "polars.Series.str.explode": [[949, "polars-series-str-explode"]], "polars.Series.str.extract": [[950, "polars-series-str-extract"]], "polars.Series.sinh": [[936, "polars-series-sinh"]], "polars.Series.peak_min": [[901, "polars-series-peak-min"]], "polars.Series.peak_max": [[900, "polars-series-peak-max"]], "polars.Series.null_count": [[898, "polars-series-null-count"]], "polars.Series.list.last": [[867, "polars-series-list-last"]], "polars.Series.list.lengths": [[868, "polars-series-list-lengths"]], "polars.Series.qcut": [[903, "polars-series-qcut"]], "polars.Series.round": [[921, "polars-series-round"]], "polars.Series.list.sort": [[875, "polars-series-list-sort"]], "polars.Series.rolling_std": [[918, "polars-series-rolling-std"]], "polars.Series.mode": [[891, "polars-series-mode"]], "polars.Series.nan_min": [[896, "polars-series-nan-min"]], "polars.Series.rolling_sum": [[919, "polars-series-rolling-sum"]], "polars.Series.list.difference": [[859, "polars-series-list-difference"]], "polars.Series.new_from_index": [[897, "polars-series-new-from-index"]], "polars.Series.list.sum": [[876, "polars-series-list-sum"]], "polars.Series.list.reverse": [[872, "polars-series-list-reverse"]], "polars.Series.rolling_median": [[914, "polars-series-rolling-median"]], "polars.Series.list.concat": [[855, "polars-series-list-concat"]], "polars.Series.min": [[890, "polars-series-min"]], "polars.Series.rolling_quantile": [[916, "polars-series-rolling-quantile"]], "polars.Series.list.get": [[863, "polars-series-list-get"]], "polars.Series.rechunk": [[906, "polars-series-rechunk"]], "polars.Series.list.slice": [[874, "polars-series-list-slice"]], "polars.Series.list.to_struct": [[879, "polars-series-list-to-struct"]], "polars.Series.list.head": [[864, "polars-series-list-head"]], "polars.Series.list.take": [[878, "polars-series-list-take"]], "polars.Series.list.arg_max": [[853, "polars-series-list-arg-max"]], "polars.Series.list.first": [[862, "polars-series-list-first"]], "polars.Series.max": [[887, "polars-series-max"]], "polars.Series.mean": [[888, "polars-series-mean"]], "polars.Series.n_chunks": [[892, "polars-series-n-chunks"]], "polars.Series.nan_max": [[895, "polars-series-nan-max"]], "polars.Series.list.arg_min": [[854, "polars-series-list-arg-min"]], "polars.Series.product": [[902, "polars-series-product"]], "polars.Series.list.unique": [[881, "polars-series-list-unique"]], "polars.Series.list.explode": [[861, "polars-series-list-explode"]], "polars.Series.list.mean": [[870, "polars-series-list-mean"]], "polars.Series.median": [[889, "polars-series-median"]], "polars.Series.reinterpret": [[907, "polars-series-reinterpret"]], "polars.Series.sample": [[922, "polars-series-sample"]], "polars.Series.list.union": [[880, "polars-series-list-union"]], "polars.Series.quantile": [[904, "polars-series-quantile"]], "polars.Series.log1p": [[884, "polars-series-log1p"]], "polars.Series.rank": [[905, "polars-series-rank"]], "polars.Series.rolling_max": [[912, "polars-series-rolling-max"]], "polars.Series.list.intersection": [[865, "polars-series-list-intersection"]], "polars.Series.list.tail": [[877, "polars-series-list-tail"]], "polars.Series.log": [[882, "polars-series-log"]], "polars.Series.rolling_mean": [[913, "polars-series-rolling-mean"]], "polars.Series.rolling_apply": [[911, "polars-series-rolling-apply"]], "polars.Series.map_dict": [[886, "polars-series-map-dict"]], "polars.Series.rolling_min": [[915, "polars-series-rolling-min"]], "polars.Series.name": [[894, "polars-series-name"]], "polars.Series.reverse": [[910, "polars-series-reverse"]], "polars.Series.rolling_skew": [[917, "polars-series-rolling-skew"]], "polars.Series.list.min": [[871, "polars-series-list-min"]], "polars.Series.n_unique": [[893, "polars-series-n-unique"]], "polars.Series.list.contains": [[856, "polars-series-list-contains"]], "polars.Series.rename": [[908, "polars-series-rename"]], "polars.Series.list.shift": [[873, "polars-series-list-shift"]], "polars.Series.list.join": [[866, "polars-series-list-join"]], "polars.Series.list.eval": [[860, "polars-series-list-eval"]], "polars.Series.list.max": [[869, "polars-series-list-max"]], "polars.Series.list": [[852, "polars-series-list"]], "polars.Series.reshape": [[909, "polars-series-reshape"]], "polars.Series.lower_bound": [[885, "polars-series-lower-bound"]], "polars.Series.rolling_var": [[920, "polars-series-rolling-var"]], "polars.Series.list.diff": [[858, "polars-series-list-diff"]], "polars.Series.log10": [[883, "polars-series-log10"]], "polars.Series.list.count_match": [[857, "polars-series-list-count-match"]], "polars.Series.pct_change": [[899, "polars-series-pct-change"]], "polars.Series.ewm_mean": [[810, "polars-series-ewm-mean"]], "polars.Series.estimated_size": [[809, "polars-series-estimated-size"]], "polars.Series.ewm_var": [[812, "polars-series-ewm-var"]], "polars.Series.dt.millisecond": [[781, "polars-series-dt-millisecond"]], "polars.Series.entropy": [[808, "polars-series-entropy"]], "polars.Series.is_finite": [[833, "polars-series-is-finite"]], "polars.Series.fill_nan": [[816, "polars-series-fill-nan"]], "polars.Series.fill_null": [[817, "polars-series-fill-null"]], "polars.Series.has_validity": [[822, "polars-series-has-validity"]], "polars.Series.dt.nanosecond": [[789, "polars-series-dt-nanosecond"]], "polars.Series.dt.to_string": [[801, "polars-series-dt-to-string"]], "polars.Series.dt.truncate": [[802, "polars-series-dt-truncate"]], "polars.Series.is_sorted": [[844, "polars-series-is-sorted"]], "polars.Series.is_temporal": [[845, "polars-series-is-temporal"]], "polars.Series.exp": [[813, "polars-series-exp"]], "polars.Series.limit": [[851, "polars-series-limit"]], "polars.Series.dt.week": [[803, "polars-series-dt-week"]], "polars.Series.extend_constant": [[815, "polars-series-extend-constant"]], "polars.Series.is_infinite": [[837, "polars-series-is-infinite"]], "polars.Series.dt.round": [[795, "polars-series-dt-round"]], "polars.Series.ewm_std": [[811, "polars-series-ewm-std"]], "polars.Series.is_unique": [[846, "polars-series-is-unique"]], "polars.Series.dt.second": [[796, "polars-series-dt-second"]], "polars.Series.dt.minute": [[784, "polars-series-dt-minute"]], "polars.Series.dt.month_start": [[788, "polars-series-dt-month-start"]], "polars.Series.dt.weekday": [[804, "polars-series-dt-weekday"]], "polars.Series.inner_dtype": [[827, "polars-series-inner-dtype"]], "polars.Series.is_boolean": [[830, "polars-series-is-boolean"]], "polars.Series.dt.quarter": [[793, "polars-series-dt-quarter"]], "polars.Series.is_first": [[834, "polars-series-is-first"]], "polars.Series.is_between": [[829, "polars-series-is-between"]], "polars.Series.dt.timestamp": [[800, "polars-series-dt-timestamp"]], "polars.Series.dt.with_time_unit": [[805, "polars-series-dt-with-time-unit"]], "polars.Series.dtype": [[807, "polars-series-dtype"]], "polars.Series.dt.year": [[806, "polars-series-dt-year"]], "polars.Series.is_utf8": [[847, "polars-series-is-utf8"]], "polars.Series.len": [[850, "polars-series-len"]], "polars.Series.item": [[848, "polars-series-item"]], "polars.Series.dt.replace_time_zone": [[794, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.offset_by": [[791, "polars-series-dt-offset-by"]], "polars.Series.get_chunks": [[821, "polars-series-get-chunks"]], "polars.Series.explode": [[814, "polars-series-explode"]], "polars.Series.floor": [[820, "polars-series-floor"]], "polars.Series.implode": [[826, "polars-series-implode"]], "polars.Series.is_empty": [[832, "polars-series-is-empty"]], "polars.Series.is_in": [[836, "polars-series-is-in"]], "polars.Series.is_numeric": [[843, "polars-series-is-numeric"]], "polars.Series.dt.month_end": [[787, "polars-series-dt-month-end"]], "polars.Series.kurtosis": [[849, "polars-series-kurtosis"]], "polars.Series.dt.seconds": [[797, "polars-series-dt-seconds"]], "polars.Series.hist": [[825, "polars-series-hist"]], "polars.Series.head": [[824, "polars-series-head"]], "polars.Series.is_float": [[835, "polars-series-is-float"]], "polars.Series.dt.min": [[783, "polars-series-dt-min"]], "polars.Series.dt.month": [[786, "polars-series-dt-month"]], "polars.Series.hash": [[823, "polars-series-hash"]], "polars.Series.flags": [[819, "polars-series-flags"]], "polars.Series.is_duplicated": [[831, "polars-series-is-duplicated"]], "polars.Series.dt.time": [[799, "polars-series-dt-time"]], "polars.Series.dt.milliseconds": [[782, "polars-series-dt-milliseconds"]], "polars.Series.is_integer": [[838, "polars-series-is-integer"]], "polars.Series.is_nan": [[839, "polars-series-is-nan"]], "polars.Series.interpolate": [[828, "polars-series-interpolate"]], "polars.Series.is_not_nan": [[840, "polars-series-is-not-nan"]], "polars.Series.is_null": [[842, "polars-series-is-null"]], "polars.Series.filter": [[818, "polars-series-filter"]], "polars.Series.dt.ordinal_day": [[792, "polars-series-dt-ordinal-day"]], "polars.Series.dt.nanoseconds": [[790, "polars-series-dt-nanoseconds"]], "polars.Series.dt.minutes": [[785, "polars-series-dt-minutes"]], "polars.Series.is_not_null": [[841, "polars-series-is-not-null"]], "polars.Series.dt.strftime": [[798, "polars-series-dt-strftime"]], "polars.Series.unique_counts": [[1000, "polars-series-unique-counts"]], "Descriptive": [[1012, "descriptive"], [706, "descriptive"], [252, "descriptive"]], "Array": [[1006, "array"], [603, "array"]], "polars.Series.to_pandas": [[996, "polars-series-to-pandas"]], "Categories": [[1010, "categories"], [606, "categories"]], "polars.Series.zip_with": [[1005, "polars-series-zip-with"]], "polars.Series.view": [[1004, "polars-series-view"]], "Attributes": [[1007, "attributes"], [705, "attributes"], [250, "attributes"]], "polars.Series.to_physical": [[997, "polars-series-to-physical"]], "String": [[1018, "string"], [616, "string"]], "Miscellaneous": [[1016, "miscellaneous"], [709, "miscellaneous"], [613, "miscellaneous"], [620, "miscellaneous"], [256, "miscellaneous"]], "Utils": [[1023, "utils"]], "Manipulation/selection": [[1017, "manipulation-selection"], [710, "manipulation-selection"], [614, "manipulation-selection"], [257, "manipulation-selection"]], "polars.Series.top_k": [[998, "polars-series-top-k"]], "Export": [[1013, "export"], [253, "export"]], "Computation": [[1011, "computation"], [608, "computation"], [251, "computation"]], "Series": [[1014, "series"]], "List": [[1015, "list"], [611, "list"]], "polars.Series.to_list": [[994, "polars-series-to-list"]], "polars.Series.upper_bound": [[1001, "polars-series-upper-bound"]], "polars.Series.var": [[1003, "polars-series-var"]], "Testing": [[1022, "testing"]], "Asserts": [[1022, "asserts"]], "Parametric testing": [[1022, "parametric-testing"]], "Polars primitives": [[1022, "polars-primitives"]], "Strategy helpers": [[1022, "strategy-helpers"]], "Profiles": [[1022, "profiles"]], "SQL": [[1021, "sql"]], "Methods": [[1021, "methods"]], "Temporal": [[1020, "temporal"], [618, "temporal"], [258, "temporal"]], "Binary": [[1008, "binary"], [604, "binary"], [615, "binary"]], "polars.Series.to_numpy": [[995, "polars-series-to-numpy"]], "polars.Series.value_counts": [[1002, "polars-series-value-counts"]], "Boolean": [[1009, "boolean"], [605, "boolean"]], "Struct": [[1019, "struct"], [617, "struct"]], "polars.Series.unique": [[999, "polars-series-unique"]], "polars.Series.arcsin": [[721, "polars-series-arcsin"]], "polars.Series.cosh": [[751, "polars-series-cosh"]], "polars.Series.abs": [[713, "polars-series-abs"]], "polars.Series.dt.combine": [[765, "polars-series-dt-combine"]], "polars.Series.clip_min": [[748, "polars-series-clip-min"]], "polars.Series.bin.encode": [[736, "polars-series-bin-encode"]], "polars.Series.alias": [[714, "polars-series-alias"]], "polars.Series.arg_min": [[726, "polars-series-arg-min"]], "polars.Series.arg_unique": [[729, "polars-series-arg-unique"]], "polars.Series.arctanh": [[724, "polars-series-arctanh"]], "polars.Series.cos": [[750, "polars-series-cos"]], "polars.Series.arg_true": [[728, "polars-series-arg-true"]], "polars.Series.clear": [[745, "polars-series-clear"]], "polars.Series.arctan": [[723, "polars-series-arctan"]], "Selectors": [[711, "selectors"]], "Importing": [[711, "importing"]], "Set operations": [[711, "set-operations"]], "Functions": [[711, "functions"], [609, "functions"], [620, "functions"]], "polars.Series.chunk_lengths": [[744, "polars-series-chunk-lengths"]], "polars.Series.arccosh": [[720, "polars-series-arccosh"]], "polars.Series.dot": [[760, "polars-series-dot"]], "polars.Series.clone": [[749, "polars-series-clone"]], "polars.Series.cumprod": [[754, "polars-series-cumprod"]], "polars.Series.drop_nans": [[761, "polars-series-drop-nans"]], "polars.Series.dt.date": [[767, "polars-series-dt-date"]], "polars.Series.cat": [[741, "polars-series-cat"]], "polars.Series.diff": [[759, "polars-series-diff"]], "polars.Series.apply": [[718, "polars-series-apply"]], "polars.Series.dt.is_leap_year": [[774, "polars-series-dt-is-leap-year"]], "polars.Series.arr.min": [[731, "polars-series-arr-min"]], "polars.Series.bin.ends_with": [[737, "polars-series-bin-ends-with"]], "polars.Series.arg_sort": [[727, "polars-series-arg-sort"]], "polars.Series.arccos": [[719, "polars-series-arccos"]], "polars.Series.bottom_k": [[739, "polars-series-bottom-k"]], "polars.Series.dt.mean": [[777, "polars-series-dt-mean"]], "polars.Series.dt.microsecond": [[779, "polars-series-dt-microsecond"]], "polars.Series.append": [[717, "polars-series-append"]], "polars.Series.arg_max": [[725, "polars-series-arg-max"]], "polars.Series.dt.max": [[776, "polars-series-dt-max"]], "polars.Series.dt.hour": [[772, "polars-series-dt-hour"]], "polars.Series.dt.epoch": [[771, "polars-series-dt-epoch"]], "polars.Series.dt.median": [[778, "polars-series-dt-median"]], "polars.Series.cummax": [[752, "polars-series-cummax"]], "polars.Series.dt.convert_time_zone": [[766, "polars-series-dt-convert-time-zone"]], "polars.Series.clip_max": [[747, "polars-series-clip-max"]], "polars.Series.cut": [[757, "polars-series-cut"]], "polars.Series.describe": [[758, "polars-series-describe"]], "polars.Series.dt.microseconds": [[780, "polars-series-dt-microseconds"]], "polars.Series.cumulative_eval": [[756, "polars-series-cumulative-eval"]], "polars.Series.arr.unique": [[733, "polars-series-arr-unique"]], "polars.Series.cast": [[740, "polars-series-cast"]], "polars.Series.bin.decode": [[735, "polars-series-bin-decode"]], "polars.Series.ceil": [[743, "polars-series-ceil"]], "polars.Series.cummin": [[753, "polars-series-cummin"]], "polars.Series.arr.max": [[730, "polars-series-arr-max"]], "polars.Series.dt.days": [[770, "polars-series-dt-days"]], "polars.Series.any": [[716, "polars-series-any"]], "polars.Series.arr.sum": [[732, "polars-series-arr-sum"]], "polars.Series.bin.starts_with": [[738, "polars-series-bin-starts-with"]], "polars.Series.drop_nulls": [[762, "polars-series-drop-nulls"]], "polars.Series.dt": [[763, "polars-series-dt"]], "polars.Series.dt.hours": [[773, "polars-series-dt-hours"]], "polars.Series.all": [[715, "polars-series-all"]], "polars.Series.dt.datetime": [[768, "polars-series-dt-datetime"]], "polars.Series.bin.contains": [[734, "polars-series-bin-contains"]], "polars.Series.clip": [[746, "polars-series-clip"]], "polars.Series.cat.set_ordering": [[742, "polars-series-cat-set-ordering"]], "polars.Series.dt.cast_time_unit": [[764, "polars-series-dt-cast-time-unit"]], "polars.Series.cumsum": [[755, "polars-series-cumsum"]], "polars.Series.dt.iso_year": [[775, "polars-series-dt-iso-year"]], "polars.Series.arcsinh": [[722, "polars-series-arcsinh"]], "polars.Series.dt.day": [[769, "polars-series-dt-day"]], "polars.lazyframe.groupby.LazyGroupBy.first": [[694, "polars-lazyframe-groupby-lazygroupby-first"]], "polars.LazyFrame.profile": [[661, "polars-lazyframe-profile"]], "polars.lazyframe.groupby.LazyGroupBy.count": [[693, "polars-lazyframe-groupby-lazygroupby-count"]], "GroupBy": [[707, "groupby"], [254, "groupby"]], "polars.LazyFrame.shift_and_fill": [[670, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.merge_sorted": [[657, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.sink_ipc": [[672, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.show_graph": [[671, "polars-lazyframe-show-graph"]], "polars.LazyFrame.read_json": [[663, "polars-lazyframe-read-json"]], "polars.LazyFrame.schema": [[666, "polars-lazyframe-schema"]], "polars.LazyFrame.groupby_dynamic": [[642, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.std": [[676, "polars-lazyframe-std"]], "polars.LazyFrame.with_columns": [[686, "polars-lazyframe-with-columns"]], "polars.lazyframe.groupby.LazyGroupBy.median": [[699, "polars-lazyframe-groupby-lazygroupby-median"]], "polars.LazyFrame.update": [[683, "polars-lazyframe-update"]], "polars.lazyframe.groupby.LazyGroupBy.last": [[696, "polars-lazyframe-groupby-lazygroupby-last"]], "polars.LazyFrame.sink_parquet": [[673, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.rename": [[664, "polars-lazyframe-rename"]], "polars.LazyFrame.median": [[655, "polars-lazyframe-median"]], "polars.LazyFrame.reverse": [[665, "polars-lazyframe-reverse"]], "polars.LazyFrame.top_k": [[680, "polars-lazyframe-top-k"]], "polars.lazyframe.groupby.LazyGroupBy.mean": [[698, "polars-lazyframe-groupby-lazygroupby-mean"]], "polars.LazyFrame.join": [[647, "polars-lazyframe-join"]], "polars.LazyFrame.sum": [[677, "polars-lazyframe-sum"]], "polars.LazyFrame.join_asof": [[648, "polars-lazyframe-join-asof"]], "polars.LazyFrame.width": [[685, "polars-lazyframe-width"]], "polars.LazyFrame.pipe": [[660, "polars-lazyframe-pipe"]], "polars.LazyFrame.limit": [[651, "polars-lazyframe-limit"]], "polars.LazyFrame.last": [[649, "polars-lazyframe-last"]], "polars.LazyFrame.quantile": [[662, "polars-lazyframe-quantile"]], "polars.LazyFrame.unnest": [[682, "polars-lazyframe-unnest"]], "polars.LazyFrame.sort": [[675, "polars-lazyframe-sort"]], "polars.lazyframe.groupby.LazyGroupBy.min": [[700, "polars-lazyframe-groupby-lazygroupby-min"]], "polars.LazyFrame.melt": [[656, "polars-lazyframe-melt"]], "polars.LazyFrame.head": [[644, "polars-lazyframe-head"]], "polars.LazyFrame.shift": [[669, "polars-lazyframe-shift"]], "polars.LazyFrame.take_every": [[679, "polars-lazyframe-take-every"]], "polars.lazyframe.groupby.LazyGroupBy.max": [[697, "polars-lazyframe-groupby-lazygroupby-max"]], "LazyFrame": [[708, "lazyframe"]], "polars.lazyframe.groupby.LazyGroupBy.n_unique": [[701, "polars-lazyframe-groupby-lazygroupby-n-unique"]], "polars.LazyFrame.inspect": [[645, "polars-lazyframe-inspect"]], "polars.lazyframe.groupby.LazyGroupBy.apply": [[692, "polars-lazyframe-groupby-lazygroupby-apply"]], "polars.lazyframe.groupby.LazyGroupBy.sum": [[703, "polars-lazyframe-groupby-lazygroupby-sum"]], "polars.LazyFrame.tail": [[678, "polars-lazyframe-tail"]], "polars.LazyFrame.interpolate": [[646, "polars-lazyframe-interpolate"]], "polars.LazyFrame.first": [[639, "polars-lazyframe-first"]], "polars.LazyFrame.with_row_count": [[688, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.mean": [[654, "polars-lazyframe-mean"]], "polars.LazyFrame.groupby_rolling": [[643, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.min": [[658, "polars-lazyframe-min"]], "polars.LazyFrame.null_count": [[659, "polars-lazyframe-null-count"]], "polars.lazyframe.groupby.LazyGroupBy.tail": [[704, "polars-lazyframe-groupby-lazygroupby-tail"]], "polars.LazyFrame.lazy": [[650, "polars-lazyframe-lazy"]], "polars.LazyFrame.max": [[653, "polars-lazyframe-max"]], "polars.LazyFrame.groupby": [[641, "polars-lazyframe-groupby"]], "polars.LazyFrame.from_json": [[640, "polars-lazyframe-from-json"]], "polars.LazyFrame.select": [[667, "polars-lazyframe-select"]], "polars.LazyFrame.set_sorted": [[668, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.var": [[684, "polars-lazyframe-var"]], "polars.LazyFrame.map": [[652, "polars-lazyframe-map"]], "polars.lazyframe.groupby.LazyGroupBy.agg": [[690, "polars-lazyframe-groupby-lazygroupby-agg"]], "polars.LazyFrame.slice": [[674, "polars-lazyframe-slice"]], "polars.lazyframe.groupby.LazyGroupBy.all": [[691, "polars-lazyframe-groupby-lazygroupby-all"]], "polars.lazyframe.groupby.LazyGroupBy.quantile": [[702, "polars-lazyframe-groupby-lazygroupby-quantile"]], "polars.lazyframe.groupby.LazyGroupBy.head": [[695, "polars-lazyframe-groupby-lazygroupby-head"]], "Read/write logical plan": [[709, "read-write-logical-plan"]], "polars.LazyFrame.with_context": [[687, "polars-lazyframe-with-context"]], "polars.LazyFrame.write_json": [[689, "polars-lazyframe-write-json"]], "polars.LazyFrame.unique": [[681, "polars-lazyframe-unique"]], "polars.Expr.str.rjust": [[516, "polars-expr-str-rjust"]], "polars.col": [[561, "polars-col"]], "polars.Expr.str.lstrip": [[511, "polars-expr-str-lstrip"]], "polars.cumfold": [[567, "polars-cumfold"]], "polars.count": [[565, "polars-count"]], "polars.Expr.str.json_extract": [[507, "polars-expr-str-json-extract"]], "polars.Expr.str.replace": [[514, "polars-expr-str-replace"]], "polars.Expr.suffix": [[536, "polars-expr-suffix"]], "polars.arg_sort_by": [[558, "polars-arg-sort-by"]], "polars.Expr.str.json_path_match": [[508, "polars-expr-str-json-path-match"]], "polars.Expr.str.splitn": [[521, "polars-expr-str-splitn"]], "polars.Expr.str.split": [[519, "polars-expr-str-split"]], "polars.Expr.var": [[550, "polars-expr-var"]], "polars.Expr.str.slice": [[518, "polars-expr-str-slice"]], "polars.Expr.where": [[551, "polars-expr-where"]], "polars.Expr.value_counts": [[549, "polars-expr-value-counts"]], "polars.Expr.str.strptime": [[524, "polars-expr-str-strptime"]], "polars.Expr.tail": [[538, "polars-expr-tail"]], "polars.Expr.to_physical": [[543, "polars-expr-to-physical"]], "polars.approx_unique": [[556, "polars-approx-unique"]], "polars.Expr.str.replace_all": [[515, "polars-expr-str-replace-all"]], "polars.Expr.str.rstrip": [[517, "polars-expr-str-rstrip"]], "polars.Expr.truediv": [[545, "polars-expr-truediv"]], "polars.Expr.sum": [[537, "polars-expr-sum"]], "polars.coalesce": [[560, "polars-coalesce"]], "polars.Expr.str.strip": [[523, "polars-expr-str-strip"]], "polars.Expr.upper_bound": [[548, "polars-expr-upper-bound"]], "polars.Expr.std": [[497, "polars-expr-std"]], "polars.Expr.str.parse_int": [[513, "polars-expr-str-parse-int"]], "polars.Expr.str.to_lowercase": [[528, "polars-expr-str-to-lowercase"]], "polars.Expr.struct.rename_fields": [[534, "polars-expr-struct-rename-fields"]], "polars.arange": [[557, "polars-arange"]], "polars.Expr.str.encode": [[502, "polars-expr-str-encode"]], "polars.Expr.sub": [[535, "polars-expr-sub"]], "polars.Expr.str.explode": [[504, "polars-expr-str-explode"]], "polars.all": [[553, "polars-all"]], "polars.Expr.str.extract_all": [[506, "polars-expr-str-extract-all"]], "polars.Expr.str.extract": [[505, "polars-expr-str-extract"]], "polars.Expr.str.lengths": [[509, "polars-expr-str-lengths"]], "polars.Expr.str.to_datetime": [[526, "polars-expr-str-to-datetime"]], "polars.cov": [[566, "polars-cov"]], "polars.Expr.str.contains": [[499, "polars-expr-str-contains"]], "polars.Expr.str.to_time": [[529, "polars-expr-str-to-time"]], "polars.Expr.unique_counts": [[547, "polars-expr-unique-counts"]], "polars.Expr.xor": [[552, "polars-expr-xor"]], "polars.any": [[554, "polars-any"]], "polars.Expr.str.split_exact": [[520, "polars-expr-str-split-exact"]], "polars.Expr.str.to_uppercase": [[531, "polars-expr-str-to-uppercase"]], "polars.Expr.top_k": [[544, "polars-expr-top-k"]], "polars.Expr.str.decode": [[501, "polars-expr-str-decode"]], "polars.Expr.str.to_titlecase": [[530, "polars-expr-str-to-titlecase"]], "polars.Expr.str.starts_with": [[522, "polars-expr-str-starts-with"]], "polars.apply": [[555, "polars-apply"]], "polars.Expr.str.count_match": [[500, "polars-expr-str-count-match"]], "polars.Expr.take_every": [[540, "polars-expr-take-every"]], "polars.avg": [[559, "polars-avg"]], "polars.concat_list": [[562, "polars-concat-list"]], "polars.Expr.str.concat": [[498, "polars-expr-str-concat"]], "polars.Expr.str.to_date": [[525, "polars-expr-str-to-date"]], "polars.Expr.take": [[539, "polars-expr-take"]], "polars.Expr.tanh": [[542, "polars-expr-tanh"]], "polars.Expr.tan": [[541, "polars-expr-tan"]], "polars.Expr.str.to_decimal": [[527, "polars-expr-str-to-decimal"]], "polars.concat_str": [[563, "polars-concat-str"]], "polars.Expr.unique": [[546, "polars-expr-unique"]], "polars.Expr.str.zfill": [[532, "polars-expr-str-zfill"]], "polars.Expr.struct.field": [[533, "polars-expr-struct-field"]], "polars.Expr.str.ljust": [[510, "polars-expr-str-ljust"]], "polars.corr": [[564, "polars-corr"]], "polars.Expr.str.ends_with": [[503, "polars-expr-str-ends-with"]], "polars.Expr.str.n_chars": [[512, "polars-expr-str-n-chars"]], "polars.Expr.rolling_median": [[474, "polars-expr-rolling-median"]], "polars.Expr.pow": [[460, "polars-expr-pow"]], "polars.Expr.radians": [[464, "polars-expr-radians"]], "polars.Expr.null_count": [[455, "polars-expr-null-count"]], "polars.Expr.round": [[481, "polars-expr-round"]], "polars.Expr.or_": [[456, "polars-expr-or"]], "polars.Expr.sort": [[494, "polars-expr-sort"]], "polars.Expr.lower_bound": [[429, "polars-expr-lower-bound"]], "polars.Expr.rank": [[465, "polars-expr-rank"]], "polars.Expr.rolling_std": [[478, "polars-expr-rolling-std"]], "polars.Expr.set_sorted": [[484, "polars-expr-set-sorted"]], "polars.Expr.map": [[431, "polars-expr-map"]], "polars.Expr.quantile": [[463, "polars-expr-quantile"]], "polars.Expr.rolling_skew": [[477, "polars-expr-rolling-skew"]], "polars.Expr.mod": [[447, "polars-expr-mod"]], "polars.Expr.sin": [[490, "polars-expr-sin"]], "polars.Expr.mode": [[448, "polars-expr-mode"]], "polars.Expr.rolling_mean": [[473, "polars-expr-rolling-mean"]], "polars.Expr.log1p": [[428, "polars-expr-log1p"]], "polars.Expr.reinterpret": [[467, "polars-expr-reinterpret"]], "polars.Expr.meta.is_regex_projection": [[439, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.undo_aliases": [[444, "polars-expr-meta-undo-aliases"]], "polars.Expr.repeat_by": [[468, "polars-expr-repeat-by"]], "polars.Expr.rolling_quantile": [[476, "polars-expr-rolling-quantile"]], "polars.Expr.sort_by": [[495, "polars-expr-sort-by"]], "polars.Expr.log10": [[427, "polars-expr-log10"]], "polars.Expr.pct_change": [[458, "polars-expr-pct-change"]], "polars.Expr.rolling_apply": [[471, "polars-expr-rolling-apply"]], "polars.Expr.shrink_dtype": [[487, "polars-expr-shrink-dtype"]], "polars.Expr.reverse": [[470, "polars-expr-reverse"]], "polars.Expr.sign": [[489, "polars-expr-sign"]], "polars.Expr.meta.ne": [[440, "polars-expr-meta-ne"]], "polars.Expr.meta.output_name": [[441, "polars-expr-meta-output-name"]], "polars.Expr.shuffle": [[488, "polars-expr-shuffle"]], "polars.Expr.meta.has_multiple_outputs": [[438, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.n_unique": [[450, "polars-expr-n-unique"]], "polars.Expr.map_dict": [[433, "polars-expr-map-dict"]], "polars.Expr.search_sorted": [[483, "polars-expr-search-sorted"]], "polars.Expr.shift_and_fill": [[486, "polars-expr-shift-and-fill"]], "polars.Expr.min": [[446, "polars-expr-min"]], "polars.Expr.map_alias": [[432, "polars-expr-map-alias"]], "polars.Expr.ne_missing": [[454, "polars-expr-ne-missing"]], "polars.Expr.meta.pop": [[442, "polars-expr-meta-pop"]], "polars.Expr.nan_max": [[451, "polars-expr-nan-max"]], "polars.Expr.rolling_var": [[480, "polars-expr-rolling-var"]], "polars.Expr.sample": [[482, "polars-expr-sample"]], "polars.Expr.meta.write_json": [[445, "polars-expr-meta-write-json"]], "polars.Expr.product": [[462, "polars-expr-product"]], "polars.Expr.ne": [[453, "polars-expr-ne"]], "polars.Expr.pipe": [[459, "polars-expr-pipe"]], "polars.Expr.sinh": [[491, "polars-expr-sinh"]], "polars.Expr.slice": [[493, "polars-expr-slice"]], "polars.Expr.meta.root_names": [[443, "polars-expr-meta-root-names"]], "polars.Expr.skew": [[492, "polars-expr-skew"]], "polars.Expr.rolling_sum": [[479, "polars-expr-rolling-sum"]], "polars.Expr.log": [[426, "polars-expr-log"]], "polars.Expr.median": [[436, "polars-expr-median"]], "polars.Expr.lt": [[430, "polars-expr-lt"]], "polars.Expr.nan_min": [[452, "polars-expr-nan-min"]], "polars.Expr.rechunk": [[466, "polars-expr-rechunk"]], "polars.Expr.rolling_max": [[472, "polars-expr-rolling-max"]], "polars.Expr.over": [[457, "polars-expr-over"]], "polars.Expr.rolling_min": [[475, "polars-expr-rolling-min"]], "polars.Expr.max": [[434, "polars-expr-max"]], "polars.Expr.sqrt": [[496, "polars-expr-sqrt"]], "polars.Expr.shift": [[485, "polars-expr-shift"]], "polars.Expr.reshape": [[469, "polars-expr-reshape"]], "polars.Expr.mul": [[449, "polars-expr-mul"]], "polars.Expr.mean": [[435, "polars-expr-mean"]], "polars.Expr.prefix": [[461, "polars-expr-prefix"]], "polars.Expr.meta.eq": [[437, "polars-expr-meta-eq"]], "polars.Expr.last": [[393, "polars-expr-last"]], "polars.Expr.limit": [[396, "polars-expr-limit"]], "polars.Expr.floor": [[368, "polars-expr-floor"]], "polars.Expr.implode": [[376, "polars-expr-implode"]], "polars.Expr.list.contains": [[400, "polars-expr-list-contains"]], "polars.Expr.list.reverse": [[416, "polars-expr-list-reverse"]], "polars.Expr.kurtosis": [[392, "polars-expr-kurtosis"]], "polars.Expr.head": [[375, "polars-expr-head"]], "polars.Expr.list.to_struct": [[423, "polars-expr-list-to-struct"]], "polars.Expr.is_unique": [[390, "polars-expr-is-unique"]], "polars.Expr.list.eval": [[404, "polars-expr-list-eval"]], "polars.Expr.is_between": [[379, "polars-expr-is-between"]], "polars.Expr.from_json": [[371, "polars-expr-from-json"]], "polars.Expr.list.sum": [[420, "polars-expr-list-sum"]], "polars.Expr.list.shift": [[417, "polars-expr-list-shift"]], "polars.Expr.explode": [[361, "polars-expr-explode"]], "polars.Expr.is_not": [[386, "polars-expr-is-not"]], "polars.Expr.is_infinite": [[384, "polars-expr-is-infinite"]], "polars.Expr.inspect": [[377, "polars-expr-inspect"]], "polars.Expr.is_not_null": [[388, "polars-expr-is-not-null"]], "polars.Expr.list.union": [[424, "polars-expr-list-union"]], "polars.Expr.first": [[366, "polars-expr-first"]], "polars.Expr.list.mean": [[414, "polars-expr-list-mean"]], "polars.Expr.fill_nan": [[363, "polars-expr-fill-nan"]], "polars.Expr.list.difference": [[403, "polars-expr-list-difference"]], "polars.Expr.keep_name": [[391, "polars-expr-keep-name"]], "polars.Expr.list.explode": [[405, "polars-expr-list-explode"]], "polars.Expr.exclude": [[359, "polars-expr-exclude"]], "polars.Expr.eq_missing": [[355, "polars-expr-eq-missing"]], "polars.Expr.interpolate": [[378, "polars-expr-interpolate"]], "polars.Expr.is_null": [[389, "polars-expr-is-null"]], "polars.Expr.list.max": [[413, "polars-expr-list-max"]], "polars.Expr.is_not_nan": [[387, "polars-expr-is-not-nan"]], "polars.Expr.len": [[395, "polars-expr-len"]], "polars.Expr.list.arg_min": [[398, "polars-expr-list-arg-min"]], "polars.Expr.extend_constant": [[362, "polars-expr-extend-constant"]], "polars.Expr.list.head": [[408, "polars-expr-list-head"]], "polars.Expr.filter": [[365, "polars-expr-filter"]], "polars.Expr.le": [[394, "polars-expr-le"]], "polars.Expr.list.diff": [[402, "polars-expr-list-diff"]], "polars.Expr.list.first": [[406, "polars-expr-list-first"]], "polars.Expr.list.join": [[410, "polars-expr-list-join"]], "polars.Expr.list.count_match": [[401, "polars-expr-list-count-match"]], "polars.Expr.is_nan": [[385, "polars-expr-is-nan"]], "polars.Expr.gt": [[373, "polars-expr-gt"]], "polars.Expr.ewm_mean": [[356, "polars-expr-ewm-mean"]], "polars.Expr.is_finite": [[381, "polars-expr-is-finite"]], "polars.Expr.list.concat": [[399, "polars-expr-list-concat"]], "polars.Expr.list.min": [[415, "polars-expr-list-min"]], "polars.Expr.list.unique": [[425, "polars-expr-list-unique"]], "polars.Expr.is_duplicated": [[380, "polars-expr-is-duplicated"]], "polars.Expr.exp": [[360, "polars-expr-exp"]], "polars.Expr.list.get": [[407, "polars-expr-list-get"]], "polars.Expr.floordiv": [[369, "polars-expr-floordiv"]], "polars.Expr.fill_null": [[364, "polars-expr-fill-null"]], "polars.Expr.is_in": [[383, "polars-expr-is-in"]], "polars.Expr.list.lengths": [[412, "polars-expr-list-lengths"]], "polars.Expr.is_first": [[382, "polars-expr-is-first"]], "polars.Expr.ewm_var": [[358, "polars-expr-ewm-var"]], "polars.Expr.list.take": [[422, "polars-expr-list-take"]], "polars.Expr.list.arg_max": [[397, "polars-expr-list-arg-max"]], "polars.Expr.flatten": [[367, "polars-expr-flatten"]], "polars.Expr.list.intersection": [[409, "polars-expr-list-intersection"]], "polars.Expr.list.last": [[411, "polars-expr-list-last"]], "polars.Expr.hash": [[374, "polars-expr-hash"]], "polars.Expr.ge": [[372, "polars-expr-ge"]], "polars.Expr.forward_fill": [[370, "polars-expr-forward-fill"]], "polars.Expr.list.sort": [[419, "polars-expr-list-sort"]], "polars.Expr.list.slice": [[418, "polars-expr-list-slice"]], "polars.Expr.ewm_std": [[357, "polars-expr-ewm-std"]], "polars.Expr.list.tail": [[421, "polars-expr-list-tail"]], "polars.LazyFrame.fill_nan": [[636, "polars-lazyframe-fill-nan"]], "polars.map": [[583, "polars-map"]], "polars.n_unique": [[588, "polars-n-unique"]], "polars.LazyFrame.explain": [[633, "polars-lazyframe-explain"]], "polars.LazyFrame.fill_null": [[637, "polars-lazyframe-fill-null"]], "polars.LazyFrame.fetch": [[635, "polars-lazyframe-fetch"]], "polars.head": [[580, "polars-head"]], "polars.from_epoch": [[578, "polars-from-epoch"]], "polars.tail": [[599, "polars-tail"]], "polars.cumsum": [[569, "polars-cumsum"]], "polars.std": [[596, "polars-std"]], "polars.date": [[570, "polars-date"]], "polars.sum": [[598, "polars-sum"]], "polars.var": [[601, "polars-var"]], "polars.LazyFrame.collect": [[628, "polars-lazyframe-collect"]], "polars.reduce": [[590, "polars-reduce"]], "Operators": [[615, "operators"]], "Conjunction": [[615, "conjunction"]], "Comparison": [[615, "comparison"]], "Numeric": [[615, "numeric"], [258, "numeric"]], "polars.LazyFrame.clone": [[627, "polars-lazyframe-clone"]], "polars.groups": [[579, "polars-groups"]], "Window": [[619, "window"]], "polars.first": [[575, "polars-first"]], "polars.when": [[602, "polars-when"]], "polars.LazyFrame.drop": [[630, "polars-lazyframe-drop"]], "polars.cumreduce": [[568, "polars-cumreduce"]], "polars.lit": [[582, "polars-lit"]], "polars.time": [[600, "polars-time"]], "Meta": [[612, "meta"]], "Input/output": [[622, "input-output"]], "CSV": [[622, "csv"]], "Feather/ IPC": [[622, "feather-ipc"]], "Parquet": [[622, "parquet"]], "Database": [[622, "database"]], "JSON": [[622, "json"]], "AVRO": [[622, "avro"]], "Excel": [[622, "excel"]], "Delta Lake": [[622, "delta-lake"]], "Datasets": [[622, "datasets"]], "BatchedCsvReader": [[622, "batchedcsvreader"]], "polars.rolling_corr": [[592, "polars-rolling-corr"]], "polars.median": [[586, "polars-median"]], "API reference": [[621, "api-reference"]], "polars.LazyFrame.drop_nulls": [[631, "polars-lazyframe-drop-nulls"]], "polars.exclude": [[574, "polars-exclude"]], "polars.mean": [[585, "polars-mean"]], "polars.min": [[587, "polars-min"]], "polars.LazyFrame.bottom_k": [[624, "polars-lazyframe-bottom-k"]], "polars.datetime": [[571, "polars-datetime"]], "polars.repeat": [[591, "polars-repeat"]], "Columns / names": [[607, "columns-names"]], "polars.duration": [[572, "polars-duration"]], "polars.implode": [[581, "polars-implode"]], "polars.LazyFrame.dtypes": [[632, "polars-lazyframe-dtypes"]], "polars.LazyFrame.columns": [[629, "polars-lazyframe-columns"]], "polars.LazyFrame.explode": [[634, "polars-lazyframe-explode"]], "polars.element": [[573, "polars-element"]], "polars.LazyFrame.cache": [[625, "polars-lazyframe-cache"]], "polars.struct": [[597, "polars-struct"]], "Expressions": [[610, "expressions"]], "polars.select": [[594, "polars-select"]], "polars.format": [[577, "polars-format"]], "polars.LazyFrame.clear": [[626, "polars-lazyframe-clear"]], "polars.rolling_cov": [[593, "polars-rolling-cov"]], "polars.LazyFrame.filter": [[638, "polars-lazyframe-filter"]], "polars.fold": [[576, "polars-fold"]], "Conversion": [[620, "conversion"]], "Eager/Lazy functions": [[620, "eager-lazy-functions"]], "Parallelization": [[620, "parallelization"]], "StringCache": [[620, "stringcache"]], "polars.quantile": [[589, "polars-quantile"]], "polars.sql_expr": [[595, "polars-sql-expr"]], "polars.max": [[584, "polars-max"]], "polars.Expr.bin.decode": [[288, "polars-expr-bin-decode"]], "polars.Expr.bin.encode": [[289, "polars-expr-bin-encode"]], "polars.Expr.bin.ends_with": [[290, "polars-expr-bin-ends-with"]], "polars.Expr.dt.datetime": [[318, "polars-expr-dt-datetime"]], "polars.Expr.cosh": [[301, "polars-expr-cosh"]], "polars.Expr.cos": [[300, "polars-expr-cos"]], "polars.Expr.cumulative_eval": [[308, "polars-expr-cumulative-eval"]], "polars.Expr.dt.to_string": [[347, "polars-expr-dt-to-string"]], "polars.Expr.dt.is_leap_year": [[324, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.ordinal_day": [[338, "polars-expr-dt-ordinal-day"]], "polars.Expr.bin.contains": [[287, "polars-expr-bin-contains"]], "polars.Expr.cummin": [[305, "polars-expr-cummin"]], "polars.Expr.dt.with_time_unit": [[351, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.microsecond": [[326, "polars-expr-dt-microsecond"]], "polars.Expr.dt.minute": [[330, "polars-expr-dt-minute"]], "polars.Expr.dt.month_end": [[333, "polars-expr-dt-month-end"]], "polars.Expr.dot": [[311, "polars-expr-dot"]], "polars.Expr.dt.second": [[342, "polars-expr-dt-second"]], "polars.Expr.dt.month": [[332, "polars-expr-dt-month"]], "polars.Expr.cast": [[294, "polars-expr-cast"]], "polars.Expr.dt.truncate": [[348, "polars-expr-dt-truncate"]], "polars.Expr.dt.epoch": [[321, "polars-expr-dt-epoch"]], "polars.Expr.clip": [[297, "polars-expr-clip"]], "polars.Expr.dt.hours": [[323, "polars-expr-dt-hours"]], "polars.Expr.backward_fill": [[286, "polars-expr-backward-fill"]], "polars.Expr.dt.nanoseconds": [[336, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.sum": [[284, "polars-expr-arr-sum"]], "polars.Expr.dt.date": [[317, "polars-expr-dt-date"]], "polars.Expr.dt.seconds": [[343, "polars-expr-dt-seconds"]], "polars.Expr.cummax": [[304, "polars-expr-cummax"]], "polars.Expr.dt.cast_time_unit": [[314, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cumsum": [[307, "polars-expr-cumsum"]], "polars.Expr.dt.month_start": [[334, "polars-expr-dt-month-start"]], "polars.Expr.dt.year": [[352, "polars-expr-dt-year"]], "polars.Expr.dt.round": [[341, "polars-expr-dt-round"]], "polars.Expr.count": [[302, "polars-expr-count"]], "polars.Expr.dt.combine": [[315, "polars-expr-dt-combine"]], "polars.Expr.entropy": [[353, "polars-expr-entropy"]], "polars.Expr.dt.quarter": [[339, "polars-expr-dt-quarter"]], "polars.Expr.degrees": [[309, "polars-expr-degrees"]], "polars.Expr.clip_min": [[299, "polars-expr-clip-min"]], "polars.Expr.dt.day": [[319, "polars-expr-dt-day"]], "polars.Expr.dt.offset_by": [[337, "polars-expr-dt-offset-by"]], "polars.Expr.bottom_k": [[292, "polars-expr-bottom-k"]], "polars.Expr.ceil": [[296, "polars-expr-ceil"]], "polars.Expr.drop_nulls": [[313, "polars-expr-drop-nulls"]], "polars.Expr.dt.milliseconds": [[329, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.minutes": [[331, "polars-expr-dt-minutes"]], "polars.Expr.clip_max": [[298, "polars-expr-clip-max"]], "polars.Expr.cumprod": [[306, "polars-expr-cumprod"]], "polars.Expr.dt.hour": [[322, "polars-expr-dt-hour"]], "polars.Expr.dt.nanosecond": [[335, "polars-expr-dt-nanosecond"]], "polars.Expr.arr.unique": [[285, "polars-expr-arr-unique"]], "polars.Expr.diff": [[310, "polars-expr-diff"]], "polars.Expr.dt.week": [[349, "polars-expr-dt-week"]], "polars.Expr.dt.convert_time_zone": [[316, "polars-expr-dt-convert-time-zone"]], "polars.Expr.cumcount": [[303, "polars-expr-cumcount"]], "polars.Expr.drop_nans": [[312, "polars-expr-drop-nans"]], "polars.Expr.cat.set_ordering": [[295, "polars-expr-cat-set-ordering"]], "polars.Expr.cache": [[293, "polars-expr-cache"]], "polars.Expr.dt.strftime": [[344, "polars-expr-dt-strftime"]], "polars.Expr.dt.iso_year": [[325, "polars-expr-dt-iso-year"]], "polars.Expr.eq": [[354, "polars-expr-eq"]], "polars.Expr.dt.millisecond": [[328, "polars-expr-dt-millisecond"]], "polars.Expr.dt.microseconds": [[327, "polars-expr-dt-microseconds"]], "polars.Expr.dt.time": [[345, "polars-expr-dt-time"]], "polars.Expr.dt.timestamp": [[346, "polars-expr-dt-timestamp"]], "polars.Expr.dt.replace_time_zone": [[340, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.weekday": [[350, "polars-expr-dt-weekday"]], "polars.Expr.dt.days": [[320, "polars-expr-dt-days"]], "polars.Expr.bin.starts_with": [[291, "polars-expr-bin-starts-with"]], "polars.DataFrame.pivot": [[189, "polars-dataframe-pivot"]], "polars.DataFrame.replace_at_idx": [[195, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.join": [[174, "polars-dataframe-join"]], "polars.DataFrame.head": [[163, "polars-dataframe-head"]], "polars.DataFrame.shift": [[204, "polars-dataframe-shift"]], "polars.DataFrame.pipe": [[188, "polars-dataframe-pipe"]], "polars.DataFrame.is_unique": [[170, "polars-dataframe-is-unique"]], "polars.DataFrame.quantile": [[191, "polars-dataframe-quantile"]], "polars.DataFrame.merge_sorted": [[182, "polars-dataframe-merge-sorted"]], "polars.DataFrame.describe": [[142, "polars-dataframe-describe"]], "polars.DataFrame.drop_nulls": [[145, "polars-dataframe-drop-nulls"]], "polars.DataFrame.iter_rows": [[172, "polars-dataframe-iter-rows"]], "polars.DataFrame.std": [[209, "polars-dataframe-std"]], "polars.DataFrame.tail": [[211, "polars-dataframe-tail"]], "polars.DataFrame.get_column": [[156, "polars-dataframe-get-column"]], "polars.DataFrame.is_empty": [[169, "polars-dataframe-is-empty"]], "polars.DataFrame.n_unique": [[185, "polars-dataframe-n-unique"]], "polars.DataFrame.fold": [[154, "polars-dataframe-fold"]], "polars.DataFrame.iter_slices": [[173, "polars-dataframe-iter-slices"]], "polars.DataFrame.drop": [[143, "polars-dataframe-drop"]], "polars.DataFrame.frame_equal": [[155, "polars-dataframe-frame-equal"]], "polars.DataFrame.groupby_dynamic": [[160, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.glimpse": [[158, "polars-dataframe-glimpse"]], "polars.DataFrame.join_asof": [[175, "polars-dataframe-join-asof"]], "polars.DataFrame.limit": [[177, "polars-dataframe-limit"]], "polars.DataFrame.rows": [[198, "polars-dataframe-rows"]], "polars.DataFrame.sum": [[210, "polars-dataframe-sum"]], "polars.DataFrame.rename": [[193, "polars-dataframe-rename"]], "polars.DataFrame.set_sorted": [[202, "polars-dataframe-set-sorted"]], "polars.DataFrame.min": [[183, "polars-dataframe-min"]], "polars.DataFrame.insert_at_idx": [[166, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.slice": [[207, "polars-dataframe-slice"]], "polars.DataFrame.melt": [[181, "polars-dataframe-melt"]], "polars.DataFrame.null_count": [[186, "polars-dataframe-null-count"]], "polars.DataFrame.partition_by": [[187, "polars-dataframe-partition-by"]], "polars.DataFrame.fill_nan": [[150, "polars-dataframe-fill-nan"]], "polars.DataFrame.rechunk": [[192, "polars-dataframe-rechunk"]], "polars.DataFrame.hash_rows": [[162, "polars-dataframe-hash-rows"]], "polars.DataFrame.interpolate": [[167, "polars-dataframe-interpolate"]], "polars.DataFrame.drop_in_place": [[144, "polars-dataframe-drop-in-place"]], "polars.DataFrame.median": [[180, "polars-dataframe-median"]], "polars.DataFrame.groupby": [[159, "polars-dataframe-groupby"]], "polars.DataFrame.row": [[197, "polars-dataframe-row"]], "polars.DataFrame.sort": [[208, "polars-dataframe-sort"]], "polars.DataFrame.shrink_to_fit": [[206, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.reverse": [[196, "polars-dataframe-reverse"]], "polars.DataFrame.extend": [[149, "polars-dataframe-extend"]], "polars.DataFrame.max": [[178, "polars-dataframe-max"]], "polars.DataFrame.sample": [[199, "polars-dataframe-sample"]], "polars.DataFrame.fill_null": [[151, "polars-dataframe-fill-null"]], "polars.DataFrame.take_every": [[212, "polars-dataframe-take-every"]], "polars.DataFrame.get_columns": [[157, "polars-dataframe-get-columns"]], "polars.DataFrame.hstack": [[165, "polars-dataframe-hstack"]], "polars.DataFrame.mean": [[179, "polars-dataframe-mean"]], "polars.DataFrame.filter": [[152, "polars-dataframe-filter"]], "polars.DataFrame.n_chunks": [[184, "polars-dataframe-n-chunks"]], "polars.DataFrame.product": [[190, "polars-dataframe-product"]], "polars.DataFrame.dtypes": [[146, "polars-dataframe-dtypes"]], "polars.DataFrame.groupby_rolling": [[161, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.find_idx_by_name": [[153, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.explode": [[148, "polars-dataframe-explode"]], "polars.DataFrame.height": [[164, "polars-dataframe-height"]], "polars.DataFrame.is_duplicated": [[168, "polars-dataframe-is-duplicated"]], "polars.DataFrame.lazy": [[176, "polars-dataframe-lazy"]], "polars.DataFrame.select": [[201, "polars-dataframe-select"]], "polars.DataFrame.replace": [[194, "polars-dataframe-replace"]], "polars.DataFrame.item": [[171, "polars-dataframe-item"]], "polars.DataFrame.schema": [[200, "polars-dataframe-schema"]], "polars.DataFrame.shift_and_fill": [[205, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.estimated_size": [[147, "polars-dataframe-estimated-size"]], "polars.DataFrame.shape": [[203, "polars-dataframe-shape"]], "polars.DataFrame.with_columns": [[232, "polars-dataframe-with-columns"]], "polars.dataframe.groupby.GroupBy.head": [[240, "polars-dataframe-groupby-groupby-head"]], "polars.Expr.any": [[267, "polars-expr-any"]], "Exceptions": [[259, "exceptions"]], "polars.Expr.all": [[265, "polars-expr-all"]], "polars.dataframe.groupby.GroupBy.first": [[239, "polars-dataframe-groupby-groupby-first"]], "polars.Expr.arg_sort": [[279, "polars-expr-arg-sort"]], "polars.Expr.arg_true": [[280, "polars-expr-arg-true"]], "polars.Expr.arr.min": [[283, "polars-expr-arr-min"]], "polars.dataframe.groupby.GroupBy.all": [[236, "polars-dataframe-groupby-groupby-all"]], "polars.dataframe.groupby.GroupBy.median": [[244, "polars-dataframe-groupby-groupby-median"]], "polars.DataFrame.upsample": [[228, "polars-dataframe-upsample"]], "polars.DataFrame.to_pandas": [[219, "polars-dataframe-to-pandas"]], "polars.Expr.arccosh": [[272, "polars-expr-arccosh"]], "polars.DataFrame.unique": [[224, "polars-dataframe-unique"]], "polars.Expr.alias": [[264, "polars-expr-alias"]], "polars.DataFrame.transpose": [[223, "polars-dataframe-transpose"]], "polars.Expr.approx_unique": [[270, "polars-expr-approx-unique"]], "polars.Expr.agg_groups": [[263, "polars-expr-agg-groups"]], "Data types": [[258, "data-types"]], "Nested": [[258, "nested"]], "Other": [[258, "other"]], "polars.dataframe.groupby.GroupBy.count": [[238, "polars-dataframe-groupby-groupby-count"]], "polars.Expr.arg_unique": [[281, "polars-expr-arg-unique"]], "polars.Expr.arctanh": [[276, "polars-expr-arctanh"]], "polars.Expr.add": [[262, "polars-expr-add"]], "polars.dataframe.groupby.GroupBy.agg": [[235, "polars-dataframe-groupby-groupby-agg"]], "polars.dataframe.groupby.GroupBy.min": [[245, "polars-dataframe-groupby-groupby-min"]], "polars.Expr.arctan": [[275, "polars-expr-arctan"]], "polars.DataFrame.var": [[229, "polars-dataframe-var"]], "polars.DataFrame.to_numpy": [[218, "polars-dataframe-to-numpy"]], "polars.Expr.arccos": [[271, "polars-expr-arccos"]], "polars.Expr.arg_max": [[277, "polars-expr-arg-max"]], "polars.DataFrame.update": [[227, "polars-dataframe-update"]], "polars.dataframe.groupby.GroupBy.n_unique": [[246, "polars-dataframe-groupby-groupby-n-unique"]], "polars.Expr.abs": [[261, "polars-expr-abs"]], "DataFrame": [[255, "dataframe"]], "polars.Expr.arcsinh": [[274, "polars-expr-arcsinh"]], "polars.Expr.and_": [[266, "polars-expr-and"]], "polars.DataFrame.width": [[231, "polars-dataframe-width"]], "polars.Expr.arr.max": [[282, "polars-expr-arr-max"]], "polars.DataFrame.to_series": [[220, "polars-dataframe-to-series"]], "polars.DataFrame.top_k": [[222, "polars-dataframe-top-k"]], "polars.DataFrame.to_dicts": [[215, "polars-dataframe-to-dicts"]], "polars.DataFrame.vstack": [[230, "polars-dataframe-vstack"]], "polars.DataFrame.unnest": [[225, "polars-dataframe-unnest"]], "polars.Expr.append": [[268, "polars-expr-append"]], "polars.Expr.arg_min": [[278, "polars-expr-arg-min"]], "polars.DataFrame.to_dict": [[214, "polars-dataframe-to-dict"]], "polars.dataframe.groupby.GroupBy.last": [[241, "polars-dataframe-groupby-groupby-last"]], "polars.dataframe.groupby.GroupBy.tail": [[249, "polars-dataframe-groupby-groupby-tail"]], "polars.dataframe.groupby.GroupBy.apply": [[237, "polars-dataframe-groupby-groupby-apply"]], "polars.dataframe.groupby.GroupBy.mean": [[243, "polars-dataframe-groupby-groupby-mean"]], "polars.DataFrame.unstack": [[226, "polars-dataframe-unstack"]], "polars.dataframe.groupby.GroupBy.max": [[242, "polars-dataframe-groupby-groupby-max"]], "polars.Expr.apply": [[269, "polars-expr-apply"]], "polars.DataFrame.to_dummies": [[216, "polars-dataframe-to-dummies"]], "polars.DataFrame.to_arrow": [[213, "polars-dataframe-to-arrow"]], "polars.DataFrame.to_init_repr": [[217, "polars-dataframe-to-init-repr"]], "polars.dataframe.groupby.GroupBy.sum": [[248, "polars-dataframe-groupby-groupby-sum"]], "polars.Expr.arcsin": [[273, "polars-expr-arcsin"]], "polars.DataFrame.with_row_count": [[233, "polars-dataframe-with-row-count"]], "polars.dataframe.groupby.GroupBy.quantile": [[247, "polars-dataframe-groupby-groupby-quantile"]], "polars.dataframe.groupby.GroupBy.__iter__": [[234, "polars-dataframe-groupby-groupby-iter"]], "polars.DataFrame.to_struct": [[221, "polars-dataframe-to-struct"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[8, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[9, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[10, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths"]], "set_streaming_chunk_size() (polars.config class method)": [[13, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[14, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[15, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[16, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[17, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[18, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[20, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[23, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[24, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[25, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[26, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[27, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[28, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[29, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[30, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[31, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[32, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[33, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[34, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[35, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[36, "polars.DataType"]], "__init__() (polars.datatype method)": [[36, "polars.DataType.__init__"]], "date (class in polars)": [[37, "polars.Date"]], "__init__() (polars.date method)": [[37, "polars.Date.__init__"]], "datetime (class in polars)": [[38, "polars.Datetime"]], "__init__() (polars.datetime method)": [[38, "polars.Datetime.__init__"]], "decimal (class in polars)": [[39, "polars.Decimal"]], "__init__() (polars.decimal method)": [[39, "polars.Decimal.__init__"]], "duration (class in polars)": [[40, "polars.Duration"]], "__init__() (polars.duration method)": [[40, "polars.Duration.__init__"]], "float32 (class in polars)": [[41, "polars.Float32"]], "__init__() (polars.float32 method)": [[41, "polars.Float32.__init__"]], "float64 (class in polars)": [[42, "polars.Float64"]], "__init__() (polars.float64 method)": [[42, "polars.Float64.__init__"]], "int16 (class in polars)": [[43, "polars.Int16"]], "__init__() (polars.int16 method)": [[43, "polars.Int16.__init__"]], "int32 (class in polars)": [[44, "polars.Int32"]], "__init__() (polars.int32 method)": [[44, "polars.Int32.__init__"]], "int64 (class in polars)": [[45, "polars.Int64"]], "__init__() (polars.int64 method)": [[45, "polars.Int64.__init__"]], "int8 (class in polars)": [[46, "polars.Int8"]], "__init__() (polars.int8 method)": [[46, "polars.Int8.__init__"]], "list (class in polars)": [[47, "polars.List"]], "__init__() (polars.list method)": [[47, "polars.List.__init__"]], "null (class in polars)": [[48, "polars.Null"]], "__init__() (polars.null method)": [[48, "polars.Null.__init__"]], "object (class in polars)": [[49, "polars.Object"]], "__init__() (polars.object method)": [[49, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[50, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[51, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[52, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[53, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[54, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[55, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[56, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[56, "polars.StringCache.__init__"]], "struct (class in polars)": [[57, "polars.Struct"]], "__init__() (polars.struct method)": [[57, "polars.Struct.__init__"]], "time (class in polars)": [[58, "polars.Time"]], "__init__() (polars.time method)": [[58, "polars.Time.__init__"]], "uint16 (class in polars)": [[59, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[59, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[60, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[60, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[61, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[61, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[62, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[62, "polars.UInt8.__init__"]], "unknown (class in polars)": [[63, "polars.Unknown"]], "__init__() (polars.unknown method)": [[63, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[64, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[64, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[65, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[66, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[67, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[68, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[69, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[70, "polars.arg_where"]], "build_info() (in module polars)": [[71, "polars.build_info"]], "collect_all() (in module polars)": [[72, "polars.collect_all"]], "concat() (in module polars)": [[73, "polars.concat"]], "date_range() (in module polars)": [[74, "polars.date_range"]], "enable_string_cache() (in module polars)": [[75, "polars.enable_string_cache"]], "arrowerror": [[76, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[77, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[78, "polars.exceptions.ComputeError"]], "duplicateerror": [[79, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[80, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[81, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[82, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[83, "polars.exceptions.PolarsPanicError"]], "rowserror": [[84, "polars.exceptions.RowsError"]], "schemaerror": [[85, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[86, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[87, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[88, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[89, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[90, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[91, "polars.from_dataframe"]], "from_dict() (in module polars)": [[92, "polars.from_dict"]], "from_dicts() (in module polars)": [[93, "polars.from_dicts"]], "from_numpy() (in module polars)": [[94, "polars.from_numpy"]], "from_pandas() (in module polars)": [[95, "polars.from_pandas"]], "from_records() (in module polars)": [[96, "polars.from_records"]], "from_repr() (in module polars)": [[97, "polars.from_repr"]], "get_index_type() (in module polars)": [[98, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[99, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[100, "polars.ones"]], "read_avro() (in module polars)": [[101, "polars.read_avro"]], "read_csv() (in module polars)": [[102, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[103, "polars.read_csv_batched"]], "read_database() (in module polars)": [[104, "polars.read_database"]], "read_delta() (in module polars)": [[105, "polars.read_delta"]], "read_excel() (in module polars)": [[106, "polars.read_excel"]], "read_ipc() (in module polars)": [[107, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[108, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[109, "polars.read_json"]], "read_ndjson() (in module polars)": [[110, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[111, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[112, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[113, "polars.scan_csv"]], "scan_delta() (in module polars)": [[114, "polars.scan_delta"]], "scan_ipc() (in module polars)": [[115, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[116, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[117, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[118, "polars.scan_pyarrow_dataset"]], "show_versions() (in module polars)": [[119, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[120, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[121, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[122, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[122, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[123, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[124, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[125, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[126, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[127, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[128, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[129, "polars.threadpool_size"]], "time_range() (in module polars)": [[130, "polars.time_range"]], "using_string_cache() (in module polars)": [[131, "polars.using_string_cache"]], "zeros() (in module polars)": [[132, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[135, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[136, "polars.DataFrame.apply"]], "bottom_k() (polars.dataframe method)": [[137, "polars.DataFrame.bottom_k"]], "clear() (polars.dataframe method)": [[138, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[139, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[140, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[141, "polars.DataFrame.corr"]], "describe() (polars.dataframe method)": [[142, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[143, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[144, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[145, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[146, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[147, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[148, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[149, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[150, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[151, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[152, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[153, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[154, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[155, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[156, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[157, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[158, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[159, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[160, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[161, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[162, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[163, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[164, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[165, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[166, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[167, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[168, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[169, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[170, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[171, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[172, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[173, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[174, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[175, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[176, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[177, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[178, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[179, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[180, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[181, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[182, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[183, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[184, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[185, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[186, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[187, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[188, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[189, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[190, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[191, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[192, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[193, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[194, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[195, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[196, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[197, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[198, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[199, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[200, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[201, "polars.DataFrame.select"]], "set_sorted() (polars.dataframe method)": [[202, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[203, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[204, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[205, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[206, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[207, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[208, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[209, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[210, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[211, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[212, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[213, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[214, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[215, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[216, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[217, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[218, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[219, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[220, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[221, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[222, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[223, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[224, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[225, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[226, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[227, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[228, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[229, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[230, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[231, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[232, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[233, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.groupby.groupby method)": [[234, "polars.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.dataframe.groupby.groupby method)": [[235, "polars.dataframe.groupby.GroupBy.agg"]], "all() (polars.dataframe.groupby.groupby method)": [[236, "polars.dataframe.groupby.GroupBy.all"]], "apply() (polars.dataframe.groupby.groupby method)": [[237, "polars.dataframe.groupby.GroupBy.apply"]], "count() (polars.dataframe.groupby.groupby method)": [[238, "polars.dataframe.groupby.GroupBy.count"]], "first() (polars.dataframe.groupby.groupby method)": [[239, "polars.dataframe.groupby.GroupBy.first"]], "head() (polars.dataframe.groupby.groupby method)": [[240, "polars.dataframe.groupby.GroupBy.head"]], "last() (polars.dataframe.groupby.groupby method)": [[241, "polars.dataframe.groupby.GroupBy.last"]], "max() (polars.dataframe.groupby.groupby method)": [[242, "polars.dataframe.groupby.GroupBy.max"]], "mean() (polars.dataframe.groupby.groupby method)": [[243, "polars.dataframe.groupby.GroupBy.mean"]], "median() (polars.dataframe.groupby.groupby method)": [[244, "polars.dataframe.groupby.GroupBy.median"]], "min() (polars.dataframe.groupby.groupby method)": [[245, "polars.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.dataframe.groupby.groupby method)": [[246, "polars.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.dataframe.groupby.groupby method)": [[247, "polars.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.dataframe.groupby.groupby method)": [[248, "polars.dataframe.groupby.GroupBy.sum"]], "tail() (polars.dataframe.groupby.groupby method)": [[249, "polars.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[261, "polars.Expr.abs"]], "add() (polars.expr method)": [[262, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[263, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[264, "polars.Expr.alias"]], "all() (polars.expr method)": [[265, "polars.Expr.all"]], "and_() (polars.expr method)": [[266, "polars.Expr.and_"]], "any() (polars.expr method)": [[267, "polars.Expr.any"]], "append() (polars.expr method)": [[268, "polars.Expr.append"]], "apply() (polars.expr method)": [[269, "polars.Expr.apply"]], "approx_unique() (polars.expr method)": [[270, "polars.Expr.approx_unique"]], "arccos() (polars.expr method)": [[271, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[272, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[273, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[274, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[275, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[276, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[277, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[278, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[279, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[280, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[281, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[282, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[283, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[284, "polars.Expr.arr.sum"]], "unique() (polars.expr.arr method)": [[285, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[286, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[287, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[288, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[289, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[292, "polars.Expr.bottom_k"]], "cache() (polars.expr method)": [[293, "polars.Expr.cache"]], "cast() (polars.expr method)": [[294, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[295, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[296, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[297, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[298, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[299, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[300, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[301, "polars.Expr.cosh"]], "count() (polars.expr method)": [[302, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[303, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[304, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[305, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[306, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[307, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[308, "polars.Expr.cumulative_eval"]], "degrees() (polars.expr method)": [[309, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[310, "polars.Expr.diff"]], "dot() (polars.expr method)": [[311, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[312, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[313, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[314, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[315, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[316, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[317, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[318, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[319, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[320, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[321, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[322, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[323, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[324, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[325, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[328, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[329, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[330, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[331, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[332, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[333, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[334, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[335, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[336, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[337, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[338, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[339, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[340, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[341, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[342, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[343, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[344, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[345, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[346, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[347, "polars.Expr.dt.to_string"]], "truncate() (polars.expr.dt method)": [[348, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[349, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[350, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[351, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[352, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[353, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[354, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[355, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[356, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[357, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[358, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[359, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[360, "polars.Expr.exp"]], "explode() (polars.expr method)": [[361, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[362, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[363, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[364, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[365, "polars.Expr.filter"]], "first() (polars.expr method)": [[366, "polars.Expr.first"]], "flatten() (polars.expr method)": [[367, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[368, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[369, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[370, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[371, "polars.Expr.from_json"]], "ge() (polars.expr method)": [[372, "polars.Expr.ge"]], "gt() (polars.expr method)": [[373, "polars.Expr.gt"]], "hash() (polars.expr method)": [[374, "polars.Expr.hash"]], "head() (polars.expr method)": [[375, "polars.Expr.head"]], "implode() (polars.expr method)": [[376, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[377, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[378, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[379, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[380, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[381, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[382, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[383, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[384, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[385, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[386, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[387, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[388, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[389, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[390, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[391, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[392, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[393, "polars.Expr.last"]], "le() (polars.expr method)": [[394, "polars.Expr.le"]], "len() (polars.expr method)": [[395, "polars.Expr.len"]], "limit() (polars.expr method)": [[396, "polars.Expr.limit"]], "arg_max() (polars.expr.list method)": [[397, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[398, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[399, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[400, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[401, "polars.Expr.list.count_match"]], "diff() (polars.expr.list method)": [[402, "polars.Expr.list.diff"]], "difference() (polars.expr.list method)": [[403, "polars.Expr.list.difference"]], "eval() (polars.expr.list method)": [[404, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[405, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[406, "polars.Expr.list.first"]], "get() (polars.expr.list method)": [[407, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[408, "polars.Expr.list.head"]], "intersection() (polars.expr.list method)": [[409, "polars.Expr.list.intersection"]], "join() (polars.expr.list method)": [[410, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[411, "polars.Expr.list.last"]], "lengths() (polars.expr.list method)": [[412, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[413, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[414, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[415, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[416, "polars.Expr.list.reverse"]], "shift() (polars.expr.list method)": [[417, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[418, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[419, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[420, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[421, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[422, "polars.Expr.list.take"]], "to_struct() (polars.expr.list method)": [[423, "polars.Expr.list.to_struct"]], "union() (polars.expr.list method)": [[424, "polars.Expr.list.union"]], "unique() (polars.expr.list method)": [[425, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[426, "polars.Expr.log"]], "log10() (polars.expr method)": [[427, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[428, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[429, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[430, "polars.Expr.lt"]], "map() (polars.expr method)": [[431, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[432, "polars.Expr.map_alias"]], "map_dict() (polars.expr method)": [[433, "polars.Expr.map_dict"]], "max() (polars.expr method)": [[434, "polars.Expr.max"]], "mean() (polars.expr method)": [[435, "polars.Expr.mean"]], "median() (polars.expr method)": [[436, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[437, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[438, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[439, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[440, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[441, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[442, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[443, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[444, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[445, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[446, "polars.Expr.min"]], "mod() (polars.expr method)": [[447, "polars.Expr.mod"]], "mode() (polars.expr method)": [[448, "polars.Expr.mode"]], "mul() (polars.expr method)": [[449, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[450, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[451, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[452, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[453, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[454, "polars.Expr.ne_missing"]], "null_count() (polars.expr method)": [[455, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[456, "polars.Expr.or_"]], "over() (polars.expr method)": [[457, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[458, "polars.Expr.pct_change"]], "pipe() (polars.expr method)": [[459, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[460, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[461, "polars.Expr.prefix"]], "product() (polars.expr method)": [[462, "polars.Expr.product"]], "quantile() (polars.expr method)": [[463, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[464, "polars.Expr.radians"]], "rank() (polars.expr method)": [[465, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[466, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[467, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[468, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[469, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[470, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[471, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[472, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[473, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[474, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[475, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[476, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[477, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[478, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[479, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[480, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[481, "polars.Expr.round"]], "sample() (polars.expr method)": [[482, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[483, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[484, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[485, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[486, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[487, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[488, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[489, "polars.Expr.sign"]], "sin() (polars.expr method)": [[490, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[491, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[492, "polars.Expr.skew"]], "slice() (polars.expr method)": [[493, "polars.Expr.slice"]], "sort() (polars.expr method)": [[494, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[495, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[496, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[497, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[498, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[499, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[500, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[501, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[502, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[503, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[504, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[505, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[506, "polars.Expr.str.extract_all"]], "json_extract() (polars.expr.str method)": [[507, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[508, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[509, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[510, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[511, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[512, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[513, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[514, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[515, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[516, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[517, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[518, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[519, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[520, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[521, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[522, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[523, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[524, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[525, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[526, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[527, "polars.Expr.str.to_decimal"]], "to_lowercase() (polars.expr.str method)": [[528, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[529, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[530, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[531, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[532, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[533, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[534, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[535, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[536, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[537, "polars.Expr.sum"]], "tail() (polars.expr method)": [[538, "polars.Expr.tail"]], "take() (polars.expr method)": [[539, "polars.Expr.take"]], "take_every() (polars.expr method)": [[540, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[541, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[542, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[543, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[544, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[545, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[546, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[547, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[548, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[549, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[550, "polars.Expr.var"]], "where() (polars.expr method)": [[551, "polars.Expr.where"]], "xor() (polars.expr method)": [[552, "polars.Expr.xor"]], "all() (in module polars)": [[553, "polars.all"]], "any() (in module polars)": [[554, "polars.any"]], "apply() (in module polars)": [[555, "polars.apply"]], "approx_unique() (in module polars)": [[556, "polars.approx_unique"]], "arange() (in module polars)": [[557, "polars.arange"]], "arg_sort_by() (in module polars)": [[558, "polars.arg_sort_by"]], "avg() (in module polars)": [[559, "polars.avg"]], "coalesce() (in module polars)": [[560, "polars.coalesce"]], "col() (in module polars)": [[561, "polars.col"]], "concat_list() (in module polars)": [[562, "polars.concat_list"]], "concat_str() (in module polars)": [[563, "polars.concat_str"]], "corr() (in module polars)": [[564, "polars.corr"]], "count() (in module polars)": [[565, "polars.count"]], "cov() (in module polars)": [[566, "polars.cov"]], "cumfold() (in module polars)": [[567, "polars.cumfold"]], "cumreduce() (in module polars)": [[568, "polars.cumreduce"]], "cumsum() (in module polars)": [[569, "polars.cumsum"]], "date() (in module polars)": [[570, "polars.date"]], "datetime() (in module polars)": [[571, "polars.datetime"]], "duration() (in module polars)": [[572, "polars.duration"]], "element() (in module polars)": [[573, "polars.element"]], "exclude() (in module polars)": [[574, "polars.exclude"]], "first() (in module polars)": [[575, "polars.first"]], "fold() (in module polars)": [[576, "polars.fold"]], "format() (in module polars)": [[577, "polars.format"]], "from_epoch() (in module polars)": [[578, "polars.from_epoch"]], "groups() (in module polars)": [[579, "polars.groups"]], "head() (in module polars)": [[580, "polars.head"]], "implode() (in module polars)": [[581, "polars.implode"]], "lit() (in module polars)": [[582, "polars.lit"]], "map() (in module polars)": [[583, "polars.map"]], "max() (in module polars)": [[584, "polars.max"]], "mean() (in module polars)": [[585, "polars.mean"]], "median() (in module polars)": [[586, "polars.median"]], "min() (in module polars)": [[587, "polars.min"]], "n_unique() (in module polars)": [[588, "polars.n_unique"]], "quantile() (in module polars)": [[589, "polars.quantile"]], "reduce() (in module polars)": [[590, "polars.reduce"]], "repeat() (in module polars)": [[591, "polars.repeat"]], "rolling_corr() (in module polars)": [[592, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[593, "polars.rolling_cov"]], "select() (in module polars)": [[594, "polars.select"]], "sql_expr() (in module polars)": [[595, "polars.sql_expr"]], "std() (in module polars)": [[596, "polars.std"]], "struct() (in module polars)": [[597, "polars.struct"]], "sum() (in module polars)": [[598, "polars.sum"]], "tail() (in module polars)": [[599, "polars.tail"]], "time() (in module polars)": [[600, "polars.time"]], "var() (in module polars)": [[601, "polars.var"]], "when() (in module polars)": [[602, "polars.when"]], "bottom_k() (polars.lazyframe method)": [[624, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[625, "polars.LazyFrame.cache"]], "clear() (polars.lazyframe method)": [[626, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[627, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[628, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[629, "polars.LazyFrame.columns"]], "drop() (polars.lazyframe method)": [[630, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[631, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[632, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[633, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[634, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[635, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[636, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[637, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[638, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[639, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[640, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[641, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[642, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[643, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[644, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[645, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[646, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[647, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[648, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[649, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[650, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[651, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[652, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[653, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[654, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[655, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[656, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[657, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[658, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[659, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[660, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[661, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[662, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[663, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[664, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[665, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[666, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[667, "polars.LazyFrame.select"]], "set_sorted() (polars.lazyframe method)": [[668, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[669, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[670, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[671, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[672, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[673, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[674, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[675, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[676, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[677, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[678, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[679, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[680, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[681, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[682, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[683, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[684, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[685, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[686, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[687, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[688, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[689, "polars.LazyFrame.write_json"]], "agg() (polars.lazyframe.groupby.lazygroupby method)": [[690, "polars.lazyframe.groupby.LazyGroupBy.agg"]], "all() (polars.lazyframe.groupby.lazygroupby method)": [[691, "polars.lazyframe.groupby.LazyGroupBy.all"]], "apply() (polars.lazyframe.groupby.lazygroupby method)": [[692, "polars.lazyframe.groupby.LazyGroupBy.apply"]], "count() (polars.lazyframe.groupby.lazygroupby method)": [[693, "polars.lazyframe.groupby.LazyGroupBy.count"]], "first() (polars.lazyframe.groupby.lazygroupby method)": [[694, "polars.lazyframe.groupby.LazyGroupBy.first"]], "head() (polars.lazyframe.groupby.lazygroupby method)": [[695, "polars.lazyframe.groupby.LazyGroupBy.head"]], "last() (polars.lazyframe.groupby.lazygroupby method)": [[696, "polars.lazyframe.groupby.LazyGroupBy.last"]], "max() (polars.lazyframe.groupby.lazygroupby method)": [[697, "polars.lazyframe.groupby.LazyGroupBy.max"]], "mean() (polars.lazyframe.groupby.lazygroupby method)": [[698, "polars.lazyframe.groupby.LazyGroupBy.mean"]], "median() (polars.lazyframe.groupby.lazygroupby method)": [[699, "polars.lazyframe.groupby.LazyGroupBy.median"]], "min() (polars.lazyframe.groupby.lazygroupby method)": [[700, "polars.lazyframe.groupby.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.groupby.lazygroupby method)": [[701, "polars.lazyframe.groupby.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.groupby.lazygroupby method)": [[702, "polars.lazyframe.groupby.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.groupby.lazygroupby method)": [[703, "polars.lazyframe.groupby.LazyGroupBy.sum"]], "tail() (polars.lazyframe.groupby.lazygroupby method)": [[704, "polars.lazyframe.groupby.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[711, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[711, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[711, "polars.selectors.by_name"]], "contains() (in module polars.selectors)": [[711, "polars.selectors.contains"]], "datetime() (in module polars.selectors)": [[711, "polars.selectors.datetime"]], "ends_with() (in module polars.selectors)": [[711, "polars.selectors.ends_with"]], "first() (in module polars.selectors)": [[711, "polars.selectors.first"]], "float() (in module polars.selectors)": [[711, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[711, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[711, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[711, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[711, "polars.selectors.matches"]], "module": [[711, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[711, "polars.selectors.numeric"]], "polars.selectors": [[711, "module-polars.selectors"]], "selector_column_names() (in module polars.selectors)": [[711, "polars.selectors.selector_column_names"]], "starts_with() (in module polars.selectors)": [[711, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[711, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[711, "polars.selectors.temporal"]], "abs() (polars.series method)": [[713, "polars.Series.abs"]], "alias() (polars.series method)": [[714, "polars.Series.alias"]], "all() (polars.series method)": [[715, "polars.Series.all"]], "any() (polars.series method)": [[716, "polars.Series.any"]], "append() (polars.series method)": [[717, "polars.Series.append"]], "apply() (polars.series method)": [[718, "polars.Series.apply"]], "arccos() (polars.series method)": [[719, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[720, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[721, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[722, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[723, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[724, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[725, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[726, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[727, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[728, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[729, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[730, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[731, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[732, "polars.Series.arr.sum"]], "unique() (polars.series.arr method)": [[733, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[734, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[735, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[736, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[737, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[738, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[739, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[740, "polars.Series.cast"]], "cat (polars.series attribute)": [[741, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[742, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[743, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[744, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[745, "polars.Series.clear"]], "clip() (polars.series method)": [[746, "polars.Series.clip"]], "clip_max() (polars.series method)": [[747, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[748, "polars.Series.clip_min"]], "clone() (polars.series method)": [[749, "polars.Series.clone"]], "cos() (polars.series method)": [[750, "polars.Series.cos"]], "cosh() (polars.series method)": [[751, "polars.Series.cosh"]], "cummax() (polars.series method)": [[752, "polars.Series.cummax"]], "cummin() (polars.series method)": [[753, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[754, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[755, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[756, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[757, "polars.Series.cut"]], "describe() (polars.series method)": [[758, "polars.Series.describe"]], "diff() (polars.series method)": [[759, "polars.Series.diff"]], "dot() (polars.series method)": [[760, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[761, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[762, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[763, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[764, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[765, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[766, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[767, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[768, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[769, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[770, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[771, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[772, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[773, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[774, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[775, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[776, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[777, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[778, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[779, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[780, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[781, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[782, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[783, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[784, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[785, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[786, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[787, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[788, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[789, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[790, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[791, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[792, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[793, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[794, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[795, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[796, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[797, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[798, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[799, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[800, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[801, "polars.Series.dt.to_string"]], "truncate() (polars.series.dt method)": [[802, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[803, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[804, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[805, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[806, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[807, "polars.Series.dtype"]], "entropy() (polars.series method)": [[808, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[809, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[810, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[811, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[812, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[813, "polars.Series.exp"]], "explode() (polars.series method)": [[814, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[815, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[816, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[817, "polars.Series.fill_null"]], "filter() (polars.series method)": [[818, "polars.Series.filter"]], "flags (polars.series attribute)": [[819, "polars.Series.flags"]], "floor() (polars.series method)": [[820, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[821, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[822, "polars.Series.has_validity"]], "hash() (polars.series method)": [[823, "polars.Series.hash"]], "head() (polars.series method)": [[824, "polars.Series.head"]], "hist() (polars.series method)": [[825, "polars.Series.hist"]], "implode() (polars.series method)": [[826, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[827, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[828, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[829, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[830, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[831, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[832, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[833, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[834, "polars.Series.is_first"]], "is_float() (polars.series method)": [[835, "polars.Series.is_float"]], "is_in() (polars.series method)": [[836, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[837, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[838, "polars.Series.is_integer"]], "is_nan() (polars.series method)": [[839, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[840, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[841, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[842, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[843, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[844, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[845, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[846, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[847, "polars.Series.is_utf8"]], "item() (polars.series method)": [[848, "polars.Series.item"]], "kurtosis() (polars.series method)": [[849, "polars.Series.kurtosis"]], "len() (polars.series method)": [[850, "polars.Series.len"]], "limit() (polars.series method)": [[851, "polars.Series.limit"]], "list (polars.series attribute)": [[852, "polars.Series.list"]], "arg_max() (polars.series.list method)": [[853, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[854, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[855, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[856, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[857, "polars.Series.list.count_match"]], "diff() (polars.series.list method)": [[858, "polars.Series.list.diff"]], "difference() (polars.series.list method)": [[859, "polars.Series.list.difference"]], "eval() (polars.series.list method)": [[860, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[861, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[862, "polars.Series.list.first"]], "get() (polars.series.list method)": [[863, "polars.Series.list.get"]], "head() (polars.series.list method)": [[864, "polars.Series.list.head"]], "intersection() (polars.series.list method)": [[865, "polars.Series.list.intersection"]], "join() (polars.series.list method)": [[866, "polars.Series.list.join"]], "last() (polars.series.list method)": [[867, "polars.Series.list.last"]], "lengths() (polars.series.list method)": [[868, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[869, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[870, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[871, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[872, "polars.Series.list.reverse"]], "shift() (polars.series.list method)": [[873, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[874, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[875, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[876, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[877, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[878, "polars.Series.list.take"]], "to_struct() (polars.series.list method)": [[879, "polars.Series.list.to_struct"]], "union() (polars.series.list method)": [[880, "polars.Series.list.union"]], "unique() (polars.series.list method)": [[881, "polars.Series.list.unique"]], "log() (polars.series method)": [[882, "polars.Series.log"]], "log10() (polars.series method)": [[883, "polars.Series.log10"]], "log1p() (polars.series method)": [[884, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[885, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[886, "polars.Series.map_dict"]], "max() (polars.series method)": [[887, "polars.Series.max"]], "mean() (polars.series method)": [[888, "polars.Series.mean"]], "median() (polars.series method)": [[889, "polars.Series.median"]], "min() (polars.series method)": [[890, "polars.Series.min"]], "mode() (polars.series method)": [[891, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[892, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[893, "polars.Series.n_unique"]], "name (polars.series attribute)": [[894, "polars.Series.name"]], "nan_max() (polars.series method)": [[895, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[896, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[897, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[898, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[899, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[900, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[901, "polars.Series.peak_min"]], "product() (polars.series method)": [[902, "polars.Series.product"]], "qcut() (polars.series method)": [[903, "polars.Series.qcut"]], "quantile() (polars.series method)": [[904, "polars.Series.quantile"]], "rank() (polars.series method)": [[905, "polars.Series.rank"]], "rechunk() (polars.series method)": [[906, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[907, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[908, "polars.Series.rename"]], "reshape() (polars.series method)": [[909, "polars.Series.reshape"]], "reverse() (polars.series method)": [[910, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[911, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[912, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[913, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[914, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[915, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[916, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[917, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[918, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[919, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[920, "polars.Series.rolling_var"]], "round() (polars.series method)": [[921, "polars.Series.round"]], "sample() (polars.series method)": [[922, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[923, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[924, "polars.Series.series_equal"]], "set() (polars.series method)": [[925, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[926, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[927, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[928, "polars.Series.shape"]], "shift() (polars.series method)": [[929, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[930, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[931, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[932, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[933, "polars.Series.shuffle"]], "sign() (polars.series method)": [[934, "polars.Series.sign"]], "sin() (polars.series method)": [[935, "polars.Series.sin"]], "sinh() (polars.series method)": [[936, "polars.Series.sinh"]], "skew() (polars.series method)": [[937, "polars.Series.skew"]], "slice() (polars.series method)": [[938, "polars.Series.slice"]], "sort() (polars.series method)": [[939, "polars.Series.sort"]], "sqrt() (polars.series method)": [[940, "polars.Series.sqrt"]], "std() (polars.series method)": [[941, "polars.Series.std"]], "str (polars.series attribute)": [[942, "polars.Series.str"]], "concat() (polars.series.str method)": [[943, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[944, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[945, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[946, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[947, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[948, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[949, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[950, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[951, "polars.Series.str.extract_all"]], "json_extract() (polars.series.str method)": [[952, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[953, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[954, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[955, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[956, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[957, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[958, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[959, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[960, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[961, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[962, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[963, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[964, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[965, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[966, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[967, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[968, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[969, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[970, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[971, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[972, "polars.Series.str.to_decimal"]], "to_lowercase() (polars.series.str method)": [[973, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[974, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[975, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[976, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[977, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[978, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[979, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[980, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[981, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[982, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[983, "polars.Series.sum"]], "tail() (polars.series method)": [[984, "polars.Series.tail"]], "take() (polars.series method)": [[985, "polars.Series.take"]], "take_every() (polars.series method)": [[986, "polars.Series.take_every"]], "tan() (polars.series method)": [[987, "polars.Series.tan"]], "tanh() (polars.series method)": [[988, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[989, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[990, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[991, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[992, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[993, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[994, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[995, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[996, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[997, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[998, "polars.Series.top_k"]], "unique() (polars.series method)": [[999, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1000, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1001, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1002, "polars.Series.value_counts"]], "var() (polars.series method)": [[1003, "polars.Series.var"]], "view() (polars.series method)": [[1004, "polars.Series.view"]], "zip_with() (polars.series method)": [[1005, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1021, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1021, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1021, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1021, "polars.SQLContext.__init__"]]}})